
20-sim_test.elf:     file format elf32-littlenios2
20-sim_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00005194 memsz 0x00005194 flags r-x
    LOAD off    0x000061b4 vaddr 0x0000d1b4 paddr 0x0000d4e0 align 2**12
         filesz 0x0000032c memsz 0x0000032c flags rw-
    LOAD off    0x0000680c vaddr 0x0000d80c paddr 0x0000d80c align 2**12
         filesz 0x00000000 memsz 0x00000a1c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004dd8  000081bc  000081bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000220  0000cf94  0000cf94  00005f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000032c  0000d1b4  0000d4e0  000061b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a1c  0000d80c  0000d80c  0000680c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008c0  00000000  00000000  00006508  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c306  00000000  00000000  00006dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004918  00000000  00000000  000130ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000445d  00000000  00000000  000179e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000f50  00000000  00000000  0001be44  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001fe3  00000000  00000000  0001cd94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003e6b  00000000  00000000  0001ed77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  00022be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000480  00000000  00000000  00022c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000255ca  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000255cd  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000255d0  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000255d1  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000255d2  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000255d6  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000255da  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000255de  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000255e7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000255f0  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  000255f9  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  0002560b  2**0
                  CONTENTS, READONLY
 28 .jdi          00005585  00000000  00000000  0002565c  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003c04b  00000000  00000000  0002abe1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081bc l    d  .text	00000000 .text
0000cf94 l    d  .rodata	00000000 .rodata
0000d1b4 l    d  .rwdata	00000000 .rwdata
0000d80c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../20-sim_test_bsp//obj/HAL/src/crt0.o
000081f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 EulerAngles.c
00000000 l    df *ABS*	00000000 InterruptHandlerForUart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 motionprofiles.c
00000000 l    df *ABS*	00000000 xxfuncs.c
00000000 l    df *ABS*	00000000 xxinteg.c
00000000 l    df *ABS*	00000000 xxinverse.c
00000000 l    df *ABS*	00000000 xxmatrix.c
00000000 l    df *ABS*	00000000 xxmodel.c
00000000 l    df *ABS*	00000000 xxsubmod.c
00000000 l    df *ABS*	00000000 fp-bit.c
00009914 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a480 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000d1b4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000b7cc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b920 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ba60 l     F .text	00000038 alt_dev_reg
0000d294 l     O .rwdata	0000002c jtag_uart
0000d2c0 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000bd70 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000bf28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000c038 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
0000c164 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000c29c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c2c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c3e8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000c540 l     F .text	00000050 alt_get_errno
0000c590 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000b8b8 g     F .text	00000068 alt_main
0000abd0 g     F .text	00000044 __ashldi3
0000acbc g     F .text	00000080 _puts_r
0000e128 g     O .bss	00000100 alt_irq
0000d810 g     O .bss	00000002 RxHead_0
0000d4e0 g       *ABS*	00000000 __flash_rwdata_start
0000ac70 g     F .text	0000004c printf
00008c54 g     F .text	00000038 XXDouble2String
0000d812 g     O .bss	00000002 RxTail_0
0000e048 g     O .bss	00000018 xx_R
0000d814 g     O .bss	00000008 xx_start_time
0000a1b4 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000d82c g     O .bss	00000004 errno
000081f8 g     F .text	00000060 InitUart0
0000d838 g     O .bss	00000004 alt_argv
00015494 g       *ABS*	00000000 _gp
0000d314 g     O .rwdata	00000180 alt_fd_list
00008c14 g     F .text	00000040 XXString2Double
0000ca14 g     F .text	00000090 alt_find_dev
0000d80e g     O .bss	00000002 TxTail_0
0000a2d8 g     F .text	000000d4 __floatsidf
0000c4c8 g     F .text	00000078 alt_io_redirect
0000a27c g     F .text	0000005c __ltdf2
0000ad3c g     F .text	00000014 puts
00009004 g     F .text	0000001c XXCalculateInput
000097a4 g     F .text	000000a0 XXInitializeSubmodel
0000bbe4 g     F .text	000000f4 altera_avalon_jtag_uart_read
0000ac34 g     F .text	0000003c _printf_r
0000a5a0 g     F .text	00000008 __udivsi3
0000cc8c g     F .text	0000008c alt_icache_flush
00008f98 g     F .text	00000034 XXModelInitialize
0000d4d0 g     O .rwdata	00000004 alt_max_fd
0000a9b8 g     F .text	00000104 __unpack_d
0000837c g     F .text	0000003c EmptyUart0
0000b61c g     F .text	000001b0 alt_irq_register
00009c68 g     F .text	00000054 __adddf3
0000d4b4 g     O .rwdata	00000004 _global_impure_ptr
0000e228 g       *ABS*	00000000 __bss_end
00009844 g     F .text	00000068 XXCalculateSubmodel
0000c8f0 g     F .text	00000104 alt_tick
0000d81c g     O .bss	00000008 xx_time
0000c858 g     F .text	00000098 alt_alarm_stop
000096bc g     F .text	0000001c XXCalculateFinal
0000d830 g     O .bss	00000004 alt_irq_active
0000e060 g     O .bss	00000018 xx_I
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000d0 alt_irq_handler
0000d2ec g     O .rwdata	00000028 alt_dev_null
0000e078 g     O .bss	00000038 xx_P
00008fe8 g     F .text	0000001c XXCalculateStatic
00009680 g     F .text	0000003c XXCalculateOutput
00008258 g     F .text	00000124 IsrUart0
0000c280 g     F .text	0000001c alt_dcache_flush_all
0000a3ac g     F .text	000000d4 __fixdfsi
00008ee4 g     F .text	0000007c XXModelInitialize_states
0000d4e0 g       *ABS*	00000000 __ram_rwdata_end
0000d4c8 g     O .rwdata	00000008 alt_dev_list
0000b970 g     F .text	000000f0 write
0000d1b4 g       *ABS*	00000000 __ram_rodata_end
0000ab8c g     F .text	00000044 __lshrdi3
0000a5a8 g     F .text	00000008 __umodsi3
00008f60 g     F .text	00000038 XXModelInitialize_variables
0000d4a9 g     O .rwdata	00000001 xx_major
0000e228 g       *ABS*	00000000 end
0000c088 g     F .text	000000dc altera_avalon_uart_write
00008cb8 g     F .text	0000001c XXDiscreteTerminate
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000bde8 g     F .text	00000080 alt_avalon_timer_sc_init
0000bec8 g     F .text	00000060 altera_avalon_uart_write_fd
0000a6e8 g     F .text	000000ac __clzsi2
0000bcd8 g     F .text	00000098 altera_avalon_jtag_uart_write
0000ad78 g     F .text	00000734 ___vfprintf_internal_r
00008e98 g     F .text	0000004c XXModelInitialize_initialvalues
0000cd80 g     F .text	000001d8 __call_exitprocs
000081bc g     F .text	0000003c _start
0000d840 g     O .bss	00000004 _alt_tick_rate
00009768 g     F .text	0000003c XXCopyVariablesToOutputs
0000d4ac g     O .rwdata	00000004 xx_number_of_inputs
0000d844 g     O .bss	00000004 _alt_nticks
0000bacc g     F .text	00000058 alt_sys_init
000083b8 g     F .text	0000005c GetUart0
0000d494 g     O .rwdata	00000002 maxStepCount0
0000a5b0 g     F .text	00000028 __mulsi3
0000d1b4 g       *ABS*	00000000 __ram_rwdata_start
0000cf94 g       *ABS*	00000000 __ram_rodata_start
0000bb24 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000cbb8 g     F .text	000000d4 alt_get_fd
00008414 g     F .text	0000011c PutUart0
0000aabc g     F .text	000000d0 __fpcmp_parts_d
0000cd38 g     F .text	00000048 memcmp
0000e228 g       *ABS*	00000000 __alt_stack_base
0000a000 g     F .text	000001b4 __divdf3
0000d828 g     O .bss	00000001 xx_stop_simulation
000096d8 g     F .text	0000001c XXModelTerminate
00009d1c g     F .text	000002e4 __muldf3
00008fcc g     F .text	0000001c XXCalculateInitial
0000caa4 g     F .text	00000114 alt_find_file
0000c318 g     F .text	000000a0 alt_dev_llist_insert
0000b4d0 g     F .text	000000e0 __sfvwrite_small_dev
0000d80c g       *ABS*	00000000 __bss_start
0000ac14 g     F .text	00000020 memset
000087e8 g     F .text	0000042c main
0000d83c g     O .bss	00000004 alt_envp
0000bb84 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d496 g     O .rwdata	00000002 maxStepCount1
0000e0b0 g     O .bss	00000060 xx_V
0000d4d4 g     O .rwdata	00000004 alt_errno
0000a4f4 g     F .text	00000050 __divsi3
0000d064 g     O .rodata	00000014 __thenan_df
0000d4a0 g     O .rwdata	00000008 xx_step_size
0000d80c g     O .bss	00000002 TxHead_0
0000cf94 g       *ABS*	00000000 __flash_rodata_start
00008db8 g     F .text	000000e0 XXModelInitialize_parameters
0000ba98 g     F .text	00000034 alt_irq_init
0000c7d8 g     F .text	00000080 alt_release_fd
0000d078 g     O .rodata	00000100 __clz_tab
0000b5b0 g     F .text	0000006c _write_r
0000d848 g     O .bss	00000400 rx_buffer_0
0000d4b8 g     O .rwdata	00000004 _impure_ptr
0000d834 g     O .bss	00000004 alt_argc
00008530 g     F .text	000000b8 InitUart
00008020 g       .exceptions	00000000 alt_irq_entry
0000d824 g     O .bss	00000004 xx_steps
0000d4c0 g     O .rwdata	00000008 alt_fs_list
0000d498 g     O .rwdata	00000008 xx_finish_time
00008020 g       *ABS*	00000000 __ram_exceptions_start
000086e8 g     F .text	00000100 Stepcount0ToSI
00008cd4 g     F .text	000000e4 XXDiscreteStep
0000d4e0 g       *ABS*	00000000 _edata
0000be68 g     F .text	00000060 altera_avalon_uart_read_fd
0000e228 g       *ABS*	00000000 _end
000081bc g       *ABS*	00000000 __ram_exceptions_end
000098ac g     F .text	00000068 XXTerminateSubmodel
0000c9f4 g     F .text	00000020 altera_nios2_qsys_irq_init
0000cd18 g     F .text	00000020 exit
0000a544 g     F .text	0000005c __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000d4a8 g     O .rwdata	00000001 xx_initialize
0000cf58 g     F .text	0000003c _exit
0000a5d8 g     F .text	00000110 __muldi3
0000ad50 g     F .text	00000028 strlen
0000c680 g     F .text	00000158 open
0000a218 g     F .text	00000064 __gedf2
0000d4b0 g     O .rwdata	00000004 xx_number_of_outputs
0000c3b8 g     F .text	00000030 alt_icache_flush_all
0000d4bc g     O .rwdata	00000004 alt_priority_mask
000096f4 g     F .text	00000074 XXCopyInputsToVariables
0000b4ac g     F .text	00000024 __vfprintf_internal
0000bf78 g     F .text	000000c0 altera_avalon_uart_read
00009cbc g     F .text	00000060 __subdf3
000085e8 g     F .text	00000100 Stepcount1ToSI
0000d4d8 g     O .rwdata	00000008 alt_alarm_list
0000dc48 g     O .bss	00000400 tx_buffer_0
0000c1b4 g     F .text	000000cc close
0000b838 g     F .text	00000080 alt_load
0000a794 g     F .text	00000224 __pack_d
00008c8c g     F .text	0000002c XXDiscreteInitialize
00000000  w      *UND*	00000000 free
0000e110 g     O .bss	00000018 xx_s
00009020 g     F .text	00000660 XXCalculateDynamic



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606f14 	ori	at,at,33212
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001826 	beq	r2,zero,818c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
    812c:	00c00074 	movhi	r3,1
    8130:	18f84a04 	addi	r3,r3,-7896
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	21384a04 	addi	r4,r4,-7896
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	e17ffd17 	ldw	r5,-12(fp)
    8168:	183ee83a 	callr	r3
#endif
        break;
    816c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8178:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    817c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    8180:	e0bffb17 	ldw	r2,-20(fp)
    8184:	103fe21e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8188:	00000706 	br	81a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fdd06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a8:	e037883a 	mov	sp,fp
    81ac:	dfc00117 	ldw	ra,4(sp)
    81b0:	df000017 	ldw	fp,0(sp)
    81b4:	dec00204 	addi	sp,sp,8
    81b8:	f800283a 	ret

Disassembly of section .text:

000081bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81bc:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c8:	d6952514 	ori	gp,gp,21652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81cc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81d0:	10b60314 	ori	r2,r2,55308

    movhi r3, %hi(__bss_end)
    81d4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d8:	18f88a14 	ori	r3,r3,57896

    beq r2, r3, 1f
    81dc:	10c00326 	beq	r2,r3,81ec <_start+0x30>

0:
    stw zero, (r2)
    81e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e8:	10fffd36 	bltu	r2,r3,81e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81ec:	000b8380 	call	b838 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81f0:	000b8b80 	call	b8b8 <alt_main>

000081f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f4:	003fff06 	br	81f4 <alt_after_alt_main>

000081f8 <InitUart0>:
unsigned short RxHead_0=0;
unsigned short RxTail_0=0;
unsigned char rx_buffer_0[RX_BUFFER_SIZE_0];
 
void InitUart0(unsigned int BaudRate)
{
    81f8:	defffc04 	addi	sp,sp,-16
    81fc:	dfc00315 	stw	ra,12(sp)
    8200:	df000215 	stw	fp,8(sp)
    8204:	df000204 	addi	fp,sp,8
    8208:	e13fff15 	stw	r4,-4(fp)
    unsigned int divisor;
    
    divisor = (ALT_CPU_FREQ/BaudRate) + 1;
    820c:	0100bef4 	movhi	r4,763
    8210:	213c2004 	addi	r4,r4,-3968
    8214:	e17fff17 	ldw	r5,-4(fp)
    8218:	000a5a00 	call	a5a0 <__udivsi3>
    821c:	10800044 	addi	r2,r2,1
    8220:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
    8224:	e0fffe17 	ldw	r3,-8(fp)
    8228:	00800074 	movhi	r2,1
    822c:	10850404 	addi	r2,r2,5136
    8230:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    8234:	00c02004 	movi	r3,128
    8238:	00800074 	movhi	r2,1
    823c:	10850304 	addi	r2,r2,5132
    8240:	10c00035 	stwio	r3,0(r2)
}
    8244:	e037883a 	mov	sp,fp
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	df000017 	ldw	fp,0(sp)
    8250:	dec00204 	addi	sp,sp,8
    8254:	f800283a 	ret

00008258 <IsrUart0>:
 
void IsrUart0(void* context, unsigned int id)
{
    8258:	defffc04 	addi	sp,sp,-16
    825c:	df000315 	stw	fp,12(sp)
    8260:	df000304 	addi	fp,sp,12
    8264:	e13ffe15 	stw	r4,-8(fp)
    8268:	e17fff15 	stw	r5,-4(fp)
    int sr;
    
    sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    826c:	00800074 	movhi	r2,1
    8270:	10850204 	addi	r2,r2,5128
    8274:	10800037 	ldwio	r2,0(r2)
    8278:	e0bffd15 	stw	r2,-12(fp)

    if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
    827c:	e0bffd17 	ldw	r2,-12(fp)
    8280:	1080200c 	andi	r2,r2,128
    8284:	10001526 	beq	r2,zero,82dc <IsrUart0+0x84>
        rx_buffer_0[RxHead_0] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8288:	d0a0df0b 	ldhu	r2,-31876(gp)
    828c:	10bfffcc 	andi	r2,r2,65535
    8290:	00c00074 	movhi	r3,1
    8294:	18c50004 	addi	r3,r3,5120
    8298:	18c00037 	ldwio	r3,0(r3)
    829c:	01000074 	movhi	r4,1
    82a0:	21361204 	addi	r4,r4,-10168
    82a4:	2085883a 	add	r2,r4,r2
    82a8:	10c00005 	stb	r3,0(r2)
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
    82ac:	0007883a 	mov	r3,zero
    82b0:	00800074 	movhi	r2,1
    82b4:	10850204 	addi	r2,r2,5128
    82b8:	10c00035 	stwio	r3,0(r2)
        if (++RxHead_0 > (RX_BUFFER_SIZE_0 - 1)) {
    82bc:	d0a0df0b 	ldhu	r2,-31876(gp)
    82c0:	10800044 	addi	r2,r2,1
    82c4:	d0a0df0d 	sth	r2,-31876(gp)
    82c8:	d0a0df0b 	ldhu	r2,-31876(gp)
    82cc:	10bfffcc 	andi	r2,r2,65535
    82d0:	10810030 	cmpltui	r2,r2,1024
    82d4:	1000011e 	bne	r2,zero,82dc <IsrUart0+0x84>
            RxHead_0 = 0;
    82d8:	d020df0d 	sth	zero,-31876(gp)
        }
    }

    if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
    82dc:	e0bffd17 	ldw	r2,-12(fp)
    82e0:	1080100c 	andi	r2,r2,64
    82e4:	10002126 	beq	r2,zero,836c <IsrUart0+0x114>
        if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK) {
    82e8:	00800074 	movhi	r2,1
    82ec:	10850304 	addi	r2,r2,5132
    82f0:	10800037 	ldwio	r2,0(r2)
    82f4:	1080100c 	andi	r2,r2,64
    82f8:	10001c26 	beq	r2,zero,836c <IsrUart0+0x114>
            if (TxTail_0 != TxHead_0) {
    82fc:	d0e0de8b 	ldhu	r3,-31878(gp)
    8300:	d0a0de0b 	ldhu	r2,-31880(gp)
    8304:	18ffffcc 	andi	r3,r3,65535
    8308:	10bfffcc 	andi	r2,r2,65535
    830c:	18801326 	beq	r3,r2,835c <IsrUart0+0x104>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_0[TxTail_0]);
    8310:	d0a0de8b 	ldhu	r2,-31878(gp)
    8314:	10bfffcc 	andi	r2,r2,65535
    8318:	00c00074 	movhi	r3,1
    831c:	18f71204 	addi	r3,r3,-9144
    8320:	1885883a 	add	r2,r3,r2
    8324:	10800003 	ldbu	r2,0(r2)
    8328:	10c03fcc 	andi	r3,r2,255
    832c:	00800074 	movhi	r2,1
    8330:	10850104 	addi	r2,r2,5124
    8334:	10c00035 	stwio	r3,0(r2)
                if (++TxTail_0 > (TX_BUFFER_SIZE_0 - 1)) {
    8338:	d0a0de8b 	ldhu	r2,-31878(gp)
    833c:	10800044 	addi	r2,r2,1
    8340:	d0a0de8d 	sth	r2,-31878(gp)
    8344:	d0a0de8b 	ldhu	r2,-31878(gp)
    8348:	10bfffcc 	andi	r2,r2,65535
    834c:	10810030 	cmpltui	r2,r2,1024
    8350:	1000061e 	bne	r2,zero,836c <IsrUart0+0x114>
                    TxTail_0 = 0;
    8354:	d020de8d 	sth	zero,-31878(gp)
    8358:	00000406 	br	836c <IsrUart0+0x114>
                }
            }
            else {
                IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    835c:	00c02004 	movi	r3,128
    8360:	00800074 	movhi	r2,1
    8364:	10850304 	addi	r2,r2,5132
    8368:	10c00035 	stwio	r3,0(r2)
            }
        }
    }
}
    836c:	e037883a 	mov	sp,fp
    8370:	df000017 	ldw	fp,0(sp)
    8374:	dec00104 	addi	sp,sp,4
    8378:	f800283a 	ret

0000837c <EmptyUart0>:
 
unsigned char EmptyUart0()
{
    837c:	deffff04 	addi	sp,sp,-4
    8380:	df000015 	stw	fp,0(sp)
    8384:	d839883a 	mov	fp,sp
    if(RxHead_0 == RxTail_0) {
    8388:	d0e0df0b 	ldhu	r3,-31876(gp)
    838c:	d0a0df8b 	ldhu	r2,-31874(gp)
    8390:	18ffffcc 	andi	r3,r3,65535
    8394:	10bfffcc 	andi	r2,r2,65535
    8398:	1880021e 	bne	r3,r2,83a4 <EmptyUart0+0x28>
        return 1;
    839c:	00800044 	movi	r2,1
    83a0:	00000106 	br	83a8 <EmptyUart0+0x2c>
    }
    
    return 0;
    83a4:	0005883a 	mov	r2,zero
} 
    83a8:	e037883a 	mov	sp,fp
    83ac:	df000017 	ldw	fp,0(sp)
    83b0:	dec00104 	addi	sp,sp,4
    83b4:	f800283a 	ret

000083b8 <GetUart0>:
    
unsigned char GetUart0(void)
{
    83b8:	defffe04 	addi	sp,sp,-8
    83bc:	df000115 	stw	fp,4(sp)
    83c0:	df000104 	addi	fp,sp,4
    unsigned char rxChar; 
    
    /* buffer is empty */
    
    rxChar=rx_buffer_0[RxTail_0];
    83c4:	d0a0df8b 	ldhu	r2,-31874(gp)
    83c8:	10bfffcc 	andi	r2,r2,65535
    83cc:	00c00074 	movhi	r3,1
    83d0:	18f61204 	addi	r3,r3,-10168
    83d4:	1885883a 	add	r2,r3,r2
    83d8:	10800003 	ldbu	r2,0(r2)
    83dc:	e0bfff05 	stb	r2,-4(fp)
    if (++RxTail_0 > (RX_BUFFER_SIZE_0 - 1)) {
    83e0:	d0a0df8b 	ldhu	r2,-31874(gp)
    83e4:	10800044 	addi	r2,r2,1
    83e8:	d0a0df8d 	sth	r2,-31874(gp)
    83ec:	d0a0df8b 	ldhu	r2,-31874(gp)
    83f0:	10bfffcc 	andi	r2,r2,65535
    83f4:	10810030 	cmpltui	r2,r2,1024
    83f8:	1000011e 	bne	r2,zero,8400 <GetUart0+0x48>
        RxTail_0 = 0;
    83fc:	d020df8d 	sth	zero,-31874(gp)
    }
    
    return rxChar;
    8400:	e0bfff03 	ldbu	r2,-4(fp)
}
    8404:	e037883a 	mov	sp,fp
    8408:	df000017 	ldw	fp,0(sp)
    840c:	dec00104 	addi	sp,sp,4
    8410:	f800283a 	ret

00008414 <PutUart0>:
 
unsigned char PutUart0(unsigned char in_char)
{
    8414:	defffc04 	addi	sp,sp,-16
    8418:	df000315 	stw	fp,12(sp)
    841c:	df000304 	addi	fp,sp,12
    8420:	2005883a 	mov	r2,r4
    8424:	e0bfff05 	stb	r2,-4(fp)
    unsigned short size;
    unsigned int z;
    
    z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
    8428:	00800074 	movhi	r2,1
    842c:	10850204 	addi	r2,r2,5128
    8430:	10800037 	ldwio	r2,0(r2)
    8434:	1080100c 	andi	r2,r2,64
    8438:	e0bffe15 	stw	r2,-8(fp)
    
    if ((TxHead_0==TxTail_0) && z) {
    843c:	d0e0de0b 	ldhu	r3,-31880(gp)
    8440:	d0a0de8b 	ldhu	r2,-31878(gp)
    8444:	18ffffcc 	andi	r3,r3,65535
    8448:	10bfffcc 	andi	r2,r2,65535
    844c:	1880071e 	bne	r3,r2,846c <PutUart0+0x58>
    8450:	e0bffe17 	ldw	r2,-8(fp)
    8454:	10000526 	beq	r2,zero,846c <PutUart0+0x58>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
    8458:	e0ffff03 	ldbu	r3,-4(fp)
    845c:	00800074 	movhi	r2,1
    8460:	10850104 	addi	r2,r2,5124
    8464:	10c00035 	stwio	r3,0(r2)
    8468:	00002c06 	br	851c <PutUart0+0x108>
    } else {
        if (TxHead_0 >= TxTail_0) {
    846c:	d0e0de0b 	ldhu	r3,-31880(gp)
    8470:	d0a0de8b 	ldhu	r2,-31878(gp)
    8474:	18ffffcc 	andi	r3,r3,65535
    8478:	10bfffcc 	andi	r2,r2,65535
    847c:	18800536 	bltu	r3,r2,8494 <PutUart0+0x80>
            size = TxHead_0 - TxTail_0;
    8480:	d0e0de0b 	ldhu	r3,-31880(gp)
    8484:	d0a0de8b 	ldhu	r2,-31878(gp)
    8488:	1885c83a 	sub	r2,r3,r2
    848c:	e0bffd0d 	sth	r2,-12(fp)
    8490:	00000506 	br	84a8 <PutUart0+0x94>
        } else {
            size = ((TX_BUFFER_SIZE_0 - 1) - TxTail_0) + TxHead_0;
    8494:	d0e0de0b 	ldhu	r3,-31880(gp)
    8498:	d0a0de8b 	ldhu	r2,-31878(gp)
    849c:	1885c83a 	sub	r2,r3,r2
    84a0:	1080ffc4 	addi	r2,r2,1023
    84a4:	e0bffd0d 	sth	r2,-12(fp)
        }

        if (size > (TX_BUFFER_SIZE_0 - 3)) {
    84a8:	e0bffd0b 	ldhu	r2,-12(fp)
    84ac:	1080ffb0 	cmpltui	r2,r2,1022
    84b0:	1000021e 	bne	r2,zero,84bc <PutUart0+0xa8>
            return (-1);
    84b4:	00bfffc4 	movi	r2,-1
    84b8:	00001906 	br	8520 <PutUart0+0x10c>
        }
        
        tx_buffer_0[TxHead_0] = in_char;
    84bc:	d0a0de0b 	ldhu	r2,-31880(gp)
    84c0:	10bfffcc 	andi	r2,r2,65535
    84c4:	00c00074 	movhi	r3,1
    84c8:	18f71204 	addi	r3,r3,-9144
    84cc:	1885883a 	add	r2,r3,r2
    84d0:	e0ffff03 	ldbu	r3,-4(fp)
    84d4:	10c00005 	stb	r3,0(r2)

        if (++TxHead_0 > (TX_BUFFER_SIZE_0-1)) {
    84d8:	d0a0de0b 	ldhu	r2,-31880(gp)
    84dc:	10800044 	addi	r2,r2,1
    84e0:	d0a0de0d 	sth	r2,-31880(gp)
    84e4:	d0a0de0b 	ldhu	r2,-31880(gp)
    84e8:	10bfffcc 	andi	r2,r2,65535
    84ec:	10810030 	cmpltui	r2,r2,1024
    84f0:	1000011e 	bne	r2,zero,84f8 <PutUart0+0xe4>
            TxHead_0 = 0;
    84f4:	d020de0d 	sth	zero,-31880(gp)
        }

        z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    84f8:	00800074 	movhi	r2,1
    84fc:	10850304 	addi	r2,r2,5132
    8500:	10800037 	ldwio	r2,0(r2)
    8504:	10801014 	ori	r2,r2,64
    8508:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
    850c:	e0fffe17 	ldw	r3,-8(fp)
    8510:	00800074 	movhi	r2,1
    8514:	10850304 	addi	r2,r2,5132
    8518:	10c00035 	stwio	r3,0(r2)
    }

    return(1);
    851c:	00800044 	movi	r2,1
}
    8520:	e037883a 	mov	sp,fp
    8524:	df000017 	ldw	fp,0(sp)
    8528:	dec00104 	addi	sp,sp,4
    852c:	f800283a 	ret

00008530 <InitUart>:
#define pi 3.1415926538
uint16_t maxStepCount0 = 1115;
uint16_t maxStepCount1 = 221;

void InitUart()
{
    8530:	defff904 	addi	sp,sp,-28
    8534:	dfc00615 	stw	ra,24(sp)
    8538:	df000515 	stw	fp,20(sp)
    853c:	df000504 	addi	fp,sp,20
    int context_uart0;

    InitUart0(BAUD_RATE_0);
    8540:	010000b4 	movhi	r4,2
    8544:	21308004 	addi	r4,r4,-15872
    8548:	00081f80 	call	81f8 <InitUart0>

    //alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ,&context_uart1,IsrUart1,NULL); // install UART1 ISR
    alt_irq_register(UART_0_IRQ,&context_uart0,IsrUart0); // install UART0 ISR
    854c:	e0bfff04 	addi	r2,fp,-4
    8550:	0009883a 	mov	r4,zero
    8554:	100b883a 	mov	r5,r2
    8558:	01800074 	movhi	r6,1
    855c:	31a09604 	addi	r6,r6,-32168
    8560:	000b61c0 	call	b61c <alt_irq_register>
    8564:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8568:	0005303a 	rdctl	r2,status
    856c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8570:	e0fffc17 	ldw	r3,-16(fp)
    8574:	00bfff84 	movi	r2,-2
    8578:	1884703a 	and	r2,r3,r2
    857c:	1001703a 	wrctl	status,r2
  
  return context;
    8580:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8584:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8588:	e0bffb17 	ldw	r2,-20(fp)
    858c:	00c00044 	movi	r3,1
    8590:	1884983a 	sll	r2,r3,r2
    8594:	1007883a 	mov	r3,r2
    8598:	00800074 	movhi	r2,1
    859c:	10b60c04 	addi	r2,r2,-10192
    85a0:	10800017 	ldw	r2,0(r2)
    85a4:	1886b03a 	or	r3,r3,r2
    85a8:	00800074 	movhi	r2,1
    85ac:	10b60c04 	addi	r2,r2,-10192
    85b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    85b4:	00800074 	movhi	r2,1
    85b8:	10b60c04 	addi	r2,r2,-10192
    85bc:	10800017 	ldw	r2,0(r2)
    85c0:	100170fa 	wrctl	ienable,r2
    85c4:	e0bffd17 	ldw	r2,-12(fp)
    85c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    85cc:	e0bffe17 	ldw	r2,-8(fp)
    85d0:	1001703a 	wrctl	status,r2

    //alt_ic_irq_enable (UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ);
    alt_irq_enable (UART_0_IRQ);
}
    85d4:	e037883a 	mov	sp,fp
    85d8:	dfc00117 	ldw	ra,4(sp)
    85dc:	df000017 	ldw	fp,0(sp)
    85e0:	dec00204 	addi	sp,sp,8
    85e4:	f800283a 	ret

000085e8 <Stepcount1ToSI>:

double Stepcount1ToSI(int16_t steps)
{
    85e8:	defffb04 	addi	sp,sp,-20
    85ec:	dfc00415 	stw	ra,16(sp)
    85f0:	df000315 	stw	fp,12(sp)
    85f4:	df000304 	addi	fp,sp,12
    85f8:	2005883a 	mov	r2,r4
    85fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount1/170*360;
    8600:	d0a0008b 	ldhu	r2,-32766(gp)
    8604:	10bfffcc 	andi	r2,r2,65535
    8608:	1009883a 	mov	r4,r2
    860c:	01402a84 	movi	r5,170
    8610:	000a5a00 	call	a5a0 <__udivsi3>
    8614:	10bfffcc 	andi	r2,r2,65535
    8618:	1009883a 	mov	r4,r2
    861c:	01405a04 	movi	r5,360
    8620:	000a5b00 	call	a5b0 <__mulsi3>
    8624:	1009883a 	mov	r4,r2
    8628:	000a2d80 	call	a2d8 <__floatsidf>
    862c:	1009883a 	mov	r4,r2
    8630:	180b883a 	mov	r5,r3
    8634:	e13ffd15 	stw	r4,-12(fp)
    8638:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    863c:	e0bfff0f 	ldh	r2,-4(fp)
    8640:	1009883a 	mov	r4,r2
    8644:	000a2d80 	call	a2d8 <__floatsidf>
    8648:	100b883a 	mov	r5,r2
    864c:	180d883a 	mov	r6,r3
    8650:	2809883a 	mov	r4,r5
    8654:	300b883a 	mov	r5,r6
    8658:	e1bffd17 	ldw	r6,-12(fp)
    865c:	e1fffe17 	ldw	r7,-8(fp)
    8660:	000a0000 	call	a000 <__divdf3>
    8664:	1009883a 	mov	r4,r2
    8668:	180b883a 	mov	r5,r3
    866c:	2005883a 	mov	r2,r4
    8670:	2807883a 	mov	r3,r5
    8674:	1009883a 	mov	r4,r2
    8678:	180b883a 	mov	r5,r3
    867c:	100d883a 	mov	r6,r2
    8680:	180f883a 	mov	r7,r3
    8684:	0009c680 	call	9c68 <__adddf3>
    8688:	1009883a 	mov	r4,r2
    868c:	180b883a 	mov	r5,r3
    8690:	2005883a 	mov	r2,r4
    8694:	2807883a 	mov	r3,r5
    8698:	1009883a 	mov	r4,r2
    869c:	180b883a 	mov	r5,r3
    86a0:	019512f4 	movhi	r6,21579
    86a4:	31998604 	addi	r6,r6,26136
    86a8:	01d00274 	movhi	r7,16393
    86ac:	39c87ec4 	addi	r7,r7,8699
    86b0:	0009d1c0 	call	9d1c <__muldf3>
    86b4:	100f883a 	mov	r7,r2
    86b8:	1811883a 	mov	r8,r3
    86bc:	380b883a 	mov	r5,r7
    86c0:	400d883a 	mov	r6,r8
    86c4:	2807883a 	mov	r3,r5
    86c8:	3009883a 	mov	r4,r6

}
    86cc:	1805883a 	mov	r2,r3
    86d0:	2007883a 	mov	r3,r4
    86d4:	e037883a 	mov	sp,fp
    86d8:	dfc00117 	ldw	ra,4(sp)
    86dc:	df000017 	ldw	fp,0(sp)
    86e0:	dec00204 	addi	sp,sp,8
    86e4:	f800283a 	ret

000086e8 <Stepcount0ToSI>:

double Stepcount0ToSI(int16_t steps)
{
    86e8:	defffb04 	addi	sp,sp,-20
    86ec:	dfc00415 	stw	ra,16(sp)
    86f0:	df000315 	stw	fp,12(sp)
    86f4:	df000304 	addi	fp,sp,12
    86f8:	2005883a 	mov	r2,r4
    86fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount0/325*360;
    8700:	d0a0000b 	ldhu	r2,-32768(gp)
    8704:	10bfffcc 	andi	r2,r2,65535
    8708:	1009883a 	mov	r4,r2
    870c:	01405144 	movi	r5,325
    8710:	000a5a00 	call	a5a0 <__udivsi3>
    8714:	10bfffcc 	andi	r2,r2,65535
    8718:	1009883a 	mov	r4,r2
    871c:	01405a04 	movi	r5,360
    8720:	000a5b00 	call	a5b0 <__mulsi3>
    8724:	1009883a 	mov	r4,r2
    8728:	000a2d80 	call	a2d8 <__floatsidf>
    872c:	1009883a 	mov	r4,r2
    8730:	180b883a 	mov	r5,r3
    8734:	e13ffd15 	stw	r4,-12(fp)
    8738:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    873c:	e0bfff0f 	ldh	r2,-4(fp)
    8740:	1009883a 	mov	r4,r2
    8744:	000a2d80 	call	a2d8 <__floatsidf>
    8748:	100b883a 	mov	r5,r2
    874c:	180d883a 	mov	r6,r3
    8750:	2809883a 	mov	r4,r5
    8754:	300b883a 	mov	r5,r6
    8758:	e1bffd17 	ldw	r6,-12(fp)
    875c:	e1fffe17 	ldw	r7,-8(fp)
    8760:	000a0000 	call	a000 <__divdf3>
    8764:	1009883a 	mov	r4,r2
    8768:	180b883a 	mov	r5,r3
    876c:	2005883a 	mov	r2,r4
    8770:	2807883a 	mov	r3,r5
    8774:	1009883a 	mov	r4,r2
    8778:	180b883a 	mov	r5,r3
    877c:	100d883a 	mov	r6,r2
    8780:	180f883a 	mov	r7,r3
    8784:	0009c680 	call	9c68 <__adddf3>
    8788:	1009883a 	mov	r4,r2
    878c:	180b883a 	mov	r5,r3
    8790:	2005883a 	mov	r2,r4
    8794:	2807883a 	mov	r3,r5
    8798:	1009883a 	mov	r4,r2
    879c:	180b883a 	mov	r5,r3
    87a0:	019512f4 	movhi	r6,21579
    87a4:	31998604 	addi	r6,r6,26136
    87a8:	01d00274 	movhi	r7,16393
    87ac:	39c87ec4 	addi	r7,r7,8699
    87b0:	0009d1c0 	call	9d1c <__muldf3>
    87b4:	100f883a 	mov	r7,r2
    87b8:	1811883a 	mov	r8,r3
    87bc:	380b883a 	mov	r5,r7
    87c0:	400d883a 	mov	r6,r8
    87c4:	2807883a 	mov	r3,r5
    87c8:	3009883a 	mov	r4,r6
}
    87cc:	1805883a 	mov	r2,r3
    87d0:	2007883a 	mov	r3,r4
    87d4:	e037883a 	mov	sp,fp
    87d8:	dfc00117 	ldw	ra,4(sp)
    87dc:	df000017 	ldw	fp,0(sp)
    87e0:	dec00204 	addi	sp,sp,8
    87e4:	f800283a 	ret

000087e8 <main>:

int main()
{
    87e8:	deffe804 	addi	sp,sp,-96
    87ec:	dfc01715 	stw	ra,92(sp)
    87f0:	df001615 	stw	fp,88(sp)
    87f4:	df001604 	addi	fp,sp,88
	unsigned char ch;
	printf("\n\nHello NiosII!!!!!\n");
    87f8:	01000074 	movhi	r4,1
    87fc:	2133e504 	addi	r4,r4,-12396
    8800:	000ad3c0 	call	ad3c <puts>
	IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000000000000000000000);
    8804:	0007883a 	mov	r3,zero
    8808:	00800074 	movhi	r2,1
    880c:	10840004 	addi	r2,r2,4096
    8810:	10c00035 	stwio	r3,0(r2)
	//IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000001000000000000000);
	InitUart();
    8814:	00085300 	call	8530 <InitUart>
	//initialize 20-sim
	XXDouble u [3 + 1];
	XXDouble y [1 + 1];

	/* Initialize the inputs and outputs with correct initial values */
	u[0] = 0.0;		/* corr */
    8818:	e03ff415 	stw	zero,-48(fp)
    881c:	e03ff515 	stw	zero,-44(fp)
	u[1] = 0.0;		/* in */
    8820:	e03ff615 	stw	zero,-40(fp)
    8824:	e03ff715 	stw	zero,-36(fp)
	u[2] = 0.0;		/* position */
    8828:	e03ff815 	stw	zero,-32(fp)
    882c:	e03ff915 	stw	zero,-28(fp)

	y[0] = 0.0;		/* out */
    8830:	e03ffc15 	stw	zero,-16(fp)
    8834:	e03ffd15 	stw	zero,-12(fp)


	/* Initialize the submodel itself */
	XXInitializeSubmodel (&u, &y, xx_time);
    8838:	01000074 	movhi	r4,1
    883c:	21360704 	addi	r4,r4,-10212
    8840:	20800017 	ldw	r2,0(r4)
    8844:	20c00117 	ldw	r3,4(r4)
    8848:	e13ff404 	addi	r4,fp,-48
    884c:	e17ffc04 	addi	r5,fp,-16
    8850:	100d883a 	mov	r6,r2
    8854:	180f883a 	mov	r7,r3
    8858:	00097a40 	call	97a4 <XXInitializeSubmodel>
	
	//end initialize 20-sim
	
	//variables for avalon communication
	uint32_t nReadOut = 0;
    885c:	e03fec15 	stw	zero,-80(fp)
	uint16_t stepCount0 = 0;
    8860:	e03fea0d 	sth	zero,-88(fp)
	uint16_t stepCount1 = 0;
    8864:	e03fea8d 	sth	zero,-86(fp)
	uint16_t stepCount0Old = 0;
    8868:	e03feb0d 	sth	zero,-84(fp)
	uint16_t stepCount1Old = 0;
    886c:	e03feb8d 	sth	zero,-82(fp)
	int8_t PWM0 = 0;
    8870:	e03fed05 	stb	zero,-76(fp)
	int8_t PWM1 = 0;
    8874:	e03fed45 	stb	zero,-75(fp)
	uint32_t avalondSend = 0;
    8878:	e03fee15 	stw	zero,-72(fp)
	while( (xx_stop_simulation == XXFALSE) ) {
    887c:	0000cf06 	br	8bbc <main+0x3d4>

		//avalon bus communication
		nReadOut = IORD(ESL_NIOS_II_IP_0_BASE, 0x00);
    8880:	00800074 	movhi	r2,1
    8884:	10840004 	addi	r2,r2,4096
    8888:	10800037 	ldwio	r2,0(r2)
    888c:	e0bfec15 	stw	r2,-80(fp)
		unsigned int readID = nReadOut >> 29;
    8890:	e0bfec17 	ldw	r2,-80(fp)
    8894:	1004d77a 	srli	r2,r2,29
    8898:	e0bfef15 	stw	r2,-68(fp)
		nReadOut = nReadOut << 3;
    889c:	e0bfec17 	ldw	r2,-80(fp)
    88a0:	100490fa 	slli	r2,r2,3
    88a4:	e0bfec15 	stw	r2,-80(fp)
		uint32_t temp32;

		switch(readID) {
    88a8:	e0bfef17 	ldw	r2,-68(fp)
    88ac:	10c00060 	cmpeqi	r3,r2,1
    88b0:	1800031e 	bne	r3,zero,88c0 <main+0xd8>
    88b4:	108000a0 	cmpeqi	r2,r2,2
    88b8:	10000b1e 	bne	r2,zero,88e8 <main+0x100>
    88bc:	00002006 	br	8940 <main+0x158>
			case 1:
				stepCount0 = nReadOut >> (32-11);
    88c0:	e0bfec17 	ldw	r2,-80(fp)
    88c4:	1004d57a 	srli	r2,r2,21
    88c8:	e0bfea0d 	sth	r2,-88(fp)

				temp32 = nReadOut << 11;
    88cc:	e0bfec17 	ldw	r2,-80(fp)
    88d0:	100492fa 	slli	r2,r2,11
    88d4:	e0bff015 	stw	r2,-64(fp)
				stepCount1 = temp32 >> (32-11);
    88d8:	e0bff017 	ldw	r2,-64(fp)
    88dc:	1004d57a 	srli	r2,r2,21
    88e0:	e0bfea8d 	sth	r2,-86(fp)
				break;
    88e4:	00001a06 	br	8950 <main+0x168>
			case 2:
				maxStepCount0 = nReadOut >> (32-11);
    88e8:	e0bfec17 	ldw	r2,-80(fp)
    88ec:	1004d57a 	srli	r2,r2,21
    88f0:	d0a0000d 	sth	r2,-32768(gp)
				temp32 = nReadOut << 11;
    88f4:	e0bfec17 	ldw	r2,-80(fp)
    88f8:	100492fa 	slli	r2,r2,11
    88fc:	e0bff015 	stw	r2,-64(fp)
				maxStepCount1 = temp32 >> (32-11);
    8900:	e0bff017 	ldw	r2,-64(fp)
    8904:	1004d57a 	srli	r2,r2,21
    8908:	d0a0008d 	sth	r2,-32766(gp)
				printf(".....................Received new calibration values!:\t");
    890c:	01000074 	movhi	r4,1
    8910:	2133ea04 	addi	r4,r4,-12376
    8914:	000ac700 	call	ac70 <printf>
				printf("stepCount0_max: %d\t stepCount1_max: %d \n\r", maxStepCount0, maxStepCount1);
    8918:	d0a0000b 	ldhu	r2,-32768(gp)
    891c:	10ffffcc 	andi	r3,r2,65535
    8920:	d0a0008b 	ldhu	r2,-32766(gp)
    8924:	10bfffcc 	andi	r2,r2,65535
    8928:	01000074 	movhi	r4,1
    892c:	2133f804 	addi	r4,r4,-12320
    8930:	180b883a 	mov	r5,r3
    8934:	100d883a 	mov	r6,r2
    8938:	000ac700 	call	ac70 <printf>
				break;
    893c:	00000406 	br	8950 <main+0x168>
			default:
				// default statements
				printf("Received incorrect message");
    8940:	01000074 	movhi	r4,1
    8944:	21340304 	addi	r4,r4,-12276
    8948:	000ac700 	call	ac70 <printf>
				break;
    894c:	0001883a 	nop
		}
		
		
		

		if(stepCount0 != stepCount0Old || stepCount1 != stepCount1Old)
    8950:	e0ffea0b 	ldhu	r3,-88(fp)
    8954:	e0bfeb0b 	ldhu	r2,-84(fp)
    8958:	1880031e 	bne	r3,r2,8968 <main+0x180>
    895c:	e0ffea8b 	ldhu	r3,-86(fp)
    8960:	e0bfeb8b 	ldhu	r2,-82(fp)
    8964:	18800726 	beq	r3,r2,8984 <main+0x19c>
			printf("stepCount0: %d\t stepCount1: %d \n\r", stepCount0, stepCount1);
    8968:	e0ffea0b 	ldhu	r3,-88(fp)
    896c:	e0bfea8b 	ldhu	r2,-86(fp)
    8970:	01000074 	movhi	r4,1
    8974:	21340a04 	addi	r4,r4,-12248
    8978:	180b883a 	mov	r5,r3
    897c:	100d883a 	mov	r6,r2
    8980:	000ac700 	call	ac70 <printf>
		
		//generate inputs
		u[1] = 0;
    8984:	e03ff615 	stw	zero,-40(fp)
    8988:	e03ff715 	stw	zero,-36(fp)
		if(xx_time >= 1){
    898c:	01000074 	movhi	r4,1
    8990:	21360704 	addi	r4,r4,-10212
    8994:	20800017 	ldw	r2,0(r4)
    8998:	20c00117 	ldw	r3,4(r4)
    899c:	1009883a 	mov	r4,r2
    89a0:	180b883a 	mov	r5,r3
    89a4:	000d883a 	mov	r6,zero
    89a8:	01cffc34 	movhi	r7,16368
    89ac:	000a2180 	call	a218 <__gedf2>
    89b0:	10000616 	blt	r2,zero,89cc <main+0x1e4>
			u[1] = 0.5*pi;
    89b4:	009512f4 	movhi	r2,21579
    89b8:	10998604 	addi	r2,r2,26136
    89bc:	e0bff615 	stw	r2,-40(fp)
    89c0:	008ffe74 	movhi	r2,16377
    89c4:	10887ec4 	addi	r2,r2,8699
    89c8:	e0bff715 	stw	r2,-36(fp)

		}
		if(xx_time >= 5){
    89cc:	01000074 	movhi	r4,1
    89d0:	21360704 	addi	r4,r4,-10212
    89d4:	20800017 	ldw	r2,0(r4)
    89d8:	20c00117 	ldw	r3,4(r4)
    89dc:	1009883a 	mov	r4,r2
    89e0:	180b883a 	mov	r5,r3
    89e4:	000d883a 	mov	r6,zero
    89e8:	01d00534 	movhi	r7,16404
    89ec:	000a2180 	call	a218 <__gedf2>
    89f0:	10000616 	blt	r2,zero,8a0c <main+0x224>
			u[1] = 1.5*pi;
    89f4:	009fce74 	movhi	r2,32569
    89f8:	10a32484 	addi	r2,r2,-29550
    89fc:	e0bff615 	stw	r2,-40(fp)
    8a00:	009004f4 	movhi	r2,16403
    8a04:	10b65f04 	addi	r2,r2,-9860
    8a08:	e0bff715 	stw	r2,-36(fp)

		}
		if(xx_time >= 10){
    8a0c:	01000074 	movhi	r4,1
    8a10:	21360704 	addi	r4,r4,-10212
    8a14:	20800017 	ldw	r2,0(r4)
    8a18:	20c00117 	ldw	r3,4(r4)
    8a1c:	1009883a 	mov	r4,r2
    8a20:	180b883a 	mov	r5,r3
    8a24:	000d883a 	mov	r6,zero
    8a28:	01d00934 	movhi	r7,16420
    8a2c:	000a2180 	call	a218 <__gedf2>
    8a30:	10000616 	blt	r2,zero,8a4c <main+0x264>

			u[1] = 0.5*pi;
    8a34:	009512f4 	movhi	r2,21579
    8a38:	10998604 	addi	r2,r2,26136
    8a3c:	e0bff615 	stw	r2,-40(fp)
    8a40:	008ffe74 	movhi	r2,16377
    8a44:	10887ec4 	addi	r2,r2,8699
    8a48:	e0bff715 	stw	r2,-36(fp)

		}
		
		
		/* Call the 20-sim submodel to calculate the output */
		u[2] = Stepcount0ToSI(stepCount0);
    8a4c:	e0bfea0b 	ldhu	r2,-88(fp)
    8a50:	10bfffcc 	andi	r2,r2,65535
    8a54:	10a0001c 	xori	r2,r2,32768
    8a58:	10a00004 	addi	r2,r2,-32768
    8a5c:	1009883a 	mov	r4,r2
    8a60:	00086e80 	call	86e8 <Stepcount0ToSI>
    8a64:	1009883a 	mov	r4,r2
    8a68:	180b883a 	mov	r5,r3
    8a6c:	e13ff815 	stw	r4,-32(fp)
    8a70:	e17ff915 	stw	r5,-28(fp)
		double temp = y[0];
    8a74:	e0bffc17 	ldw	r2,-16(fp)
    8a78:	e0fffd17 	ldw	r3,-12(fp)
    8a7c:	e0bff115 	stw	r2,-60(fp)
    8a80:	e0fff215 	stw	r3,-56(fp)
		
		//printf("%f\n",temp);

		XXCalculateSubmodel (&u, &y, xx_time);
    8a84:	01000074 	movhi	r4,1
    8a88:	21360704 	addi	r4,r4,-10212
    8a8c:	20800017 	ldw	r2,0(r4)
    8a90:	20c00117 	ldw	r3,4(r4)
    8a94:	e13ff404 	addi	r4,fp,-48
    8a98:	e17ffc04 	addi	r5,fp,-16
    8a9c:	100d883a 	mov	r6,r2
    8aa0:	180f883a 	mov	r7,r3
    8aa4:	00098440 	call	9844 <XXCalculateSubmodel>
		PWM0 = y[0]*70;
    8aa8:	e0bffc17 	ldw	r2,-16(fp)
    8aac:	e0fffd17 	ldw	r3,-12(fp)
    8ab0:	1009883a 	mov	r4,r2
    8ab4:	180b883a 	mov	r5,r3
    8ab8:	000d883a 	mov	r6,zero
    8abc:	01d014b4 	movhi	r7,16466
    8ac0:	39e00004 	addi	r7,r7,-32768
    8ac4:	0009d1c0 	call	9d1c <__muldf3>
    8ac8:	1009883a 	mov	r4,r2
    8acc:	180b883a 	mov	r5,r3
    8ad0:	2005883a 	mov	r2,r4
    8ad4:	2807883a 	mov	r3,r5
    8ad8:	1009883a 	mov	r4,r2
    8adc:	180b883a 	mov	r5,r3
    8ae0:	000a3ac0 	call	a3ac <__fixdfsi>
    8ae4:	e0bfed05 	stb	r2,-76(fp)
		int16_t temp16 = 0;
    8ae8:	e03ff30d 	sth	zero,-52(fp)
		avalondSend = PWM0 << 24 | PWM1 <<16 | temp16;
    8aec:	e0bfed07 	ldb	r2,-76(fp)
    8af0:	1006963a 	slli	r3,r2,24
    8af4:	e0bfed47 	ldb	r2,-75(fp)
    8af8:	1004943a 	slli	r2,r2,16
    8afc:	1886b03a 	or	r3,r3,r2
    8b00:	e0bff30f 	ldh	r2,-52(fp)
    8b04:	1884b03a 	or	r2,r3,r2
    8b08:	e0bfee15 	stw	r2,-72(fp)
		//printf("%x\n",avalondSend);
		IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,avalondSend);
    8b0c:	e0ffee17 	ldw	r3,-72(fp)
    8b10:	00800074 	movhi	r2,1
    8b14:	10840004 	addi	r2,r2,4096
    8b18:	10c00035 	stwio	r3,0(r2)
		
		if(!EmptyUart0()){
    8b1c:	000837c0 	call	837c <EmptyUart0>
    8b20:	10803fcc 	andi	r2,r2,255
    8b24:	10000e1e 	bne	r2,zero,8b60 <main+0x378>
			ch = GetUart0();
    8b28:	00083b80 	call	83b8 <GetUart0>
    8b2c:	e0bff385 	stb	r2,-50(fp)
			printf("received message: %c\n",ch);
    8b30:	e0bff383 	ldbu	r2,-50(fp)
    8b34:	01000074 	movhi	r4,1
    8b38:	21341304 	addi	r4,r4,-12212
    8b3c:	100b883a 	mov	r5,r2
    8b40:	000ac700 	call	ac70 <printf>
			PutUart0(ch);
    8b44:	e0bff383 	ldbu	r2,-50(fp)
    8b48:	1009883a 	mov	r4,r2
    8b4c:	00084140 	call	8414 <PutUart0>
			PutUart0('\r');
    8b50:	01000344 	movi	r4,13
    8b54:	00084140 	call	8414 <PutUart0>
			PutUart0('\n');
    8b58:	01000284 	movi	r4,10
    8b5c:	00084140 	call	8414 <PutUart0>
			
			
		}
		
		stepCount0Old = stepCount0;
    8b60:	e0bfea0b 	ldhu	r2,-88(fp)
    8b64:	e0bfeb0d 	sth	r2,-84(fp)
		stepCount1Old = stepCount1;
    8b68:	e0bfea8b 	ldhu	r2,-86(fp)
    8b6c:	e0bfeb8d 	sth	r2,-82(fp)
		xx_time+=0.0013;
    8b70:	01000074 	movhi	r4,1
    8b74:	21360704 	addi	r4,r4,-10212
    8b78:	20800017 	ldw	r2,0(r4)
    8b7c:	20c00117 	ldw	r3,4(r4)
    8b80:	1009883a 	mov	r4,r2
    8b84:	180b883a 	mov	r5,r3
    8b88:	0197c1f4 	movhi	r6,24327
    8b8c:	31bda504 	addi	r6,r6,-2412
    8b90:	01cfd574 	movhi	r7,16213
    8b94:	39d32604 	addi	r7,r7,19608
    8b98:	0009c680 	call	9c68 <__adddf3>
    8b9c:	1009883a 	mov	r4,r2
    8ba0:	180b883a 	mov	r5,r3
    8ba4:	2005883a 	mov	r2,r4
    8ba8:	2807883a 	mov	r3,r5
    8bac:	01000074 	movhi	r4,1
    8bb0:	21360704 	addi	r4,r4,-10212
    8bb4:	20800015 	stw	r2,0(r4)
    8bb8:	20c00115 	stw	r3,4(r4)
	uint16_t stepCount0Old = 0;
	uint16_t stepCount1Old = 0;
	int8_t PWM0 = 0;
	int8_t PWM1 = 0;
	uint32_t avalondSend = 0;
	while( (xx_stop_simulation == XXFALSE) ) {
    8bbc:	00800074 	movhi	r2,1
    8bc0:	10b60a04 	addi	r2,r2,-10200
    8bc4:	10800003 	ldbu	r2,0(r2)
    8bc8:	10803fcc 	andi	r2,r2,255
    8bcc:	1080201c 	xori	r2,r2,128
    8bd0:	10bfe004 	addi	r2,r2,-128
    8bd4:	103f2a26 	beq	r2,zero,8880 <main+0x98>
		stepCount1Old = stepCount1;
		xx_time+=0.0013;
	} 

	/* Perform the final 20-sim calculations */
	XXTerminateSubmodel (&u, &y, xx_time);
    8bd8:	01000074 	movhi	r4,1
    8bdc:	21360704 	addi	r4,r4,-10212
    8be0:	20800017 	ldw	r2,0(r4)
    8be4:	20c00117 	ldw	r3,4(r4)
    8be8:	e13ff404 	addi	r4,fp,-48
    8bec:	e17ffc04 	addi	r5,fp,-16
    8bf0:	100d883a 	mov	r6,r2
    8bf4:	180f883a 	mov	r7,r3
    8bf8:	00098ac0 	call	98ac <XXTerminateSubmodel>

return 0;
    8bfc:	0005883a 	mov	r2,zero

}
    8c00:	e037883a 	mov	sp,fp
    8c04:	dfc00117 	ldw	ra,4(sp)
    8c08:	df000017 	ldw	fp,0(sp)
    8c0c:	dec00204 	addi	sp,sp,8
    8c10:	f800283a 	ret

00008c14 <XXString2Double>:
	double m_double;
	const char* m_char;
}str2dbl;

XXDouble XXString2Double(const char* argument)
{
    8c14:	defffc04 	addi	sp,sp,-16
    8c18:	df000315 	stw	fp,12(sp)
    8c1c:	df000304 	addi	fp,sp,12
    8c20:	e13fff15 	stw	r4,-4(fp)
	str2dbl myConversion;
	myConversion.m_char = argument;
    8c24:	e0bfff17 	ldw	r2,-4(fp)
    8c28:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_double;
    8c2c:	e17ffd17 	ldw	r5,-12(fp)
    8c30:	e1bffe17 	ldw	r6,-8(fp)
    8c34:	2807883a 	mov	r3,r5
    8c38:	3009883a 	mov	r4,r6

}
    8c3c:	1805883a 	mov	r2,r3
    8c40:	2007883a 	mov	r3,r4
    8c44:	e037883a 	mov	sp,fp
    8c48:	df000017 	ldw	fp,0(sp)
    8c4c:	dec00104 	addi	sp,sp,4
    8c50:	f800283a 	ret

00008c54 <XXDouble2String>:

const char* XXDouble2String(XXDouble argument)
{
    8c54:	defffb04 	addi	sp,sp,-20
    8c58:	df000415 	stw	fp,16(sp)
    8c5c:	df000404 	addi	fp,sp,16
    8c60:	e13ffe15 	stw	r4,-8(fp)
    8c64:	e17fff15 	stw	r5,-4(fp)
	str2dbl myConversion;
	myConversion.m_double = argument;
    8c68:	e0bffe17 	ldw	r2,-8(fp)
    8c6c:	e0bffc15 	stw	r2,-16(fp)
    8c70:	e0bfff17 	ldw	r2,-4(fp)
    8c74:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_char;
    8c78:	e0bffc17 	ldw	r2,-16(fp)
}
    8c7c:	e037883a 	mov	sp,fp
    8c80:	df000017 	ldw	fp,0(sp)
    8c84:	dec00104 	addi	sp,sp,4
    8c88:	f800283a 	ret

00008c8c <XXDiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void XXDiscreteInitialize (void)
{
    8c8c:	deffff04 	addi	sp,sp,-4
    8c90:	df000015 	stw	fp,0(sp)
    8c94:	d839883a 	mov	fp,sp
	/* nothing to be done */
	xx_major = XXTRUE;
    8c98:	00800074 	movhi	r2,1
    8c9c:	10b52a44 	addi	r2,r2,-11095
    8ca0:	00c00044 	movi	r3,1
    8ca4:	10c00005 	stb	r3,0(r2)
}
    8ca8:	e037883a 	mov	sp,fp
    8cac:	df000017 	ldw	fp,0(sp)
    8cb0:	dec00104 	addi	sp,sp,4
    8cb4:	f800283a 	ret

00008cb8 <XXDiscreteTerminate>:

/* the termination of the Discrete integration method */
void XXDiscreteTerminate (void)
{
    8cb8:	deffff04 	addi	sp,sp,-4
    8cbc:	df000015 	stw	fp,0(sp)
    8cc0:	d839883a 	mov	fp,sp
	/* nothing to be done */
}
    8cc4:	e037883a 	mov	sp,fp
    8cc8:	df000017 	ldw	fp,0(sp)
    8ccc:	dec00104 	addi	sp,sp,4
    8cd0:	f800283a 	ret

00008cd4 <XXDiscreteStep>:

/* the Discrete integration method itself */
void XXDiscreteStep (void)
{
    8cd4:	defffd04 	addi	sp,sp,-12
    8cd8:	dfc00215 	stw	ra,8(sp)
    8cdc:	df000115 	stw	fp,4(sp)
    8ce0:	df000104 	addi	fp,sp,4
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8ce4:	e03fff15 	stw	zero,-4(fp)
    8ce8:	00001106 	br	8d30 <XXDiscreteStep+0x5c>
	{
		/* just a move of the new state */
		xx_s [index] = xx_R [index];
    8cec:	00c00074 	movhi	r3,1
    8cf0:	18f81204 	addi	r3,r3,-8120
    8cf4:	e0bfff17 	ldw	r2,-4(fp)
    8cf8:	100490fa 	slli	r2,r2,3
    8cfc:	1889883a 	add	r4,r3,r2
    8d00:	20800017 	ldw	r2,0(r4)
    8d04:	20c00117 	ldw	r3,4(r4)
    8d08:	01400074 	movhi	r5,1
    8d0c:	29784404 	addi	r5,r5,-7920
    8d10:	e13fff17 	ldw	r4,-4(fp)
    8d14:	200890fa 	slli	r4,r4,3
    8d18:	2909883a 	add	r4,r5,r4
    8d1c:	20800015 	stw	r2,0(r4)
    8d20:	20c00115 	stw	r3,4(r4)
void XXDiscreteStep (void)
{
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8d24:	e0bfff17 	ldw	r2,-4(fp)
    8d28:	10800044 	addi	r2,r2,1
    8d2c:	e0bfff15 	stw	r2,-4(fp)
    8d30:	e0bfff17 	ldw	r2,-4(fp)
    8d34:	108000d0 	cmplti	r2,r2,3
    8d38:	103fec1e 	bne	r2,zero,8cec <XXDiscreteStep+0x18>
	{
		/* just a move of the new state */
		xx_s [index] = xx_R [index];
	}
	/* increment the simulation time */
	xx_time += xx_step_size;
    8d3c:	00800074 	movhi	r2,1
    8d40:	10b60704 	addi	r2,r2,-10212
    8d44:	11400017 	ldw	r5,0(r2)
    8d48:	11800117 	ldw	r6,4(r2)
    8d4c:	01000074 	movhi	r4,1
    8d50:	21352804 	addi	r4,r4,-11104
    8d54:	20800017 	ldw	r2,0(r4)
    8d58:	20c00117 	ldw	r3,4(r4)
    8d5c:	2809883a 	mov	r4,r5
    8d60:	300b883a 	mov	r5,r6
    8d64:	100d883a 	mov	r6,r2
    8d68:	180f883a 	mov	r7,r3
    8d6c:	0009c680 	call	9c68 <__adddf3>
    8d70:	1009883a 	mov	r4,r2
    8d74:	180b883a 	mov	r5,r3
    8d78:	2005883a 	mov	r2,r4
    8d7c:	2807883a 	mov	r3,r5
    8d80:	01000074 	movhi	r4,1
    8d84:	21360704 	addi	r4,r4,-10212
    8d88:	20800015 	stw	r2,0(r4)
    8d8c:	20c00115 	stw	r3,4(r4)

	xx_major = XXTRUE;
    8d90:	00800074 	movhi	r2,1
    8d94:	10b52a44 	addi	r2,r2,-11095
    8d98:	00c00044 	movi	r3,1
    8d9c:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	XXCalculateDynamic ();
    8da0:	00090200 	call	9020 <XXCalculateDynamic>
}
    8da4:	e037883a 	mov	sp,fp
    8da8:	dfc00117 	ldw	ra,4(sp)
    8dac:	df000017 	ldw	fp,0(sp)
    8db0:	dec00204 	addi	sp,sp,8
    8db4:	f800283a 	ret

00008db8 <XXModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void XXModelInitialize_parameters(void)
{
    8db8:	deffff04 	addi	sp,sp,-4
    8dbc:	df000015 	stw	fp,0(sp)
    8dc0:	d839883a 	mov	fp,sp
	/* set the parameters */
	xx_P[0] = 0.0;		/* corrGain\K */
    8dc4:	00800074 	movhi	r2,1
    8dc8:	10b81e04 	addi	r2,r2,-8072
    8dcc:	10000015 	stw	zero,0(r2)
    8dd0:	10000115 	stw	zero,4(r2)
	xx_P[1] = 1.6;		/* PID1\kp */
    8dd4:	00800074 	movhi	r2,1
    8dd8:	10b81e04 	addi	r2,r2,-8072
    8ddc:	00e666b4 	movhi	r3,39322
    8de0:	18e66684 	addi	r3,r3,-26214
    8de4:	10c00215 	stw	r3,8(r2)
    8de8:	00cffeb4 	movhi	r3,16378
    8dec:	18e66644 	addi	r3,r3,-26215
    8df0:	10c00315 	stw	r3,12(r2)
	xx_P[2] = 0.05;		/* PID1\tauD */
    8df4:	00800074 	movhi	r2,1
    8df8:	10b81e04 	addi	r2,r2,-8072
    8dfc:	00e666b4 	movhi	r3,39322
    8e00:	18e66684 	addi	r3,r3,-26214
    8e04:	10c00415 	stw	r3,16(r2)
    8e08:	00cfeab4 	movhi	r3,16298
    8e0c:	18e66644 	addi	r3,r3,-26215
    8e10:	10c00515 	stw	r3,20(r2)
	xx_P[3] = 0.001;		/* PID1\beta */
    8e14:	00800074 	movhi	r2,1
    8e18:	10b81e04 	addi	r2,r2,-8072
    8e1c:	00f4bcb4 	movhi	r3,54002
    8e20:	18ea7f04 	addi	r3,r3,-22020
    8e24:	10c00615 	stw	r3,24(r2)
    8e28:	00cfd434 	movhi	r3,16208
    8e2c:	18d89344 	addi	r3,r3,25165
    8e30:	10c00715 	stw	r3,28(r2)
	xx_P[4] = 10.5;		/* PID1\tauI */
    8e34:	00800074 	movhi	r2,1
    8e38:	10b81e04 	addi	r2,r2,-8072
    8e3c:	10000815 	stw	zero,32(r2)
    8e40:	00d00974 	movhi	r3,16421
    8e44:	10c00915 	stw	r3,36(r2)
	xx_P[5] = -0.99;		/* SignalLimiter2\minimum */
    8e48:	00800074 	movhi	r2,1
    8e4c:	10b81e04 	addi	r2,r2,-8072
    8e50:	00deb874 	movhi	r3,31457
    8e54:	18d1eb84 	addi	r3,r3,18350
    8e58:	10c00a15 	stw	r3,40(r2)
    8e5c:	00effc34 	movhi	r3,49136
    8e60:	18eb8504 	addi	r3,r3,-20972
    8e64:	10c00b15 	stw	r3,44(r2)
	xx_P[6] = 0.99;		/* SignalLimiter2\maximum */
    8e68:	00800074 	movhi	r2,1
    8e6c:	10b81e04 	addi	r2,r2,-8072
    8e70:	00deb874 	movhi	r3,31457
    8e74:	18d1eb84 	addi	r3,r3,18350
    8e78:	10c00c15 	stw	r3,48(r2)
    8e7c:	00cffc34 	movhi	r3,16368
    8e80:	18eb8504 	addi	r3,r3,-20972
    8e84:	10c00d15 	stw	r3,52(r2)

}
    8e88:	e037883a 	mov	sp,fp
    8e8c:	df000017 	ldw	fp,0(sp)
    8e90:	dec00104 	addi	sp,sp,4
    8e94:	f800283a 	ret

00008e98 <XXModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void XXModelInitialize_initialvalues(void)
{
    8e98:	deffff04 	addi	sp,sp,-4
    8e9c:	df000015 	stw	fp,0(sp)
    8ea0:	d839883a 	mov	fp,sp
	/* set the initial values */
	xx_I[0] = 0.0;		/* PID1\uD_previous_initial */
    8ea4:	00800074 	movhi	r2,1
    8ea8:	10b81804 	addi	r2,r2,-8096
    8eac:	10000015 	stw	zero,0(r2)
    8eb0:	10000115 	stw	zero,4(r2)
	xx_I[1] = 0.0;		/* PID1\error_previous_initial */
    8eb4:	00800074 	movhi	r2,1
    8eb8:	10b81804 	addi	r2,r2,-8096
    8ebc:	10000215 	stw	zero,8(r2)
    8ec0:	10000315 	stw	zero,12(r2)
	xx_I[2] = 0.0;		/* PID1\uI_previous_initial */
    8ec4:	00800074 	movhi	r2,1
    8ec8:	10b81804 	addi	r2,r2,-8096
    8ecc:	10000415 	stw	zero,16(r2)
    8ed0:	10000515 	stw	zero,20(r2)

}
    8ed4:	e037883a 	mov	sp,fp
    8ed8:	df000017 	ldw	fp,0(sp)
    8edc:	dec00104 	addi	sp,sp,4
    8ee0:	f800283a 	ret

00008ee4 <XXModelInitialize_states>:

void XXModelInitialize_states(void)
{
    8ee4:	deffff04 	addi	sp,sp,-4
    8ee8:	df000015 	stw	fp,0(sp)
    8eec:	d839883a 	mov	fp,sp
	/* set the states */
	xx_s[0] = xx_I[0];		/* PID1\uD_previous */
    8ef0:	01000074 	movhi	r4,1
    8ef4:	21381804 	addi	r4,r4,-8096
    8ef8:	20800017 	ldw	r2,0(r4)
    8efc:	20c00117 	ldw	r3,4(r4)
    8f00:	01000074 	movhi	r4,1
    8f04:	21384404 	addi	r4,r4,-7920
    8f08:	20800015 	stw	r2,0(r4)
    8f0c:	20c00115 	stw	r3,4(r4)
	xx_s[1] = xx_I[1];		/* PID1\error_previous */
    8f10:	01000074 	movhi	r4,1
    8f14:	21381804 	addi	r4,r4,-8096
    8f18:	20800217 	ldw	r2,8(r4)
    8f1c:	20c00317 	ldw	r3,12(r4)
    8f20:	01000074 	movhi	r4,1
    8f24:	21384404 	addi	r4,r4,-7920
    8f28:	20800215 	stw	r2,8(r4)
    8f2c:	20c00315 	stw	r3,12(r4)
	xx_s[2] = xx_I[2];		/* PID1\uI_previous */
    8f30:	01000074 	movhi	r4,1
    8f34:	21381804 	addi	r4,r4,-8096
    8f38:	20800417 	ldw	r2,16(r4)
    8f3c:	20c00517 	ldw	r3,20(r4)
    8f40:	01000074 	movhi	r4,1
    8f44:	21384404 	addi	r4,r4,-7920
    8f48:	20800415 	stw	r2,16(r4)
    8f4c:	20c00515 	stw	r3,20(r4)

}
    8f50:	e037883a 	mov	sp,fp
    8f54:	df000017 	ldw	fp,0(sp)
    8f58:	dec00104 	addi	sp,sp,4
    8f5c:	f800283a 	ret

00008f60 <XXModelInitialize_variables>:

void XXModelInitialize_variables(void)
{
    8f60:	defffe04 	addi	sp,sp,-8
    8f64:	dfc00115 	stw	ra,4(sp)
    8f68:	df000015 	stw	fp,0(sp)
    8f6c:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(xx_V, 0, xx_variables_size * sizeof(XXDouble));
    8f70:	01000074 	movhi	r4,1
    8f74:	21382c04 	addi	r4,r4,-8016
    8f78:	000b883a 	mov	r5,zero
    8f7c:	01801804 	movi	r6,96
    8f80:	000ac140 	call	ac14 <memset>
}
    8f84:	e037883a 	mov	sp,fp
    8f88:	dfc00117 	ldw	ra,4(sp)
    8f8c:	df000017 	ldw	fp,0(sp)
    8f90:	dec00204 	addi	sp,sp,8
    8f94:	f800283a 	ret

00008f98 <XXModelInitialize>:

/* this method is called before calculation is possible */
void XXModelInitialize (void)
{
    8f98:	defffe04 	addi	sp,sp,-8
    8f9c:	dfc00115 	stw	ra,4(sp)
    8fa0:	df000015 	stw	fp,0(sp)
    8fa4:	d839883a 	mov	fp,sp
	XXModelInitialize_parameters();
    8fa8:	0008db80 	call	8db8 <XXModelInitialize_parameters>
	XXModelInitialize_variables();
    8fac:	0008f600 	call	8f60 <XXModelInitialize_variables>
	XXModelInitialize_initialvalues();
    8fb0:	0008e980 	call	8e98 <XXModelInitialize_initialvalues>
	XXModelInitialize_states();
    8fb4:	0008ee40 	call	8ee4 <XXModelInitialize_states>
}
    8fb8:	e037883a 	mov	sp,fp
    8fbc:	dfc00117 	ldw	ra,4(sp)
    8fc0:	df000017 	ldw	fp,0(sp)
    8fc4:	dec00204 	addi	sp,sp,8
    8fc8:	f800283a 	ret

00008fcc <XXCalculateInitial>:

/* This function calculates the initial equations of the model.
 * These equations are calculated before anything else
 */
void XXCalculateInitial (void)
{
    8fcc:	deffff04 	addi	sp,sp,-4
    8fd0:	df000015 	stw	fp,0(sp)
    8fd4:	d839883a 	mov	fp,sp

}
    8fd8:	e037883a 	mov	sp,fp
    8fdc:	df000017 	ldw	fp,0(sp)
    8fe0:	dec00104 	addi	sp,sp,4
    8fe4:	f800283a 	ret

00008fe8 <XXCalculateStatic>:

/* This function calculates the static equations of the model.
 * These equations are only dependent from parameters and constants
 */
void XXCalculateStatic (void)
{
    8fe8:	deffff04 	addi	sp,sp,-4
    8fec:	df000015 	stw	fp,0(sp)
    8ff0:	d839883a 	mov	fp,sp

}
    8ff4:	e037883a 	mov	sp,fp
    8ff8:	df000017 	ldw	fp,0(sp)
    8ffc:	dec00104 	addi	sp,sp,4
    9000:	f800283a 	ret

00009004 <XXCalculateInput>:
/* This function calculates the input equations of the model.
 * These equations are dynamic equations that must not change
 * in calls from the integration method (like random and delay).
 */
void XXCalculateInput (void)
{
    9004:	deffff04 	addi	sp,sp,-4
    9008:	df000015 	stw	fp,0(sp)
    900c:	d839883a 	mov	fp,sp

}
    9010:	e037883a 	mov	sp,fp
    9014:	df000017 	ldw	fp,0(sp)
    9018:	dec00104 	addi	sp,sp,4
    901c:	f800283a 	ret

00009020 <XXCalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void XXCalculateDynamic (void)
{
    9020:	defff804 	addi	sp,sp,-32
    9024:	dfc00715 	stw	ra,28(sp)
    9028:	df000615 	stw	fp,24(sp)
    902c:	dd400515 	stw	r21,20(sp)
    9030:	dd000415 	stw	r20,16(sp)
    9034:	dcc00315 	stw	r19,12(sp)
    9038:	dc800215 	stw	r18,8(sp)
    903c:	dc400115 	stw	r17,4(sp)
    9040:	dc000015 	stw	r16,0(sp)
    9044:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	xx_V[3] = 1.0 / (xx_step_size + xx_P[2] * xx_P[3]);
    9048:	00800074 	movhi	r2,1
    904c:	10b81e04 	addi	r2,r2,-8072
    9050:	11400417 	ldw	r5,16(r2)
    9054:	11800517 	ldw	r6,20(r2)
    9058:	01000074 	movhi	r4,1
    905c:	21381e04 	addi	r4,r4,-8072
    9060:	20800617 	ldw	r2,24(r4)
    9064:	20c00717 	ldw	r3,28(r4)
    9068:	2809883a 	mov	r4,r5
    906c:	300b883a 	mov	r5,r6
    9070:	100d883a 	mov	r6,r2
    9074:	180f883a 	mov	r7,r3
    9078:	0009d1c0 	call	9d1c <__muldf3>
    907c:	100f883a 	mov	r7,r2
    9080:	1811883a 	mov	r8,r3
    9084:	380b883a 	mov	r5,r7
    9088:	400d883a 	mov	r6,r8
    908c:	d0a00317 	ldw	r2,-32756(gp)
    9090:	01000074 	movhi	r4,1
    9094:	21352904 	addi	r4,r4,-11100
    9098:	20c00017 	ldw	r3,0(r4)
    909c:	2809883a 	mov	r4,r5
    90a0:	300b883a 	mov	r5,r6
    90a4:	100d883a 	mov	r6,r2
    90a8:	180f883a 	mov	r7,r3
    90ac:	0009c680 	call	9c68 <__adddf3>
    90b0:	1009883a 	mov	r4,r2
    90b4:	180b883a 	mov	r5,r3
    90b8:	2005883a 	mov	r2,r4
    90bc:	2807883a 	mov	r3,r5
    90c0:	0009883a 	mov	r4,zero
    90c4:	014ffc34 	movhi	r5,16368
    90c8:	100d883a 	mov	r6,r2
    90cc:	180f883a 	mov	r7,r3
    90d0:	000a0000 	call	a000 <__divdf3>
    90d4:	1009883a 	mov	r4,r2
    90d8:	180b883a 	mov	r5,r3
    90dc:	2005883a 	mov	r2,r4
    90e0:	2807883a 	mov	r3,r5
    90e4:	01000074 	movhi	r4,1
    90e8:	21382c04 	addi	r4,r4,-8016
    90ec:	20800615 	stw	r2,24(r4)
    90f0:	20c00715 	stw	r3,28(r4)

	/* corrGain\input = corr; */
	xx_V[0] = xx_V[8];
    90f4:	01000074 	movhi	r4,1
    90f8:	21382c04 	addi	r4,r4,-8016
    90fc:	20801017 	ldw	r2,64(r4)
    9100:	20c01117 	ldw	r3,68(r4)
    9104:	01000074 	movhi	r4,1
    9108:	21382c04 	addi	r4,r4,-8016
    910c:	20800015 	stw	r2,0(r4)
    9110:	20c00115 	stw	r3,4(r4)

	/* PlusMinus2\plus1 = in; */
	xx_V[5] = xx_V[9];
    9114:	01000074 	movhi	r4,1
    9118:	21382c04 	addi	r4,r4,-8016
    911c:	20801217 	ldw	r2,72(r4)
    9120:	20c01317 	ldw	r3,76(r4)
    9124:	01000074 	movhi	r4,1
    9128:	21382c04 	addi	r4,r4,-8016
    912c:	20800a15 	stw	r2,40(r4)
    9130:	20c00b15 	stw	r3,44(r4)

	/* PlusMinus2\minus1 = position; */
	xx_V[6] = xx_V[10];
    9134:	01000074 	movhi	r4,1
    9138:	21382c04 	addi	r4,r4,-8016
    913c:	20801417 	ldw	r2,80(r4)
    9140:	20c01517 	ldw	r3,84(r4)
    9144:	01000074 	movhi	r4,1
    9148:	21382c04 	addi	r4,r4,-8016
    914c:	20800c15 	stw	r2,48(r4)
    9150:	20c00d15 	stw	r3,52(r4)

	/* corrGain\output = corrGain\K * corrGain\input; */
	xx_V[1] = xx_P[0] * xx_V[0];
    9154:	00800074 	movhi	r2,1
    9158:	10b81e04 	addi	r2,r2,-8072
    915c:	11400017 	ldw	r5,0(r2)
    9160:	11800117 	ldw	r6,4(r2)
    9164:	01000074 	movhi	r4,1
    9168:	21382c04 	addi	r4,r4,-8016
    916c:	20800017 	ldw	r2,0(r4)
    9170:	20c00117 	ldw	r3,4(r4)
    9174:	2809883a 	mov	r4,r5
    9178:	300b883a 	mov	r5,r6
    917c:	100d883a 	mov	r6,r2
    9180:	180f883a 	mov	r7,r3
    9184:	0009d1c0 	call	9d1c <__muldf3>
    9188:	1009883a 	mov	r4,r2
    918c:	180b883a 	mov	r5,r3
    9190:	2005883a 	mov	r2,r4
    9194:	2807883a 	mov	r3,r5
    9198:	01000074 	movhi	r4,1
    919c:	21382c04 	addi	r4,r4,-8016
    91a0:	20800215 	stw	r2,8(r4)
    91a4:	20c00315 	stw	r3,12(r4)

	/* PID1\error = PlusMinus2\plus1 - PlusMinus2\minus1; */
	xx_R[1] = xx_V[5] - xx_V[6];
    91a8:	00800074 	movhi	r2,1
    91ac:	10b82c04 	addi	r2,r2,-8016
    91b0:	11400a17 	ldw	r5,40(r2)
    91b4:	11800b17 	ldw	r6,44(r2)
    91b8:	01000074 	movhi	r4,1
    91bc:	21382c04 	addi	r4,r4,-8016
    91c0:	20800c17 	ldw	r2,48(r4)
    91c4:	20c00d17 	ldw	r3,52(r4)
    91c8:	2809883a 	mov	r4,r5
    91cc:	300b883a 	mov	r5,r6
    91d0:	100d883a 	mov	r6,r2
    91d4:	180f883a 	mov	r7,r3
    91d8:	0009cbc0 	call	9cbc <__subdf3>
    91dc:	1009883a 	mov	r4,r2
    91e0:	180b883a 	mov	r5,r3
    91e4:	2005883a 	mov	r2,r4
    91e8:	2807883a 	mov	r3,r5
    91ec:	01000074 	movhi	r4,1
    91f0:	21381204 	addi	r4,r4,-8120
    91f4:	20800215 	stw	r2,8(r4)
    91f8:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	xx_R[0] = xx_V[3] * (((xx_P[2] * xx_s[0]) * xx_P[3] + (xx_P[2] * xx_P[1]) * (xx_R[1] - xx_s[1])) + (xx_step_size * xx_P[1]) * xx_R[1]);
    91fc:	00800074 	movhi	r2,1
    9200:	10b82c04 	addi	r2,r2,-8016
    9204:	14000617 	ldw	r16,24(r2)
    9208:	14400717 	ldw	r17,28(r2)
    920c:	00800074 	movhi	r2,1
    9210:	10b81e04 	addi	r2,r2,-8072
    9214:	11400417 	ldw	r5,16(r2)
    9218:	11800517 	ldw	r6,20(r2)
    921c:	01000074 	movhi	r4,1
    9220:	21384404 	addi	r4,r4,-7920
    9224:	20800017 	ldw	r2,0(r4)
    9228:	20c00117 	ldw	r3,4(r4)
    922c:	2809883a 	mov	r4,r5
    9230:	300b883a 	mov	r5,r6
    9234:	100d883a 	mov	r6,r2
    9238:	180f883a 	mov	r7,r3
    923c:	0009d1c0 	call	9d1c <__muldf3>
    9240:	100f883a 	mov	r7,r2
    9244:	1811883a 	mov	r8,r3
    9248:	380b883a 	mov	r5,r7
    924c:	400d883a 	mov	r6,r8
    9250:	01000074 	movhi	r4,1
    9254:	21381e04 	addi	r4,r4,-8072
    9258:	20800617 	ldw	r2,24(r4)
    925c:	20c00717 	ldw	r3,28(r4)
    9260:	2809883a 	mov	r4,r5
    9264:	300b883a 	mov	r5,r6
    9268:	100d883a 	mov	r6,r2
    926c:	180f883a 	mov	r7,r3
    9270:	0009d1c0 	call	9d1c <__muldf3>
    9274:	1009883a 	mov	r4,r2
    9278:	180b883a 	mov	r5,r3
    927c:	2025883a 	mov	r18,r4
    9280:	2827883a 	mov	r19,r5
    9284:	00800074 	movhi	r2,1
    9288:	10b81e04 	addi	r2,r2,-8072
    928c:	11400417 	ldw	r5,16(r2)
    9290:	11800517 	ldw	r6,20(r2)
    9294:	01000074 	movhi	r4,1
    9298:	21381e04 	addi	r4,r4,-8072
    929c:	20800217 	ldw	r2,8(r4)
    92a0:	20c00317 	ldw	r3,12(r4)
    92a4:	2809883a 	mov	r4,r5
    92a8:	300b883a 	mov	r5,r6
    92ac:	100d883a 	mov	r6,r2
    92b0:	180f883a 	mov	r7,r3
    92b4:	0009d1c0 	call	9d1c <__muldf3>
    92b8:	1009883a 	mov	r4,r2
    92bc:	180b883a 	mov	r5,r3
    92c0:	2029883a 	mov	r20,r4
    92c4:	282b883a 	mov	r21,r5
    92c8:	00800074 	movhi	r2,1
    92cc:	10b81204 	addi	r2,r2,-8120
    92d0:	11400217 	ldw	r5,8(r2)
    92d4:	11800317 	ldw	r6,12(r2)
    92d8:	01000074 	movhi	r4,1
    92dc:	21384404 	addi	r4,r4,-7920
    92e0:	20800217 	ldw	r2,8(r4)
    92e4:	20c00317 	ldw	r3,12(r4)
    92e8:	2809883a 	mov	r4,r5
    92ec:	300b883a 	mov	r5,r6
    92f0:	100d883a 	mov	r6,r2
    92f4:	180f883a 	mov	r7,r3
    92f8:	0009cbc0 	call	9cbc <__subdf3>
    92fc:	1009883a 	mov	r4,r2
    9300:	180b883a 	mov	r5,r3
    9304:	2005883a 	mov	r2,r4
    9308:	2807883a 	mov	r3,r5
    930c:	a009883a 	mov	r4,r20
    9310:	a80b883a 	mov	r5,r21
    9314:	100d883a 	mov	r6,r2
    9318:	180f883a 	mov	r7,r3
    931c:	0009d1c0 	call	9d1c <__muldf3>
    9320:	1009883a 	mov	r4,r2
    9324:	180b883a 	mov	r5,r3
    9328:	2005883a 	mov	r2,r4
    932c:	2807883a 	mov	r3,r5
    9330:	9009883a 	mov	r4,r18
    9334:	980b883a 	mov	r5,r19
    9338:	100d883a 	mov	r6,r2
    933c:	180f883a 	mov	r7,r3
    9340:	0009c680 	call	9c68 <__adddf3>
    9344:	1009883a 	mov	r4,r2
    9348:	180b883a 	mov	r5,r3
    934c:	2025883a 	mov	r18,r4
    9350:	2827883a 	mov	r19,r5
    9354:	00800074 	movhi	r2,1
    9358:	10b81e04 	addi	r2,r2,-8072
    935c:	11400217 	ldw	r5,8(r2)
    9360:	11800317 	ldw	r6,12(r2)
    9364:	d0a00317 	ldw	r2,-32756(gp)
    9368:	01000074 	movhi	r4,1
    936c:	21352904 	addi	r4,r4,-11100
    9370:	20c00017 	ldw	r3,0(r4)
    9374:	2809883a 	mov	r4,r5
    9378:	300b883a 	mov	r5,r6
    937c:	100d883a 	mov	r6,r2
    9380:	180f883a 	mov	r7,r3
    9384:	0009d1c0 	call	9d1c <__muldf3>
    9388:	100f883a 	mov	r7,r2
    938c:	1811883a 	mov	r8,r3
    9390:	380b883a 	mov	r5,r7
    9394:	400d883a 	mov	r6,r8
    9398:	01000074 	movhi	r4,1
    939c:	21381204 	addi	r4,r4,-8120
    93a0:	20800217 	ldw	r2,8(r4)
    93a4:	20c00317 	ldw	r3,12(r4)
    93a8:	2809883a 	mov	r4,r5
    93ac:	300b883a 	mov	r5,r6
    93b0:	100d883a 	mov	r6,r2
    93b4:	180f883a 	mov	r7,r3
    93b8:	0009d1c0 	call	9d1c <__muldf3>
    93bc:	1009883a 	mov	r4,r2
    93c0:	180b883a 	mov	r5,r3
    93c4:	2005883a 	mov	r2,r4
    93c8:	2807883a 	mov	r3,r5
    93cc:	9009883a 	mov	r4,r18
    93d0:	980b883a 	mov	r5,r19
    93d4:	100d883a 	mov	r6,r2
    93d8:	180f883a 	mov	r7,r3
    93dc:	0009c680 	call	9c68 <__adddf3>
    93e0:	1009883a 	mov	r4,r2
    93e4:	180b883a 	mov	r5,r3
    93e8:	2005883a 	mov	r2,r4
    93ec:	2807883a 	mov	r3,r5
    93f0:	8009883a 	mov	r4,r16
    93f4:	880b883a 	mov	r5,r17
    93f8:	100d883a 	mov	r6,r2
    93fc:	180f883a 	mov	r7,r3
    9400:	0009d1c0 	call	9d1c <__muldf3>
    9404:	1009883a 	mov	r4,r2
    9408:	180b883a 	mov	r5,r3
    940c:	2005883a 	mov	r2,r4
    9410:	2807883a 	mov	r3,r5
    9414:	01000074 	movhi	r4,1
    9418:	21381204 	addi	r4,r4,-8120
    941c:	20800015 	stw	r2,0(r4)
    9420:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	xx_R[2] = xx_s[2] + (xx_step_size * xx_R[0]) / xx_P[4];
    9424:	00800074 	movhi	r2,1
    9428:	10b84404 	addi	r2,r2,-7920
    942c:	14000417 	ldw	r16,16(r2)
    9430:	14400517 	ldw	r17,20(r2)
    9434:	00800074 	movhi	r2,1
    9438:	10b81204 	addi	r2,r2,-8120
    943c:	11400017 	ldw	r5,0(r2)
    9440:	11800117 	ldw	r6,4(r2)
    9444:	d0a00317 	ldw	r2,-32756(gp)
    9448:	01000074 	movhi	r4,1
    944c:	21352904 	addi	r4,r4,-11100
    9450:	20c00017 	ldw	r3,0(r4)
    9454:	2809883a 	mov	r4,r5
    9458:	300b883a 	mov	r5,r6
    945c:	100d883a 	mov	r6,r2
    9460:	180f883a 	mov	r7,r3
    9464:	0009d1c0 	call	9d1c <__muldf3>
    9468:	100f883a 	mov	r7,r2
    946c:	1811883a 	mov	r8,r3
    9470:	380b883a 	mov	r5,r7
    9474:	400d883a 	mov	r6,r8
    9478:	01000074 	movhi	r4,1
    947c:	21381e04 	addi	r4,r4,-8072
    9480:	20800817 	ldw	r2,32(r4)
    9484:	20c00917 	ldw	r3,36(r4)
    9488:	2809883a 	mov	r4,r5
    948c:	300b883a 	mov	r5,r6
    9490:	100d883a 	mov	r6,r2
    9494:	180f883a 	mov	r7,r3
    9498:	000a0000 	call	a000 <__divdf3>
    949c:	1009883a 	mov	r4,r2
    94a0:	180b883a 	mov	r5,r3
    94a4:	2005883a 	mov	r2,r4
    94a8:	2807883a 	mov	r3,r5
    94ac:	8009883a 	mov	r4,r16
    94b0:	880b883a 	mov	r5,r17
    94b4:	100d883a 	mov	r6,r2
    94b8:	180f883a 	mov	r7,r3
    94bc:	0009c680 	call	9c68 <__adddf3>
    94c0:	1009883a 	mov	r4,r2
    94c4:	180b883a 	mov	r5,r3
    94c8:	2005883a 	mov	r2,r4
    94cc:	2807883a 	mov	r3,r5
    94d0:	01000074 	movhi	r4,1
    94d4:	21381204 	addi	r4,r4,-8120
    94d8:	20800415 	stw	r2,16(r4)
    94dc:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	xx_V[2] = xx_R[2] + xx_R[0];
    94e0:	00800074 	movhi	r2,1
    94e4:	10b81204 	addi	r2,r2,-8120
    94e8:	11400417 	ldw	r5,16(r2)
    94ec:	11800517 	ldw	r6,20(r2)
    94f0:	01000074 	movhi	r4,1
    94f4:	21381204 	addi	r4,r4,-8120
    94f8:	20800017 	ldw	r2,0(r4)
    94fc:	20c00117 	ldw	r3,4(r4)
    9500:	2809883a 	mov	r4,r5
    9504:	300b883a 	mov	r5,r6
    9508:	100d883a 	mov	r6,r2
    950c:	180f883a 	mov	r7,r3
    9510:	0009c680 	call	9c68 <__adddf3>
    9514:	1009883a 	mov	r4,r2
    9518:	180b883a 	mov	r5,r3
    951c:	2005883a 	mov	r2,r4
    9520:	2807883a 	mov	r3,r5
    9524:	01000074 	movhi	r4,1
    9528:	21382c04 	addi	r4,r4,-8016
    952c:	20800415 	stw	r2,16(r4)
    9530:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	xx_V[4] = xx_V[1] + xx_V[2];
    9534:	00800074 	movhi	r2,1
    9538:	10b82c04 	addi	r2,r2,-8016
    953c:	11400217 	ldw	r5,8(r2)
    9540:	11800317 	ldw	r6,12(r2)
    9544:	01000074 	movhi	r4,1
    9548:	21382c04 	addi	r4,r4,-8016
    954c:	20800417 	ldw	r2,16(r4)
    9550:	20c00517 	ldw	r3,20(r4)
    9554:	2809883a 	mov	r4,r5
    9558:	300b883a 	mov	r5,r6
    955c:	100d883a 	mov	r6,r2
    9560:	180f883a 	mov	r7,r3
    9564:	0009c680 	call	9c68 <__adddf3>
    9568:	1009883a 	mov	r4,r2
    956c:	180b883a 	mov	r5,r3
    9570:	2005883a 	mov	r2,r4
    9574:	2807883a 	mov	r3,r5
    9578:	01000074 	movhi	r4,1
    957c:	21382c04 	addi	r4,r4,-8016
    9580:	20800815 	stw	r2,32(r4)
    9584:	20c00915 	stw	r3,36(r4)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	xx_V[7] = ((xx_V[4] < xx_P[5]) ? 
    9588:	00800074 	movhi	r2,1
    958c:	10b82c04 	addi	r2,r2,-8016
    9590:	11400817 	ldw	r5,32(r2)
    9594:	11800917 	ldw	r6,36(r2)
    9598:	01000074 	movhi	r4,1
    959c:	21381e04 	addi	r4,r4,-8072
    95a0:	20800a17 	ldw	r2,40(r4)
    95a4:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		xx_P[5]
	:
    95a8:	2809883a 	mov	r4,r5
    95ac:	300b883a 	mov	r5,r6
    95b0:	100d883a 	mov	r6,r2
    95b4:	180f883a 	mov	r7,r3
    95b8:	000a27c0 	call	a27c <__ltdf2>
    95bc:	1000050e 	bge	r2,zero,95d4 <XXCalculateDynamic+0x5b4>
    95c0:	01000074 	movhi	r4,1
    95c4:	21381e04 	addi	r4,r4,-8072
    95c8:	20800a17 	ldw	r2,40(r4)
    95cc:	20c00b17 	ldw	r3,44(r4)
    95d0:	00001906 	br	9638 <XXCalculateDynamic+0x618>
		/* (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) */
		((xx_V[4] > xx_P[6]) ? 
    95d4:	00800074 	movhi	r2,1
    95d8:	10b82c04 	addi	r2,r2,-8016
    95dc:	11400817 	ldw	r5,32(r2)
    95e0:	11800917 	ldw	r6,36(r2)
    95e4:	01000074 	movhi	r4,1
    95e8:	21381e04 	addi	r4,r4,-8072
    95ec:	20800c17 	ldw	r2,48(r4)
    95f0:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			xx_P[6]
		:
    95f4:	2809883a 	mov	r4,r5
    95f8:	300b883a 	mov	r5,r6
    95fc:	100d883a 	mov	r6,r2
    9600:	180f883a 	mov	r7,r3
    9604:	000a1b40 	call	a1b4 <__gtdf2>
    9608:	0080050e 	bge	zero,r2,9620 <XXCalculateDynamic+0x600>
    960c:	00800074 	movhi	r2,1
    9610:	10b81e04 	addi	r2,r2,-8072
    9614:	11000c17 	ldw	r4,48(r2)
    9618:	11400d17 	ldw	r5,52(r2)
    961c:	00000406 	br	9630 <XXCalculateDynamic+0x610>
    9620:	00800074 	movhi	r2,1
    9624:	10b82c04 	addi	r2,r2,-8016
    9628:	11000817 	ldw	r4,32(r2)
    962c:	11400917 	ldw	r5,36(r2)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	xx_V[7] = ((xx_V[4] < xx_P[5]) ? 
		/* SignalLimiter2\minimum */
		xx_P[5]
	:
    9630:	2005883a 	mov	r2,r4
    9634:	2807883a 	mov	r3,r5

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	xx_V[4] = xx_V[1] + xx_V[2];

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	xx_V[7] = ((xx_V[4] < xx_P[5]) ? 
    9638:	01000074 	movhi	r4,1
    963c:	21382c04 	addi	r4,r4,-8016
    9640:	20800e15 	stw	r2,56(r4)
    9644:	20c00f15 	stw	r3,60(r4)
		)
	);


	/* increment the step counter */
	xx_steps++;
    9648:	d0a0e417 	ldw	r2,-31856(gp)
    964c:	10800044 	addi	r2,r2,1
    9650:	d0a0e415 	stw	r2,-31856(gp)
}
    9654:	e037883a 	mov	sp,fp
    9658:	dfc00717 	ldw	ra,28(sp)
    965c:	df000617 	ldw	fp,24(sp)
    9660:	dd400517 	ldw	r21,20(sp)
    9664:	dd000417 	ldw	r20,16(sp)
    9668:	dcc00317 	ldw	r19,12(sp)
    966c:	dc800217 	ldw	r18,8(sp)
    9670:	dc400117 	ldw	r17,4(sp)
    9674:	dc000017 	ldw	r16,0(sp)
    9678:	dec00804 	addi	sp,sp,32
    967c:	f800283a 	ret

00009680 <XXCalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void XXCalculateOutput (void)
{
    9680:	deffff04 	addi	sp,sp,-4
    9684:	df000015 	stw	fp,0(sp)
    9688:	d839883a 	mov	fp,sp
	/* out = SignalLimiter2\output; */
	xx_V[11] = xx_V[7];
    968c:	01000074 	movhi	r4,1
    9690:	21382c04 	addi	r4,r4,-8016
    9694:	20800e17 	ldw	r2,56(r4)
    9698:	20c00f17 	ldw	r3,60(r4)
    969c:	01000074 	movhi	r4,1
    96a0:	21382c04 	addi	r4,r4,-8016
    96a4:	20801615 	stw	r2,88(r4)
    96a8:	20c01715 	stw	r3,92(r4)

}
    96ac:	e037883a 	mov	sp,fp
    96b0:	df000017 	ldw	fp,0(sp)
    96b4:	dec00104 	addi	sp,sp,4
    96b8:	f800283a 	ret

000096bc <XXCalculateFinal>:
/* This function calculates the final equations of the model.
 * These equations are calculated after all the calculations
 * are performed
 */
void XXCalculateFinal (void)
{
    96bc:	deffff04 	addi	sp,sp,-4
    96c0:	df000015 	stw	fp,0(sp)
    96c4:	d839883a 	mov	fp,sp

}
    96c8:	e037883a 	mov	sp,fp
    96cc:	df000017 	ldw	fp,0(sp)
    96d0:	dec00104 	addi	sp,sp,4
    96d4:	f800283a 	ret

000096d8 <XXModelTerminate>:

/* this method is called after all calculations are performed */
void XXModelTerminate(void)
{
    96d8:	deffff04 	addi	sp,sp,-4
    96dc:	df000015 	stw	fp,0(sp)
    96e0:	d839883a 	mov	fp,sp
}
    96e4:	e037883a 	mov	sp,fp
    96e8:	df000017 	ldw	fp,0(sp)
    96ec:	dec00104 	addi	sp,sp,4
    96f0:	f800283a 	ret

000096f4 <XXCopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void XXCopyInputsToVariables (XXDouble *u)
{
    96f4:	defffe04 	addi	sp,sp,-8
    96f8:	df000115 	stw	fp,4(sp)
    96fc:	df000104 	addi	fp,sp,4
    9700:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	xx_V[8] = u[0];		/* corr */
    9704:	e13fff17 	ldw	r4,-4(fp)
    9708:	20800017 	ldw	r2,0(r4)
    970c:	20c00117 	ldw	r3,4(r4)
    9710:	01000074 	movhi	r4,1
    9714:	21382c04 	addi	r4,r4,-8016
    9718:	20801015 	stw	r2,64(r4)
    971c:	20c01115 	stw	r3,68(r4)
	xx_V[9] = u[1];		/* in */
    9720:	e13fff17 	ldw	r4,-4(fp)
    9724:	20800217 	ldw	r2,8(r4)
    9728:	20c00317 	ldw	r3,12(r4)
    972c:	01000074 	movhi	r4,1
    9730:	21382c04 	addi	r4,r4,-8016
    9734:	20801215 	stw	r2,72(r4)
    9738:	20c01315 	stw	r3,76(r4)
	xx_V[10] = u[2];		/* position */
    973c:	e13fff17 	ldw	r4,-4(fp)
    9740:	20800417 	ldw	r2,16(r4)
    9744:	20c00517 	ldw	r3,20(r4)
    9748:	01000074 	movhi	r4,1
    974c:	21382c04 	addi	r4,r4,-8016
    9750:	20801415 	stw	r2,80(r4)
    9754:	20c01515 	stw	r3,84(r4)

}
    9758:	e037883a 	mov	sp,fp
    975c:	df000017 	ldw	fp,0(sp)
    9760:	dec00104 	addi	sp,sp,4
    9764:	f800283a 	ret

00009768 <XXCopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void XXCopyVariablesToOutputs (XXDouble *y)
{
    9768:	defffe04 	addi	sp,sp,-8
    976c:	df000115 	stw	fp,4(sp)
    9770:	df000104 	addi	fp,sp,4
    9774:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	xx_V[11];		/* out */
    9778:	01000074 	movhi	r4,1
    977c:	21382c04 	addi	r4,r4,-8016
    9780:	20801617 	ldw	r2,88(r4)
    9784:	20c01717 	ldw	r3,92(r4)
    9788:	e13fff17 	ldw	r4,-4(fp)
    978c:	20800015 	stw	r2,0(r4)
    9790:	20c00115 	stw	r3,4(r4)

}
    9794:	e037883a 	mov	sp,fp
    9798:	df000017 	ldw	fp,0(sp)
    979c:	dec00104 	addi	sp,sp,4
    97a0:	f800283a 	ret

000097a4 <XXInitializeSubmodel>:

/* The initialization function for submodel */
void XXInitializeSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    97a4:	defffa04 	addi	sp,sp,-24
    97a8:	dfc00515 	stw	ra,20(sp)
    97ac:	df000415 	stw	fp,16(sp)
    97b0:	df000404 	addi	fp,sp,16
    97b4:	e13ffc15 	stw	r4,-16(fp)
    97b8:	e17ffd15 	stw	r5,-12(fp)
    97bc:	e1bffe15 	stw	r6,-8(fp)
    97c0:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	xx_initialize = XXTRUE;
    97c4:	00800074 	movhi	r2,1
    97c8:	10b52a04 	addi	r2,r2,-11096
    97cc:	00c00044 	movi	r3,1
    97d0:	10c00005 	stb	r3,0(r2)
	xx_steps = 0;
    97d4:	00800074 	movhi	r2,1
    97d8:	10b60904 	addi	r2,r2,-10204
    97dc:	10000015 	stw	zero,0(r2)
	XXModelInitialize ();
    97e0:	0008f980 	call	8f98 <XXModelInitialize>
	XXDiscreteInitialize ();
    97e4:	0008c8c0 	call	8c8c <XXDiscreteInitialize>

	/* Copy the inputs */
	xx_time = t;
    97e8:	00800074 	movhi	r2,1
    97ec:	10b60704 	addi	r2,r2,-10212
    97f0:	e0fffe17 	ldw	r3,-8(fp)
    97f4:	10c00015 	stw	r3,0(r2)
    97f8:	e0ffff17 	ldw	r3,-4(fp)
    97fc:	10c00115 	stw	r3,4(r2)
	XXCopyInputsToVariables (u);
    9800:	e13ffc17 	ldw	r4,-16(fp)
    9804:	00096f40 	call	96f4 <XXCopyInputsToVariables>

	/* Calculate the model for the first time */
	XXCalculateInitial ();
    9808:	0008fcc0 	call	8fcc <XXCalculateInitial>
	XXCalculateStatic ();
    980c:	0008fe80 	call	8fe8 <XXCalculateStatic>
	XXCalculateInput ();
    9810:	00090040 	call	9004 <XXCalculateInput>
	XXCalculateDynamic ();
    9814:	00090200 	call	9020 <XXCalculateDynamic>
	XXCalculateOutput ();
    9818:	00096800 	call	9680 <XXCalculateOutput>

	/* Set the outputs */
	XXCopyVariablesToOutputs (y);
    981c:	e13ffd17 	ldw	r4,-12(fp)
    9820:	00097680 	call	9768 <XXCopyVariablesToOutputs>

	/* End of initialization phase */
	xx_initialize = XXFALSE;
    9824:	00800074 	movhi	r2,1
    9828:	10b52a04 	addi	r2,r2,-11096
    982c:	10000005 	stb	zero,0(r2)
}
    9830:	e037883a 	mov	sp,fp
    9834:	dfc00117 	ldw	ra,4(sp)
    9838:	df000017 	ldw	fp,0(sp)
    983c:	dec00204 	addi	sp,sp,8
    9840:	f800283a 	ret

00009844 <XXCalculateSubmodel>:

/* The function that calculates the submodel */
void XXCalculateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    9844:	defffa04 	addi	sp,sp,-24
    9848:	dfc00515 	stw	ra,20(sp)
    984c:	df000415 	stw	fp,16(sp)
    9850:	df000404 	addi	fp,sp,16
    9854:	e13ffc15 	stw	r4,-16(fp)
    9858:	e17ffd15 	stw	r5,-12(fp)
    985c:	e1bffe15 	stw	r6,-8(fp)
    9860:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	xx_time = t;
    9864:	00800074 	movhi	r2,1
    9868:	10b60704 	addi	r2,r2,-10212
    986c:	e0fffe17 	ldw	r3,-8(fp)
    9870:	10c00015 	stw	r3,0(r2)
    9874:	e0ffff17 	ldw	r3,-4(fp)
    9878:	10c00115 	stw	r3,4(r2)
	XXCopyInputsToVariables (u);
    987c:	e13ffc17 	ldw	r4,-16(fp)
    9880:	00096f40 	call	96f4 <XXCopyInputsToVariables>

	/* Calculate the model */
	XXCalculateInput ();
    9884:	00090040 	call	9004 <XXCalculateInput>
	XXDiscreteStep ();
    9888:	0008cd40 	call	8cd4 <XXDiscreteStep>
	XXCalculateOutput ();
    988c:	00096800 	call	9680 <XXCalculateOutput>

	/* Copy the outputs */
	XXCopyVariablesToOutputs (y);
    9890:	e13ffd17 	ldw	r4,-12(fp)
    9894:	00097680 	call	9768 <XXCopyVariablesToOutputs>
}
    9898:	e037883a 	mov	sp,fp
    989c:	dfc00117 	ldw	ra,4(sp)
    98a0:	df000017 	ldw	fp,0(sp)
    98a4:	dec00204 	addi	sp,sp,8
    98a8:	f800283a 	ret

000098ac <XXTerminateSubmodel>:

/* The termination function for submodel */
void XXTerminateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    98ac:	defffa04 	addi	sp,sp,-24
    98b0:	dfc00515 	stw	ra,20(sp)
    98b4:	df000415 	stw	fp,16(sp)
    98b8:	df000404 	addi	fp,sp,16
    98bc:	e13ffc15 	stw	r4,-16(fp)
    98c0:	e17ffd15 	stw	r5,-12(fp)
    98c4:	e1bffe15 	stw	r6,-8(fp)
    98c8:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	xx_time = t;
    98cc:	00800074 	movhi	r2,1
    98d0:	10b60704 	addi	r2,r2,-10212
    98d4:	e0fffe17 	ldw	r3,-8(fp)
    98d8:	10c00015 	stw	r3,0(r2)
    98dc:	e0ffff17 	ldw	r3,-4(fp)
    98e0:	10c00115 	stw	r3,4(r2)
	XXCopyInputsToVariables (u);
    98e4:	e13ffc17 	ldw	r4,-16(fp)
    98e8:	00096f40 	call	96f4 <XXCopyInputsToVariables>

	/* Calculate the final model equations */
	XXCalculateFinal ();
    98ec:	00096bc0 	call	96bc <XXCalculateFinal>

	/* Set the outputs */
	XXCopyVariablesToOutputs (y);
    98f0:	e13ffd17 	ldw	r4,-12(fp)
    98f4:	00097680 	call	9768 <XXCopyVariablesToOutputs>

	/* and terminate the model itself (releasing memory) */
	XXModelTerminate ();
    98f8:	00096d80 	call	96d8 <XXModelTerminate>
	XXDiscreteTerminate ();
    98fc:	0008cb80 	call	8cb8 <XXDiscreteTerminate>
}
    9900:	e037883a 	mov	sp,fp
    9904:	dfc00117 	ldw	ra,4(sp)
    9908:	df000017 	ldw	fp,0(sp)
    990c:	dec00204 	addi	sp,sp,8
    9910:	f800283a 	ret

00009914 <_fpadd_parts>:
    9914:	2005883a 	mov	r2,r4
    9918:	21000017 	ldw	r4,0(r4)
    991c:	01c00044 	movi	r7,1
    9920:	3900622e 	bgeu	r7,r4,9aac <_fpadd_parts+0x198>
    9924:	28c00017 	ldw	r3,0(r5)
    9928:	38c05f2e 	bgeu	r7,r3,9aa8 <_fpadd_parts+0x194>
    992c:	01c00104 	movi	r7,4
    9930:	21c0c626 	beq	r4,r7,9c4c <_fpadd_parts+0x338>
    9934:	19c05c26 	beq	r3,r7,9aa8 <_fpadd_parts+0x194>
    9938:	01c00084 	movi	r7,2
    993c:	19c06b26 	beq	r3,r7,9aec <_fpadd_parts+0x1d8>
    9940:	21c05926 	beq	r4,r7,9aa8 <_fpadd_parts+0x194>
    9944:	11c00217 	ldw	r7,8(r2)
    9948:	2ac00217 	ldw	r11,8(r5)
    994c:	13000317 	ldw	r12,12(r2)
    9950:	13400417 	ldw	r13,16(r2)
    9954:	3ac9c83a 	sub	r4,r7,r11
    9958:	2a000317 	ldw	r8,12(r5)
    995c:	2a400417 	ldw	r9,16(r5)
    9960:	2015883a 	mov	r10,r4
    9964:	20007516 	blt	r4,zero,9b3c <_fpadd_parts+0x228>
    9968:	00c00fc4 	movi	r3,63
    996c:	1a805016 	blt	r3,r10,9ab0 <_fpadd_parts+0x19c>
    9970:	0100870e 	bge	zero,r4,9b90 <_fpadd_parts+0x27c>
    9974:	50fff804 	addi	r3,r10,-32
    9978:	18009916 	blt	r3,zero,9be0 <_fpadd_parts+0x2cc>
    997c:	48d6d83a 	srl	r11,r9,r3
    9980:	001d883a 	mov	r14,zero
    9984:	18009e16 	blt	r3,zero,9c00 <_fpadd_parts+0x2ec>
    9988:	01000044 	movi	r4,1
    998c:	20c6983a 	sll	r3,r4,r3
    9990:	0015883a 	mov	r10,zero
    9994:	513fffc4 	addi	r4,r10,-1
    9998:	2295403a 	cmpgeu	r10,r4,r10
    999c:	1a87c83a 	sub	r3,r3,r10
    99a0:	1a52703a 	and	r9,r3,r9
    99a4:	2210703a 	and	r8,r4,r8
    99a8:	4250b03a 	or	r8,r8,r9
    99ac:	4010c03a 	cmpne	r8,r8,zero
    99b0:	42d0b03a 	or	r8,r8,r11
    99b4:	7013883a 	mov	r9,r14
    99b8:	11000117 	ldw	r4,4(r2)
    99bc:	28800117 	ldw	r2,4(r5)
    99c0:	20804126 	beq	r4,r2,9ac8 <_fpadd_parts+0x1b4>
    99c4:	20006326 	beq	r4,zero,9b54 <_fpadd_parts+0x240>
    99c8:	4305c83a 	sub	r2,r8,r12
    99cc:	4091803a 	cmpltu	r8,r8,r2
    99d0:	4b47c83a 	sub	r3,r9,r13
    99d4:	1a07c83a 	sub	r3,r3,r8
    99d8:	18006316 	blt	r3,zero,9b68 <_fpadd_parts+0x254>
    99dc:	30000115 	stw	zero,4(r6)
    99e0:	31c00215 	stw	r7,8(r6)
    99e4:	30800315 	stw	r2,12(r6)
    99e8:	30c00415 	stw	r3,16(r6)
    99ec:	11ffffc4 	addi	r7,r2,-1
    99f0:	388b403a 	cmpgeu	r5,r7,r2
    99f4:	194bc83a 	sub	r5,r3,r5
    99f8:	01040034 	movhi	r4,4096
    99fc:	213fffc4 	addi	r4,r4,-1
    9a00:	21401736 	bltu	r4,r5,9a60 <_fpadd_parts+0x14c>
    9a04:	29008226 	beq	r5,r4,9c10 <_fpadd_parts+0x2fc>
    9a08:	31400217 	ldw	r5,8(r6)
    9a0c:	02840034 	movhi	r10,4096
    9a10:	52bfffc4 	addi	r10,r10,-1
    9a14:	033fff84 	movi	r12,-2
    9a18:	297fffc4 	addi	r5,r5,-1
    9a1c:	00000106 	br	9a24 <_fpadd_parts+0x110>
    9a20:	3a804a26 	beq	r7,r10,9b4c <_fpadd_parts+0x238>
    9a24:	1089883a 	add	r4,r2,r2
    9a28:	2091803a 	cmpltu	r8,r4,r2
    9a2c:	18c7883a 	add	r3,r3,r3
    9a30:	227fffc4 	addi	r9,r4,-1
    9a34:	40d1883a 	add	r8,r8,r3
    9a38:	490f403a 	cmpgeu	r7,r9,r4
    9a3c:	41cfc83a 	sub	r7,r8,r7
    9a40:	2817883a 	mov	r11,r5
    9a44:	2005883a 	mov	r2,r4
    9a48:	4007883a 	mov	r3,r8
    9a4c:	297fffc4 	addi	r5,r5,-1
    9a50:	51fff32e 	bgeu	r10,r7,9a20 <_fpadd_parts+0x10c>
    9a54:	31000315 	stw	r4,12(r6)
    9a58:	32000415 	stw	r8,16(r6)
    9a5c:	32c00215 	stw	r11,8(r6)
    9a60:	010000c4 	movi	r4,3
    9a64:	31000015 	stw	r4,0(r6)
    9a68:	01080034 	movhi	r4,8192
    9a6c:	213fffc4 	addi	r4,r4,-1
    9a70:	20c00b2e 	bgeu	r4,r3,9aa0 <_fpadd_parts+0x18c>
    9a74:	180e97fa 	slli	r7,r3,31
    9a78:	1008d07a 	srli	r4,r2,1
    9a7c:	31400217 	ldw	r5,8(r6)
    9a80:	1806d07a 	srli	r3,r3,1
    9a84:	1080004c 	andi	r2,r2,1
    9a88:	3908b03a 	or	r4,r7,r4
    9a8c:	1108b03a 	or	r4,r2,r4
    9a90:	29400044 	addi	r5,r5,1
    9a94:	31000315 	stw	r4,12(r6)
    9a98:	30c00415 	stw	r3,16(r6)
    9a9c:	31400215 	stw	r5,8(r6)
    9aa0:	3005883a 	mov	r2,r6
    9aa4:	f800283a 	ret
    9aa8:	2805883a 	mov	r2,r5
    9aac:	f800283a 	ret
    9ab0:	59c01e0e 	bge	r11,r7,9b2c <_fpadd_parts+0x218>
    9ab4:	11000117 	ldw	r4,4(r2)
    9ab8:	28800117 	ldw	r2,4(r5)
    9abc:	0011883a 	mov	r8,zero
    9ac0:	0013883a 	mov	r9,zero
    9ac4:	20bfbf1e 	bne	r4,r2,99c4 <_fpadd_parts+0xb0>
    9ac8:	4305883a 	add	r2,r8,r12
    9acc:	1207803a 	cmpltu	r3,r2,r8
    9ad0:	4b53883a 	add	r9,r9,r13
    9ad4:	1a47883a 	add	r3,r3,r9
    9ad8:	31000115 	stw	r4,4(r6)
    9adc:	31c00215 	stw	r7,8(r6)
    9ae0:	30800315 	stw	r2,12(r6)
    9ae4:	30c00415 	stw	r3,16(r6)
    9ae8:	003fdd06 	br	9a60 <_fpadd_parts+0x14c>
    9aec:	20ffef1e 	bne	r4,r3,9aac <_fpadd_parts+0x198>
    9af0:	31000015 	stw	r4,0(r6)
    9af4:	10c00117 	ldw	r3,4(r2)
    9af8:	30c00115 	stw	r3,4(r6)
    9afc:	10c00217 	ldw	r3,8(r2)
    9b00:	11000117 	ldw	r4,4(r2)
    9b04:	29400117 	ldw	r5,4(r5)
    9b08:	30c00215 	stw	r3,8(r6)
    9b0c:	10c00317 	ldw	r3,12(r2)
    9b10:	2908703a 	and	r4,r5,r4
    9b14:	30c00315 	stw	r3,12(r6)
    9b18:	10c00417 	ldw	r3,16(r2)
    9b1c:	31000115 	stw	r4,4(r6)
    9b20:	3005883a 	mov	r2,r6
    9b24:	30c00415 	stw	r3,16(r6)
    9b28:	f800283a 	ret
    9b2c:	580f883a 	mov	r7,r11
    9b30:	0019883a 	mov	r12,zero
    9b34:	001b883a 	mov	r13,zero
    9b38:	003f9f06 	br	99b8 <_fpadd_parts+0xa4>
    9b3c:	0115c83a 	sub	r10,zero,r4
    9b40:	00c00fc4 	movi	r3,63
    9b44:	1abfda16 	blt	r3,r10,9ab0 <_fpadd_parts+0x19c>
    9b48:	003f8906 	br	9970 <_fpadd_parts+0x5c>
    9b4c:	627fb52e 	bgeu	r12,r9,9a24 <_fpadd_parts+0x110>
    9b50:	003fc006 	br	9a54 <_fpadd_parts+0x140>
    9b54:	6205c83a 	sub	r2,r12,r8
    9b58:	6099803a 	cmpltu	r12,r12,r2
    9b5c:	6a47c83a 	sub	r3,r13,r9
    9b60:	1b07c83a 	sub	r3,r3,r12
    9b64:	183f9d0e 	bge	r3,zero,99dc <_fpadd_parts+0xc8>
    9b68:	0085c83a 	sub	r2,zero,r2
    9b6c:	1008c03a 	cmpne	r4,r2,zero
    9b70:	00c7c83a 	sub	r3,zero,r3
    9b74:	1907c83a 	sub	r3,r3,r4
    9b78:	01000044 	movi	r4,1
    9b7c:	31000115 	stw	r4,4(r6)
    9b80:	31c00215 	stw	r7,8(r6)
    9b84:	30800315 	stw	r2,12(r6)
    9b88:	30c00415 	stw	r3,16(r6)
    9b8c:	003f9706 	br	99ec <_fpadd_parts+0xd8>
    9b90:	203f8926 	beq	r4,zero,99b8 <_fpadd_parts+0xa4>
    9b94:	50fff804 	addi	r3,r10,-32
    9b98:	3a8f883a 	add	r7,r7,r10
    9b9c:	18002316 	blt	r3,zero,9c2c <_fpadd_parts+0x318>
    9ba0:	68d6d83a 	srl	r11,r13,r3
    9ba4:	001d883a 	mov	r14,zero
    9ba8:	18001c16 	blt	r3,zero,9c1c <_fpadd_parts+0x308>
    9bac:	01000044 	movi	r4,1
    9bb0:	20c6983a 	sll	r3,r4,r3
    9bb4:	0015883a 	mov	r10,zero
    9bb8:	513fffc4 	addi	r4,r10,-1
    9bbc:	2295403a 	cmpgeu	r10,r4,r10
    9bc0:	1a87c83a 	sub	r3,r3,r10
    9bc4:	1b5a703a 	and	r13,r3,r13
    9bc8:	2318703a 	and	r12,r4,r12
    9bcc:	6358b03a 	or	r12,r12,r13
    9bd0:	6018c03a 	cmpne	r12,r12,zero
    9bd4:	62d8b03a 	or	r12,r12,r11
    9bd8:	701b883a 	mov	r13,r14
    9bdc:	003f7606 	br	99b8 <_fpadd_parts+0xa4>
    9be0:	4808907a 	slli	r4,r9,1
    9be4:	02c007c4 	movi	r11,31
    9be8:	5a97c83a 	sub	r11,r11,r10
    9bec:	22c8983a 	sll	r4,r4,r11
    9bf0:	4296d83a 	srl	r11,r8,r10
    9bf4:	4a9cd83a 	srl	r14,r9,r10
    9bf8:	22d6b03a 	or	r11,r4,r11
    9bfc:	003f6106 	br	9984 <_fpadd_parts+0x70>
    9c00:	00c00044 	movi	r3,1
    9c04:	1a94983a 	sll	r10,r3,r10
    9c08:	0007883a 	mov	r3,zero
    9c0c:	003f6106 	br	9994 <_fpadd_parts+0x80>
    9c10:	013fff84 	movi	r4,-2
    9c14:	21ff7c2e 	bgeu	r4,r7,9a08 <_fpadd_parts+0xf4>
    9c18:	003f9106 	br	9a60 <_fpadd_parts+0x14c>
    9c1c:	00c00044 	movi	r3,1
    9c20:	1a94983a 	sll	r10,r3,r10
    9c24:	0007883a 	mov	r3,zero
    9c28:	003fe306 	br	9bb8 <_fpadd_parts+0x2a4>
    9c2c:	6816907a 	slli	r11,r13,1
    9c30:	010007c4 	movi	r4,31
    9c34:	2289c83a 	sub	r4,r4,r10
    9c38:	5908983a 	sll	r4,r11,r4
    9c3c:	6296d83a 	srl	r11,r12,r10
    9c40:	6a9cd83a 	srl	r14,r13,r10
    9c44:	22d6b03a 	or	r11,r4,r11
    9c48:	003fd706 	br	9ba8 <_fpadd_parts+0x294>
    9c4c:	193f971e 	bne	r3,r4,9aac <_fpadd_parts+0x198>
    9c50:	11000117 	ldw	r4,4(r2)
    9c54:	28c00117 	ldw	r3,4(r5)
    9c58:	20ff9426 	beq	r4,r3,9aac <_fpadd_parts+0x198>
    9c5c:	00800074 	movhi	r2,1
    9c60:	10b41904 	addi	r2,r2,-12188
    9c64:	f800283a 	ret

00009c68 <__adddf3>:
    9c68:	deffec04 	addi	sp,sp,-80
    9c6c:	d9001115 	stw	r4,68(sp)
    9c70:	d9401215 	stw	r5,72(sp)
    9c74:	d9001104 	addi	r4,sp,68
    9c78:	d9400a04 	addi	r5,sp,40
    9c7c:	dfc01315 	stw	ra,76(sp)
    9c80:	d9c01015 	stw	r7,64(sp)
    9c84:	d9800f15 	stw	r6,60(sp)
    9c88:	000a9b80 	call	a9b8 <__unpack_d>
    9c8c:	d9000f04 	addi	r4,sp,60
    9c90:	d9400504 	addi	r5,sp,20
    9c94:	000a9b80 	call	a9b8 <__unpack_d>
    9c98:	d9000a04 	addi	r4,sp,40
    9c9c:	d9400504 	addi	r5,sp,20
    9ca0:	d80d883a 	mov	r6,sp
    9ca4:	00099140 	call	9914 <_fpadd_parts>
    9ca8:	1009883a 	mov	r4,r2
    9cac:	000a7940 	call	a794 <__pack_d>
    9cb0:	dfc01317 	ldw	ra,76(sp)
    9cb4:	dec01404 	addi	sp,sp,80
    9cb8:	f800283a 	ret

00009cbc <__subdf3>:
    9cbc:	deffec04 	addi	sp,sp,-80
    9cc0:	d9001115 	stw	r4,68(sp)
    9cc4:	d9401215 	stw	r5,72(sp)
    9cc8:	d9001104 	addi	r4,sp,68
    9ccc:	d9400a04 	addi	r5,sp,40
    9cd0:	dfc01315 	stw	ra,76(sp)
    9cd4:	d9c01015 	stw	r7,64(sp)
    9cd8:	d9800f15 	stw	r6,60(sp)
    9cdc:	000a9b80 	call	a9b8 <__unpack_d>
    9ce0:	d9000f04 	addi	r4,sp,60
    9ce4:	d9400504 	addi	r5,sp,20
    9ce8:	000a9b80 	call	a9b8 <__unpack_d>
    9cec:	d8800617 	ldw	r2,24(sp)
    9cf0:	d9000a04 	addi	r4,sp,40
    9cf4:	d9400504 	addi	r5,sp,20
    9cf8:	d80d883a 	mov	r6,sp
    9cfc:	1080005c 	xori	r2,r2,1
    9d00:	d8800615 	stw	r2,24(sp)
    9d04:	00099140 	call	9914 <_fpadd_parts>
    9d08:	1009883a 	mov	r4,r2
    9d0c:	000a7940 	call	a794 <__pack_d>
    9d10:	dfc01317 	ldw	ra,76(sp)
    9d14:	dec01404 	addi	sp,sp,80
    9d18:	f800283a 	ret

00009d1c <__muldf3>:
    9d1c:	deffe404 	addi	sp,sp,-112
    9d20:	d9001115 	stw	r4,68(sp)
    9d24:	d9401215 	stw	r5,72(sp)
    9d28:	d9001104 	addi	r4,sp,68
    9d2c:	d9400a04 	addi	r5,sp,40
    9d30:	dfc01b15 	stw	ra,108(sp)
    9d34:	d9800f15 	stw	r6,60(sp)
    9d38:	d9c01015 	stw	r7,64(sp)
    9d3c:	ddc01a15 	stw	r23,104(sp)
    9d40:	dd801915 	stw	r22,100(sp)
    9d44:	dd401815 	stw	r21,96(sp)
    9d48:	dd001715 	stw	r20,92(sp)
    9d4c:	dcc01615 	stw	r19,88(sp)
    9d50:	dc801515 	stw	r18,84(sp)
    9d54:	dc401415 	stw	r17,80(sp)
    9d58:	dc001315 	stw	r16,76(sp)
    9d5c:	000a9b80 	call	a9b8 <__unpack_d>
    9d60:	d9000f04 	addi	r4,sp,60
    9d64:	d9400504 	addi	r5,sp,20
    9d68:	000a9b80 	call	a9b8 <__unpack_d>
    9d6c:	d8c00a17 	ldw	r3,40(sp)
    9d70:	00800044 	movi	r2,1
    9d74:	10c01136 	bltu	r2,r3,9dbc <__muldf3+0xa0>
    9d78:	d8c00b17 	ldw	r3,44(sp)
    9d7c:	d8800617 	ldw	r2,24(sp)
    9d80:	d9000a04 	addi	r4,sp,40
    9d84:	1884c03a 	cmpne	r2,r3,r2
    9d88:	d8800b15 	stw	r2,44(sp)
    9d8c:	000a7940 	call	a794 <__pack_d>
    9d90:	dfc01b17 	ldw	ra,108(sp)
    9d94:	ddc01a17 	ldw	r23,104(sp)
    9d98:	dd801917 	ldw	r22,100(sp)
    9d9c:	dd401817 	ldw	r21,96(sp)
    9da0:	dd001717 	ldw	r20,92(sp)
    9da4:	dcc01617 	ldw	r19,88(sp)
    9da8:	dc801517 	ldw	r18,84(sp)
    9dac:	dc401417 	ldw	r17,80(sp)
    9db0:	dc001317 	ldw	r16,76(sp)
    9db4:	dec01c04 	addi	sp,sp,112
    9db8:	f800283a 	ret
    9dbc:	d9000517 	ldw	r4,20(sp)
    9dc0:	11000636 	bltu	r2,r4,9ddc <__muldf3+0xc0>
    9dc4:	d8800617 	ldw	r2,24(sp)
    9dc8:	d8c00b17 	ldw	r3,44(sp)
    9dcc:	d9000504 	addi	r4,sp,20
    9dd0:	1884c03a 	cmpne	r2,r3,r2
    9dd4:	d8800615 	stw	r2,24(sp)
    9dd8:	003fec06 	br	9d8c <__muldf3+0x70>
    9ddc:	00800104 	movi	r2,4
    9de0:	1880051e 	bne	r3,r2,9df8 <__muldf3+0xdc>
    9de4:	00800084 	movi	r2,2
    9de8:	20bfe31e 	bne	r4,r2,9d78 <__muldf3+0x5c>
    9dec:	01000074 	movhi	r4,1
    9df0:	21341904 	addi	r4,r4,-12188
    9df4:	003fe506 	br	9d8c <__muldf3+0x70>
    9df8:	2080031e 	bne	r4,r2,9e08 <__muldf3+0xec>
    9dfc:	00800084 	movi	r2,2
    9e00:	18bffa26 	beq	r3,r2,9dec <__muldf3+0xd0>
    9e04:	003fef06 	br	9dc4 <__muldf3+0xa8>
    9e08:	00800084 	movi	r2,2
    9e0c:	18bfda26 	beq	r3,r2,9d78 <__muldf3+0x5c>
    9e10:	20bfec26 	beq	r4,r2,9dc4 <__muldf3+0xa8>
    9e14:	dc000d17 	ldw	r16,52(sp)
    9e18:	dd000817 	ldw	r20,32(sp)
    9e1c:	dc800917 	ldw	r18,36(sp)
    9e20:	8009883a 	mov	r4,r16
    9e24:	000b883a 	mov	r5,zero
    9e28:	a00d883a 	mov	r6,r20
    9e2c:	000f883a 	mov	r7,zero
    9e30:	000a5d80 	call	a5d8 <__muldi3>
    9e34:	dc400e17 	ldw	r17,56(sp)
    9e38:	9009883a 	mov	r4,r18
    9e3c:	800d883a 	mov	r6,r16
    9e40:	000b883a 	mov	r5,zero
    9e44:	000f883a 	mov	r7,zero
    9e48:	102f883a 	mov	r23,r2
    9e4c:	1827883a 	mov	r19,r3
    9e50:	000a5d80 	call	a5d8 <__muldi3>
    9e54:	900d883a 	mov	r6,r18
    9e58:	8809883a 	mov	r4,r17
    9e5c:	000b883a 	mov	r5,zero
    9e60:	000f883a 	mov	r7,zero
    9e64:	102b883a 	mov	r21,r2
    9e68:	1821883a 	mov	r16,r3
    9e6c:	000a5d80 	call	a5d8 <__muldi3>
    9e70:	8809883a 	mov	r4,r17
    9e74:	000b883a 	mov	r5,zero
    9e78:	a00d883a 	mov	r6,r20
    9e7c:	000f883a 	mov	r7,zero
    9e80:	102d883a 	mov	r22,r2
    9e84:	1825883a 	mov	r18,r3
    9e88:	000a5d80 	call	a5d8 <__muldi3>
    9e8c:	154b883a 	add	r5,r2,r21
    9e90:	2889803a 	cmpltu	r4,r5,r2
    9e94:	1c07883a 	add	r3,r3,r16
    9e98:	20c9883a 	add	r4,r4,r3
    9e9c:	24004b36 	bltu	r4,r16,9fcc <__muldf3+0x2b0>
    9ea0:	8100011e 	bne	r16,r4,9ea8 <__muldf3+0x18c>
    9ea4:	2d404936 	bltu	r5,r21,9fcc <__muldf3+0x2b0>
    9ea8:	0011883a 	mov	r8,zero
    9eac:	0007883a 	mov	r3,zero
    9eb0:	2ccb883a 	add	r5,r5,r19
    9eb4:	b80d883a 	mov	r6,r23
    9eb8:	2cc0012e 	bgeu	r5,r19,9ec0 <__muldf3+0x1a4>
    9ebc:	02000044 	movi	r8,1
    9ec0:	258f883a 	add	r7,r4,r22
    9ec4:	3909803a 	cmpltu	r4,r7,r4
    9ec8:	da400c17 	ldw	r9,48(sp)
    9ecc:	2489883a 	add	r4,r4,r18
    9ed0:	d8800717 	ldw	r2,28(sp)
    9ed4:	20c9883a 	add	r4,r4,r3
    9ed8:	da800b17 	ldw	r10,44(sp)
    9edc:	d8c00617 	ldw	r3,24(sp)
    9ee0:	3a11883a 	add	r8,r7,r8
    9ee4:	4885883a 	add	r2,r9,r2
    9ee8:	50c6c03a 	cmpne	r3,r10,r3
    9eec:	41cf803a 	cmpltu	r7,r8,r7
    9ef0:	12400104 	addi	r9,r2,4
    9ef4:	d8c00115 	stw	r3,4(sp)
    9ef8:	3909883a 	add	r4,r7,r4
    9efc:	da400215 	stw	r9,8(sp)
    9f00:	03480034 	movhi	r13,8192
    9f04:	6b7fffc4 	addi	r13,r13,-1
    9f08:	4007883a 	mov	r3,r8
    9f0c:	6900102e 	bgeu	r13,r4,9f50 <__muldf3+0x234>
    9f10:	10800144 	addi	r2,r2,5
    9f14:	180ed07a 	srli	r7,r3,1
    9f18:	18c0004c 	andi	r3,r3,1
    9f1c:	201097fa 	slli	r8,r4,31
    9f20:	281697fa 	slli	r11,r5,31
    9f24:	2008d07a 	srli	r4,r4,1
    9f28:	3014d07a 	srli	r10,r6,1
    9f2c:	2812d07a 	srli	r9,r5,1
    9f30:	1019883a 	mov	r12,r2
    9f34:	18000226 	beq	r3,zero,9f40 <__muldf3+0x224>
    9f38:	5a8cb03a 	or	r6,r11,r10
    9f3c:	49600034 	orhi	r5,r9,32768
    9f40:	41c6b03a 	or	r3,r8,r7
    9f44:	10800044 	addi	r2,r2,1
    9f48:	693ff236 	bltu	r13,r4,9f14 <__muldf3+0x1f8>
    9f4c:	db000215 	stw	r12,8(sp)
    9f50:	03440034 	movhi	r13,4096
    9f54:	6b7fffc4 	addi	r13,r13,-1
    9f58:	69001336 	bltu	r13,r4,9fa8 <__muldf3+0x28c>
    9f5c:	d8800217 	ldw	r2,8(sp)
    9f60:	10bfffc4 	addi	r2,r2,-1
    9f64:	18d3883a 	add	r9,r3,r3
    9f68:	48c7803a 	cmpltu	r3,r9,r3
    9f6c:	2109883a 	add	r4,r4,r4
    9f70:	190f883a 	add	r7,r3,r4
    9f74:	3191883a 	add	r8,r6,r6
    9f78:	4197803a 	cmpltu	r11,r8,r6
    9f7c:	2955883a 	add	r10,r5,r5
    9f80:	1019883a 	mov	r12,r2
    9f84:	4807883a 	mov	r3,r9
    9f88:	3809883a 	mov	r4,r7
    9f8c:	2800010e 	bge	r5,zero,9f94 <__muldf3+0x278>
    9f90:	48c00054 	ori	r3,r9,1
    9f94:	400d883a 	mov	r6,r8
    9f98:	5a8b883a 	add	r5,r11,r10
    9f9c:	10bfffc4 	addi	r2,r2,-1
    9fa0:	69fff02e 	bgeu	r13,r7,9f64 <__muldf3+0x248>
    9fa4:	db000215 	stw	r12,8(sp)
    9fa8:	18803fcc 	andi	r2,r3,255
    9fac:	01c02004 	movi	r7,128
    9fb0:	11c00926 	beq	r2,r7,9fd8 <__muldf3+0x2bc>
    9fb4:	008000c4 	movi	r2,3
    9fb8:	d9000415 	stw	r4,16(sp)
    9fbc:	d8c00315 	stw	r3,12(sp)
    9fc0:	d8800015 	stw	r2,0(sp)
    9fc4:	d809883a 	mov	r4,sp
    9fc8:	003f7006 	br	9d8c <__muldf3+0x70>
    9fcc:	0011883a 	mov	r8,zero
    9fd0:	00c00044 	movi	r3,1
    9fd4:	003fb606 	br	9eb0 <__muldf3+0x194>
    9fd8:	19c0400c 	andi	r7,r3,256
    9fdc:	383ff51e 	bne	r7,zero,9fb4 <__muldf3+0x298>
    9fe0:	314ab03a 	or	r5,r6,r5
    9fe4:	283ff326 	beq	r5,zero,9fb4 <__muldf3+0x298>
    9fe8:	1885883a 	add	r2,r3,r2
    9fec:	10cb803a 	cmpltu	r5,r2,r3
    9ff0:	00ffc004 	movi	r3,-256
    9ff4:	10c6703a 	and	r3,r2,r3
    9ff8:	2909883a 	add	r4,r5,r4
    9ffc:	003fed06 	br	9fb4 <__muldf3+0x298>

0000a000 <__divdf3>:
    a000:	defff104 	addi	sp,sp,-60
    a004:	d9000c15 	stw	r4,48(sp)
    a008:	d9400d15 	stw	r5,52(sp)
    a00c:	d9000c04 	addi	r4,sp,48
    a010:	d9400504 	addi	r5,sp,20
    a014:	dfc00e15 	stw	ra,56(sp)
    a018:	d9800a15 	stw	r6,40(sp)
    a01c:	d9c00b15 	stw	r7,44(sp)
    a020:	000a9b80 	call	a9b8 <__unpack_d>
    a024:	d9000a04 	addi	r4,sp,40
    a028:	d80b883a 	mov	r5,sp
    a02c:	000a9b80 	call	a9b8 <__unpack_d>
    a030:	d8c00517 	ldw	r3,20(sp)
    a034:	00800044 	movi	r2,1
    a038:	10c00536 	bltu	r2,r3,a050 <__divdf3+0x50>
    a03c:	d9000504 	addi	r4,sp,20
    a040:	000a7940 	call	a794 <__pack_d>
    a044:	dfc00e17 	ldw	ra,56(sp)
    a048:	dec00f04 	addi	sp,sp,60
    a04c:	f800283a 	ret
    a050:	d9000017 	ldw	r4,0(sp)
    a054:	11000536 	bltu	r2,r4,a06c <__divdf3+0x6c>
    a058:	d809883a 	mov	r4,sp
    a05c:	000a7940 	call	a794 <__pack_d>
    a060:	dfc00e17 	ldw	ra,56(sp)
    a064:	dec00f04 	addi	sp,sp,60
    a068:	f800283a 	ret
    a06c:	d9800617 	ldw	r6,24(sp)
    a070:	d9400117 	ldw	r5,4(sp)
    a074:	00800104 	movi	r2,4
    a078:	314af03a 	xor	r5,r6,r5
    a07c:	d9400615 	stw	r5,24(sp)
    a080:	18800226 	beq	r3,r2,a08c <__divdf3+0x8c>
    a084:	01400084 	movi	r5,2
    a088:	1940041e 	bne	r3,r5,a09c <__divdf3+0x9c>
    a08c:	193feb1e 	bne	r3,r4,a03c <__divdf3+0x3c>
    a090:	01000074 	movhi	r4,1
    a094:	21341904 	addi	r4,r4,-12188
    a098:	003fe906 	br	a040 <__divdf3+0x40>
    a09c:	20803326 	beq	r4,r2,a16c <__divdf3+0x16c>
    a0a0:	21403726 	beq	r4,r5,a180 <__divdf3+0x180>
    a0a4:	d8800217 	ldw	r2,8(sp)
    a0a8:	d9000717 	ldw	r4,28(sp)
    a0ac:	d8c00917 	ldw	r3,36(sp)
    a0b0:	da000417 	ldw	r8,16(sp)
    a0b4:	2089c83a 	sub	r4,r4,r2
    a0b8:	d9000715 	stw	r4,28(sp)
    a0bc:	d8800817 	ldw	r2,32(sp)
    a0c0:	dbc00317 	ldw	r15,12(sp)
    a0c4:	1a000236 	bltu	r3,r8,a0d0 <__divdf3+0xd0>
    a0c8:	40c0081e 	bne	r8,r3,a0ec <__divdf3+0xec>
    a0cc:	13c0072e 	bgeu	r2,r15,a0ec <__divdf3+0xec>
    a0d0:	108b883a 	add	r5,r2,r2
    a0d4:	288d803a 	cmpltu	r6,r5,r2
    a0d8:	18c7883a 	add	r3,r3,r3
    a0dc:	213fffc4 	addi	r4,r4,-1
    a0e0:	2805883a 	mov	r2,r5
    a0e4:	30c7883a 	add	r3,r6,r3
    a0e8:	d9000715 	stw	r4,28(sp)
    a0ec:	01400f44 	movi	r5,61
    a0f0:	000f883a 	mov	r7,zero
    a0f4:	01040034 	movhi	r4,4096
    a0f8:	0019883a 	mov	r12,zero
    a0fc:	001b883a 	mov	r13,zero
    a100:	201697fa 	slli	r11,r4,31
    a104:	3814d07a 	srli	r10,r7,1
    a108:	297fffc4 	addi	r5,r5,-1
    a10c:	1a000936 	bltu	r3,r8,a134 <__divdf3+0x134>
    a110:	13cdc83a 	sub	r6,r2,r15
    a114:	1193803a 	cmpltu	r9,r2,r6
    a118:	1a1dc83a 	sub	r14,r3,r8
    a11c:	40c0011e 	bne	r8,r3,a124 <__divdf3+0x124>
    a120:	13c00436 	bltu	r2,r15,a134 <__divdf3+0x134>
    a124:	3005883a 	mov	r2,r6
    a128:	7247c83a 	sub	r3,r14,r9
    a12c:	61d8b03a 	or	r12,r12,r7
    a130:	691ab03a 	or	r13,r13,r4
    a134:	108d883a 	add	r6,r2,r2
    a138:	3093803a 	cmpltu	r9,r6,r2
    a13c:	18c7883a 	add	r3,r3,r3
    a140:	5a8eb03a 	or	r7,r11,r10
    a144:	2008d07a 	srli	r4,r4,1
    a148:	3005883a 	mov	r2,r6
    a14c:	48c7883a 	add	r3,r9,r3
    a150:	283feb1e 	bne	r5,zero,a100 <__divdf3+0x100>
    a154:	61003fcc 	andi	r4,r12,255
    a158:	01402004 	movi	r5,128
    a15c:	21400b26 	beq	r4,r5,a18c <__divdf3+0x18c>
    a160:	db000815 	stw	r12,32(sp)
    a164:	db400915 	stw	r13,36(sp)
    a168:	003fb406 	br	a03c <__divdf3+0x3c>
    a16c:	d8000815 	stw	zero,32(sp)
    a170:	d8000915 	stw	zero,36(sp)
    a174:	d8000715 	stw	zero,28(sp)
    a178:	d9000504 	addi	r4,sp,20
    a17c:	003fb006 	br	a040 <__divdf3+0x40>
    a180:	d8800515 	stw	r2,20(sp)
    a184:	d9000504 	addi	r4,sp,20
    a188:	003fad06 	br	a040 <__divdf3+0x40>
    a18c:	6140400c 	andi	r5,r12,256
    a190:	283ff31e 	bne	r5,zero,a160 <__divdf3+0x160>
    a194:	30c4b03a 	or	r2,r6,r3
    a198:	103ff126 	beq	r2,zero,a160 <__divdf3+0x160>
    a19c:	6109883a 	add	r4,r12,r4
    a1a0:	2305803a 	cmpltu	r2,r4,r12
    a1a4:	033fc004 	movi	r12,-256
    a1a8:	2318703a 	and	r12,r4,r12
    a1ac:	135b883a 	add	r13,r2,r13
    a1b0:	003feb06 	br	a160 <__divdf3+0x160>

0000a1b4 <__gtdf2>:
    a1b4:	defff104 	addi	sp,sp,-60
    a1b8:	d9000c15 	stw	r4,48(sp)
    a1bc:	d9400d15 	stw	r5,52(sp)
    a1c0:	d9000c04 	addi	r4,sp,48
    a1c4:	d9400504 	addi	r5,sp,20
    a1c8:	dfc00e15 	stw	ra,56(sp)
    a1cc:	d9800a15 	stw	r6,40(sp)
    a1d0:	d9c00b15 	stw	r7,44(sp)
    a1d4:	000a9b80 	call	a9b8 <__unpack_d>
    a1d8:	d9000a04 	addi	r4,sp,40
    a1dc:	d80b883a 	mov	r5,sp
    a1e0:	000a9b80 	call	a9b8 <__unpack_d>
    a1e4:	d8c00517 	ldw	r3,20(sp)
    a1e8:	00800044 	movi	r2,1
    a1ec:	10c0082e 	bgeu	r2,r3,a210 <__gtdf2+0x5c>
    a1f0:	d8c00017 	ldw	r3,0(sp)
    a1f4:	10c0062e 	bgeu	r2,r3,a210 <__gtdf2+0x5c>
    a1f8:	d9000504 	addi	r4,sp,20
    a1fc:	d80b883a 	mov	r5,sp
    a200:	000aabc0 	call	aabc <__fpcmp_parts_d>
    a204:	dfc00e17 	ldw	ra,56(sp)
    a208:	dec00f04 	addi	sp,sp,60
    a20c:	f800283a 	ret
    a210:	00bfffc4 	movi	r2,-1
    a214:	003ffb06 	br	a204 <__gtdf2+0x50>

0000a218 <__gedf2>:
    a218:	defff104 	addi	sp,sp,-60
    a21c:	d9000c15 	stw	r4,48(sp)
    a220:	d9400d15 	stw	r5,52(sp)
    a224:	d9000c04 	addi	r4,sp,48
    a228:	d9400504 	addi	r5,sp,20
    a22c:	dfc00e15 	stw	ra,56(sp)
    a230:	d9800a15 	stw	r6,40(sp)
    a234:	d9c00b15 	stw	r7,44(sp)
    a238:	000a9b80 	call	a9b8 <__unpack_d>
    a23c:	d9000a04 	addi	r4,sp,40
    a240:	d80b883a 	mov	r5,sp
    a244:	000a9b80 	call	a9b8 <__unpack_d>
    a248:	d8c00517 	ldw	r3,20(sp)
    a24c:	00800044 	movi	r2,1
    a250:	10c0082e 	bgeu	r2,r3,a274 <__gedf2+0x5c>
    a254:	d8c00017 	ldw	r3,0(sp)
    a258:	10c0062e 	bgeu	r2,r3,a274 <__gedf2+0x5c>
    a25c:	d9000504 	addi	r4,sp,20
    a260:	d80b883a 	mov	r5,sp
    a264:	000aabc0 	call	aabc <__fpcmp_parts_d>
    a268:	dfc00e17 	ldw	ra,56(sp)
    a26c:	dec00f04 	addi	sp,sp,60
    a270:	f800283a 	ret
    a274:	00bfffc4 	movi	r2,-1
    a278:	003ffb06 	br	a268 <__gedf2+0x50>

0000a27c <__ltdf2>:
    a27c:	defff104 	addi	sp,sp,-60
    a280:	d9000c15 	stw	r4,48(sp)
    a284:	d9400d15 	stw	r5,52(sp)
    a288:	d9000c04 	addi	r4,sp,48
    a28c:	d9400504 	addi	r5,sp,20
    a290:	dfc00e15 	stw	ra,56(sp)
    a294:	d9800a15 	stw	r6,40(sp)
    a298:	d9c00b15 	stw	r7,44(sp)
    a29c:	000a9b80 	call	a9b8 <__unpack_d>
    a2a0:	d9000a04 	addi	r4,sp,40
    a2a4:	d80b883a 	mov	r5,sp
    a2a8:	000a9b80 	call	a9b8 <__unpack_d>
    a2ac:	d8c00517 	ldw	r3,20(sp)
    a2b0:	00800044 	movi	r2,1
    a2b4:	10c0052e 	bgeu	r2,r3,a2cc <__ltdf2+0x50>
    a2b8:	d8c00017 	ldw	r3,0(sp)
    a2bc:	10c0032e 	bgeu	r2,r3,a2cc <__ltdf2+0x50>
    a2c0:	d9000504 	addi	r4,sp,20
    a2c4:	d80b883a 	mov	r5,sp
    a2c8:	000aabc0 	call	aabc <__fpcmp_parts_d>
    a2cc:	dfc00e17 	ldw	ra,56(sp)
    a2d0:	dec00f04 	addi	sp,sp,60
    a2d4:	f800283a 	ret

0000a2d8 <__floatsidf>:
    a2d8:	2004d7fa 	srli	r2,r4,31
    a2dc:	defff904 	addi	sp,sp,-28
    a2e0:	00c000c4 	movi	r3,3
    a2e4:	dfc00615 	stw	ra,24(sp)
    a2e8:	dc000515 	stw	r16,20(sp)
    a2ec:	d8c00015 	stw	r3,0(sp)
    a2f0:	d8800115 	stw	r2,4(sp)
    a2f4:	2000081e 	bne	r4,zero,a318 <__floatsidf+0x40>
    a2f8:	00800084 	movi	r2,2
    a2fc:	d8800015 	stw	r2,0(sp)
    a300:	d809883a 	mov	r4,sp
    a304:	000a7940 	call	a794 <__pack_d>
    a308:	dfc00617 	ldw	ra,24(sp)
    a30c:	dc000517 	ldw	r16,20(sp)
    a310:	dec00704 	addi	sp,sp,28
    a314:	f800283a 	ret
    a318:	00c00f04 	movi	r3,60
    a31c:	d8c00215 	stw	r3,8(sp)
    a320:	10000f1e 	bne	r2,zero,a360 <__floatsidf+0x88>
    a324:	2021883a 	mov	r16,r4
    a328:	8009883a 	mov	r4,r16
    a32c:	000a6e80 	call	a6e8 <__clzsi2>
    a330:	11000744 	addi	r4,r2,29
    a334:	0100110e 	bge	zero,r4,a37c <__floatsidf+0xa4>
    a338:	10ffff44 	addi	r3,r2,-3
    a33c:	18001216 	blt	r3,zero,a388 <__floatsidf+0xb0>
    a340:	80c6983a 	sll	r3,r16,r3
    a344:	0009883a 	mov	r4,zero
    a348:	014007c4 	movi	r5,31
    a34c:	2885c83a 	sub	r2,r5,r2
    a350:	d9000315 	stw	r4,12(sp)
    a354:	d8c00415 	stw	r3,16(sp)
    a358:	d8800215 	stw	r2,8(sp)
    a35c:	003fe806 	br	a300 <__floatsidf+0x28>
    a360:	00a00034 	movhi	r2,32768
    a364:	20800e26 	beq	r4,r2,a3a0 <__floatsidf+0xc8>
    a368:	0121c83a 	sub	r16,zero,r4
    a36c:	8009883a 	mov	r4,r16
    a370:	000a6e80 	call	a6e8 <__clzsi2>
    a374:	11000744 	addi	r4,r2,29
    a378:	013fef16 	blt	zero,r4,a338 <__floatsidf+0x60>
    a37c:	dc000315 	stw	r16,12(sp)
    a380:	d8000415 	stw	zero,16(sp)
    a384:	003fde06 	br	a300 <__floatsidf+0x28>
    a388:	800ad07a 	srli	r5,r16,1
    a38c:	00c007c4 	movi	r3,31
    a390:	1907c83a 	sub	r3,r3,r4
    a394:	28c6d83a 	srl	r3,r5,r3
    a398:	8108983a 	sll	r4,r16,r4
    a39c:	003fea06 	br	a348 <__floatsidf+0x70>
    a3a0:	0005883a 	mov	r2,zero
    a3a4:	00f07834 	movhi	r3,49632
    a3a8:	003fd706 	br	a308 <__floatsidf+0x30>

0000a3ac <__fixdfsi>:
    a3ac:	defff804 	addi	sp,sp,-32
    a3b0:	d9000515 	stw	r4,20(sp)
    a3b4:	d9400615 	stw	r5,24(sp)
    a3b8:	d9000504 	addi	r4,sp,20
    a3bc:	d80b883a 	mov	r5,sp
    a3c0:	dfc00715 	stw	ra,28(sp)
    a3c4:	000a9b80 	call	a9b8 <__unpack_d>
    a3c8:	d8800017 	ldw	r2,0(sp)
    a3cc:	00c00084 	movi	r3,2
    a3d0:	10c01c26 	beq	r2,r3,a444 <__fixdfsi+0x98>
    a3d4:	00c00044 	movi	r3,1
    a3d8:	18801a2e 	bgeu	r3,r2,a444 <__fixdfsi+0x98>
    a3dc:	00c00104 	movi	r3,4
    a3e0:	10c01126 	beq	r2,r3,a428 <__fixdfsi+0x7c>
    a3e4:	d8800217 	ldw	r2,8(sp)
    a3e8:	10001616 	blt	r2,zero,a444 <__fixdfsi+0x98>
    a3ec:	00c00784 	movi	r3,30
    a3f0:	18800d16 	blt	r3,r2,a428 <__fixdfsi+0x7c>
    a3f4:	00c00f04 	movi	r3,60
    a3f8:	1885c83a 	sub	r2,r3,r2
    a3fc:	10fff804 	addi	r3,r2,-32
    a400:	d9400317 	ldw	r5,12(sp)
    a404:	d9000417 	ldw	r4,16(sp)
    a408:	18001616 	blt	r3,zero,a464 <__fixdfsi+0xb8>
    a40c:	20c4d83a 	srl	r2,r4,r3
    a410:	d8c00117 	ldw	r3,4(sp)
    a414:	18000126 	beq	r3,zero,a41c <__fixdfsi+0x70>
    a418:	0085c83a 	sub	r2,zero,r2
    a41c:	dfc00717 	ldw	ra,28(sp)
    a420:	dec00804 	addi	sp,sp,32
    a424:	f800283a 	ret
    a428:	d8800117 	ldw	r2,4(sp)
    a42c:	1000091e 	bne	r2,zero,a454 <__fixdfsi+0xa8>
    a430:	00a00034 	movhi	r2,32768
    a434:	10bfffc4 	addi	r2,r2,-1
    a438:	dfc00717 	ldw	ra,28(sp)
    a43c:	dec00804 	addi	sp,sp,32
    a440:	f800283a 	ret
    a444:	0005883a 	mov	r2,zero
    a448:	dfc00717 	ldw	ra,28(sp)
    a44c:	dec00804 	addi	sp,sp,32
    a450:	f800283a 	ret
    a454:	00a00034 	movhi	r2,32768
    a458:	dfc00717 	ldw	ra,28(sp)
    a45c:	dec00804 	addi	sp,sp,32
    a460:	f800283a 	ret
    a464:	2008907a 	slli	r4,r4,1
    a468:	018007c4 	movi	r6,31
    a46c:	308dc83a 	sub	r6,r6,r2
    a470:	2188983a 	sll	r4,r4,r6
    a474:	2884d83a 	srl	r2,r5,r2
    a478:	2084b03a 	or	r2,r4,r2
    a47c:	003fe406 	br	a410 <__fixdfsi+0x64>

0000a480 <udivmodsi4>:
    a480:	2005883a 	mov	r2,r4
    a484:	2900182e 	bgeu	r5,r4,a4e8 <udivmodsi4+0x68>
    a488:	28001716 	blt	r5,zero,a4e8 <udivmodsi4+0x68>
    a48c:	01000804 	movi	r4,32
    a490:	00c00044 	movi	r3,1
    a494:	00000206 	br	a4a0 <udivmodsi4+0x20>
    a498:	20001126 	beq	r4,zero,a4e0 <udivmodsi4+0x60>
    a49c:	28000516 	blt	r5,zero,a4b4 <udivmodsi4+0x34>
    a4a0:	294b883a 	add	r5,r5,r5
    a4a4:	213fffc4 	addi	r4,r4,-1
    a4a8:	18c7883a 	add	r3,r3,r3
    a4ac:	28bffa36 	bltu	r5,r2,a498 <udivmodsi4+0x18>
    a4b0:	18000b26 	beq	r3,zero,a4e0 <udivmodsi4+0x60>
    a4b4:	0009883a 	mov	r4,zero
    a4b8:	11400236 	bltu	r2,r5,a4c4 <udivmodsi4+0x44>
    a4bc:	1145c83a 	sub	r2,r2,r5
    a4c0:	20c8b03a 	or	r4,r4,r3
    a4c4:	1806d07a 	srli	r3,r3,1
    a4c8:	280ad07a 	srli	r5,r5,1
    a4cc:	183ffa1e 	bne	r3,zero,a4b8 <udivmodsi4+0x38>
    a4d0:	3000021e 	bne	r6,zero,a4dc <udivmodsi4+0x5c>
    a4d4:	2005883a 	mov	r2,r4
    a4d8:	f800283a 	ret
    a4dc:	f800283a 	ret
    a4e0:	0009883a 	mov	r4,zero
    a4e4:	003ffa06 	br	a4d0 <udivmodsi4+0x50>
    a4e8:	00c00044 	movi	r3,1
    a4ec:	0009883a 	mov	r4,zero
    a4f0:	003ff106 	br	a4b8 <udivmodsi4+0x38>

0000a4f4 <__divsi3>:
    a4f4:	defffe04 	addi	sp,sp,-8
    a4f8:	dfc00115 	stw	ra,4(sp)
    a4fc:	dc000015 	stw	r16,0(sp)
    a500:	20000a16 	blt	r4,zero,a52c <__divsi3+0x38>
    a504:	0021883a 	mov	r16,zero
    a508:	28000b16 	blt	r5,zero,a538 <__divsi3+0x44>
    a50c:	000d883a 	mov	r6,zero
    a510:	000a4800 	call	a480 <udivmodsi4>
    a514:	80000126 	beq	r16,zero,a51c <__divsi3+0x28>
    a518:	0085c83a 	sub	r2,zero,r2
    a51c:	dfc00117 	ldw	ra,4(sp)
    a520:	dc000017 	ldw	r16,0(sp)
    a524:	dec00204 	addi	sp,sp,8
    a528:	f800283a 	ret
    a52c:	0109c83a 	sub	r4,zero,r4
    a530:	04000044 	movi	r16,1
    a534:	283ff50e 	bge	r5,zero,a50c <__divsi3+0x18>
    a538:	014bc83a 	sub	r5,zero,r5
    a53c:	8400005c 	xori	r16,r16,1
    a540:	003ff206 	br	a50c <__divsi3+0x18>

0000a544 <__modsi3>:
    a544:	deffff04 	addi	sp,sp,-4
    a548:	dfc00015 	stw	ra,0(sp)
    a54c:	20000516 	blt	r4,zero,a564 <__modsi3+0x20>
    a550:	28000c16 	blt	r5,zero,a584 <__modsi3+0x40>
    a554:	01800044 	movi	r6,1
    a558:	dfc00017 	ldw	ra,0(sp)
    a55c:	dec00104 	addi	sp,sp,4
    a560:	000a4801 	jmpi	a480 <udivmodsi4>
    a564:	0109c83a 	sub	r4,zero,r4
    a568:	28000b16 	blt	r5,zero,a598 <__modsi3+0x54>
    a56c:	01800044 	movi	r6,1
    a570:	000a4800 	call	a480 <udivmodsi4>
    a574:	0085c83a 	sub	r2,zero,r2
    a578:	dfc00017 	ldw	ra,0(sp)
    a57c:	dec00104 	addi	sp,sp,4
    a580:	f800283a 	ret
    a584:	014bc83a 	sub	r5,zero,r5
    a588:	01800044 	movi	r6,1
    a58c:	dfc00017 	ldw	ra,0(sp)
    a590:	dec00104 	addi	sp,sp,4
    a594:	000a4801 	jmpi	a480 <udivmodsi4>
    a598:	014bc83a 	sub	r5,zero,r5
    a59c:	003ff306 	br	a56c <__modsi3+0x28>

0000a5a0 <__udivsi3>:
    a5a0:	000d883a 	mov	r6,zero
    a5a4:	000a4801 	jmpi	a480 <udivmodsi4>

0000a5a8 <__umodsi3>:
    a5a8:	01800044 	movi	r6,1
    a5ac:	000a4801 	jmpi	a480 <udivmodsi4>

0000a5b0 <__mulsi3>:
    a5b0:	0005883a 	mov	r2,zero
    a5b4:	20000726 	beq	r4,zero,a5d4 <__mulsi3+0x24>
    a5b8:	20c0004c 	andi	r3,r4,1
    a5bc:	2008d07a 	srli	r4,r4,1
    a5c0:	18000126 	beq	r3,zero,a5c8 <__mulsi3+0x18>
    a5c4:	1145883a 	add	r2,r2,r5
    a5c8:	294b883a 	add	r5,r5,r5
    a5cc:	203ffa1e 	bne	r4,zero,a5b8 <__mulsi3+0x8>
    a5d0:	f800283a 	ret
    a5d4:	f800283a 	ret

0000a5d8 <__muldi3>:
    a5d8:	defff604 	addi	sp,sp,-40
    a5dc:	dd400515 	stw	r21,20(sp)
    a5e0:	dd000415 	stw	r20,16(sp)
    a5e4:	257fffcc 	andi	r21,r4,65535
    a5e8:	353fffcc 	andi	r20,r6,65535
    a5ec:	dcc00315 	stw	r19,12(sp)
    a5f0:	3026d43a 	srli	r19,r6,16
    a5f4:	dd800615 	stw	r22,24(sp)
    a5f8:	dc800215 	stw	r18,8(sp)
    a5fc:	dc400115 	stw	r17,4(sp)
    a600:	2024d43a 	srli	r18,r4,16
    a604:	2023883a 	mov	r17,r4
    a608:	282d883a 	mov	r22,r5
    a60c:	a009883a 	mov	r4,r20
    a610:	a80b883a 	mov	r5,r21
    a614:	dfc00915 	stw	ra,36(sp)
    a618:	df000815 	stw	fp,32(sp)
    a61c:	ddc00715 	stw	r23,28(sp)
    a620:	3839883a 	mov	fp,r7
    a624:	dc000015 	stw	r16,0(sp)
    a628:	3021883a 	mov	r16,r6
    a62c:	000a5b00 	call	a5b0 <__mulsi3>
    a630:	a80b883a 	mov	r5,r21
    a634:	9809883a 	mov	r4,r19
    a638:	102f883a 	mov	r23,r2
    a63c:	000a5b00 	call	a5b0 <__mulsi3>
    a640:	a009883a 	mov	r4,r20
    a644:	900b883a 	mov	r5,r18
    a648:	102b883a 	mov	r21,r2
    a64c:	000a5b00 	call	a5b0 <__mulsi3>
    a650:	9809883a 	mov	r4,r19
    a654:	900b883a 	mov	r5,r18
    a658:	1029883a 	mov	r20,r2
    a65c:	000a5b00 	call	a5b0 <__mulsi3>
    a660:	1007883a 	mov	r3,r2
    a664:	b804d43a 	srli	r2,r23,16
    a668:	a549883a 	add	r4,r20,r21
    a66c:	2089883a 	add	r4,r4,r2
    a670:	2500022e 	bgeu	r4,r20,a67c <__muldi3+0xa4>
    a674:	00800074 	movhi	r2,1
    a678:	1887883a 	add	r3,r3,r2
    a67c:	200cd43a 	srli	r6,r4,16
    a680:	2004943a 	slli	r2,r4,16
    a684:	e00b883a 	mov	r5,fp
    a688:	8809883a 	mov	r4,r17
    a68c:	bdffffcc 	andi	r23,r23,65535
    a690:	19a3883a 	add	r17,r3,r6
    a694:	15ef883a 	add	r23,r2,r23
    a698:	000a5b00 	call	a5b0 <__mulsi3>
    a69c:	8009883a 	mov	r4,r16
    a6a0:	b00b883a 	mov	r5,r22
    a6a4:	1025883a 	mov	r18,r2
    a6a8:	000a5b00 	call	a5b0 <__mulsi3>
    a6ac:	9085883a 	add	r2,r18,r2
    a6b0:	1447883a 	add	r3,r2,r17
    a6b4:	b805883a 	mov	r2,r23
    a6b8:	dfc00917 	ldw	ra,36(sp)
    a6bc:	df000817 	ldw	fp,32(sp)
    a6c0:	ddc00717 	ldw	r23,28(sp)
    a6c4:	dd800617 	ldw	r22,24(sp)
    a6c8:	dd400517 	ldw	r21,20(sp)
    a6cc:	dd000417 	ldw	r20,16(sp)
    a6d0:	dcc00317 	ldw	r19,12(sp)
    a6d4:	dc800217 	ldw	r18,8(sp)
    a6d8:	dc400117 	ldw	r17,4(sp)
    a6dc:	dc000017 	ldw	r16,0(sp)
    a6e0:	dec00a04 	addi	sp,sp,40
    a6e4:	f800283a 	ret

0000a6e8 <__clzsi2>:
    a6e8:	00bfffd4 	movui	r2,65535
    a6ec:	11000b36 	bltu	r2,r4,a71c <__clzsi2+0x34>
    a6f0:	00803fc4 	movi	r2,255
    a6f4:	11001e2e 	bgeu	r2,r4,a770 <__clzsi2+0x88>
    a6f8:	00c00204 	movi	r3,8
    a6fc:	20c8d83a 	srl	r4,r4,r3
    a700:	00c00074 	movhi	r3,1
    a704:	18f41e04 	addi	r3,r3,-12168
    a708:	00800604 	movi	r2,24
    a70c:	1909883a 	add	r4,r3,r4
    a710:	20c00003 	ldbu	r3,0(r4)
    a714:	10c5c83a 	sub	r2,r2,r3
    a718:	f800283a 	ret
    a71c:	00804034 	movhi	r2,256
    a720:	10bfffc4 	addi	r2,r2,-1
    a724:	11000936 	bltu	r2,r4,a74c <__clzsi2+0x64>
    a728:	00800404 	movi	r2,16
    a72c:	1007883a 	mov	r3,r2
    a730:	20c8d83a 	srl	r4,r4,r3
    a734:	00c00074 	movhi	r3,1
    a738:	18f41e04 	addi	r3,r3,-12168
    a73c:	1909883a 	add	r4,r3,r4
    a740:	20c00003 	ldbu	r3,0(r4)
    a744:	10c5c83a 	sub	r2,r2,r3
    a748:	f800283a 	ret
    a74c:	00c00604 	movi	r3,24
    a750:	20c8d83a 	srl	r4,r4,r3
    a754:	00c00074 	movhi	r3,1
    a758:	18f41e04 	addi	r3,r3,-12168
    a75c:	00800204 	movi	r2,8
    a760:	1909883a 	add	r4,r3,r4
    a764:	20c00003 	ldbu	r3,0(r4)
    a768:	10c5c83a 	sub	r2,r2,r3
    a76c:	f800283a 	ret
    a770:	0007883a 	mov	r3,zero
    a774:	20c8d83a 	srl	r4,r4,r3
    a778:	00c00074 	movhi	r3,1
    a77c:	18f41e04 	addi	r3,r3,-12168
    a780:	00800804 	movi	r2,32
    a784:	1909883a 	add	r4,r3,r4
    a788:	20c00003 	ldbu	r3,0(r4)
    a78c:	10c5c83a 	sub	r2,r2,r3
    a790:	f800283a 	ret

0000a794 <__pack_d>:
    a794:	20800017 	ldw	r2,0(r4)
    a798:	defff804 	addi	sp,sp,-32
    a79c:	dcc00315 	stw	r19,12(sp)
    a7a0:	dc800215 	stw	r18,8(sp)
    a7a4:	dfc00715 	stw	ra,28(sp)
    a7a8:	dd800615 	stw	r22,24(sp)
    a7ac:	dd400515 	stw	r21,20(sp)
    a7b0:	dd000415 	stw	r20,16(sp)
    a7b4:	dc400115 	stw	r17,4(sp)
    a7b8:	dc000015 	stw	r16,0(sp)
    a7bc:	04800044 	movi	r18,1
    a7c0:	24400317 	ldw	r17,12(r4)
    a7c4:	24000417 	ldw	r16,16(r4)
    a7c8:	24c00117 	ldw	r19,4(r4)
    a7cc:	9080422e 	bgeu	r18,r2,a8d8 <__pack_d+0x144>
    a7d0:	00c00104 	movi	r3,4
    a7d4:	10c03c26 	beq	r2,r3,a8c8 <__pack_d+0x134>
    a7d8:	00c00084 	movi	r3,2
    a7dc:	10c01926 	beq	r2,r3,a844 <__pack_d+0xb0>
    a7e0:	8c04b03a 	or	r2,r17,r16
    a7e4:	10001726 	beq	r2,zero,a844 <__pack_d+0xb0>
    a7e8:	21000217 	ldw	r4,8(r4)
    a7ec:	00bf0084 	movi	r2,-1022
    a7f0:	20804016 	blt	r4,r2,a8f4 <__pack_d+0x160>
    a7f4:	0080ffc4 	movi	r2,1023
    a7f8:	11003316 	blt	r2,r4,a8c8 <__pack_d+0x134>
    a7fc:	88803fcc 	andi	r2,r17,255
    a800:	00c02004 	movi	r3,128
    a804:	10c02926 	beq	r2,r3,a8ac <__pack_d+0x118>
    a808:	88801fc4 	addi	r2,r17,127
    a80c:	1463803a 	cmpltu	r17,r2,r17
    a810:	8c21883a 	add	r16,r17,r16
    a814:	1023883a 	mov	r17,r2
    a818:	00880034 	movhi	r2,8192
    a81c:	10bfffc4 	addi	r2,r2,-1
    a820:	14001c36 	bltu	r2,r16,a894 <__pack_d+0x100>
    a824:	2100ffc4 	addi	r4,r4,1023
    a828:	8006963a 	slli	r3,r16,24
    a82c:	8804d23a 	srli	r2,r17,8
    a830:	8020913a 	slli	r16,r16,4
    a834:	2101ffcc 	andi	r4,r4,2047
    a838:	1884b03a 	or	r2,r3,r2
    a83c:	8020d33a 	srli	r16,r16,12
    a840:	00000306 	br	a850 <__pack_d+0xbc>
    a844:	0009883a 	mov	r4,zero
    a848:	0005883a 	mov	r2,zero
    a84c:	0021883a 	mov	r16,zero
    a850:	2008953a 	slli	r4,r4,20
    a854:	982697fa 	slli	r19,r19,31
    a858:	00c00434 	movhi	r3,16
    a85c:	18ffffc4 	addi	r3,r3,-1
    a860:	80e0703a 	and	r16,r16,r3
    a864:	8106b03a 	or	r3,r16,r4
    a868:	1cc6b03a 	or	r3,r3,r19
    a86c:	dfc00717 	ldw	ra,28(sp)
    a870:	dd800617 	ldw	r22,24(sp)
    a874:	dd400517 	ldw	r21,20(sp)
    a878:	dd000417 	ldw	r20,16(sp)
    a87c:	dcc00317 	ldw	r19,12(sp)
    a880:	dc800217 	ldw	r18,8(sp)
    a884:	dc400117 	ldw	r17,4(sp)
    a888:	dc000017 	ldw	r16,0(sp)
    a88c:	dec00804 	addi	sp,sp,32
    a890:	f800283a 	ret
    a894:	800697fa 	slli	r3,r16,31
    a898:	8804d07a 	srli	r2,r17,1
    a89c:	21010004 	addi	r4,r4,1024
    a8a0:	8020d07a 	srli	r16,r16,1
    a8a4:	18a2b03a 	or	r17,r3,r2
    a8a8:	003fdf06 	br	a828 <__pack_d+0x94>
    a8ac:	88c0400c 	andi	r3,r17,256
    a8b0:	183fd926 	beq	r3,zero,a818 <__pack_d+0x84>
    a8b4:	8885883a 	add	r2,r17,r2
    a8b8:	1463803a 	cmpltu	r17,r2,r17
    a8bc:	8c21883a 	add	r16,r17,r16
    a8c0:	1023883a 	mov	r17,r2
    a8c4:	003fd406 	br	a818 <__pack_d+0x84>
    a8c8:	0101ffc4 	movi	r4,2047
    a8cc:	0005883a 	mov	r2,zero
    a8d0:	0021883a 	mov	r16,zero
    a8d4:	003fde06 	br	a850 <__pack_d+0xbc>
    a8d8:	84000234 	orhi	r16,r16,8
    a8dc:	00c00434 	movhi	r3,16
    a8e0:	18ffffc4 	addi	r3,r3,-1
    a8e4:	8805883a 	mov	r2,r17
    a8e8:	80e0703a 	and	r16,r16,r3
    a8ec:	0101ffc4 	movi	r4,2047
    a8f0:	003fd706 	br	a850 <__pack_d+0xbc>
    a8f4:	1129c83a 	sub	r20,r2,r4
    a8f8:	00800e04 	movi	r2,56
    a8fc:	15002716 	blt	r2,r20,a99c <__pack_d+0x208>
    a900:	800b883a 	mov	r5,r16
    a904:	a00d883a 	mov	r6,r20
    a908:	8809883a 	mov	r4,r17
    a90c:	000ab8c0 	call	ab8c <__lshrdi3>
    a910:	9009883a 	mov	r4,r18
    a914:	000b883a 	mov	r5,zero
    a918:	a00d883a 	mov	r6,r20
    a91c:	102d883a 	mov	r22,r2
    a920:	182b883a 	mov	r21,r3
    a924:	000abd00 	call	abd0 <__ashldi3>
    a928:	1009003a 	cmpeq	r4,r2,zero
    a92c:	1907c83a 	sub	r3,r3,r4
    a930:	10bfffc4 	addi	r2,r2,-1
    a934:	1c20703a 	and	r16,r3,r16
    a938:	1444703a 	and	r2,r2,r17
    a93c:	1404b03a 	or	r2,r2,r16
    a940:	1004c03a 	cmpne	r2,r2,zero
    a944:	1584b03a 	or	r2,r2,r22
    a948:	11003fcc 	andi	r4,r2,255
    a94c:	01402004 	movi	r5,128
    a950:	a807883a 	mov	r3,r21
    a954:	2140131e 	bne	r4,r5,a9a4 <__pack_d+0x210>
    a958:	1140400c 	andi	r5,r2,256
    a95c:	28000426 	beq	r5,zero,a970 <__pack_d+0x1dc>
    a960:	1109883a 	add	r4,r2,r4
    a964:	2085803a 	cmpltu	r2,r4,r2
    a968:	1547883a 	add	r3,r2,r21
    a96c:	2005883a 	mov	r2,r4
    a970:	1808963a 	slli	r4,r3,24
    a974:	1004d23a 	srli	r2,r2,8
    a978:	1820913a 	slli	r16,r3,4
    a97c:	01440034 	movhi	r5,4096
    a980:	297fffc4 	addi	r5,r5,-1
    a984:	2084b03a 	or	r2,r4,r2
    a988:	8020d33a 	srli	r16,r16,12
    a98c:	01000044 	movi	r4,1
    a990:	28ffaf36 	bltu	r5,r3,a850 <__pack_d+0xbc>
    a994:	0009883a 	mov	r4,zero
    a998:	003fad06 	br	a850 <__pack_d+0xbc>
    a99c:	0005883a 	mov	r2,zero
    a9a0:	0007883a 	mov	r3,zero
    a9a4:	11001fc4 	addi	r4,r2,127
    a9a8:	2085803a 	cmpltu	r2,r4,r2
    a9ac:	10c7883a 	add	r3,r2,r3
    a9b0:	2005883a 	mov	r2,r4
    a9b4:	003fee06 	br	a970 <__pack_d+0x1dc>

0000a9b8 <__unpack_d>:
    a9b8:	21800117 	ldw	r6,4(r4)
    a9bc:	20c00017 	ldw	r3,0(r4)
    a9c0:	3004d7fa 	srli	r2,r6,31
    a9c4:	3008d53a 	srli	r4,r6,20
    a9c8:	28800115 	stw	r2,4(r5)
    a9cc:	2101ffcc 	andi	r4,r4,2047
    a9d0:	00800434 	movhi	r2,16
    a9d4:	10bfffc4 	addi	r2,r2,-1
    a9d8:	3084703a 	and	r2,r6,r2
    a9dc:	20001a1e 	bne	r4,zero,aa48 <__unpack_d+0x90>
    a9e0:	1888b03a 	or	r4,r3,r2
    a9e4:	20002626 	beq	r4,zero,aa80 <__unpack_d+0xc8>
    a9e8:	1808d63a 	srli	r4,r3,24
    a9ec:	1004923a 	slli	r2,r2,8
    a9f0:	01bf0084 	movi	r6,-1022
    a9f4:	29800215 	stw	r6,8(r5)
    a9f8:	2084b03a 	or	r2,r4,r2
    a9fc:	010000c4 	movi	r4,3
    aa00:	29000015 	stw	r4,0(r5)
    aa04:	02040034 	movhi	r8,4096
    aa08:	423fffc4 	addi	r8,r8,-1
    aa0c:	1806923a 	slli	r3,r3,8
    aa10:	40801836 	bltu	r8,r2,aa74 <__unpack_d+0xbc>
    aa14:	013f0044 	movi	r4,-1023
    aa18:	18cd883a 	add	r6,r3,r3
    aa1c:	30c7803a 	cmpltu	r3,r6,r3
    aa20:	1085883a 	add	r2,r2,r2
    aa24:	1885883a 	add	r2,r3,r2
    aa28:	200f883a 	mov	r7,r4
    aa2c:	3007883a 	mov	r3,r6
    aa30:	213fffc4 	addi	r4,r4,-1
    aa34:	40bff82e 	bgeu	r8,r2,aa18 <__unpack_d+0x60>
    aa38:	29c00215 	stw	r7,8(r5)
    aa3c:	28c00315 	stw	r3,12(r5)
    aa40:	28800415 	stw	r2,16(r5)
    aa44:	f800283a 	ret
    aa48:	01c1ffc4 	movi	r7,2047
    aa4c:	21c00f26 	beq	r4,r7,aa8c <__unpack_d+0xd4>
    aa50:	180cd63a 	srli	r6,r3,24
    aa54:	1004923a 	slli	r2,r2,8
    aa58:	213f0044 	addi	r4,r4,-1023
    aa5c:	1806923a 	slli	r3,r3,8
    aa60:	3084b03a 	or	r2,r6,r2
    aa64:	29000215 	stw	r4,8(r5)
    aa68:	010000c4 	movi	r4,3
    aa6c:	10840034 	orhi	r2,r2,4096
    aa70:	29000015 	stw	r4,0(r5)
    aa74:	28c00315 	stw	r3,12(r5)
    aa78:	28800415 	stw	r2,16(r5)
    aa7c:	f800283a 	ret
    aa80:	00800084 	movi	r2,2
    aa84:	28800015 	stw	r2,0(r5)
    aa88:	f800283a 	ret
    aa8c:	1888b03a 	or	r4,r3,r2
    aa90:	20000526 	beq	r4,zero,aaa8 <__unpack_d+0xf0>
    aa94:	3180022c 	andhi	r6,r6,8
    aa98:	30000626 	beq	r6,zero,aab4 <__unpack_d+0xfc>
    aa9c:	01000044 	movi	r4,1
    aaa0:	29000015 	stw	r4,0(r5)
    aaa4:	003ff306 	br	aa74 <__unpack_d+0xbc>
    aaa8:	00800104 	movi	r2,4
    aaac:	28800015 	stw	r2,0(r5)
    aab0:	f800283a 	ret
    aab4:	28000015 	stw	zero,0(r5)
    aab8:	003fee06 	br	aa74 <__unpack_d+0xbc>

0000aabc <__fpcmp_parts_d>:
    aabc:	20c00017 	ldw	r3,0(r4)
    aac0:	00800044 	movi	r2,1
    aac4:	10c0142e 	bgeu	r2,r3,ab18 <__fpcmp_parts_d+0x5c>
    aac8:	29800017 	ldw	r6,0(r5)
    aacc:	1180122e 	bgeu	r2,r6,ab18 <__fpcmp_parts_d+0x5c>
    aad0:	01c00104 	movi	r7,4
    aad4:	19c02826 	beq	r3,r7,ab78 <__fpcmp_parts_d+0xbc>
    aad8:	31c00926 	beq	r6,r7,ab00 <__fpcmp_parts_d+0x44>
    aadc:	01c00084 	movi	r7,2
    aae0:	19c00626 	beq	r3,r7,aafc <__fpcmp_parts_d+0x40>
    aae4:	31c00a26 	beq	r6,r7,ab10 <__fpcmp_parts_d+0x54>
    aae8:	20c00117 	ldw	r3,4(r4)
    aaec:	29800117 	ldw	r6,4(r5)
    aaf0:	19800b26 	beq	r3,r6,ab20 <__fpcmp_parts_d+0x64>
    aaf4:	1800041e 	bne	r3,zero,ab08 <__fpcmp_parts_d+0x4c>
    aaf8:	f800283a 	ret
    aafc:	30c01a26 	beq	r6,r3,ab68 <__fpcmp_parts_d+0xac>
    ab00:	28800117 	ldw	r2,4(r5)
    ab04:	1000041e 	bne	r2,zero,ab18 <__fpcmp_parts_d+0x5c>
    ab08:	00bfffc4 	movi	r2,-1
    ab0c:	f800283a 	ret
    ab10:	20800117 	ldw	r2,4(r4)
    ab14:	103ffc1e 	bne	r2,zero,ab08 <__fpcmp_parts_d+0x4c>
    ab18:	00800044 	movi	r2,1
    ab1c:	f800283a 	ret
    ab20:	21c00217 	ldw	r7,8(r4)
    ab24:	29800217 	ldw	r6,8(r5)
    ab28:	31c0020e 	bge	r6,r7,ab34 <__fpcmp_parts_d+0x78>
    ab2c:	183ff61e 	bne	r3,zero,ab08 <__fpcmp_parts_d+0x4c>
    ab30:	f800283a 	ret
    ab34:	39800a16 	blt	r7,r6,ab60 <__fpcmp_parts_d+0xa4>
    ab38:	20800417 	ldw	r2,16(r4)
    ab3c:	29800417 	ldw	r6,16(r5)
    ab40:	21c00317 	ldw	r7,12(r4)
    ab44:	29000317 	ldw	r4,12(r5)
    ab48:	30800936 	bltu	r6,r2,ab70 <__fpcmp_parts_d+0xb4>
    ab4c:	1180011e 	bne	r2,r6,ab54 <__fpcmp_parts_d+0x98>
    ab50:	21c00736 	bltu	r4,r7,ab70 <__fpcmp_parts_d+0xb4>
    ab54:	11800236 	bltu	r2,r6,ab60 <__fpcmp_parts_d+0xa4>
    ab58:	3080031e 	bne	r6,r2,ab68 <__fpcmp_parts_d+0xac>
    ab5c:	3900022e 	bgeu	r7,r4,ab68 <__fpcmp_parts_d+0xac>
    ab60:	183fe926 	beq	r3,zero,ab08 <__fpcmp_parts_d+0x4c>
    ab64:	003fec06 	br	ab18 <__fpcmp_parts_d+0x5c>
    ab68:	0005883a 	mov	r2,zero
    ab6c:	f800283a 	ret
    ab70:	183fe926 	beq	r3,zero,ab18 <__fpcmp_parts_d+0x5c>
    ab74:	003fe406 	br	ab08 <__fpcmp_parts_d+0x4c>
    ab78:	30ffe51e 	bne	r6,r3,ab10 <__fpcmp_parts_d+0x54>
    ab7c:	28c00117 	ldw	r3,4(r5)
    ab80:	20800117 	ldw	r2,4(r4)
    ab84:	1885c83a 	sub	r2,r3,r2
    ab88:	f800283a 	ret

0000ab8c <__lshrdi3>:
    ab8c:	2005883a 	mov	r2,r4
    ab90:	2807883a 	mov	r3,r5
    ab94:	30000826 	beq	r6,zero,abb8 <__lshrdi3+0x2c>
    ab98:	01000804 	movi	r4,32
    ab9c:	2189c83a 	sub	r4,r4,r6
    aba0:	0100060e 	bge	zero,r4,abbc <__lshrdi3+0x30>
    aba4:	1184d83a 	srl	r2,r2,r6
    aba8:	2908983a 	sll	r4,r5,r4
    abac:	298cd83a 	srl	r6,r5,r6
    abb0:	2084b03a 	or	r2,r4,r2
    abb4:	3007883a 	mov	r3,r6
    abb8:	f800283a 	ret
    abbc:	0105c83a 	sub	r2,zero,r4
    abc0:	000d883a 	mov	r6,zero
    abc4:	2884d83a 	srl	r2,r5,r2
    abc8:	3007883a 	mov	r3,r6
    abcc:	003ffa06 	br	abb8 <__lshrdi3+0x2c>

0000abd0 <__ashldi3>:
    abd0:	2005883a 	mov	r2,r4
    abd4:	2807883a 	mov	r3,r5
    abd8:	30000826 	beq	r6,zero,abfc <__ashldi3+0x2c>
    abdc:	01000804 	movi	r4,32
    abe0:	2189c83a 	sub	r4,r4,r6
    abe4:	0100060e 	bge	zero,r4,ac00 <__ashldi3+0x30>
    abe8:	1108d83a 	srl	r4,r2,r4
    abec:	2986983a 	sll	r3,r5,r6
    abf0:	118c983a 	sll	r6,r2,r6
    abf4:	20c6b03a 	or	r3,r4,r3
    abf8:	3005883a 	mov	r2,r6
    abfc:	f800283a 	ret
    ac00:	0107c83a 	sub	r3,zero,r4
    ac04:	000d883a 	mov	r6,zero
    ac08:	10c6983a 	sll	r3,r2,r3
    ac0c:	3005883a 	mov	r2,r6
    ac10:	003ffa06 	br	abfc <__ashldi3+0x2c>

0000ac14 <memset>:
    ac14:	2005883a 	mov	r2,r4
    ac18:	30000526 	beq	r6,zero,ac30 <memset+0x1c>
    ac1c:	218d883a 	add	r6,r4,r6
    ac20:	2007883a 	mov	r3,r4
    ac24:	19400005 	stb	r5,0(r3)
    ac28:	18c00044 	addi	r3,r3,1
    ac2c:	19bffd1e 	bne	r3,r6,ac24 <memset+0x10>
    ac30:	f800283a 	ret

0000ac34 <_printf_r>:
    ac34:	defffd04 	addi	sp,sp,-12
    ac38:	dfc00015 	stw	ra,0(sp)
    ac3c:	d9800115 	stw	r6,4(sp)
    ac40:	d9c00215 	stw	r7,8(sp)
    ac44:	20800217 	ldw	r2,8(r4)
    ac48:	00c00074 	movhi	r3,1
    ac4c:	18ed3404 	addi	r3,r3,-19248
    ac50:	280d883a 	mov	r6,r5
    ac54:	10c00115 	stw	r3,4(r2)
    ac58:	100b883a 	mov	r5,r2
    ac5c:	d9c00104 	addi	r7,sp,4
    ac60:	000ad780 	call	ad78 <___vfprintf_internal_r>
    ac64:	dfc00017 	ldw	ra,0(sp)
    ac68:	dec00304 	addi	sp,sp,12
    ac6c:	f800283a 	ret

0000ac70 <printf>:
    ac70:	defffc04 	addi	sp,sp,-16
    ac74:	dfc00015 	stw	ra,0(sp)
    ac78:	d9400115 	stw	r5,4(sp)
    ac7c:	d9800215 	stw	r6,8(sp)
    ac80:	d9c00315 	stw	r7,12(sp)
    ac84:	00800074 	movhi	r2,1
    ac88:	10b52e04 	addi	r2,r2,-11080
    ac8c:	10800017 	ldw	r2,0(r2)
    ac90:	00c00074 	movhi	r3,1
    ac94:	18ed3404 	addi	r3,r3,-19248
    ac98:	200b883a 	mov	r5,r4
    ac9c:	10800217 	ldw	r2,8(r2)
    aca0:	d9800104 	addi	r6,sp,4
    aca4:	10c00115 	stw	r3,4(r2)
    aca8:	1009883a 	mov	r4,r2
    acac:	000b4ac0 	call	b4ac <__vfprintf_internal>
    acb0:	dfc00017 	ldw	ra,0(sp)
    acb4:	dec00404 	addi	sp,sp,16
    acb8:	f800283a 	ret

0000acbc <_puts_r>:
    acbc:	defffd04 	addi	sp,sp,-12
    acc0:	dc000015 	stw	r16,0(sp)
    acc4:	2021883a 	mov	r16,r4
    acc8:	2809883a 	mov	r4,r5
    accc:	dfc00215 	stw	ra,8(sp)
    acd0:	dc400115 	stw	r17,4(sp)
    acd4:	2823883a 	mov	r17,r5
    acd8:	000ad500 	call	ad50 <strlen>
    acdc:	81400217 	ldw	r5,8(r16)
    ace0:	00c00074 	movhi	r3,1
    ace4:	18ed3404 	addi	r3,r3,-19248
    ace8:	880d883a 	mov	r6,r17
    acec:	8009883a 	mov	r4,r16
    acf0:	28c00115 	stw	r3,4(r5)
    acf4:	100f883a 	mov	r7,r2
    acf8:	183ee83a 	callr	r3
    acfc:	047fffc4 	movi	r17,-1
    ad00:	14400926 	beq	r2,r17,ad28 <_puts_r+0x6c>
    ad04:	81400217 	ldw	r5,8(r16)
    ad08:	8009883a 	mov	r4,r16
    ad0c:	01800074 	movhi	r6,1
    ad10:	31b45e04 	addi	r6,r6,-11912
    ad14:	28800117 	ldw	r2,4(r5)
    ad18:	01c00044 	movi	r7,1
    ad1c:	103ee83a 	callr	r2
    ad20:	14400126 	beq	r2,r17,ad28 <_puts_r+0x6c>
    ad24:	0005883a 	mov	r2,zero
    ad28:	dfc00217 	ldw	ra,8(sp)
    ad2c:	dc400117 	ldw	r17,4(sp)
    ad30:	dc000017 	ldw	r16,0(sp)
    ad34:	dec00304 	addi	sp,sp,12
    ad38:	f800283a 	ret

0000ad3c <puts>:
    ad3c:	00800074 	movhi	r2,1
    ad40:	10b52e04 	addi	r2,r2,-11080
    ad44:	200b883a 	mov	r5,r4
    ad48:	11000017 	ldw	r4,0(r2)
    ad4c:	000acbc1 	jmpi	acbc <_puts_r>

0000ad50 <strlen>:
    ad50:	20800007 	ldb	r2,0(r4)
    ad54:	10000626 	beq	r2,zero,ad70 <strlen+0x20>
    ad58:	2005883a 	mov	r2,r4
    ad5c:	10800044 	addi	r2,r2,1
    ad60:	10c00007 	ldb	r3,0(r2)
    ad64:	183ffd1e 	bne	r3,zero,ad5c <strlen+0xc>
    ad68:	1105c83a 	sub	r2,r2,r4
    ad6c:	f800283a 	ret
    ad70:	0005883a 	mov	r2,zero
    ad74:	f800283a 	ret

0000ad78 <___vfprintf_internal_r>:
    ad78:	deffe004 	addi	sp,sp,-128
    ad7c:	d8c00804 	addi	r3,sp,32
    ad80:	ddc01d15 	stw	r23,116(sp)
    ad84:	dd401b15 	stw	r21,108(sp)
    ad88:	dd001a15 	stw	r20,104(sp)
    ad8c:	dcc01915 	stw	r19,100(sp)
    ad90:	dc801815 	stw	r18,96(sp)
    ad94:	dc001615 	stw	r16,88(sp)
    ad98:	dfc01f15 	stw	ra,124(sp)
    ad9c:	df001e15 	stw	fp,120(sp)
    ada0:	dd801c15 	stw	r22,112(sp)
    ada4:	dc401715 	stw	r17,92(sp)
    ada8:	d9000f15 	stw	r4,60(sp)
    adac:	d9c00e15 	stw	r7,56(sp)
    adb0:	3021883a 	mov	r16,r6
    adb4:	0025883a 	mov	r18,zero
    adb8:	d8001415 	stw	zero,80(sp)
    adbc:	d8000d15 	stw	zero,52(sp)
    adc0:	0029883a 	mov	r20,zero
    adc4:	d8000b15 	stw	zero,44(sp)
    adc8:	d8000c15 	stw	zero,48(sp)
    adcc:	d8001315 	stw	zero,76(sp)
    add0:	d8001015 	stw	zero,64(sp)
    add4:	002b883a 	mov	r21,zero
    add8:	04c00044 	movi	r19,1
    addc:	d8c00a15 	stw	r3,40(sp)
    ade0:	282f883a 	mov	r23,r5
    ade4:	80c00003 	ldbu	r3,0(r16)
    ade8:	84000044 	addi	r16,r16,1
    adec:	18803fcc 	andi	r2,r3,255
    adf0:	1080201c 	xori	r2,r2,128
    adf4:	10bfe004 	addi	r2,r2,-128
    adf8:	10001426 	beq	r2,zero,ae4c <___vfprintf_internal_r+0xd4>
    adfc:	acc03026 	beq	r21,r19,aec0 <___vfprintf_internal_r+0x148>
    ae00:	9d401f16 	blt	r19,r21,ae80 <___vfprintf_internal_r+0x108>
    ae04:	a83ff71e 	bne	r21,zero,ade4 <___vfprintf_internal_r+0x6c>
    ae08:	01000944 	movi	r4,37
    ae0c:	1100d926 	beq	r2,r4,b174 <___vfprintf_internal_r+0x3fc>
    ae10:	b8800117 	ldw	r2,4(r23)
    ae14:	d9000f17 	ldw	r4,60(sp)
    ae18:	d8c00905 	stb	r3,36(sp)
    ae1c:	b80b883a 	mov	r5,r23
    ae20:	d9800904 	addi	r6,sp,36
    ae24:	01c00044 	movi	r7,1
    ae28:	103ee83a 	callr	r2
    ae2c:	1000a31e 	bne	r2,zero,b0bc <___vfprintf_internal_r+0x344>
    ae30:	80c00003 	ldbu	r3,0(r16)
    ae34:	94800044 	addi	r18,r18,1
    ae38:	84000044 	addi	r16,r16,1
    ae3c:	18803fcc 	andi	r2,r3,255
    ae40:	1080201c 	xori	r2,r2,128
    ae44:	10bfe004 	addi	r2,r2,-128
    ae48:	103fec1e 	bne	r2,zero,adfc <___vfprintf_internal_r+0x84>
    ae4c:	9005883a 	mov	r2,r18
    ae50:	dfc01f17 	ldw	ra,124(sp)
    ae54:	df001e17 	ldw	fp,120(sp)
    ae58:	ddc01d17 	ldw	r23,116(sp)
    ae5c:	dd801c17 	ldw	r22,112(sp)
    ae60:	dd401b17 	ldw	r21,108(sp)
    ae64:	dd001a17 	ldw	r20,104(sp)
    ae68:	dcc01917 	ldw	r19,100(sp)
    ae6c:	dc801817 	ldw	r18,96(sp)
    ae70:	dc401717 	ldw	r17,92(sp)
    ae74:	dc001617 	ldw	r16,88(sp)
    ae78:	dec02004 	addi	sp,sp,128
    ae7c:	f800283a 	ret
    ae80:	01000084 	movi	r4,2
    ae84:	a9001226 	beq	r21,r4,aed0 <___vfprintf_internal_r+0x158>
    ae88:	010000c4 	movi	r4,3
    ae8c:	a93fd51e 	bne	r21,r4,ade4 <___vfprintf_internal_r+0x6c>
    ae90:	1c7ff404 	addi	r17,r3,-48
    ae94:	8c403fcc 	andi	r17,r17,255
    ae98:	01000244 	movi	r4,9
    ae9c:	24401b36 	bltu	r4,r17,af0c <___vfprintf_internal_r+0x194>
    aea0:	d9000b17 	ldw	r4,44(sp)
    aea4:	00bfffc4 	movi	r2,-1
    aea8:	2080ea26 	beq	r4,r2,b254 <___vfprintf_internal_r+0x4dc>
    aeac:	01400284 	movi	r5,10
    aeb0:	000a5b00 	call	a5b0 <__mulsi3>
    aeb4:	88a3883a 	add	r17,r17,r2
    aeb8:	dc400b15 	stw	r17,44(sp)
    aebc:	003fc906 	br	ade4 <___vfprintf_internal_r+0x6c>
    aec0:	01000c04 	movi	r4,48
    aec4:	1100de26 	beq	r2,r4,b240 <___vfprintf_internal_r+0x4c8>
    aec8:	01000944 	movi	r4,37
    aecc:	1100fd26 	beq	r2,r4,b2c4 <___vfprintf_internal_r+0x54c>
    aed0:	1c7ff404 	addi	r17,r3,-48
    aed4:	8c403fcc 	andi	r17,r17,255
    aed8:	01000244 	movi	r4,9
    aedc:	24400936 	bltu	r4,r17,af04 <___vfprintf_internal_r+0x18c>
    aee0:	d9000c17 	ldw	r4,48(sp)
    aee4:	00bfffc4 	movi	r2,-1
    aee8:	2080d826 	beq	r4,r2,b24c <___vfprintf_internal_r+0x4d4>
    aeec:	01400284 	movi	r5,10
    aef0:	000a5b00 	call	a5b0 <__mulsi3>
    aef4:	88a3883a 	add	r17,r17,r2
    aef8:	dc400c15 	stw	r17,48(sp)
    aefc:	05400084 	movi	r21,2
    af00:	003fb806 	br	ade4 <___vfprintf_internal_r+0x6c>
    af04:	01000b84 	movi	r4,46
    af08:	1100a726 	beq	r2,r4,b1a8 <___vfprintf_internal_r+0x430>
    af0c:	01401b04 	movi	r5,108
    af10:	1140a326 	beq	r2,r5,b1a0 <___vfprintf_internal_r+0x428>
    af14:	d9000b17 	ldw	r4,44(sp)
    af18:	00bfffc4 	movi	r2,-1
    af1c:	2080e626 	beq	r4,r2,b2b8 <___vfprintf_internal_r+0x540>
    af20:	d8001015 	stw	zero,64(sp)
    af24:	18ffea04 	addi	r3,r3,-88
    af28:	18c03fcc 	andi	r3,r3,255
    af2c:	00800804 	movi	r2,32
    af30:	10c0022e 	bgeu	r2,r3,af3c <___vfprintf_internal_r+0x1c4>
    af34:	002b883a 	mov	r21,zero
    af38:	003faa06 	br	ade4 <___vfprintf_internal_r+0x6c>
    af3c:	18c7883a 	add	r3,r3,r3
    af40:	18c7883a 	add	r3,r3,r3
    af44:	01400074 	movhi	r5,1
    af48:	296bd604 	addi	r5,r5,-20648
    af4c:	1947883a 	add	r3,r3,r5
    af50:	18800017 	ldw	r2,0(r3)
    af54:	1000683a 	jmp	r2
    af58:	0000b2f0 	cmpltui	zero,zero,715
    af5c:	0000af34 	movhi	zero,700
    af60:	0000af34 	movhi	zero,700
    af64:	0000af34 	movhi	zero,700
    af68:	0000af34 	movhi	zero,700
    af6c:	0000af34 	movhi	zero,700
    af70:	0000af34 	movhi	zero,700
    af74:	0000af34 	movhi	zero,700
    af78:	0000af34 	movhi	zero,700
    af7c:	0000af34 	movhi	zero,700
    af80:	0000af34 	movhi	zero,700
    af84:	0000b300 	call	b30 <__alt_mem_onchip_mem-0x74d0>
    af88:	0000afdc 	xori	zero,zero,703
    af8c:	0000af34 	movhi	zero,700
    af90:	0000af34 	movhi	zero,700
    af94:	0000af34 	movhi	zero,700
    af98:	0000af34 	movhi	zero,700
    af9c:	0000afdc 	xori	zero,zero,703
    afa0:	0000af34 	movhi	zero,700
    afa4:	0000af34 	movhi	zero,700
    afa8:	0000af34 	movhi	zero,700
    afac:	0000af34 	movhi	zero,700
    afb0:	0000af34 	movhi	zero,700
    afb4:	0000b0c4 	movi	zero,707
    afb8:	0000af34 	movhi	zero,700
    afbc:	0000af34 	movhi	zero,700
    afc0:	0000af34 	movhi	zero,700
    afc4:	0000b34c 	andi	zero,zero,717
    afc8:	0000af34 	movhi	zero,700
    afcc:	0000b0c8 	cmpgei	zero,zero,707
    afd0:	0000af34 	movhi	zero,700
    afd4:	0000af34 	movhi	zero,700
    afd8:	0000b2f8 	rdprs	zero,zero,715
    afdc:	d8c00d17 	ldw	r3,52(sp)
    afe0:	18003926 	beq	r3,zero,b0c8 <___vfprintf_internal_r+0x350>
    afe4:	d9000e17 	ldw	r4,56(sp)
    afe8:	00c00044 	movi	r3,1
    afec:	25400017 	ldw	r21,0(r4)
    aff0:	21000104 	addi	r4,r4,4
    aff4:	d9000e15 	stw	r4,56(sp)
    aff8:	d8c00d15 	stw	r3,52(sp)
    affc:	a8012116 	blt	r21,zero,b484 <___vfprintf_internal_r+0x70c>
    b000:	d8001215 	stw	zero,72(sp)
    b004:	d823883a 	mov	r17,sp
    b008:	a800371e 	bne	r21,zero,b0e8 <___vfprintf_internal_r+0x370>
    b00c:	d9400b17 	ldw	r5,44(sp)
    b010:	d809883a 	mov	r4,sp
    b014:	01400b0e 	bge	zero,r5,b044 <___vfprintf_internal_r+0x2cc>
    b018:	d8800b17 	ldw	r2,44(sp)
    b01c:	d823883a 	mov	r17,sp
    b020:	00c00c04 	movi	r3,48
    b024:	00000206 	br	b030 <___vfprintf_internal_r+0x2b8>
    b028:	d9400a17 	ldw	r5,40(sp)
    b02c:	89400426 	beq	r17,r5,b040 <___vfprintf_internal_r+0x2c8>
    b030:	88c00005 	stb	r3,0(r17)
    b034:	10bfffc4 	addi	r2,r2,-1
    b038:	8c400044 	addi	r17,r17,1
    b03c:	103ffa1e 	bne	r2,zero,b028 <___vfprintf_internal_r+0x2b0>
    b040:	892bc83a 	sub	r21,r17,r4
    b044:	d8c01217 	ldw	r3,72(sp)
    b048:	d9000c17 	ldw	r4,48(sp)
    b04c:	a8c5883a 	add	r2,r21,r3
    b050:	d8c01017 	ldw	r3,64(sp)
    b054:	2085c83a 	sub	r2,r4,r2
    b058:	d8801115 	stw	r2,68(sp)
    b05c:	18007f26 	beq	r3,zero,b25c <___vfprintf_internal_r+0x4e4>
    b060:	d8c01217 	ldw	r3,72(sp)
    b064:	1800fa1e 	bne	r3,zero,b450 <___vfprintf_internal_r+0x6d8>
    b068:	d8c01117 	ldw	r3,68(sp)
    b06c:	00c0620e 	bge	zero,r3,b1f8 <___vfprintf_internal_r+0x480>
    b070:	00800c04 	movi	r2,48
    b074:	d88008c5 	stb	r2,35(sp)
    b078:	b805883a 	mov	r2,r23
    b07c:	dc001215 	stw	r16,72(sp)
    b080:	882f883a 	mov	r23,r17
    b084:	1f3fffc4 	addi	fp,r3,-1
    b088:	05bfffc4 	movi	r22,-1
    b08c:	dc000f17 	ldw	r16,60(sp)
    b090:	1023883a 	mov	r17,r2
    b094:	00000206 	br	b0a0 <___vfprintf_internal_r+0x328>
    b098:	e73fffc4 	addi	fp,fp,-1
    b09c:	e580fc26 	beq	fp,r22,b490 <___vfprintf_internal_r+0x718>
    b0a0:	88800117 	ldw	r2,4(r17)
    b0a4:	8009883a 	mov	r4,r16
    b0a8:	880b883a 	mov	r5,r17
    b0ac:	d98008c4 	addi	r6,sp,35
    b0b0:	01c00044 	movi	r7,1
    b0b4:	103ee83a 	callr	r2
    b0b8:	103ff726 	beq	r2,zero,b098 <___vfprintf_internal_r+0x320>
    b0bc:	04bfffc4 	movi	r18,-1
    b0c0:	003f6206 	br	ae4c <___vfprintf_internal_r+0xd4>
    b0c4:	05000204 	movi	r20,8
    b0c8:	d9400e17 	ldw	r5,56(sp)
    b0cc:	2d400017 	ldw	r21,0(r5)
    b0d0:	29400104 	addi	r5,r5,4
    b0d4:	d9400e15 	stw	r5,56(sp)
    b0d8:	d8000d15 	stw	zero,52(sp)
    b0dc:	d8001215 	stw	zero,72(sp)
    b0e0:	d823883a 	mov	r17,sp
    b0e4:	a83fc926 	beq	r21,zero,b00c <___vfprintf_internal_r+0x294>
    b0e8:	05800244 	movi	r22,9
    b0ec:	dc001115 	stw	r16,68(sp)
    b0f0:	df001417 	ldw	fp,80(sp)
    b0f4:	00000506 	br	b10c <___vfprintf_internal_r+0x394>
    b0f8:	15400c04 	addi	r21,r2,48
    b0fc:	8d400005 	stb	r21,0(r17)
    b100:	802b883a 	mov	r21,r16
    b104:	8c400044 	addi	r17,r17,1
    b108:	80000f26 	beq	r16,zero,b148 <___vfprintf_internal_r+0x3d0>
    b10c:	a809883a 	mov	r4,r21
    b110:	a00b883a 	mov	r5,r20
    b114:	000a5a00 	call	a5a0 <__udivsi3>
    b118:	a009883a 	mov	r4,r20
    b11c:	100b883a 	mov	r5,r2
    b120:	1021883a 	mov	r16,r2
    b124:	000a5b00 	call	a5b0 <__mulsi3>
    b128:	a885c83a 	sub	r2,r21,r2
    b12c:	b0bff20e 	bge	r22,r2,b0f8 <___vfprintf_internal_r+0x380>
    b130:	e0000e26 	beq	fp,zero,b16c <___vfprintf_internal_r+0x3f4>
    b134:	15400dc4 	addi	r21,r2,55
    b138:	8d400005 	stb	r21,0(r17)
    b13c:	802b883a 	mov	r21,r16
    b140:	8c400044 	addi	r17,r17,1
    b144:	803ff11e 	bne	r16,zero,b10c <___vfprintf_internal_r+0x394>
    b148:	d9000b17 	ldw	r4,44(sp)
    b14c:	8eebc83a 	sub	r21,r17,sp
    b150:	dc001117 	ldw	r16,68(sp)
    b154:	2545c83a 	sub	r2,r4,r21
    b158:	d809883a 	mov	r4,sp
    b15c:	00bfb90e 	bge	zero,r2,b044 <___vfprintf_internal_r+0x2cc>
    b160:	d8c00a17 	ldw	r3,40(sp)
    b164:	88ffae36 	bltu	r17,r3,b020 <___vfprintf_internal_r+0x2a8>
    b168:	003fb606 	br	b044 <___vfprintf_internal_r+0x2cc>
    b16c:	154015c4 	addi	r21,r2,87
    b170:	003fe206 	br	b0fc <___vfprintf_internal_r+0x384>
    b174:	00c00044 	movi	r3,1
    b178:	013fffc4 	movi	r4,-1
    b17c:	d8c00d15 	stw	r3,52(sp)
    b180:	d9000b15 	stw	r4,44(sp)
    b184:	d8001415 	stw	zero,80(sp)
    b188:	05000284 	movi	r20,10
    b18c:	d9000c15 	stw	r4,48(sp)
    b190:	d8001315 	stw	zero,76(sp)
    b194:	d8001015 	stw	zero,64(sp)
    b198:	182b883a 	mov	r21,r3
    b19c:	003f1106 	br	ade4 <___vfprintf_internal_r+0x6c>
    b1a0:	00c00044 	movi	r3,1
    b1a4:	d8c01315 	stw	r3,76(sp)
    b1a8:	054000c4 	movi	r21,3
    b1ac:	003f0d06 	br	ade4 <___vfprintf_internal_r+0x6c>
    b1b0:	d8c01117 	ldw	r3,68(sp)
    b1b4:	dc001517 	ldw	r16,84(sp)
    b1b8:	8805883a 	mov	r2,r17
    b1bc:	90e5883a 	add	r18,r18,r3
    b1c0:	b823883a 	mov	r17,r23
    b1c4:	102f883a 	mov	r23,r2
    b1c8:	d8c01217 	ldw	r3,72(sp)
    b1cc:	18000a26 	beq	r3,zero,b1f8 <___vfprintf_internal_r+0x480>
    b1d0:	b8800117 	ldw	r2,4(r23)
    b1d4:	d9000f17 	ldw	r4,60(sp)
    b1d8:	00c00b44 	movi	r3,45
    b1dc:	d8c00905 	stb	r3,36(sp)
    b1e0:	b80b883a 	mov	r5,r23
    b1e4:	d9800904 	addi	r6,sp,36
    b1e8:	01c00044 	movi	r7,1
    b1ec:	103ee83a 	callr	r2
    b1f0:	103fb21e 	bne	r2,zero,b0bc <___vfprintf_internal_r+0x344>
    b1f4:	94800044 	addi	r18,r18,1
    b1f8:	8d6dc83a 	sub	r22,r17,r21
    b1fc:	057f4d0e 	bge	zero,r21,af34 <___vfprintf_internal_r+0x1bc>
    b200:	dd400f17 	ldw	r21,60(sp)
    b204:	00000206 	br	b210 <___vfprintf_internal_r+0x498>
    b208:	94800044 	addi	r18,r18,1
    b20c:	8dbf4926 	beq	r17,r22,af34 <___vfprintf_internal_r+0x1bc>
    b210:	8c7fffc4 	addi	r17,r17,-1
    b214:	88c00003 	ldbu	r3,0(r17)
    b218:	b8800117 	ldw	r2,4(r23)
    b21c:	a809883a 	mov	r4,r21
    b220:	d8c00905 	stb	r3,36(sp)
    b224:	b80b883a 	mov	r5,r23
    b228:	d9800904 	addi	r6,sp,36
    b22c:	01c00044 	movi	r7,1
    b230:	103ee83a 	callr	r2
    b234:	103ff426 	beq	r2,zero,b208 <___vfprintf_internal_r+0x490>
    b238:	04bfffc4 	movi	r18,-1
    b23c:	003f0306 	br	ae4c <___vfprintf_internal_r+0xd4>
    b240:	dd401015 	stw	r21,64(sp)
    b244:	05400084 	movi	r21,2
    b248:	003ee606 	br	ade4 <___vfprintf_internal_r+0x6c>
    b24c:	0005883a 	mov	r2,zero
    b250:	003f2806 	br	aef4 <___vfprintf_internal_r+0x17c>
    b254:	0005883a 	mov	r2,zero
    b258:	003f1606 	br	aeb4 <___vfprintf_internal_r+0x13c>
    b25c:	d8c01117 	ldw	r3,68(sp)
    b260:	00ffd90e 	bge	zero,r3,b1c8 <___vfprintf_internal_r+0x450>
    b264:	00800804 	movi	r2,32
    b268:	d8800885 	stb	r2,34(sp)
    b26c:	b805883a 	mov	r2,r23
    b270:	dc001515 	stw	r16,84(sp)
    b274:	882f883a 	mov	r23,r17
    b278:	1f3fffc4 	addi	fp,r3,-1
    b27c:	05bfffc4 	movi	r22,-1
    b280:	dc000f17 	ldw	r16,60(sp)
    b284:	1023883a 	mov	r17,r2
    b288:	00000206 	br	b294 <___vfprintf_internal_r+0x51c>
    b28c:	e73fffc4 	addi	fp,fp,-1
    b290:	e5bfc726 	beq	fp,r22,b1b0 <___vfprintf_internal_r+0x438>
    b294:	88800117 	ldw	r2,4(r17)
    b298:	8009883a 	mov	r4,r16
    b29c:	880b883a 	mov	r5,r17
    b2a0:	d9800884 	addi	r6,sp,34
    b2a4:	01c00044 	movi	r7,1
    b2a8:	103ee83a 	callr	r2
    b2ac:	103ff726 	beq	r2,zero,b28c <___vfprintf_internal_r+0x514>
    b2b0:	04bfffc4 	movi	r18,-1
    b2b4:	003ee506 	br	ae4c <___vfprintf_internal_r+0xd4>
    b2b8:	01000044 	movi	r4,1
    b2bc:	d9000b15 	stw	r4,44(sp)
    b2c0:	003f1806 	br	af24 <___vfprintf_internal_r+0x1ac>
    b2c4:	b8c00117 	ldw	r3,4(r23)
    b2c8:	d9000f17 	ldw	r4,60(sp)
    b2cc:	d8800905 	stb	r2,36(sp)
    b2d0:	b80b883a 	mov	r5,r23
    b2d4:	d9800904 	addi	r6,sp,36
    b2d8:	a80f883a 	mov	r7,r21
    b2dc:	183ee83a 	callr	r3
    b2e0:	103f761e 	bne	r2,zero,b0bc <___vfprintf_internal_r+0x344>
    b2e4:	94800044 	addi	r18,r18,1
    b2e8:	002b883a 	mov	r21,zero
    b2ec:	003ebd06 	br	ade4 <___vfprintf_internal_r+0x6c>
    b2f0:	00c00044 	movi	r3,1
    b2f4:	d8c01415 	stw	r3,80(sp)
    b2f8:	05000404 	movi	r20,16
    b2fc:	003f7206 	br	b0c8 <___vfprintf_internal_r+0x350>
    b300:	d9000c17 	ldw	r4,48(sp)
    b304:	9900420e 	bge	r19,r4,b410 <___vfprintf_internal_r+0x698>
    b308:	df000f17 	ldw	fp,60(sp)
    b30c:	25bfffc4 	addi	r22,r4,-1
    b310:	00800804 	movi	r2,32
    b314:	d8800845 	stb	r2,33(sp)
    b318:	b023883a 	mov	r17,r22
    b31c:	057fffc4 	movi	r21,-1
    b320:	8c7fffc4 	addi	r17,r17,-1
    b324:	8d403926 	beq	r17,r21,b40c <___vfprintf_internal_r+0x694>
    b328:	b8800117 	ldw	r2,4(r23)
    b32c:	e009883a 	mov	r4,fp
    b330:	b80b883a 	mov	r5,r23
    b334:	d9800844 	addi	r6,sp,33
    b338:	01c00044 	movi	r7,1
    b33c:	103ee83a 	callr	r2
    b340:	103ff726 	beq	r2,zero,b320 <___vfprintf_internal_r+0x5a8>
    b344:	04bfffc4 	movi	r18,-1
    b348:	003ec006 	br	ae4c <___vfprintf_internal_r+0xd4>
    b34c:	d9000e17 	ldw	r4,56(sp)
    b350:	d8c00e17 	ldw	r3,56(sp)
    b354:	21000017 	ldw	r4,0(r4)
    b358:	18c00104 	addi	r3,r3,4
    b35c:	d8c00e15 	stw	r3,56(sp)
    b360:	d9001215 	stw	r4,72(sp)
    b364:	000ad500 	call	ad50 <strlen>
    b368:	d9000c17 	ldw	r4,48(sp)
    b36c:	102d883a 	mov	r22,r2
    b370:	20b9c83a 	sub	fp,r4,r2
    b374:	07001b0e 	bge	zero,fp,b3e4 <___vfprintf_internal_r+0x66c>
    b378:	00800804 	movi	r2,32
    b37c:	d8800805 	stb	r2,32(sp)
    b380:	b805883a 	mov	r2,r23
    b384:	dc001115 	stw	r16,68(sp)
    b388:	b02f883a 	mov	r23,r22
    b38c:	e47fffc4 	addi	r17,fp,-1
    b390:	902d883a 	mov	r22,r18
    b394:	057fffc4 	movi	r21,-1
    b398:	dc000f17 	ldw	r16,60(sp)
    b39c:	1025883a 	mov	r18,r2
    b3a0:	00000206 	br	b3ac <___vfprintf_internal_r+0x634>
    b3a4:	8c7fffc4 	addi	r17,r17,-1
    b3a8:	8d400826 	beq	r17,r21,b3cc <___vfprintf_internal_r+0x654>
    b3ac:	90800117 	ldw	r2,4(r18)
    b3b0:	8009883a 	mov	r4,r16
    b3b4:	900b883a 	mov	r5,r18
    b3b8:	d9800804 	addi	r6,sp,32
    b3bc:	01c00044 	movi	r7,1
    b3c0:	103ee83a 	callr	r2
    b3c4:	103ff726 	beq	r2,zero,b3a4 <___vfprintf_internal_r+0x62c>
    b3c8:	003f3c06 	br	b0bc <___vfprintf_internal_r+0x344>
    b3cc:	dc001117 	ldw	r16,68(sp)
    b3d0:	9005883a 	mov	r2,r18
    b3d4:	b025883a 	mov	r18,r22
    b3d8:	9725883a 	add	r18,r18,fp
    b3dc:	b82d883a 	mov	r22,r23
    b3e0:	102f883a 	mov	r23,r2
    b3e4:	b8800117 	ldw	r2,4(r23)
    b3e8:	d9000f17 	ldw	r4,60(sp)
    b3ec:	d9801217 	ldw	r6,72(sp)
    b3f0:	b80b883a 	mov	r5,r23
    b3f4:	b00f883a 	mov	r7,r22
    b3f8:	103ee83a 	callr	r2
    b3fc:	103f2f1e 	bne	r2,zero,b0bc <___vfprintf_internal_r+0x344>
    b400:	95a5883a 	add	r18,r18,r22
    b404:	002b883a 	mov	r21,zero
    b408:	003e7606 	br	ade4 <___vfprintf_internal_r+0x6c>
    b40c:	95a5883a 	add	r18,r18,r22
    b410:	d9400e17 	ldw	r5,56(sp)
    b414:	b8800117 	ldw	r2,4(r23)
    b418:	d9000f17 	ldw	r4,60(sp)
    b41c:	28c00017 	ldw	r3,0(r5)
    b420:	d9800904 	addi	r6,sp,36
    b424:	b80b883a 	mov	r5,r23
    b428:	d8c00905 	stb	r3,36(sp)
    b42c:	d8c00e17 	ldw	r3,56(sp)
    b430:	01c00044 	movi	r7,1
    b434:	1c400104 	addi	r17,r3,4
    b438:	103ee83a 	callr	r2
    b43c:	103f1f1e 	bne	r2,zero,b0bc <___vfprintf_internal_r+0x344>
    b440:	94800044 	addi	r18,r18,1
    b444:	dc400e15 	stw	r17,56(sp)
    b448:	002b883a 	mov	r21,zero
    b44c:	003e6506 	br	ade4 <___vfprintf_internal_r+0x6c>
    b450:	b8800117 	ldw	r2,4(r23)
    b454:	d9000f17 	ldw	r4,60(sp)
    b458:	00c00b44 	movi	r3,45
    b45c:	d8c00905 	stb	r3,36(sp)
    b460:	b80b883a 	mov	r5,r23
    b464:	d9800904 	addi	r6,sp,36
    b468:	01c00044 	movi	r7,1
    b46c:	103ee83a 	callr	r2
    b470:	103f121e 	bne	r2,zero,b0bc <___vfprintf_internal_r+0x344>
    b474:	d8c01117 	ldw	r3,68(sp)
    b478:	94800044 	addi	r18,r18,1
    b47c:	00fefc16 	blt	zero,r3,b070 <___vfprintf_internal_r+0x2f8>
    b480:	003f5d06 	br	b1f8 <___vfprintf_internal_r+0x480>
    b484:	056bc83a 	sub	r21,zero,r21
    b488:	d8c01215 	stw	r3,72(sp)
    b48c:	003f1406 	br	b0e0 <___vfprintf_internal_r+0x368>
    b490:	d8c01117 	ldw	r3,68(sp)
    b494:	8805883a 	mov	r2,r17
    b498:	dc001217 	ldw	r16,72(sp)
    b49c:	b823883a 	mov	r17,r23
    b4a0:	90e5883a 	add	r18,r18,r3
    b4a4:	102f883a 	mov	r23,r2
    b4a8:	003f5306 	br	b1f8 <___vfprintf_internal_r+0x480>

0000b4ac <__vfprintf_internal>:
    b4ac:	00800074 	movhi	r2,1
    b4b0:	10b52e04 	addi	r2,r2,-11080
    b4b4:	2007883a 	mov	r3,r4
    b4b8:	11000017 	ldw	r4,0(r2)
    b4bc:	2805883a 	mov	r2,r5
    b4c0:	300f883a 	mov	r7,r6
    b4c4:	180b883a 	mov	r5,r3
    b4c8:	100d883a 	mov	r6,r2
    b4cc:	000ad781 	jmpi	ad78 <___vfprintf_internal_r>

0000b4d0 <__sfvwrite_small_dev>:
    b4d0:	2880000b 	ldhu	r2,0(r5)
    b4d4:	defffa04 	addi	sp,sp,-24
    b4d8:	dcc00315 	stw	r19,12(sp)
    b4dc:	10c0020c 	andi	r3,r2,8
    b4e0:	18ffffcc 	andi	r3,r3,65535
    b4e4:	18e0001c 	xori	r3,r3,32768
    b4e8:	dc800215 	stw	r18,8(sp)
    b4ec:	dc400115 	stw	r17,4(sp)
    b4f0:	dfc00515 	stw	ra,20(sp)
    b4f4:	dd000415 	stw	r20,16(sp)
    b4f8:	dc000015 	stw	r16,0(sp)
    b4fc:	18e00004 	addi	r3,r3,-32768
    b500:	2825883a 	mov	r18,r5
    b504:	2027883a 	mov	r19,r4
    b508:	3023883a 	mov	r17,r6
    b50c:	18002626 	beq	r3,zero,b5a8 <__sfvwrite_small_dev+0xd8>
    b510:	2940008f 	ldh	r5,2(r5)
    b514:	28001016 	blt	r5,zero,b558 <__sfvwrite_small_dev+0x88>
    b518:	01c01a0e 	bge	zero,r7,b584 <__sfvwrite_small_dev+0xb4>
    b51c:	3821883a 	mov	r16,r7
    b520:	05010004 	movi	r20,1024
    b524:	00000306 	br	b534 <__sfvwrite_small_dev+0x64>
    b528:	88a3883a 	add	r17,r17,r2
    b52c:	0400150e 	bge	zero,r16,b584 <__sfvwrite_small_dev+0xb4>
    b530:	9140008f 	ldh	r5,2(r18)
    b534:	880d883a 	mov	r6,r17
    b538:	9809883a 	mov	r4,r19
    b53c:	800f883a 	mov	r7,r16
    b540:	a400010e 	bge	r20,r16,b548 <__sfvwrite_small_dev+0x78>
    b544:	01c10004 	movi	r7,1024
    b548:	000b5b00 	call	b5b0 <_write_r>
    b54c:	80a1c83a 	sub	r16,r16,r2
    b550:	00bff516 	blt	zero,r2,b528 <__sfvwrite_small_dev+0x58>
    b554:	9080000b 	ldhu	r2,0(r18)
    b558:	10801014 	ori	r2,r2,64
    b55c:	9080000d 	sth	r2,0(r18)
    b560:	00bfffc4 	movi	r2,-1
    b564:	dfc00517 	ldw	ra,20(sp)
    b568:	dd000417 	ldw	r20,16(sp)
    b56c:	dcc00317 	ldw	r19,12(sp)
    b570:	dc800217 	ldw	r18,8(sp)
    b574:	dc400117 	ldw	r17,4(sp)
    b578:	dc000017 	ldw	r16,0(sp)
    b57c:	dec00604 	addi	sp,sp,24
    b580:	f800283a 	ret
    b584:	0005883a 	mov	r2,zero
    b588:	dfc00517 	ldw	ra,20(sp)
    b58c:	dd000417 	ldw	r20,16(sp)
    b590:	dcc00317 	ldw	r19,12(sp)
    b594:	dc800217 	ldw	r18,8(sp)
    b598:	dc400117 	ldw	r17,4(sp)
    b59c:	dc000017 	ldw	r16,0(sp)
    b5a0:	dec00604 	addi	sp,sp,24
    b5a4:	f800283a 	ret
    b5a8:	00bfffc4 	movi	r2,-1
    b5ac:	003fed06 	br	b564 <__sfvwrite_small_dev+0x94>

0000b5b0 <_write_r>:
    b5b0:	defffd04 	addi	sp,sp,-12
    b5b4:	dc400115 	stw	r17,4(sp)
    b5b8:	dc000015 	stw	r16,0(sp)
    b5bc:	2023883a 	mov	r17,r4
    b5c0:	04000074 	movhi	r16,1
    b5c4:	84360b04 	addi	r16,r16,-10196
    b5c8:	2809883a 	mov	r4,r5
    b5cc:	300b883a 	mov	r5,r6
    b5d0:	380d883a 	mov	r6,r7
    b5d4:	dfc00215 	stw	ra,8(sp)
    b5d8:	80000015 	stw	zero,0(r16)
    b5dc:	000b9700 	call	b970 <write>
    b5e0:	00ffffc4 	movi	r3,-1
    b5e4:	10c00526 	beq	r2,r3,b5fc <_write_r+0x4c>
    b5e8:	dfc00217 	ldw	ra,8(sp)
    b5ec:	dc400117 	ldw	r17,4(sp)
    b5f0:	dc000017 	ldw	r16,0(sp)
    b5f4:	dec00304 	addi	sp,sp,12
    b5f8:	f800283a 	ret
    b5fc:	80c00017 	ldw	r3,0(r16)
    b600:	183ff926 	beq	r3,zero,b5e8 <_write_r+0x38>
    b604:	88c00015 	stw	r3,0(r17)
    b608:	dfc00217 	ldw	ra,8(sp)
    b60c:	dc400117 	ldw	r17,4(sp)
    b610:	dc000017 	ldw	r16,0(sp)
    b614:	dec00304 	addi	sp,sp,12
    b618:	f800283a 	ret

0000b61c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b61c:	defff004 	addi	sp,sp,-64
    b620:	df000f15 	stw	fp,60(sp)
    b624:	df000f04 	addi	fp,sp,60
    b628:	e13ffd15 	stw	r4,-12(fp)
    b62c:	e17ffe15 	stw	r5,-8(fp)
    b630:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    b634:	00bffa84 	movi	r2,-22
    b638:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b63c:	e0bffd17 	ldw	r2,-12(fp)
    b640:	10800828 	cmpgeui	r2,r2,32
    b644:	10005c1e 	bne	r2,zero,b7b8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b648:	0005303a 	rdctl	r2,status
    b64c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b650:	e0fff317 	ldw	r3,-52(fp)
    b654:	00bfff84 	movi	r2,-2
    b658:	1884703a 	and	r2,r3,r2
    b65c:	1001703a 	wrctl	status,r2
  
  return context;
    b660:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b664:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    b668:	00c00074 	movhi	r3,1
    b66c:	18f84a04 	addi	r3,r3,-7896
    b670:	e0bffd17 	ldw	r2,-12(fp)
    b674:	100490fa 	slli	r2,r2,3
    b678:	1885883a 	add	r2,r3,r2
    b67c:	e0ffff17 	ldw	r3,-4(fp)
    b680:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    b684:	00c00074 	movhi	r3,1
    b688:	18f84a04 	addi	r3,r3,-7896
    b68c:	e0bffd17 	ldw	r2,-12(fp)
    b690:	100490fa 	slli	r2,r2,3
    b694:	1885883a 	add	r2,r3,r2
    b698:	10800104 	addi	r2,r2,4
    b69c:	e0fffe17 	ldw	r3,-8(fp)
    b6a0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b6a4:	e0bfff17 	ldw	r2,-4(fp)
    b6a8:	10001f26 	beq	r2,zero,b728 <alt_irq_register+0x10c>
    b6ac:	e0bffd17 	ldw	r2,-12(fp)
    b6b0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b6b4:	0005303a 	rdctl	r2,status
    b6b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b6bc:	e0fff517 	ldw	r3,-44(fp)
    b6c0:	00bfff84 	movi	r2,-2
    b6c4:	1884703a 	and	r2,r3,r2
    b6c8:	1001703a 	wrctl	status,r2
  
  return context;
    b6cc:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b6d0:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    b6d4:	e0bff417 	ldw	r2,-48(fp)
    b6d8:	00c00044 	movi	r3,1
    b6dc:	1884983a 	sll	r2,r3,r2
    b6e0:	1007883a 	mov	r3,r2
    b6e4:	00800074 	movhi	r2,1
    b6e8:	10b60c04 	addi	r2,r2,-10192
    b6ec:	10800017 	ldw	r2,0(r2)
    b6f0:	1886b03a 	or	r3,r3,r2
    b6f4:	00800074 	movhi	r2,1
    b6f8:	10b60c04 	addi	r2,r2,-10192
    b6fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b700:	00800074 	movhi	r2,1
    b704:	10b60c04 	addi	r2,r2,-10192
    b708:	10800017 	ldw	r2,0(r2)
    b70c:	100170fa 	wrctl	ienable,r2
    b710:	e0bff617 	ldw	r2,-40(fp)
    b714:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b718:	e0bff717 	ldw	r2,-36(fp)
    b71c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b720:	0005883a 	mov	r2,zero
    b724:	00001f06 	br	b7a4 <alt_irq_register+0x188>
    b728:	e0bffd17 	ldw	r2,-12(fp)
    b72c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b730:	0005303a 	rdctl	r2,status
    b734:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b738:	e0fff917 	ldw	r3,-28(fp)
    b73c:	00bfff84 	movi	r2,-2
    b740:	1884703a 	and	r2,r3,r2
    b744:	1001703a 	wrctl	status,r2
  
  return context;
    b748:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b74c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    b750:	e0bff817 	ldw	r2,-32(fp)
    b754:	00c00044 	movi	r3,1
    b758:	1884983a 	sll	r2,r3,r2
    b75c:	0084303a 	nor	r2,zero,r2
    b760:	1007883a 	mov	r3,r2
    b764:	00800074 	movhi	r2,1
    b768:	10b60c04 	addi	r2,r2,-10192
    b76c:	10800017 	ldw	r2,0(r2)
    b770:	1886703a 	and	r3,r3,r2
    b774:	00800074 	movhi	r2,1
    b778:	10b60c04 	addi	r2,r2,-10192
    b77c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b780:	00800074 	movhi	r2,1
    b784:	10b60c04 	addi	r2,r2,-10192
    b788:	10800017 	ldw	r2,0(r2)
    b78c:	100170fa 	wrctl	ienable,r2
    b790:	e0bffa17 	ldw	r2,-24(fp)
    b794:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b798:	e0bffb17 	ldw	r2,-20(fp)
    b79c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b7a0:	0005883a 	mov	r2,zero
    b7a4:	e0bff115 	stw	r2,-60(fp)
    b7a8:	e0bff217 	ldw	r2,-56(fp)
    b7ac:	e0bffc15 	stw	r2,-16(fp)
    b7b0:	e0bffc17 	ldw	r2,-16(fp)
    b7b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    b7b8:	e0bff117 	ldw	r2,-60(fp)
}
    b7bc:	e037883a 	mov	sp,fp
    b7c0:	df000017 	ldw	fp,0(sp)
    b7c4:	dec00104 	addi	sp,sp,4
    b7c8:	f800283a 	ret

0000b7cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b7cc:	defffc04 	addi	sp,sp,-16
    b7d0:	df000315 	stw	fp,12(sp)
    b7d4:	df000304 	addi	fp,sp,12
    b7d8:	e13ffd15 	stw	r4,-12(fp)
    b7dc:	e17ffe15 	stw	r5,-8(fp)
    b7e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b7e4:	e0fffe17 	ldw	r3,-8(fp)
    b7e8:	e0bffd17 	ldw	r2,-12(fp)
    b7ec:	18800e26 	beq	r3,r2,b828 <alt_load_section+0x5c>
  {
    while( to != end )
    b7f0:	00000a06 	br	b81c <alt_load_section+0x50>
    {
      *to++ = *from++;
    b7f4:	e0bffd17 	ldw	r2,-12(fp)
    b7f8:	10c00017 	ldw	r3,0(r2)
    b7fc:	e0bffe17 	ldw	r2,-8(fp)
    b800:	10c00015 	stw	r3,0(r2)
    b804:	e0bffe17 	ldw	r2,-8(fp)
    b808:	10800104 	addi	r2,r2,4
    b80c:	e0bffe15 	stw	r2,-8(fp)
    b810:	e0bffd17 	ldw	r2,-12(fp)
    b814:	10800104 	addi	r2,r2,4
    b818:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b81c:	e0fffe17 	ldw	r3,-8(fp)
    b820:	e0bfff17 	ldw	r2,-4(fp)
    b824:	18bff31e 	bne	r3,r2,b7f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b828:	e037883a 	mov	sp,fp
    b82c:	df000017 	ldw	fp,0(sp)
    b830:	dec00104 	addi	sp,sp,4
    b834:	f800283a 	ret

0000b838 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b838:	defffe04 	addi	sp,sp,-8
    b83c:	dfc00115 	stw	ra,4(sp)
    b840:	df000015 	stw	fp,0(sp)
    b844:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b848:	01000074 	movhi	r4,1
    b84c:	21353804 	addi	r4,r4,-11040
    b850:	01400074 	movhi	r5,1
    b854:	29746d04 	addi	r5,r5,-11852
    b858:	01800074 	movhi	r6,1
    b85c:	31b53804 	addi	r6,r6,-11040
    b860:	000b7cc0 	call	b7cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b864:	01000074 	movhi	r4,1
    b868:	21200804 	addi	r4,r4,-32736
    b86c:	01400074 	movhi	r5,1
    b870:	29600804 	addi	r5,r5,-32736
    b874:	01800074 	movhi	r6,1
    b878:	31a06f04 	addi	r6,r6,-32324
    b87c:	000b7cc0 	call	b7cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b880:	01000074 	movhi	r4,1
    b884:	2133e504 	addi	r4,r4,-12396
    b888:	01400074 	movhi	r5,1
    b88c:	2973e504 	addi	r5,r5,-12396
    b890:	01800074 	movhi	r6,1
    b894:	31b46d04 	addi	r6,r6,-11852
    b898:	000b7cc0 	call	b7cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b89c:	000c2800 	call	c280 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b8a0:	000c3b80 	call	c3b8 <alt_icache_flush_all>
}
    b8a4:	e037883a 	mov	sp,fp
    b8a8:	dfc00117 	ldw	ra,4(sp)
    b8ac:	df000017 	ldw	fp,0(sp)
    b8b0:	dec00204 	addi	sp,sp,8
    b8b4:	f800283a 	ret

0000b8b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b8b8:	defffd04 	addi	sp,sp,-12
    b8bc:	dfc00215 	stw	ra,8(sp)
    b8c0:	df000115 	stw	fp,4(sp)
    b8c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b8c8:	0009883a 	mov	r4,zero
    b8cc:	000ba980 	call	ba98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b8d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b8d4:	000bacc0 	call	bacc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b8d8:	01000074 	movhi	r4,1
    b8dc:	21345f04 	addi	r4,r4,-11908
    b8e0:	01400074 	movhi	r5,1
    b8e4:	29745f04 	addi	r5,r5,-11908
    b8e8:	01800074 	movhi	r6,1
    b8ec:	31b45f04 	addi	r6,r6,-11908
    b8f0:	000c4c80 	call	c4c8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b8f4:	d120e817 	ldw	r4,-31840(gp)
    b8f8:	d0e0e917 	ldw	r3,-31836(gp)
    b8fc:	d0a0ea17 	ldw	r2,-31832(gp)
    b900:	180b883a 	mov	r5,r3
    b904:	100d883a 	mov	r6,r2
    b908:	00087e80 	call	87e8 <main>
    b90c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b910:	01000044 	movi	r4,1
    b914:	000c1b40 	call	c1b4 <close>
  exit (result);
    b918:	e13fff17 	ldw	r4,-4(fp)
    b91c:	000cd180 	call	cd18 <exit>

0000b920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b920:	defffe04 	addi	sp,sp,-8
    b924:	dfc00115 	stw	ra,4(sp)
    b928:	df000015 	stw	fp,0(sp)
    b92c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b930:	00800074 	movhi	r2,1
    b934:	10b53504 	addi	r2,r2,-11052
    b938:	10800017 	ldw	r2,0(r2)
    b93c:	10000526 	beq	r2,zero,b954 <alt_get_errno+0x34>
    b940:	00800074 	movhi	r2,1
    b944:	10b53504 	addi	r2,r2,-11052
    b948:	10800017 	ldw	r2,0(r2)
    b94c:	103ee83a 	callr	r2
    b950:	00000206 	br	b95c <alt_get_errno+0x3c>
    b954:	00800074 	movhi	r2,1
    b958:	10b60b04 	addi	r2,r2,-10196
}
    b95c:	e037883a 	mov	sp,fp
    b960:	dfc00117 	ldw	ra,4(sp)
    b964:	df000017 	ldw	fp,0(sp)
    b968:	dec00204 	addi	sp,sp,8
    b96c:	f800283a 	ret

0000b970 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b970:	defff904 	addi	sp,sp,-28
    b974:	dfc00615 	stw	ra,24(sp)
    b978:	df000515 	stw	fp,20(sp)
    b97c:	df000504 	addi	fp,sp,20
    b980:	e13ffd15 	stw	r4,-12(fp)
    b984:	e17ffe15 	stw	r5,-8(fp)
    b988:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b98c:	e0bffd17 	ldw	r2,-12(fp)
    b990:	10000716 	blt	r2,zero,b9b0 <write+0x40>
    b994:	e13ffd17 	ldw	r4,-12(fp)
    b998:	01400304 	movi	r5,12
    b99c:	000a5b00 	call	a5b0 <__mulsi3>
    b9a0:	00c00074 	movhi	r3,1
    b9a4:	18f4c504 	addi	r3,r3,-11500
    b9a8:	10c5883a 	add	r2,r2,r3
    b9ac:	00000106 	br	b9b4 <write+0x44>
    b9b0:	0005883a 	mov	r2,zero
    b9b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b9b8:	e0bffb17 	ldw	r2,-20(fp)
    b9bc:	10001f26 	beq	r2,zero,ba3c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b9c0:	e0bffb17 	ldw	r2,-20(fp)
    b9c4:	10800217 	ldw	r2,8(r2)
    b9c8:	108000cc 	andi	r2,r2,3
    b9cc:	10001726 	beq	r2,zero,ba2c <write+0xbc>
    b9d0:	e0bffb17 	ldw	r2,-20(fp)
    b9d4:	10800017 	ldw	r2,0(r2)
    b9d8:	10800617 	ldw	r2,24(r2)
    b9dc:	10001326 	beq	r2,zero,ba2c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b9e0:	e0bffb17 	ldw	r2,-20(fp)
    b9e4:	10800017 	ldw	r2,0(r2)
    b9e8:	10c00617 	ldw	r3,24(r2)
    b9ec:	e0bfff17 	ldw	r2,-4(fp)
    b9f0:	e13ffb17 	ldw	r4,-20(fp)
    b9f4:	e17ffe17 	ldw	r5,-8(fp)
    b9f8:	100d883a 	mov	r6,r2
    b9fc:	183ee83a 	callr	r3
    ba00:	e0bffc15 	stw	r2,-16(fp)
    ba04:	e0bffc17 	ldw	r2,-16(fp)
    ba08:	1000060e 	bge	r2,zero,ba24 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ba0c:	000b9200 	call	b920 <alt_get_errno>
    ba10:	e0fffc17 	ldw	r3,-16(fp)
    ba14:	00c7c83a 	sub	r3,zero,r3
    ba18:	10c00015 	stw	r3,0(r2)
        return -1;
    ba1c:	00bfffc4 	movi	r2,-1
    ba20:	00000a06 	br	ba4c <write+0xdc>
      }
      return rval;
    ba24:	e0bffc17 	ldw	r2,-16(fp)
    ba28:	00000806 	br	ba4c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ba2c:	000b9200 	call	b920 <alt_get_errno>
    ba30:	00c00344 	movi	r3,13
    ba34:	10c00015 	stw	r3,0(r2)
    ba38:	00000306 	br	ba48 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ba3c:	000b9200 	call	b920 <alt_get_errno>
    ba40:	00c01444 	movi	r3,81
    ba44:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    ba48:	00bfffc4 	movi	r2,-1
}
    ba4c:	e037883a 	mov	sp,fp
    ba50:	dfc00117 	ldw	ra,4(sp)
    ba54:	df000017 	ldw	fp,0(sp)
    ba58:	dec00204 	addi	sp,sp,8
    ba5c:	f800283a 	ret

0000ba60 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ba60:	defffd04 	addi	sp,sp,-12
    ba64:	dfc00215 	stw	ra,8(sp)
    ba68:	df000115 	stw	fp,4(sp)
    ba6c:	df000104 	addi	fp,sp,4
    ba70:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ba74:	e13fff17 	ldw	r4,-4(fp)
    ba78:	01400074 	movhi	r5,1
    ba7c:	29753204 	addi	r5,r5,-11064
    ba80:	000c3180 	call	c318 <alt_dev_llist_insert>
}
    ba84:	e037883a 	mov	sp,fp
    ba88:	dfc00117 	ldw	ra,4(sp)
    ba8c:	df000017 	ldw	fp,0(sp)
    ba90:	dec00204 	addi	sp,sp,8
    ba94:	f800283a 	ret

0000ba98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ba98:	defffd04 	addi	sp,sp,-12
    ba9c:	dfc00215 	stw	ra,8(sp)
    baa0:	df000115 	stw	fp,4(sp)
    baa4:	df000104 	addi	fp,sp,4
    baa8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    baac:	000c9f40 	call	c9f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    bab0:	00800044 	movi	r2,1
    bab4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    bab8:	e037883a 	mov	sp,fp
    babc:	dfc00117 	ldw	ra,4(sp)
    bac0:	df000017 	ldw	fp,0(sp)
    bac4:	dec00204 	addi	sp,sp,8
    bac8:	f800283a 	ret

0000bacc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    bacc:	defffe04 	addi	sp,sp,-8
    bad0:	dfc00115 	stw	ra,4(sp)
    bad4:	df000015 	stw	fp,0(sp)
    bad8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLOCK_TIMER, sys_clock_timer);
    badc:	01000074 	movhi	r4,1
    bae0:	21050804 	addi	r4,r4,5152
    bae4:	000b883a 	mov	r5,zero
    bae8:	01800044 	movi	r6,1
    baec:	01c0fa04 	movi	r7,1000
    baf0:	000bde80 	call	bde8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    baf4:	01000074 	movhi	r4,1
    baf8:	2134a504 	addi	r4,r4,-11628
    bafc:	000ba600 	call	ba60 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    bb00:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    bb04:	01000074 	movhi	r4,1
    bb08:	2134b004 	addi	r4,r4,-11584
    bb0c:	000ba600 	call	ba60 <alt_dev_reg>
}
    bb10:	e037883a 	mov	sp,fp
    bb14:	dfc00117 	ldw	ra,4(sp)
    bb18:	df000017 	ldw	fp,0(sp)
    bb1c:	dec00204 	addi	sp,sp,8
    bb20:	f800283a 	ret

0000bb24 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bb24:	defffa04 	addi	sp,sp,-24
    bb28:	dfc00515 	stw	ra,20(sp)
    bb2c:	df000415 	stw	fp,16(sp)
    bb30:	df000404 	addi	fp,sp,16
    bb34:	e13ffd15 	stw	r4,-12(fp)
    bb38:	e17ffe15 	stw	r5,-8(fp)
    bb3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bb40:	e0bffd17 	ldw	r2,-12(fp)
    bb44:	10800017 	ldw	r2,0(r2)
    bb48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bb4c:	e0bffc17 	ldw	r2,-16(fp)
    bb50:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    bb54:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bb58:	10800217 	ldw	r2,8(r2)
    bb5c:	1809883a 	mov	r4,r3
    bb60:	e17ffe17 	ldw	r5,-8(fp)
    bb64:	e1bfff17 	ldw	r6,-4(fp)
    bb68:	100f883a 	mov	r7,r2
    bb6c:	000bbe40 	call	bbe4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bb70:	e037883a 	mov	sp,fp
    bb74:	dfc00117 	ldw	ra,4(sp)
    bb78:	df000017 	ldw	fp,0(sp)
    bb7c:	dec00204 	addi	sp,sp,8
    bb80:	f800283a 	ret

0000bb84 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bb84:	defffa04 	addi	sp,sp,-24
    bb88:	dfc00515 	stw	ra,20(sp)
    bb8c:	df000415 	stw	fp,16(sp)
    bb90:	df000404 	addi	fp,sp,16
    bb94:	e13ffd15 	stw	r4,-12(fp)
    bb98:	e17ffe15 	stw	r5,-8(fp)
    bb9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bba0:	e0bffd17 	ldw	r2,-12(fp)
    bba4:	10800017 	ldw	r2,0(r2)
    bba8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bbac:	e0bffc17 	ldw	r2,-16(fp)
    bbb0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    bbb4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bbb8:	10800217 	ldw	r2,8(r2)
    bbbc:	1809883a 	mov	r4,r3
    bbc0:	e17ffe17 	ldw	r5,-8(fp)
    bbc4:	e1bfff17 	ldw	r6,-4(fp)
    bbc8:	100f883a 	mov	r7,r2
    bbcc:	000bcd80 	call	bcd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bbd0:	e037883a 	mov	sp,fp
    bbd4:	dfc00117 	ldw	ra,4(sp)
    bbd8:	df000017 	ldw	fp,0(sp)
    bbdc:	dec00204 	addi	sp,sp,8
    bbe0:	f800283a 	ret

0000bbe4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    bbe4:	defff704 	addi	sp,sp,-36
    bbe8:	df000815 	stw	fp,32(sp)
    bbec:	df000804 	addi	fp,sp,32
    bbf0:	e13ffc15 	stw	r4,-16(fp)
    bbf4:	e17ffd15 	stw	r5,-12(fp)
    bbf8:	e1bffe15 	stw	r6,-8(fp)
    bbfc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bc00:	e0bffc17 	ldw	r2,-16(fp)
    bc04:	10800017 	ldw	r2,0(r2)
    bc08:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    bc0c:	e0bffd17 	ldw	r2,-12(fp)
    bc10:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    bc14:	e0bffe17 	ldw	r2,-8(fp)
    bc18:	e0fffd17 	ldw	r3,-12(fp)
    bc1c:	1885883a 	add	r2,r3,r2
    bc20:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    bc24:	00001406 	br	bc78 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bc28:	e0bff917 	ldw	r2,-28(fp)
    bc2c:	10800037 	ldwio	r2,0(r2)
    bc30:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    bc34:	e0bffb17 	ldw	r2,-20(fp)
    bc38:	10a0000c 	andi	r2,r2,32768
    bc3c:	10000826 	beq	r2,zero,bc60 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bc40:	e0bffb17 	ldw	r2,-20(fp)
    bc44:	1007883a 	mov	r3,r2
    bc48:	e0bff817 	ldw	r2,-32(fp)
    bc4c:	10c00005 	stb	r3,0(r2)
    bc50:	e0bff817 	ldw	r2,-32(fp)
    bc54:	10800044 	addi	r2,r2,1
    bc58:	e0bff815 	stw	r2,-32(fp)
    bc5c:	00000606 	br	bc78 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    bc60:	e0fff817 	ldw	r3,-32(fp)
    bc64:	e0bffd17 	ldw	r2,-12(fp)
    bc68:	1880071e 	bne	r3,r2,bc88 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    bc6c:	e0bfff17 	ldw	r2,-4(fp)
    bc70:	1090000c 	andi	r2,r2,16384
    bc74:	1000061e 	bne	r2,zero,bc90 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    bc78:	e0fff817 	ldw	r3,-32(fp)
    bc7c:	e0bffa17 	ldw	r2,-24(fp)
    bc80:	18bfe936 	bltu	r3,r2,bc28 <altera_avalon_jtag_uart_read+0x44>
    bc84:	00000306 	br	bc94 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    bc88:	0001883a 	nop
    bc8c:	00000106 	br	bc94 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    bc90:	0001883a 	nop
    
  }

  if (ptr != buffer)
    bc94:	e0fff817 	ldw	r3,-32(fp)
    bc98:	e0bffd17 	ldw	r2,-12(fp)
    bc9c:	18800426 	beq	r3,r2,bcb0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    bca0:	e0fff817 	ldw	r3,-32(fp)
    bca4:	e0bffd17 	ldw	r2,-12(fp)
    bca8:	1885c83a 	sub	r2,r3,r2
    bcac:	00000606 	br	bcc8 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    bcb0:	e0bfff17 	ldw	r2,-4(fp)
    bcb4:	1090000c 	andi	r2,r2,16384
    bcb8:	10000226 	beq	r2,zero,bcc4 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    bcbc:	00bffd44 	movi	r2,-11
    bcc0:	00000106 	br	bcc8 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    bcc4:	00bffec4 	movi	r2,-5
}
    bcc8:	e037883a 	mov	sp,fp
    bccc:	df000017 	ldw	fp,0(sp)
    bcd0:	dec00104 	addi	sp,sp,4
    bcd4:	f800283a 	ret

0000bcd8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bcd8:	defff904 	addi	sp,sp,-28
    bcdc:	df000615 	stw	fp,24(sp)
    bce0:	df000604 	addi	fp,sp,24
    bce4:	e13ffc15 	stw	r4,-16(fp)
    bce8:	e17ffd15 	stw	r5,-12(fp)
    bcec:	e1bffe15 	stw	r6,-8(fp)
    bcf0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bcf4:	e0bffc17 	ldw	r2,-16(fp)
    bcf8:	10800017 	ldw	r2,0(r2)
    bcfc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    bd00:	e0bffe17 	ldw	r2,-8(fp)
    bd04:	e0fffd17 	ldw	r3,-12(fp)
    bd08:	1885883a 	add	r2,r3,r2
    bd0c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    bd10:	00000f06 	br	bd50 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    bd14:	e0bffa17 	ldw	r2,-24(fp)
    bd18:	10800104 	addi	r2,r2,4
    bd1c:	10800037 	ldwio	r2,0(r2)
    bd20:	10bfffec 	andhi	r2,r2,65535
    bd24:	10000a26 	beq	r2,zero,bd50 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    bd28:	e0bffa17 	ldw	r2,-24(fp)
    bd2c:	e0fffd17 	ldw	r3,-12(fp)
    bd30:	18c00003 	ldbu	r3,0(r3)
    bd34:	18c03fcc 	andi	r3,r3,255
    bd38:	18c0201c 	xori	r3,r3,128
    bd3c:	18ffe004 	addi	r3,r3,-128
    bd40:	e13ffd17 	ldw	r4,-12(fp)
    bd44:	21000044 	addi	r4,r4,1
    bd48:	e13ffd15 	stw	r4,-12(fp)
    bd4c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    bd50:	e0fffd17 	ldw	r3,-12(fp)
    bd54:	e0bffb17 	ldw	r2,-20(fp)
    bd58:	18bfee36 	bltu	r3,r2,bd14 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    bd5c:	e0bffe17 	ldw	r2,-8(fp)
}
    bd60:	e037883a 	mov	sp,fp
    bd64:	df000017 	ldw	fp,0(sp)
    bd68:	dec00104 	addi	sp,sp,4
    bd6c:	f800283a 	ret

0000bd70 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    bd70:	defff904 	addi	sp,sp,-28
    bd74:	dfc00615 	stw	ra,24(sp)
    bd78:	df000515 	stw	fp,20(sp)
    bd7c:	df000504 	addi	fp,sp,20
    bd80:	e13ffe15 	stw	r4,-8(fp)
    bd84:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    bd88:	0007883a 	mov	r3,zero
    bd8c:	e0bffe17 	ldw	r2,-8(fp)
    bd90:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    bd94:	e0bffe17 	ldw	r2,-8(fp)
    bd98:	10800104 	addi	r2,r2,4
    bd9c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bda0:	0005303a 	rdctl	r2,status
    bda4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bda8:	e0fffc17 	ldw	r3,-16(fp)
    bdac:	00bfff84 	movi	r2,-2
    bdb0:	1884703a 	and	r2,r3,r2
    bdb4:	1001703a 	wrctl	status,r2
  
  return context;
    bdb8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    bdbc:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    bdc0:	000c8f00 	call	c8f0 <alt_tick>
    bdc4:	e0bffb17 	ldw	r2,-20(fp)
    bdc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bdcc:	e0bffd17 	ldw	r2,-12(fp)
    bdd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    bdd4:	e037883a 	mov	sp,fp
    bdd8:	dfc00117 	ldw	ra,4(sp)
    bddc:	df000017 	ldw	fp,0(sp)
    bde0:	dec00204 	addi	sp,sp,8
    bde4:	f800283a 	ret

0000bde8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    bde8:	defff904 	addi	sp,sp,-28
    bdec:	dfc00615 	stw	ra,24(sp)
    bdf0:	df000515 	stw	fp,20(sp)
    bdf4:	df000504 	addi	fp,sp,20
    bdf8:	e13ffc15 	stw	r4,-16(fp)
    bdfc:	e17ffd15 	stw	r5,-12(fp)
    be00:	e1bffe15 	stw	r6,-8(fp)
    be04:	e1ffff15 	stw	r7,-4(fp)
    be08:	e0bfff17 	ldw	r2,-4(fp)
    be0c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    be10:	00800074 	movhi	r2,1
    be14:	10b61004 	addi	r2,r2,-10176
    be18:	10800017 	ldw	r2,0(r2)
    be1c:	1000041e 	bne	r2,zero,be30 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    be20:	00800074 	movhi	r2,1
    be24:	10b61004 	addi	r2,r2,-10176
    be28:	e0fffb17 	ldw	r3,-20(fp)
    be2c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    be30:	e0bffc17 	ldw	r2,-16(fp)
    be34:	10800104 	addi	r2,r2,4
    be38:	00c001c4 	movi	r3,7
    be3c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    be40:	e13ffe17 	ldw	r4,-8(fp)
    be44:	e17ffc17 	ldw	r5,-16(fp)
    be48:	01800074 	movhi	r6,1
    be4c:	31af5c04 	addi	r6,r6,-17040
    be50:	000b61c0 	call	b61c <alt_irq_register>
#endif  
}
    be54:	e037883a 	mov	sp,fp
    be58:	dfc00117 	ldw	ra,4(sp)
    be5c:	df000017 	ldw	fp,0(sp)
    be60:	dec00204 	addi	sp,sp,8
    be64:	f800283a 	ret

0000be68 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    be68:	defffa04 	addi	sp,sp,-24
    be6c:	dfc00515 	stw	ra,20(sp)
    be70:	df000415 	stw	fp,16(sp)
    be74:	df000404 	addi	fp,sp,16
    be78:	e13ffd15 	stw	r4,-12(fp)
    be7c:	e17ffe15 	stw	r5,-8(fp)
    be80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    be84:	e0bffd17 	ldw	r2,-12(fp)
    be88:	10800017 	ldw	r2,0(r2)
    be8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    be90:	e0bffc17 	ldw	r2,-16(fp)
    be94:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    be98:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    be9c:	10800217 	ldw	r2,8(r2)
    bea0:	1809883a 	mov	r4,r3
    bea4:	e17ffe17 	ldw	r5,-8(fp)
    bea8:	e1bfff17 	ldw	r6,-4(fp)
    beac:	100f883a 	mov	r7,r2
    beb0:	000bf780 	call	bf78 <altera_avalon_uart_read>
      fd->fd_flags);
}
    beb4:	e037883a 	mov	sp,fp
    beb8:	dfc00117 	ldw	ra,4(sp)
    bebc:	df000017 	ldw	fp,0(sp)
    bec0:	dec00204 	addi	sp,sp,8
    bec4:	f800283a 	ret

0000bec8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bec8:	defffa04 	addi	sp,sp,-24
    becc:	dfc00515 	stw	ra,20(sp)
    bed0:	df000415 	stw	fp,16(sp)
    bed4:	df000404 	addi	fp,sp,16
    bed8:	e13ffd15 	stw	r4,-12(fp)
    bedc:	e17ffe15 	stw	r5,-8(fp)
    bee0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    bee4:	e0bffd17 	ldw	r2,-12(fp)
    bee8:	10800017 	ldw	r2,0(r2)
    beec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    bef0:	e0bffc17 	ldw	r2,-16(fp)
    bef4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    bef8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    befc:	10800217 	ldw	r2,8(r2)
    bf00:	1809883a 	mov	r4,r3
    bf04:	e17ffe17 	ldw	r5,-8(fp)
    bf08:	e1bfff17 	ldw	r6,-4(fp)
    bf0c:	100f883a 	mov	r7,r2
    bf10:	000c0880 	call	c088 <altera_avalon_uart_write>
      fd->fd_flags);
}
    bf14:	e037883a 	mov	sp,fp
    bf18:	dfc00117 	ldw	ra,4(sp)
    bf1c:	df000017 	ldw	fp,0(sp)
    bf20:	dec00204 	addi	sp,sp,8
    bf24:	f800283a 	ret

0000bf28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf28:	defffe04 	addi	sp,sp,-8
    bf2c:	dfc00115 	stw	ra,4(sp)
    bf30:	df000015 	stw	fp,0(sp)
    bf34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bf38:	00800074 	movhi	r2,1
    bf3c:	10b53504 	addi	r2,r2,-11052
    bf40:	10800017 	ldw	r2,0(r2)
    bf44:	10000526 	beq	r2,zero,bf5c <alt_get_errno+0x34>
    bf48:	00800074 	movhi	r2,1
    bf4c:	10b53504 	addi	r2,r2,-11052
    bf50:	10800017 	ldw	r2,0(r2)
    bf54:	103ee83a 	callr	r2
    bf58:	00000206 	br	bf64 <alt_get_errno+0x3c>
    bf5c:	00800074 	movhi	r2,1
    bf60:	10b60b04 	addi	r2,r2,-10196
}
    bf64:	e037883a 	mov	sp,fp
    bf68:	dfc00117 	ldw	ra,4(sp)
    bf6c:	df000017 	ldw	fp,0(sp)
    bf70:	dec00204 	addi	sp,sp,8
    bf74:	f800283a 	ret

0000bf78 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    bf78:	defff804 	addi	sp,sp,-32
    bf7c:	dfc00715 	stw	ra,28(sp)
    bf80:	df000615 	stw	fp,24(sp)
    bf84:	df000604 	addi	fp,sp,24
    bf88:	e13ffc15 	stw	r4,-16(fp)
    bf8c:	e17ffd15 	stw	r5,-12(fp)
    bf90:	e1bffe15 	stw	r6,-8(fp)
    bf94:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    bf98:	e0bfff17 	ldw	r2,-4(fp)
    bf9c:	1090000c 	andi	r2,r2,16384
    bfa0:	1005003a 	cmpeq	r2,r2,zero
    bfa4:	10803fcc 	andi	r2,r2,255
    bfa8:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    bfac:	e0bffc17 	ldw	r2,-16(fp)
    bfb0:	10800017 	ldw	r2,0(r2)
    bfb4:	10800204 	addi	r2,r2,8
    bfb8:	10800037 	ldwio	r2,0(r2)
    bfbc:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    bfc0:	e0bffc17 	ldw	r2,-16(fp)
    bfc4:	10800017 	ldw	r2,0(r2)
    bfc8:	10800204 	addi	r2,r2,8
    bfcc:	0007883a 	mov	r3,zero
    bfd0:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    bfd4:	e0bffb17 	ldw	r2,-20(fp)
    bfd8:	1080200c 	andi	r2,r2,128
    bfdc:	10000b26 	beq	r2,zero,c00c <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    bfe0:	e0bffc17 	ldw	r2,-16(fp)
    bfe4:	10800017 	ldw	r2,0(r2)
    bfe8:	10800037 	ldwio	r2,0(r2)
    bfec:	1007883a 	mov	r3,r2
    bff0:	e0bffd17 	ldw	r2,-12(fp)
    bff4:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    bff8:	e0bffb17 	ldw	r2,-20(fp)
    bffc:	108000cc 	andi	r2,r2,3
    c000:	1000021e 	bne	r2,zero,c00c <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    c004:	00800044 	movi	r2,1
    c008:	00000606 	br	c024 <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    c00c:	e0bffa17 	ldw	r2,-24(fp)
    c010:	103fe61e 	bne	r2,zero,bfac <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
    c014:	000bf280 	call	bf28 <alt_get_errno>
    c018:	00c002c4 	movi	r3,11
    c01c:	10c00015 	stw	r3,0(r2)
 
  return 0;
    c020:	0005883a 	mov	r2,zero
}
    c024:	e037883a 	mov	sp,fp
    c028:	dfc00117 	ldw	ra,4(sp)
    c02c:	df000017 	ldw	fp,0(sp)
    c030:	dec00204 	addi	sp,sp,8
    c034:	f800283a 	ret

0000c038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c038:	defffe04 	addi	sp,sp,-8
    c03c:	dfc00115 	stw	ra,4(sp)
    c040:	df000015 	stw	fp,0(sp)
    c044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c048:	00800074 	movhi	r2,1
    c04c:	10b53504 	addi	r2,r2,-11052
    c050:	10800017 	ldw	r2,0(r2)
    c054:	10000526 	beq	r2,zero,c06c <alt_get_errno+0x34>
    c058:	00800074 	movhi	r2,1
    c05c:	10b53504 	addi	r2,r2,-11052
    c060:	10800017 	ldw	r2,0(r2)
    c064:	103ee83a 	callr	r2
    c068:	00000206 	br	c074 <alt_get_errno+0x3c>
    c06c:	00800074 	movhi	r2,1
    c070:	10b60b04 	addi	r2,r2,-10196
}
    c074:	e037883a 	mov	sp,fp
    c078:	dfc00117 	ldw	ra,4(sp)
    c07c:	df000017 	ldw	fp,0(sp)
    c080:	dec00204 	addi	sp,sp,8
    c084:	f800283a 	ret

0000c088 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    c088:	defff704 	addi	sp,sp,-36
    c08c:	dfc00815 	stw	ra,32(sp)
    c090:	df000715 	stw	fp,28(sp)
    c094:	df000704 	addi	fp,sp,28
    c098:	e13ffc15 	stw	r4,-16(fp)
    c09c:	e17ffd15 	stw	r5,-12(fp)
    c0a0:	e1bffe15 	stw	r6,-8(fp)
    c0a4:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    c0a8:	e0bfff17 	ldw	r2,-4(fp)
    c0ac:	1090000c 	andi	r2,r2,16384
    c0b0:	1005003a 	cmpeq	r2,r2,zero
    c0b4:	10803fcc 	andi	r2,r2,255
    c0b8:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    c0bc:	e0bffe17 	ldw	r2,-8(fp)
    c0c0:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    c0c4:	e0bffc17 	ldw	r2,-16(fp)
    c0c8:	10800017 	ldw	r2,0(r2)
    c0cc:	10800204 	addi	r2,r2,8
    c0d0:	10800037 	ldwio	r2,0(r2)
    c0d4:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    c0d8:	e0bffb17 	ldw	r2,-20(fp)
    c0dc:	1080100c 	andi	r2,r2,64
    c0e0:	10000f26 	beq	r2,zero,c120 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    c0e4:	e0bffc17 	ldw	r2,-16(fp)
    c0e8:	10800017 	ldw	r2,0(r2)
    c0ec:	10800104 	addi	r2,r2,4
    c0f0:	e0fffd17 	ldw	r3,-12(fp)
    c0f4:	18c00003 	ldbu	r3,0(r3)
    c0f8:	18c03fcc 	andi	r3,r3,255
    c0fc:	18c0201c 	xori	r3,r3,128
    c100:	18ffe004 	addi	r3,r3,-128
    c104:	e13ffd17 	ldw	r4,-12(fp)
    c108:	21000044 	addi	r4,r4,1
    c10c:	e13ffd15 	stw	r4,-12(fp)
    c110:	10c00035 	stwio	r3,0(r2)
      count--;
    c114:	e0bff917 	ldw	r2,-28(fp)
    c118:	10bfffc4 	addi	r2,r2,-1
    c11c:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    c120:	e0bffa17 	ldw	r2,-24(fp)
    c124:	10000226 	beq	r2,zero,c130 <altera_avalon_uart_write+0xa8>
    c128:	e0bff917 	ldw	r2,-28(fp)
    c12c:	103fe51e 	bne	r2,zero,c0c4 <altera_avalon_uart_write+0x3c>

  if (count)
    c130:	e0bff917 	ldw	r2,-28(fp)
    c134:	10000326 	beq	r2,zero,c144 <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    c138:	000c0380 	call	c038 <alt_get_errno>
    c13c:	00c002c4 	movi	r3,11
    c140:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    c144:	e0fffe17 	ldw	r3,-8(fp)
    c148:	e0bff917 	ldw	r2,-28(fp)
    c14c:	1885c83a 	sub	r2,r3,r2
}
    c150:	e037883a 	mov	sp,fp
    c154:	dfc00117 	ldw	ra,4(sp)
    c158:	df000017 	ldw	fp,0(sp)
    c15c:	dec00204 	addi	sp,sp,8
    c160:	f800283a 	ret

0000c164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c164:	defffe04 	addi	sp,sp,-8
    c168:	dfc00115 	stw	ra,4(sp)
    c16c:	df000015 	stw	fp,0(sp)
    c170:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c174:	00800074 	movhi	r2,1
    c178:	10b53504 	addi	r2,r2,-11052
    c17c:	10800017 	ldw	r2,0(r2)
    c180:	10000526 	beq	r2,zero,c198 <alt_get_errno+0x34>
    c184:	00800074 	movhi	r2,1
    c188:	10b53504 	addi	r2,r2,-11052
    c18c:	10800017 	ldw	r2,0(r2)
    c190:	103ee83a 	callr	r2
    c194:	00000206 	br	c1a0 <alt_get_errno+0x3c>
    c198:	00800074 	movhi	r2,1
    c19c:	10b60b04 	addi	r2,r2,-10196
}
    c1a0:	e037883a 	mov	sp,fp
    c1a4:	dfc00117 	ldw	ra,4(sp)
    c1a8:	df000017 	ldw	fp,0(sp)
    c1ac:	dec00204 	addi	sp,sp,8
    c1b0:	f800283a 	ret

0000c1b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c1b4:	defffb04 	addi	sp,sp,-20
    c1b8:	dfc00415 	stw	ra,16(sp)
    c1bc:	df000315 	stw	fp,12(sp)
    c1c0:	df000304 	addi	fp,sp,12
    c1c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c1c8:	e0bfff17 	ldw	r2,-4(fp)
    c1cc:	10000716 	blt	r2,zero,c1ec <close+0x38>
    c1d0:	e13fff17 	ldw	r4,-4(fp)
    c1d4:	01400304 	movi	r5,12
    c1d8:	000a5b00 	call	a5b0 <__mulsi3>
    c1dc:	00c00074 	movhi	r3,1
    c1e0:	18f4c504 	addi	r3,r3,-11500
    c1e4:	10c5883a 	add	r2,r2,r3
    c1e8:	00000106 	br	c1f0 <close+0x3c>
    c1ec:	0005883a 	mov	r2,zero
    c1f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    c1f4:	e0bffd17 	ldw	r2,-12(fp)
    c1f8:	10001826 	beq	r2,zero,c25c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c1fc:	e0bffd17 	ldw	r2,-12(fp)
    c200:	10800017 	ldw	r2,0(r2)
    c204:	10800417 	ldw	r2,16(r2)
    c208:	10000626 	beq	r2,zero,c224 <close+0x70>
    c20c:	e0bffd17 	ldw	r2,-12(fp)
    c210:	10800017 	ldw	r2,0(r2)
    c214:	10800417 	ldw	r2,16(r2)
    c218:	e13ffd17 	ldw	r4,-12(fp)
    c21c:	103ee83a 	callr	r2
    c220:	00000106 	br	c228 <close+0x74>
    c224:	0005883a 	mov	r2,zero
    c228:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c22c:	e13fff17 	ldw	r4,-4(fp)
    c230:	000c7d80 	call	c7d8 <alt_release_fd>
    if (rval < 0)
    c234:	e0bffe17 	ldw	r2,-8(fp)
    c238:	1000060e 	bge	r2,zero,c254 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    c23c:	000c1640 	call	c164 <alt_get_errno>
    c240:	e0fffe17 	ldw	r3,-8(fp)
    c244:	00c7c83a 	sub	r3,zero,r3
    c248:	10c00015 	stw	r3,0(r2)
      return -1;
    c24c:	00bfffc4 	movi	r2,-1
    c250:	00000606 	br	c26c <close+0xb8>
    }
    return 0;
    c254:	0005883a 	mov	r2,zero
    c258:	00000406 	br	c26c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c25c:	000c1640 	call	c164 <alt_get_errno>
    c260:	00c01444 	movi	r3,81
    c264:	10c00015 	stw	r3,0(r2)
    return -1;
    c268:	00bfffc4 	movi	r2,-1
  }
}
    c26c:	e037883a 	mov	sp,fp
    c270:	dfc00117 	ldw	ra,4(sp)
    c274:	df000017 	ldw	fp,0(sp)
    c278:	dec00204 	addi	sp,sp,8
    c27c:	f800283a 	ret

0000c280 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c280:	deffff04 	addi	sp,sp,-4
    c284:	df000015 	stw	fp,0(sp)
    c288:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c28c:	e037883a 	mov	sp,fp
    c290:	df000017 	ldw	fp,0(sp)
    c294:	dec00104 	addi	sp,sp,4
    c298:	f800283a 	ret

0000c29c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c29c:	defffc04 	addi	sp,sp,-16
    c2a0:	df000315 	stw	fp,12(sp)
    c2a4:	df000304 	addi	fp,sp,12
    c2a8:	e13ffd15 	stw	r4,-12(fp)
    c2ac:	e17ffe15 	stw	r5,-8(fp)
    c2b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c2b4:	e0bfff17 	ldw	r2,-4(fp)
}
    c2b8:	e037883a 	mov	sp,fp
    c2bc:	df000017 	ldw	fp,0(sp)
    c2c0:	dec00104 	addi	sp,sp,4
    c2c4:	f800283a 	ret

0000c2c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c2c8:	defffe04 	addi	sp,sp,-8
    c2cc:	dfc00115 	stw	ra,4(sp)
    c2d0:	df000015 	stw	fp,0(sp)
    c2d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c2d8:	00800074 	movhi	r2,1
    c2dc:	10b53504 	addi	r2,r2,-11052
    c2e0:	10800017 	ldw	r2,0(r2)
    c2e4:	10000526 	beq	r2,zero,c2fc <alt_get_errno+0x34>
    c2e8:	00800074 	movhi	r2,1
    c2ec:	10b53504 	addi	r2,r2,-11052
    c2f0:	10800017 	ldw	r2,0(r2)
    c2f4:	103ee83a 	callr	r2
    c2f8:	00000206 	br	c304 <alt_get_errno+0x3c>
    c2fc:	00800074 	movhi	r2,1
    c300:	10b60b04 	addi	r2,r2,-10196
}
    c304:	e037883a 	mov	sp,fp
    c308:	dfc00117 	ldw	ra,4(sp)
    c30c:	df000017 	ldw	fp,0(sp)
    c310:	dec00204 	addi	sp,sp,8
    c314:	f800283a 	ret

0000c318 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c318:	defffa04 	addi	sp,sp,-24
    c31c:	dfc00515 	stw	ra,20(sp)
    c320:	df000415 	stw	fp,16(sp)
    c324:	df000404 	addi	fp,sp,16
    c328:	e13ffe15 	stw	r4,-8(fp)
    c32c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c330:	e0bffe17 	ldw	r2,-8(fp)
    c334:	10000326 	beq	r2,zero,c344 <alt_dev_llist_insert+0x2c>
    c338:	e0bffe17 	ldw	r2,-8(fp)
    c33c:	10800217 	ldw	r2,8(r2)
    c340:	1000051e 	bne	r2,zero,c358 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    c344:	000c2c80 	call	c2c8 <alt_get_errno>
    c348:	00c00584 	movi	r3,22
    c34c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    c350:	00bffa84 	movi	r2,-22
    c354:	00001306 	br	c3a4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c358:	e0bffe17 	ldw	r2,-8(fp)
    c35c:	e0ffff17 	ldw	r3,-4(fp)
    c360:	e0fffc15 	stw	r3,-16(fp)
    c364:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c368:	e0bffd17 	ldw	r2,-12(fp)
    c36c:	e0fffc17 	ldw	r3,-16(fp)
    c370:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c374:	e0bffc17 	ldw	r2,-16(fp)
    c378:	10c00017 	ldw	r3,0(r2)
    c37c:	e0bffd17 	ldw	r2,-12(fp)
    c380:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c384:	e0bffc17 	ldw	r2,-16(fp)
    c388:	10800017 	ldw	r2,0(r2)
    c38c:	e0fffd17 	ldw	r3,-12(fp)
    c390:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c394:	e0bffc17 	ldw	r2,-16(fp)
    c398:	e0fffd17 	ldw	r3,-12(fp)
    c39c:	10c00015 	stw	r3,0(r2)

  return 0;  
    c3a0:	0005883a 	mov	r2,zero
}
    c3a4:	e037883a 	mov	sp,fp
    c3a8:	dfc00117 	ldw	ra,4(sp)
    c3ac:	df000017 	ldw	fp,0(sp)
    c3b0:	dec00204 	addi	sp,sp,8
    c3b4:	f800283a 	ret

0000c3b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c3b8:	defffe04 	addi	sp,sp,-8
    c3bc:	dfc00115 	stw	ra,4(sp)
    c3c0:	df000015 	stw	fp,0(sp)
    c3c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c3c8:	0009883a 	mov	r4,zero
    c3cc:	01420004 	movi	r5,2048
    c3d0:	000cc8c0 	call	cc8c <alt_icache_flush>
#endif
}
    c3d4:	e037883a 	mov	sp,fp
    c3d8:	dfc00117 	ldw	ra,4(sp)
    c3dc:	df000017 	ldw	fp,0(sp)
    c3e0:	dec00204 	addi	sp,sp,8
    c3e4:	f800283a 	ret

0000c3e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c3e8:	defff804 	addi	sp,sp,-32
    c3ec:	dfc00715 	stw	ra,28(sp)
    c3f0:	df000615 	stw	fp,24(sp)
    c3f4:	dc000515 	stw	r16,20(sp)
    c3f8:	df000504 	addi	fp,sp,20
    c3fc:	e13ffc15 	stw	r4,-16(fp)
    c400:	e17ffd15 	stw	r5,-12(fp)
    c404:	e1bffe15 	stw	r6,-8(fp)
    c408:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c40c:	e13ffd17 	ldw	r4,-12(fp)
    c410:	e17ffe17 	ldw	r5,-8(fp)
    c414:	e1bfff17 	ldw	r6,-4(fp)
    c418:	000c6800 	call	c680 <open>
    c41c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c420:	e0bffb17 	ldw	r2,-20(fp)
    c424:	10002216 	blt	r2,zero,c4b0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    c428:	04000074 	movhi	r16,1
    c42c:	8434c504 	addi	r16,r16,-11500
    c430:	e0bffb17 	ldw	r2,-20(fp)
    c434:	1009883a 	mov	r4,r2
    c438:	01400304 	movi	r5,12
    c43c:	000a5b00 	call	a5b0 <__mulsi3>
    c440:	8085883a 	add	r2,r16,r2
    c444:	10c00017 	ldw	r3,0(r2)
    c448:	e0bffc17 	ldw	r2,-16(fp)
    c44c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c450:	04000074 	movhi	r16,1
    c454:	8434c504 	addi	r16,r16,-11500
    c458:	e0bffb17 	ldw	r2,-20(fp)
    c45c:	1009883a 	mov	r4,r2
    c460:	01400304 	movi	r5,12
    c464:	000a5b00 	call	a5b0 <__mulsi3>
    c468:	8085883a 	add	r2,r16,r2
    c46c:	10800104 	addi	r2,r2,4
    c470:	10c00017 	ldw	r3,0(r2)
    c474:	e0bffc17 	ldw	r2,-16(fp)
    c478:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c47c:	04000074 	movhi	r16,1
    c480:	8434c504 	addi	r16,r16,-11500
    c484:	e0bffb17 	ldw	r2,-20(fp)
    c488:	1009883a 	mov	r4,r2
    c48c:	01400304 	movi	r5,12
    c490:	000a5b00 	call	a5b0 <__mulsi3>
    c494:	8085883a 	add	r2,r16,r2
    c498:	10800204 	addi	r2,r2,8
    c49c:	10c00017 	ldw	r3,0(r2)
    c4a0:	e0bffc17 	ldw	r2,-16(fp)
    c4a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c4a8:	e13ffb17 	ldw	r4,-20(fp)
    c4ac:	000c7d80 	call	c7d8 <alt_release_fd>
  }
} 
    c4b0:	e037883a 	mov	sp,fp
    c4b4:	dfc00217 	ldw	ra,8(sp)
    c4b8:	df000117 	ldw	fp,4(sp)
    c4bc:	dc000017 	ldw	r16,0(sp)
    c4c0:	dec00304 	addi	sp,sp,12
    c4c4:	f800283a 	ret

0000c4c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c4c8:	defffb04 	addi	sp,sp,-20
    c4cc:	dfc00415 	stw	ra,16(sp)
    c4d0:	df000315 	stw	fp,12(sp)
    c4d4:	df000304 	addi	fp,sp,12
    c4d8:	e13ffd15 	stw	r4,-12(fp)
    c4dc:	e17ffe15 	stw	r5,-8(fp)
    c4e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c4e4:	01000074 	movhi	r4,1
    c4e8:	2134c804 	addi	r4,r4,-11488
    c4ec:	e17ffd17 	ldw	r5,-12(fp)
    c4f0:	01800044 	movi	r6,1
    c4f4:	01c07fc4 	movi	r7,511
    c4f8:	000c3e80 	call	c3e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c4fc:	01000074 	movhi	r4,1
    c500:	2134c504 	addi	r4,r4,-11500
    c504:	e17ffe17 	ldw	r5,-8(fp)
    c508:	000d883a 	mov	r6,zero
    c50c:	01c07fc4 	movi	r7,511
    c510:	000c3e80 	call	c3e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c514:	01000074 	movhi	r4,1
    c518:	2134cb04 	addi	r4,r4,-11476
    c51c:	e17fff17 	ldw	r5,-4(fp)
    c520:	01800044 	movi	r6,1
    c524:	01c07fc4 	movi	r7,511
    c528:	000c3e80 	call	c3e8 <alt_open_fd>
}  
    c52c:	e037883a 	mov	sp,fp
    c530:	dfc00117 	ldw	ra,4(sp)
    c534:	df000017 	ldw	fp,0(sp)
    c538:	dec00204 	addi	sp,sp,8
    c53c:	f800283a 	ret

0000c540 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c540:	defffe04 	addi	sp,sp,-8
    c544:	dfc00115 	stw	ra,4(sp)
    c548:	df000015 	stw	fp,0(sp)
    c54c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c550:	00800074 	movhi	r2,1
    c554:	10b53504 	addi	r2,r2,-11052
    c558:	10800017 	ldw	r2,0(r2)
    c55c:	10000526 	beq	r2,zero,c574 <alt_get_errno+0x34>
    c560:	00800074 	movhi	r2,1
    c564:	10b53504 	addi	r2,r2,-11052
    c568:	10800017 	ldw	r2,0(r2)
    c56c:	103ee83a 	callr	r2
    c570:	00000206 	br	c57c <alt_get_errno+0x3c>
    c574:	00800074 	movhi	r2,1
    c578:	10b60b04 	addi	r2,r2,-10196
}
    c57c:	e037883a 	mov	sp,fp
    c580:	dfc00117 	ldw	ra,4(sp)
    c584:	df000017 	ldw	fp,0(sp)
    c588:	dec00204 	addi	sp,sp,8
    c58c:	f800283a 	ret

0000c590 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c590:	defffb04 	addi	sp,sp,-20
    c594:	dfc00415 	stw	ra,16(sp)
    c598:	df000315 	stw	fp,12(sp)
    c59c:	dc000215 	stw	r16,8(sp)
    c5a0:	df000204 	addi	fp,sp,8
    c5a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c5a8:	e0bfff17 	ldw	r2,-4(fp)
    c5ac:	10800217 	ldw	r2,8(r2)
    c5b0:	10d00034 	orhi	r3,r2,16384
    c5b4:	e0bfff17 	ldw	r2,-4(fp)
    c5b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c5bc:	e03ffe15 	stw	zero,-8(fp)
    c5c0:	00002206 	br	c64c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c5c4:	04000074 	movhi	r16,1
    c5c8:	8434c504 	addi	r16,r16,-11500
    c5cc:	e0bffe17 	ldw	r2,-8(fp)
    c5d0:	1009883a 	mov	r4,r2
    c5d4:	01400304 	movi	r5,12
    c5d8:	000a5b00 	call	a5b0 <__mulsi3>
    c5dc:	8085883a 	add	r2,r16,r2
    c5e0:	10c00017 	ldw	r3,0(r2)
    c5e4:	e0bfff17 	ldw	r2,-4(fp)
    c5e8:	10800017 	ldw	r2,0(r2)
    c5ec:	1880141e 	bne	r3,r2,c640 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c5f0:	04000074 	movhi	r16,1
    c5f4:	8434c504 	addi	r16,r16,-11500
    c5f8:	e0bffe17 	ldw	r2,-8(fp)
    c5fc:	1009883a 	mov	r4,r2
    c600:	01400304 	movi	r5,12
    c604:	000a5b00 	call	a5b0 <__mulsi3>
    c608:	8085883a 	add	r2,r16,r2
    c60c:	10800204 	addi	r2,r2,8
    c610:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c614:	10000a0e 	bge	r2,zero,c640 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c618:	e13ffe17 	ldw	r4,-8(fp)
    c61c:	01400304 	movi	r5,12
    c620:	000a5b00 	call	a5b0 <__mulsi3>
    c624:	00c00074 	movhi	r3,1
    c628:	18f4c504 	addi	r3,r3,-11500
    c62c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c630:	e0bfff17 	ldw	r2,-4(fp)
    c634:	18800226 	beq	r3,r2,c640 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c638:	00bffcc4 	movi	r2,-13
    c63c:	00000a06 	br	c668 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c640:	e0bffe17 	ldw	r2,-8(fp)
    c644:	10800044 	addi	r2,r2,1
    c648:	e0bffe15 	stw	r2,-8(fp)
    c64c:	00800074 	movhi	r2,1
    c650:	10b53404 	addi	r2,r2,-11056
    c654:	10800017 	ldw	r2,0(r2)
    c658:	1007883a 	mov	r3,r2
    c65c:	e0bffe17 	ldw	r2,-8(fp)
    c660:	18bfd82e 	bgeu	r3,r2,c5c4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c664:	0005883a 	mov	r2,zero
}
    c668:	e037883a 	mov	sp,fp
    c66c:	dfc00217 	ldw	ra,8(sp)
    c670:	df000117 	ldw	fp,4(sp)
    c674:	dc000017 	ldw	r16,0(sp)
    c678:	dec00304 	addi	sp,sp,12
    c67c:	f800283a 	ret

0000c680 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c680:	defff604 	addi	sp,sp,-40
    c684:	dfc00915 	stw	ra,36(sp)
    c688:	df000815 	stw	fp,32(sp)
    c68c:	df000804 	addi	fp,sp,32
    c690:	e13ffd15 	stw	r4,-12(fp)
    c694:	e17ffe15 	stw	r5,-8(fp)
    c698:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c69c:	00bfffc4 	movi	r2,-1
    c6a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c6a4:	00bffb44 	movi	r2,-19
    c6a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c6ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c6b0:	e13ffd17 	ldw	r4,-12(fp)
    c6b4:	01400074 	movhi	r5,1
    c6b8:	29753204 	addi	r5,r5,-11064
    c6bc:	000ca140 	call	ca14 <alt_find_dev>
    c6c0:	e0bff815 	stw	r2,-32(fp)
    c6c4:	e0bff817 	ldw	r2,-32(fp)
    c6c8:	1000051e 	bne	r2,zero,c6e0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c6cc:	e13ffd17 	ldw	r4,-12(fp)
    c6d0:	000caa40 	call	caa4 <alt_find_file>
    c6d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c6d8:	00800044 	movi	r2,1
    c6dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c6e0:	e0bff817 	ldw	r2,-32(fp)
    c6e4:	10002a26 	beq	r2,zero,c790 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c6e8:	e13ff817 	ldw	r4,-32(fp)
    c6ec:	000cbb80 	call	cbb8 <alt_get_fd>
    c6f0:	e0bff915 	stw	r2,-28(fp)
    c6f4:	e0bff917 	ldw	r2,-28(fp)
    c6f8:	1000030e 	bge	r2,zero,c708 <open+0x88>
    {
      status = index;
    c6fc:	e0bff917 	ldw	r2,-28(fp)
    c700:	e0bffa15 	stw	r2,-24(fp)
    c704:	00002406 	br	c798 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c708:	e13ff917 	ldw	r4,-28(fp)
    c70c:	01400304 	movi	r5,12
    c710:	000a5b00 	call	a5b0 <__mulsi3>
    c714:	00c00074 	movhi	r3,1
    c718:	18f4c504 	addi	r3,r3,-11500
    c71c:	10c5883a 	add	r2,r2,r3
    c720:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c724:	e0fffe17 	ldw	r3,-8(fp)
    c728:	00900034 	movhi	r2,16384
    c72c:	10bfffc4 	addi	r2,r2,-1
    c730:	1886703a 	and	r3,r3,r2
    c734:	e0bffc17 	ldw	r2,-16(fp)
    c738:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c73c:	e0bffb17 	ldw	r2,-20(fp)
    c740:	1000051e 	bne	r2,zero,c758 <open+0xd8>
    c744:	e13ffc17 	ldw	r4,-16(fp)
    c748:	000c5900 	call	c590 <alt_file_locked>
    c74c:	e0bffa15 	stw	r2,-24(fp)
    c750:	e0bffa17 	ldw	r2,-24(fp)
    c754:	10001016 	blt	r2,zero,c798 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c758:	e0bff817 	ldw	r2,-32(fp)
    c75c:	10800317 	ldw	r2,12(r2)
    c760:	10000826 	beq	r2,zero,c784 <open+0x104>
    c764:	e0bff817 	ldw	r2,-32(fp)
    c768:	10800317 	ldw	r2,12(r2)
    c76c:	e13ffc17 	ldw	r4,-16(fp)
    c770:	e17ffd17 	ldw	r5,-12(fp)
    c774:	e1bffe17 	ldw	r6,-8(fp)
    c778:	e1ffff17 	ldw	r7,-4(fp)
    c77c:	103ee83a 	callr	r2
    c780:	00000106 	br	c788 <open+0x108>
    c784:	0005883a 	mov	r2,zero
    c788:	e0bffa15 	stw	r2,-24(fp)
    c78c:	00000206 	br	c798 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c790:	00bffb44 	movi	r2,-19
    c794:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c798:	e0bffa17 	ldw	r2,-24(fp)
    c79c:	1000080e 	bge	r2,zero,c7c0 <open+0x140>
  {
    alt_release_fd (index);  
    c7a0:	e13ff917 	ldw	r4,-28(fp)
    c7a4:	000c7d80 	call	c7d8 <alt_release_fd>
    ALT_ERRNO = -status;
    c7a8:	000c5400 	call	c540 <alt_get_errno>
    c7ac:	e0fffa17 	ldw	r3,-24(fp)
    c7b0:	00c7c83a 	sub	r3,zero,r3
    c7b4:	10c00015 	stw	r3,0(r2)
    return -1;
    c7b8:	00bfffc4 	movi	r2,-1
    c7bc:	00000106 	br	c7c4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    c7c0:	e0bff917 	ldw	r2,-28(fp)
}
    c7c4:	e037883a 	mov	sp,fp
    c7c8:	dfc00117 	ldw	ra,4(sp)
    c7cc:	df000017 	ldw	fp,0(sp)
    c7d0:	dec00204 	addi	sp,sp,8
    c7d4:	f800283a 	ret

0000c7d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c7d8:	defffc04 	addi	sp,sp,-16
    c7dc:	dfc00315 	stw	ra,12(sp)
    c7e0:	df000215 	stw	fp,8(sp)
    c7e4:	dc000115 	stw	r16,4(sp)
    c7e8:	df000104 	addi	fp,sp,4
    c7ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c7f0:	e0bfff17 	ldw	r2,-4(fp)
    c7f4:	108000d0 	cmplti	r2,r2,3
    c7f8:	1000111e 	bne	r2,zero,c840 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    c7fc:	04000074 	movhi	r16,1
    c800:	8434c504 	addi	r16,r16,-11500
    c804:	e0bfff17 	ldw	r2,-4(fp)
    c808:	1009883a 	mov	r4,r2
    c80c:	01400304 	movi	r5,12
    c810:	000a5b00 	call	a5b0 <__mulsi3>
    c814:	8085883a 	add	r2,r16,r2
    c818:	10800204 	addi	r2,r2,8
    c81c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c820:	04000074 	movhi	r16,1
    c824:	8434c504 	addi	r16,r16,-11500
    c828:	e0bfff17 	ldw	r2,-4(fp)
    c82c:	1009883a 	mov	r4,r2
    c830:	01400304 	movi	r5,12
    c834:	000a5b00 	call	a5b0 <__mulsi3>
    c838:	8085883a 	add	r2,r16,r2
    c83c:	10000015 	stw	zero,0(r2)
  }
}
    c840:	e037883a 	mov	sp,fp
    c844:	dfc00217 	ldw	ra,8(sp)
    c848:	df000117 	ldw	fp,4(sp)
    c84c:	dc000017 	ldw	r16,0(sp)
    c850:	dec00304 	addi	sp,sp,12
    c854:	f800283a 	ret

0000c858 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c858:	defffa04 	addi	sp,sp,-24
    c85c:	df000515 	stw	fp,20(sp)
    c860:	df000504 	addi	fp,sp,20
    c864:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c868:	0005303a 	rdctl	r2,status
    c86c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c870:	e0fffc17 	ldw	r3,-16(fp)
    c874:	00bfff84 	movi	r2,-2
    c878:	1884703a 	and	r2,r3,r2
    c87c:	1001703a 	wrctl	status,r2
  
  return context;
    c880:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c884:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c888:	e0bfff17 	ldw	r2,-4(fp)
    c88c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c890:	e0bffd17 	ldw	r2,-12(fp)
    c894:	10800017 	ldw	r2,0(r2)
    c898:	e0fffd17 	ldw	r3,-12(fp)
    c89c:	18c00117 	ldw	r3,4(r3)
    c8a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c8a4:	e0bffd17 	ldw	r2,-12(fp)
    c8a8:	10800117 	ldw	r2,4(r2)
    c8ac:	e0fffd17 	ldw	r3,-12(fp)
    c8b0:	18c00017 	ldw	r3,0(r3)
    c8b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c8b8:	e0bffd17 	ldw	r2,-12(fp)
    c8bc:	e0fffd17 	ldw	r3,-12(fp)
    c8c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c8c4:	e0bffd17 	ldw	r2,-12(fp)
    c8c8:	e0fffd17 	ldw	r3,-12(fp)
    c8cc:	10c00015 	stw	r3,0(r2)
    c8d0:	e0bffb17 	ldw	r2,-20(fp)
    c8d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c8d8:	e0bffe17 	ldw	r2,-8(fp)
    c8dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c8e0:	e037883a 	mov	sp,fp
    c8e4:	df000017 	ldw	fp,0(sp)
    c8e8:	dec00104 	addi	sp,sp,4
    c8ec:	f800283a 	ret

0000c8f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c8f0:	defffb04 	addi	sp,sp,-20
    c8f4:	dfc00415 	stw	ra,16(sp)
    c8f8:	df000315 	stw	fp,12(sp)
    c8fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c900:	d0a01117 	ldw	r2,-32700(gp)
    c904:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c908:	d0a0ec17 	ldw	r2,-31824(gp)
    c90c:	10800044 	addi	r2,r2,1
    c910:	d0a0ec15 	stw	r2,-31824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c914:	00002e06 	br	c9d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c918:	e0bffd17 	ldw	r2,-12(fp)
    c91c:	10800017 	ldw	r2,0(r2)
    c920:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c924:	e0bffd17 	ldw	r2,-12(fp)
    c928:	10800403 	ldbu	r2,16(r2)
    c92c:	10803fcc 	andi	r2,r2,255
    c930:	10000426 	beq	r2,zero,c944 <alt_tick+0x54>
    c934:	d0a0ec17 	ldw	r2,-31824(gp)
    c938:	1000021e 	bne	r2,zero,c944 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c93c:	e0bffd17 	ldw	r2,-12(fp)
    c940:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c944:	e0bffd17 	ldw	r2,-12(fp)
    c948:	10800217 	ldw	r2,8(r2)
    c94c:	d0e0ec17 	ldw	r3,-31824(gp)
    c950:	18801d36 	bltu	r3,r2,c9c8 <alt_tick+0xd8>
    c954:	e0bffd17 	ldw	r2,-12(fp)
    c958:	10800403 	ldbu	r2,16(r2)
    c95c:	10803fcc 	andi	r2,r2,255
    c960:	1000191e 	bne	r2,zero,c9c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c964:	e0bffd17 	ldw	r2,-12(fp)
    c968:	10c00317 	ldw	r3,12(r2)
    c96c:	e0bffd17 	ldw	r2,-12(fp)
    c970:	10800517 	ldw	r2,20(r2)
    c974:	1009883a 	mov	r4,r2
    c978:	183ee83a 	callr	r3
    c97c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c980:	e0bfff17 	ldw	r2,-4(fp)
    c984:	1000031e 	bne	r2,zero,c994 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c988:	e13ffd17 	ldw	r4,-12(fp)
    c98c:	000c8580 	call	c858 <alt_alarm_stop>
    c990:	00000d06 	br	c9c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c994:	e0bffd17 	ldw	r2,-12(fp)
    c998:	10c00217 	ldw	r3,8(r2)
    c99c:	e0bfff17 	ldw	r2,-4(fp)
    c9a0:	1887883a 	add	r3,r3,r2
    c9a4:	e0bffd17 	ldw	r2,-12(fp)
    c9a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c9ac:	e0bffd17 	ldw	r2,-12(fp)
    c9b0:	10c00217 	ldw	r3,8(r2)
    c9b4:	d0a0ec17 	ldw	r2,-31824(gp)
    c9b8:	1880032e 	bgeu	r3,r2,c9c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c9bc:	e0bffd17 	ldw	r2,-12(fp)
    c9c0:	00c00044 	movi	r3,1
    c9c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c9c8:	e0bffe17 	ldw	r2,-8(fp)
    c9cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c9d0:	e0fffd17 	ldw	r3,-12(fp)
    c9d4:	d0a01104 	addi	r2,gp,-32700
    c9d8:	18bfcf1e 	bne	r3,r2,c918 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c9dc:	0001883a 	nop
}
    c9e0:	e037883a 	mov	sp,fp
    c9e4:	dfc00117 	ldw	ra,4(sp)
    c9e8:	df000017 	ldw	fp,0(sp)
    c9ec:	dec00204 	addi	sp,sp,8
    c9f0:	f800283a 	ret

0000c9f4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c9f4:	deffff04 	addi	sp,sp,-4
    c9f8:	df000015 	stw	fp,0(sp)
    c9fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ca00:	000170fa 	wrctl	ienable,zero
}
    ca04:	e037883a 	mov	sp,fp
    ca08:	df000017 	ldw	fp,0(sp)
    ca0c:	dec00104 	addi	sp,sp,4
    ca10:	f800283a 	ret

0000ca14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ca14:	defffa04 	addi	sp,sp,-24
    ca18:	dfc00515 	stw	ra,20(sp)
    ca1c:	df000415 	stw	fp,16(sp)
    ca20:	df000404 	addi	fp,sp,16
    ca24:	e13ffe15 	stw	r4,-8(fp)
    ca28:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ca2c:	e0bfff17 	ldw	r2,-4(fp)
    ca30:	10800017 	ldw	r2,0(r2)
    ca34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ca38:	e13ffe17 	ldw	r4,-8(fp)
    ca3c:	000ad500 	call	ad50 <strlen>
    ca40:	10800044 	addi	r2,r2,1
    ca44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ca48:	00000d06 	br	ca80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ca4c:	e0bffc17 	ldw	r2,-16(fp)
    ca50:	10c00217 	ldw	r3,8(r2)
    ca54:	e0bffd17 	ldw	r2,-12(fp)
    ca58:	1809883a 	mov	r4,r3
    ca5c:	e17ffe17 	ldw	r5,-8(fp)
    ca60:	100d883a 	mov	r6,r2
    ca64:	000cd380 	call	cd38 <memcmp>
    ca68:	1000021e 	bne	r2,zero,ca74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ca6c:	e0bffc17 	ldw	r2,-16(fp)
    ca70:	00000706 	br	ca90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ca74:	e0bffc17 	ldw	r2,-16(fp)
    ca78:	10800017 	ldw	r2,0(r2)
    ca7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ca80:	e0fffc17 	ldw	r3,-16(fp)
    ca84:	e0bfff17 	ldw	r2,-4(fp)
    ca88:	18bff01e 	bne	r3,r2,ca4c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    ca8c:	0005883a 	mov	r2,zero
}
    ca90:	e037883a 	mov	sp,fp
    ca94:	dfc00117 	ldw	ra,4(sp)
    ca98:	df000017 	ldw	fp,0(sp)
    ca9c:	dec00204 	addi	sp,sp,8
    caa0:	f800283a 	ret

0000caa4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    caa4:	defffb04 	addi	sp,sp,-20
    caa8:	dfc00415 	stw	ra,16(sp)
    caac:	df000315 	stw	fp,12(sp)
    cab0:	df000304 	addi	fp,sp,12
    cab4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    cab8:	00800074 	movhi	r2,1
    cabc:	10b53004 	addi	r2,r2,-11072
    cac0:	10800017 	ldw	r2,0(r2)
    cac4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cac8:	00003106 	br	cb90 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    cacc:	e0bffd17 	ldw	r2,-12(fp)
    cad0:	10800217 	ldw	r2,8(r2)
    cad4:	1009883a 	mov	r4,r2
    cad8:	000ad500 	call	ad50 <strlen>
    cadc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    cae0:	e0bffd17 	ldw	r2,-12(fp)
    cae4:	10c00217 	ldw	r3,8(r2)
    cae8:	e0bffe17 	ldw	r2,-8(fp)
    caec:	10bfffc4 	addi	r2,r2,-1
    caf0:	1885883a 	add	r2,r3,r2
    caf4:	10800003 	ldbu	r2,0(r2)
    caf8:	10803fcc 	andi	r2,r2,255
    cafc:	1080201c 	xori	r2,r2,128
    cb00:	10bfe004 	addi	r2,r2,-128
    cb04:	10800bd8 	cmpnei	r2,r2,47
    cb08:	1000031e 	bne	r2,zero,cb18 <alt_find_file+0x74>
    {
      len -= 1;
    cb0c:	e0bffe17 	ldw	r2,-8(fp)
    cb10:	10bfffc4 	addi	r2,r2,-1
    cb14:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cb18:	e0bffe17 	ldw	r2,-8(fp)
    cb1c:	e0ffff17 	ldw	r3,-4(fp)
    cb20:	1885883a 	add	r2,r3,r2
    cb24:	10800003 	ldbu	r2,0(r2)
    cb28:	10803fcc 	andi	r2,r2,255
    cb2c:	1080201c 	xori	r2,r2,128
    cb30:	10bfe004 	addi	r2,r2,-128
    cb34:	10800be0 	cmpeqi	r2,r2,47
    cb38:	1000081e 	bne	r2,zero,cb5c <alt_find_file+0xb8>
    cb3c:	e0bffe17 	ldw	r2,-8(fp)
    cb40:	e0ffff17 	ldw	r3,-4(fp)
    cb44:	1885883a 	add	r2,r3,r2
    cb48:	10800003 	ldbu	r2,0(r2)
    cb4c:	10803fcc 	andi	r2,r2,255
    cb50:	1080201c 	xori	r2,r2,128
    cb54:	10bfe004 	addi	r2,r2,-128
    cb58:	10000a1e 	bne	r2,zero,cb84 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    cb5c:	e0bffd17 	ldw	r2,-12(fp)
    cb60:	10c00217 	ldw	r3,8(r2)
    cb64:	e0bffe17 	ldw	r2,-8(fp)
    cb68:	1809883a 	mov	r4,r3
    cb6c:	e17fff17 	ldw	r5,-4(fp)
    cb70:	100d883a 	mov	r6,r2
    cb74:	000cd380 	call	cd38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cb78:	1000021e 	bne	r2,zero,cb84 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    cb7c:	e0bffd17 	ldw	r2,-12(fp)
    cb80:	00000806 	br	cba4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    cb84:	e0bffd17 	ldw	r2,-12(fp)
    cb88:	10800017 	ldw	r2,0(r2)
    cb8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cb90:	e0fffd17 	ldw	r3,-12(fp)
    cb94:	00800074 	movhi	r2,1
    cb98:	10b53004 	addi	r2,r2,-11072
    cb9c:	18bfcb1e 	bne	r3,r2,cacc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    cba0:	0005883a 	mov	r2,zero
}
    cba4:	e037883a 	mov	sp,fp
    cba8:	dfc00117 	ldw	ra,4(sp)
    cbac:	df000017 	ldw	fp,0(sp)
    cbb0:	dec00204 	addi	sp,sp,8
    cbb4:	f800283a 	ret

0000cbb8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    cbb8:	defffa04 	addi	sp,sp,-24
    cbbc:	dfc00515 	stw	ra,20(sp)
    cbc0:	df000415 	stw	fp,16(sp)
    cbc4:	dc000315 	stw	r16,12(sp)
    cbc8:	df000304 	addi	fp,sp,12
    cbcc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    cbd0:	00bffa04 	movi	r2,-24
    cbd4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cbd8:	e03ffd15 	stw	zero,-12(fp)
    cbdc:	00002106 	br	cc64 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    cbe0:	04000074 	movhi	r16,1
    cbe4:	8434c504 	addi	r16,r16,-11500
    cbe8:	e0bffd17 	ldw	r2,-12(fp)
    cbec:	1009883a 	mov	r4,r2
    cbf0:	01400304 	movi	r5,12
    cbf4:	000a5b00 	call	a5b0 <__mulsi3>
    cbf8:	8085883a 	add	r2,r16,r2
    cbfc:	10800017 	ldw	r2,0(r2)
    cc00:	1000151e 	bne	r2,zero,cc58 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    cc04:	04000074 	movhi	r16,1
    cc08:	8434c504 	addi	r16,r16,-11500
    cc0c:	e0bffd17 	ldw	r2,-12(fp)
    cc10:	1009883a 	mov	r4,r2
    cc14:	01400304 	movi	r5,12
    cc18:	000a5b00 	call	a5b0 <__mulsi3>
    cc1c:	8085883a 	add	r2,r16,r2
    cc20:	e0ffff17 	ldw	r3,-4(fp)
    cc24:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    cc28:	00800074 	movhi	r2,1
    cc2c:	10b53404 	addi	r2,r2,-11056
    cc30:	10c00017 	ldw	r3,0(r2)
    cc34:	e0bffd17 	ldw	r2,-12(fp)
    cc38:	1880040e 	bge	r3,r2,cc4c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    cc3c:	00800074 	movhi	r2,1
    cc40:	10b53404 	addi	r2,r2,-11056
    cc44:	e0fffd17 	ldw	r3,-12(fp)
    cc48:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    cc4c:	e0bffd17 	ldw	r2,-12(fp)
    cc50:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    cc54:	00000606 	br	cc70 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cc58:	e0bffd17 	ldw	r2,-12(fp)
    cc5c:	10800044 	addi	r2,r2,1
    cc60:	e0bffd15 	stw	r2,-12(fp)
    cc64:	e0bffd17 	ldw	r2,-12(fp)
    cc68:	10800810 	cmplti	r2,r2,32
    cc6c:	103fdc1e 	bne	r2,zero,cbe0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    cc70:	e0bffe17 	ldw	r2,-8(fp)
}
    cc74:	e037883a 	mov	sp,fp
    cc78:	dfc00217 	ldw	ra,8(sp)
    cc7c:	df000117 	ldw	fp,4(sp)
    cc80:	dc000017 	ldw	r16,0(sp)
    cc84:	dec00304 	addi	sp,sp,12
    cc88:	f800283a 	ret

0000cc8c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    cc8c:	defffb04 	addi	sp,sp,-20
    cc90:	df000415 	stw	fp,16(sp)
    cc94:	df000404 	addi	fp,sp,16
    cc98:	e13ffe15 	stw	r4,-8(fp)
    cc9c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    cca0:	e0bfff17 	ldw	r2,-4(fp)
    cca4:	10820070 	cmpltui	r2,r2,2049
    cca8:	1000021e 	bne	r2,zero,ccb4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    ccac:	00820004 	movi	r2,2048
    ccb0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    ccb4:	e0fffe17 	ldw	r3,-8(fp)
    ccb8:	e0bfff17 	ldw	r2,-4(fp)
    ccbc:	1885883a 	add	r2,r3,r2
    ccc0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ccc4:	e0bffe17 	ldw	r2,-8(fp)
    ccc8:	e0bffc15 	stw	r2,-16(fp)
    cccc:	00000506 	br	cce4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    ccd0:	e0bffc17 	ldw	r2,-16(fp)
    ccd4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ccd8:	e0bffc17 	ldw	r2,-16(fp)
    ccdc:	10800804 	addi	r2,r2,32
    cce0:	e0bffc15 	stw	r2,-16(fp)
    cce4:	e0fffc17 	ldw	r3,-16(fp)
    cce8:	e0bffd17 	ldw	r2,-12(fp)
    ccec:	18bff836 	bltu	r3,r2,ccd0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ccf0:	e0bffe17 	ldw	r2,-8(fp)
    ccf4:	108007cc 	andi	r2,r2,31
    ccf8:	10000226 	beq	r2,zero,cd04 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    ccfc:	e0bffc17 	ldw	r2,-16(fp)
    cd00:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    cd04:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    cd08:	e037883a 	mov	sp,fp
    cd0c:	df000017 	ldw	fp,0(sp)
    cd10:	dec00104 	addi	sp,sp,4
    cd14:	f800283a 	ret

0000cd18 <exit>:
    cd18:	defffe04 	addi	sp,sp,-8
    cd1c:	000b883a 	mov	r5,zero
    cd20:	dc000015 	stw	r16,0(sp)
    cd24:	dfc00115 	stw	ra,4(sp)
    cd28:	2021883a 	mov	r16,r4
    cd2c:	000cd800 	call	cd80 <__call_exitprocs>
    cd30:	8009883a 	mov	r4,r16
    cd34:	000cf580 	call	cf58 <_exit>

0000cd38 <memcmp>:
    cd38:	30000d26 	beq	r6,zero,cd70 <memcmp+0x38>
    cd3c:	20c00003 	ldbu	r3,0(r4)
    cd40:	28800003 	ldbu	r2,0(r5)
    cd44:	18800c1e 	bne	r3,r2,cd78 <memcmp+0x40>
    cd48:	31bfff84 	addi	r6,r6,-2
    cd4c:	01ffffc4 	movi	r7,-1
    cd50:	00000406 	br	cd64 <memcmp+0x2c>
    cd54:	20c00003 	ldbu	r3,0(r4)
    cd58:	28800003 	ldbu	r2,0(r5)
    cd5c:	31bfffc4 	addi	r6,r6,-1
    cd60:	1880051e 	bne	r3,r2,cd78 <memcmp+0x40>
    cd64:	21000044 	addi	r4,r4,1
    cd68:	29400044 	addi	r5,r5,1
    cd6c:	31fff91e 	bne	r6,r7,cd54 <memcmp+0x1c>
    cd70:	0005883a 	mov	r2,zero
    cd74:	f800283a 	ret
    cd78:	1885c83a 	sub	r2,r3,r2
    cd7c:	f800283a 	ret

0000cd80 <__call_exitprocs>:
    cd80:	00800074 	movhi	r2,1
    cd84:	10b52d04 	addi	r2,r2,-11084
    cd88:	10800017 	ldw	r2,0(r2)
    cd8c:	defff204 	addi	sp,sp,-56
    cd90:	df000c15 	stw	fp,48(sp)
    cd94:	d8800015 	stw	r2,0(sp)
    cd98:	10800c04 	addi	r2,r2,48
    cd9c:	dd400915 	stw	r21,36(sp)
    cda0:	dfc00d15 	stw	ra,52(sp)
    cda4:	ddc00b15 	stw	r23,44(sp)
    cda8:	dd800a15 	stw	r22,40(sp)
    cdac:	dd000815 	stw	r20,32(sp)
    cdb0:	dcc00715 	stw	r19,28(sp)
    cdb4:	dc800615 	stw	r18,24(sp)
    cdb8:	dc400515 	stw	r17,20(sp)
    cdbc:	dc000415 	stw	r16,16(sp)
    cdc0:	d9000115 	stw	r4,4(sp)
    cdc4:	2839883a 	mov	fp,r5
    cdc8:	d8800215 	stw	r2,8(sp)
    cdcc:	057fffc4 	movi	r21,-1
    cdd0:	d8800017 	ldw	r2,0(sp)
    cdd4:	dd800217 	ldw	r22,8(sp)
    cdd8:	15c00c17 	ldw	r23,48(r2)
    cddc:	b8001b26 	beq	r23,zero,ce4c <__call_exitprocs+0xcc>
    cde0:	b9000117 	ldw	r4,4(r23)
    cde4:	bd002217 	ldw	r20,136(r23)
    cde8:	243fffc4 	addi	r16,r4,-1
    cdec:	80001416 	blt	r16,zero,ce40 <__call_exitprocs+0xc0>
    cdf0:	244007c4 	addi	r17,r4,31
    cdf4:	21000044 	addi	r4,r4,1
    cdf8:	8c63883a 	add	r17,r17,r17
    cdfc:	8427883a 	add	r19,r16,r16
    ce00:	2109883a 	add	r4,r4,r4
    ce04:	8c63883a 	add	r17,r17,r17
    ce08:	9ce7883a 	add	r19,r19,r19
    ce0c:	2109883a 	add	r4,r4,r4
    ce10:	a463883a 	add	r17,r20,r17
    ce14:	a4e7883a 	add	r19,r20,r19
    ce18:	b925883a 	add	r18,r23,r4
    ce1c:	e0001726 	beq	fp,zero,ce7c <__call_exitprocs+0xfc>
    ce20:	a0000226 	beq	r20,zero,ce2c <__call_exitprocs+0xac>
    ce24:	89400017 	ldw	r5,0(r17)
    ce28:	2f001426 	beq	r5,fp,ce7c <__call_exitprocs+0xfc>
    ce2c:	843fffc4 	addi	r16,r16,-1
    ce30:	8c7fff04 	addi	r17,r17,-4
    ce34:	9cffff04 	addi	r19,r19,-4
    ce38:	94bfff04 	addi	r18,r18,-4
    ce3c:	857ff71e 	bne	r16,r21,ce1c <__call_exitprocs+0x9c>
    ce40:	00800034 	movhi	r2,0
    ce44:	10800004 	addi	r2,r2,0
    ce48:	1000311e 	bne	r2,zero,cf10 <__call_exitprocs+0x190>
    ce4c:	dfc00d17 	ldw	ra,52(sp)
    ce50:	df000c17 	ldw	fp,48(sp)
    ce54:	ddc00b17 	ldw	r23,44(sp)
    ce58:	dd800a17 	ldw	r22,40(sp)
    ce5c:	dd400917 	ldw	r21,36(sp)
    ce60:	dd000817 	ldw	r20,32(sp)
    ce64:	dcc00717 	ldw	r19,28(sp)
    ce68:	dc800617 	ldw	r18,24(sp)
    ce6c:	dc400517 	ldw	r17,20(sp)
    ce70:	dc000417 	ldw	r16,16(sp)
    ce74:	dec00e04 	addi	sp,sp,56
    ce78:	f800283a 	ret
    ce7c:	b9000117 	ldw	r4,4(r23)
    ce80:	92000017 	ldw	r8,0(r18)
    ce84:	213fffc4 	addi	r4,r4,-1
    ce88:	24001a26 	beq	r4,r16,cef4 <__call_exitprocs+0x174>
    ce8c:	90000015 	stw	zero,0(r18)
    ce90:	403fe626 	beq	r8,zero,ce2c <__call_exitprocs+0xac>
    ce94:	ba400117 	ldw	r9,4(r23)
    ce98:	a0001226 	beq	r20,zero,cee4 <__call_exitprocs+0x164>
    ce9c:	00800044 	movi	r2,1
    cea0:	1408983a 	sll	r4,r2,r16
    cea4:	a1404017 	ldw	r5,256(r20)
    cea8:	214a703a 	and	r5,r4,r5
    ceac:	28000d26 	beq	r5,zero,cee4 <__call_exitprocs+0x164>
    ceb0:	a1404117 	ldw	r5,260(r20)
    ceb4:	2148703a 	and	r4,r4,r5
    ceb8:	2000101e 	bne	r4,zero,cefc <__call_exitprocs+0x17c>
    cebc:	99400017 	ldw	r5,0(r19)
    cec0:	d9000117 	ldw	r4,4(sp)
    cec4:	da400315 	stw	r9,12(sp)
    cec8:	403ee83a 	callr	r8
    cecc:	da400317 	ldw	r9,12(sp)
    ced0:	b9000117 	ldw	r4,4(r23)
    ced4:	227fbe1e 	bne	r4,r9,cdd0 <__call_exitprocs+0x50>
    ced8:	b1000017 	ldw	r4,0(r22)
    cedc:	25ffd326 	beq	r4,r23,ce2c <__call_exitprocs+0xac>
    cee0:	003fbb06 	br	cdd0 <__call_exitprocs+0x50>
    cee4:	da400315 	stw	r9,12(sp)
    cee8:	403ee83a 	callr	r8
    ceec:	da400317 	ldw	r9,12(sp)
    cef0:	003ff706 	br	ced0 <__call_exitprocs+0x150>
    cef4:	bc000115 	stw	r16,4(r23)
    cef8:	003fe506 	br	ce90 <__call_exitprocs+0x110>
    cefc:	99000017 	ldw	r4,0(r19)
    cf00:	da400315 	stw	r9,12(sp)
    cf04:	403ee83a 	callr	r8
    cf08:	da400317 	ldw	r9,12(sp)
    cf0c:	003ff006 	br	ced0 <__call_exitprocs+0x150>
    cf10:	b9000117 	ldw	r4,4(r23)
    cf14:	20000e1e 	bne	r4,zero,cf50 <__call_exitprocs+0x1d0>
    cf18:	b9000017 	ldw	r4,0(r23)
    cf1c:	20000826 	beq	r4,zero,cf40 <__call_exitprocs+0x1c0>
    cf20:	b1000015 	stw	r4,0(r22)
    cf24:	a0000226 	beq	r20,zero,cf30 <__call_exitprocs+0x1b0>
    cf28:	a009883a 	mov	r4,r20
    cf2c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    cf30:	b809883a 	mov	r4,r23
    cf34:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    cf38:	b5c00017 	ldw	r23,0(r22)
    cf3c:	003fa706 	br	cddc <__call_exitprocs+0x5c>
    cf40:	0007883a 	mov	r3,zero
    cf44:	b82d883a 	mov	r22,r23
    cf48:	182f883a 	mov	r23,r3
    cf4c:	003fa306 	br	cddc <__call_exitprocs+0x5c>
    cf50:	b8c00017 	ldw	r3,0(r23)
    cf54:	003ffb06 	br	cf44 <__call_exitprocs+0x1c4>

0000cf58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    cf58:	defffc04 	addi	sp,sp,-16
    cf5c:	df000315 	stw	fp,12(sp)
    cf60:	df000304 	addi	fp,sp,12
    cf64:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    cf68:	0001883a 	nop
    cf6c:	e0bfff17 	ldw	r2,-4(fp)
    cf70:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    cf74:	e0bffd17 	ldw	r2,-12(fp)
    cf78:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    cf7c:	e0bffe17 	ldw	r2,-8(fp)
    cf80:	10000226 	beq	r2,zero,cf8c <_exit+0x34>
    ALT_SIM_FAIL();
    cf84:	002af070 	cmpltui	zero,zero,43969
    cf88:	00000106 	br	cf90 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    cf8c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    cf90:	003fff06 	br	cf90 <_exit+0x38>
