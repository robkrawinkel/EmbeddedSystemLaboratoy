
20-sim_test.elf:     file format elf32-littlenios2
20-sim_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00005028 memsz 0x00005028 flags r-x
    LOAD off    0x00006048 vaddr 0x0000d048 paddr 0x0000d380 align 2**12
         filesz 0x00000338 memsz 0x00000338 flags rw-
    LOAD off    0x000066b8 vaddr 0x0000d6b8 paddr 0x0000d6b8 align 2**12
         filesz 0x00000000 memsz 0x00000a1c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004ce8  000081bc  000081bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001a4  0000cea4  0000cea4  00005ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000338  0000d048  0000d380  00006048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a1c  0000d6b8  0000d6b8  000066b8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00006380  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008c0  00000000  00000000  000063a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c2d9  00000000  00000000  00006c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004907  00000000  00000000  00012f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004449  00000000  00000000  00017848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000f50  00000000  00000000  0001bc94  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001fc4  00000000  00000000  0001cbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003e6b  00000000  00000000  0001eba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  00022a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000480  00000000  00000000  00022a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0002540f  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00025412  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00025415  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00025416  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00025417  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0002541b  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0002541f  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00025423  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0002542c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00025435  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  0002543e  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  00025450  2**0
                  CONTENTS, READONLY
 28 .jdi          00005585  00000000  00000000  000254a1  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003c04b  00000000  00000000  0002aa26  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081bc l    d  .text	00000000 .text
0000cea4 l    d  .rodata	00000000 .rodata
0000d048 l    d  .rwdata	00000000 .rwdata
0000d6b8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../20-sim_test_bsp//obj/HAL/src/crt0.o
000081f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 EulerAngles.c
00000000 l    df *ABS*	00000000 InterruptHandlerForUart.c
00000000 l    df *ABS*	00000000 main.c
0000d330 l     O .rwdata	00000008 stepsPerRotation.2896
0000d328 l     O .rwdata	00000008 stepsPerRotation.2900
00000000 l    df *ABS*	00000000 motionprofiles.c
00000000 l    df *ABS*	00000000 xxfuncs.c
00000000 l    df *ABS*	00000000 xxinteg.c
00000000 l    df *ABS*	00000000 xxinverse.c
00000000 l    df *ABS*	00000000 xxmatrix.c
00000000 l    df *ABS*	00000000 xxmodel.c
00000000 l    df *ABS*	00000000 xxsubmod.c
00000000 l    df *ABS*	00000000 fp-bit.c
00009824 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a390 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000d048 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000b6dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b830 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b970 l     F .text	00000038 alt_dev_reg
0000d128 l     O .rwdata	0000002c jtag_uart
0000d154 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000bc80 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000be38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000bf48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
0000c074 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000c1ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c1d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c2f8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000c450 l     F .text	00000050 alt_get_errno
0000c4a0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000b7c8 g     F .text	00000068 alt_main
0000aae0 g     F .text	00000044 __ashldi3
0000abcc g     F .text	00000080 _puts_r
0000dfd4 g     O .bss	00000100 alt_irq
0000d6bc g     O .bss	00000002 RxHead_0
0000d380 g       *ABS*	00000000 __flash_rwdata_start
0000ab80 g     F .text	0000004c printf
00008b64 g     F .text	00000038 XXDouble2String
0000d6be g     O .bss	00000002 RxTail_0
0000def4 g     O .bss	00000018 xx_R
0000d6c0 g     O .bss	00000008 xx_start_time
0000a0c4 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000d6d8 g     O .bss	00000004 errno
000081f8 g     F .text	00000060 InitUart0
0000d6e4 g     O .bss	00000004 alt_argv
00015328 g       *ABS*	00000000 _gp
0000d1a8 g     O .rwdata	00000180 alt_fd_list
00008b24 g     F .text	00000040 XXString2Double
0000c924 g     F .text	00000090 alt_find_dev
0000d6ba g     O .bss	00000002 TxTail_0
0000a1e8 g     F .text	000000d4 __floatsidf
0000c3d8 g     F .text	00000078 alt_io_redirect
0000a18c g     F .text	0000005c __ltdf2
0000ac4c g     F .text	00000014 puts
00008f14 g     F .text	0000001c XXCalculateInput
000096b4 g     F .text	000000a0 XXInitializeSubmodel
0000baf4 g     F .text	000000f4 altera_avalon_jtag_uart_read
0000ab44 g     F .text	0000003c _printf_r
0000a4b0 g     F .text	00000008 __udivsi3
0000cb9c g     F .text	0000008c alt_icache_flush
00008ea8 g     F .text	00000034 XXModelInitialize
0000d370 g     O .rwdata	00000004 alt_max_fd
0000a8a0 g     F .text	00000104 __unpack_d
0000837c g     F .text	0000003c EmptyUart0
0000b52c g     F .text	000001b0 alt_irq_register
00009b78 g     F .text	00000054 __adddf3
0000d354 g     O .rwdata	00000004 _global_impure_ptr
0000e0d4 g       *ABS*	00000000 __bss_end
00009754 g     F .text	00000068 XXCalculateSubmodel
0000c800 g     F .text	00000104 alt_tick
0000d6c8 g     O .bss	00000008 xx_time
0000c768 g     F .text	00000098 alt_alarm_stop
000095cc g     F .text	0000001c XXCalculateFinal
0000d6dc g     O .bss	00000004 alt_irq_active
0000df0c g     O .bss	00000018 xx_I
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000d0 alt_irq_handler
0000d180 g     O .rwdata	00000028 alt_dev_null
0000df24 g     O .bss	00000038 xx_P
00008ef8 g     F .text	0000001c XXCalculateStatic
00009590 g     F .text	0000003c XXCalculateOutput
00008258 g     F .text	00000124 IsrUart0
0000c190 g     F .text	0000001c alt_dcache_flush_all
0000a2bc g     F .text	000000d4 __fixdfsi
00008df4 g     F .text	0000007c XXModelInitialize_states
0000d380 g       *ABS*	00000000 __ram_rwdata_end
0000d368 g     O .rwdata	00000008 alt_dev_list
0000b880 g     F .text	000000f0 write
0000d048 g       *ABS*	00000000 __ram_rodata_end
0000aa9c g     F .text	00000044 __lshrdi3
0000a4b8 g     F .text	00000008 __umodsi3
00008e70 g     F .text	00000038 XXModelInitialize_variables
0000d349 g     O .rwdata	00000001 xx_major
0000e0d4 g       *ABS*	00000000 end
0000bf98 g     F .text	000000dc altera_avalon_uart_write
00008bc8 g     F .text	0000001c XXDiscreteTerminate
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000bcf8 g     F .text	00000080 alt_avalon_timer_sc_init
0000bdd8 g     F .text	00000060 altera_avalon_uart_write_fd
0000a5d0 g     F .text	000000ac __clzsi2
0000bbe8 g     F .text	00000098 altera_avalon_jtag_uart_write
0000ac88 g     F .text	00000734 ___vfprintf_internal_r
00008da8 g     F .text	0000004c XXModelInitialize_initialvalues
0000cc90 g     F .text	000001d8 __call_exitprocs
000081bc g     F .text	0000003c _start
0000d6ec g     O .bss	00000004 _alt_tick_rate
00009678 g     F .text	0000003c XXCopyVariablesToOutputs
0000d34c g     O .rwdata	00000004 xx_number_of_inputs
0000d6f0 g     O .bss	00000004 _alt_nticks
0000b9dc g     F .text	00000058 alt_sys_init
000083b8 g     F .text	0000005c GetUart0
0000aa74 g     F .text	00000028 __mulsi3
0000d048 g       *ABS*	00000000 __ram_rwdata_start
0000cea4 g       *ABS*	00000000 __ram_rodata_start
0000ba34 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000cac8 g     F .text	000000d4 alt_get_fd
000085e8 g     F .text	000000d4 StepcountTiltToSI
00008414 g     F .text	0000011c PutUart0
0000a9a4 g     F .text	000000d0 __fpcmp_parts_d
0000cc48 g     F .text	00000048 memcmp
0000e0d4 g       *ABS*	00000000 __alt_stack_base
00009f10 g     F .text	000001b4 __divdf3
0000d6d4 g     O .bss	00000001 xx_stop_simulation
000095e8 g     F .text	0000001c XXModelTerminate
00009c2c g     F .text	000002e4 __muldf3
00008edc g     F .text	0000001c XXCalculateInitial
0000c9b4 g     F .text	00000114 alt_find_file
0000c228 g     F .text	000000a0 alt_dev_llist_insert
0000b3e0 g     F .text	000000e0 __sfvwrite_small_dev
0000d6b8 g       *ABS*	00000000 __bss_start
0000ab24 g     F .text	00000020 memset
000086bc g     F .text	000000d4 StepcountPanToSI
00008790 g     F .text	00000394 main
0000d6e8 g     O .bss	00000004 alt_envp
0000ba94 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000df5c g     O .bss	00000060 xx_V
0000d374 g     O .rwdata	00000004 alt_errno
0000a404 g     F .text	00000050 __divsi3
0000cef8 g     O .rodata	00000014 __thenan_df
0000d340 g     O .rwdata	00000008 xx_step_size
0000d6b8 g     O .bss	00000002 TxHead_0
0000cea4 g       *ABS*	00000000 __flash_rodata_start
00008cc8 g     F .text	000000e0 XXModelInitialize_parameters
0000b9a8 g     F .text	00000034 alt_irq_init
0000c6e8 g     F .text	00000080 alt_release_fd
0000cf0c g     O .rodata	00000100 __clz_tab
0000b4c0 g     F .text	0000006c _write_r
0000d6f4 g     O .bss	00000400 rx_buffer_0
0000d358 g     O .rwdata	00000004 _impure_ptr
0000d6e0 g     O .bss	00000004 alt_argc
00008530 g     F .text	000000b8 InitUart
00008020 g       .exceptions	00000000 alt_irq_entry
0000d6d0 g     O .bss	00000004 xx_steps
0000d360 g     O .rwdata	00000008 alt_fs_list
0000d338 g     O .rwdata	00000008 xx_finish_time
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008be4 g     F .text	000000e4 XXDiscreteStep
0000d380 g       *ABS*	00000000 _edata
0000bd78 g     F .text	00000060 altera_avalon_uart_read_fd
0000e0d4 g       *ABS*	00000000 _end
000081bc g       *ABS*	00000000 __ram_exceptions_end
000097bc g     F .text	00000068 XXTerminateSubmodel
0000c904 g     F .text	00000020 altera_nios2_qsys_irq_init
0000cc28 g     F .text	00000020 exit
0000a454 g     F .text	0000005c __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000d348 g     O .rwdata	00000001 xx_initialize
0000ce68 g     F .text	0000003c _exit
0000a4c0 g     F .text	00000110 __muldi3
0000ac60 g     F .text	00000028 strlen
0000c590 g     F .text	00000158 open
0000a128 g     F .text	00000064 __gedf2
0000d350 g     O .rwdata	00000004 xx_number_of_outputs
0000c2c8 g     F .text	00000030 alt_icache_flush_all
0000d35c g     O .rwdata	00000004 alt_priority_mask
00009604 g     F .text	00000074 XXCopyInputsToVariables
0000b3bc g     F .text	00000024 __vfprintf_internal
0000be88 g     F .text	000000c0 altera_avalon_uart_read
00009bcc g     F .text	00000060 __subdf3
0000d378 g     O .rwdata	00000008 alt_alarm_list
0000daf4 g     O .bss	00000400 tx_buffer_0
0000c0c4 g     F .text	000000cc close
0000b748 g     F .text	00000080 alt_load
0000a67c g     F .text	00000224 __pack_d
00008b9c g     F .text	0000002c XXDiscreteInitialize
00000000  w      *UND*	00000000 free
0000dfbc g     O .bss	00000018 xx_s
00008f30 g     F .text	00000660 XXCalculateDynamic



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606f14 	ori	at,at,33212
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001826 	beq	r2,zero,818c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
    812c:	00c00074 	movhi	r3,1
    8130:	18f7f504 	addi	r3,r3,-8236
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	2137f504 	addi	r4,r4,-8236
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	e17ffd17 	ldw	r5,-12(fp)
    8168:	183ee83a 	callr	r3
#endif
        break;
    816c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8178:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    817c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    8180:	e0bffb17 	ldw	r2,-20(fp)
    8184:	103fe21e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8188:	00000706 	br	81a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fdd06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a8:	e037883a 	mov	sp,fp
    81ac:	dfc00117 	ldw	ra,4(sp)
    81b0:	df000017 	ldw	fp,0(sp)
    81b4:	dec00204 	addi	sp,sp,8
    81b8:	f800283a 	ret

Disassembly of section .text:

000081bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81bc:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c8:	d694ca14 	ori	gp,gp,21288
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81cc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81d0:	10b5ae14 	ori	r2,r2,54968

    movhi r3, %hi(__bss_end)
    81d4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d8:	18f83514 	ori	r3,r3,57556

    beq r2, r3, 1f
    81dc:	10c00326 	beq	r2,r3,81ec <_start+0x30>

0:
    stw zero, (r2)
    81e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e8:	10fffd36 	bltu	r2,r3,81e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81ec:	000b7480 	call	b748 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81f0:	000b7c80 	call	b7c8 <alt_main>

000081f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f4:	003fff06 	br	81f4 <alt_after_alt_main>

000081f8 <InitUart0>:
unsigned short RxHead_0=0;
unsigned short RxTail_0=0;
unsigned char rx_buffer_0[RX_BUFFER_SIZE_0];
 
void InitUart0(unsigned int BaudRate)
{
    81f8:	defffc04 	addi	sp,sp,-16
    81fc:	dfc00315 	stw	ra,12(sp)
    8200:	df000215 	stw	fp,8(sp)
    8204:	df000204 	addi	fp,sp,8
    8208:	e13fff15 	stw	r4,-4(fp)
    unsigned int divisor;
    
    divisor = (ALT_CPU_FREQ/BaudRate) + 1;
    820c:	0100bef4 	movhi	r4,763
    8210:	213c2004 	addi	r4,r4,-3968
    8214:	e17fff17 	ldw	r5,-4(fp)
    8218:	000a4b00 	call	a4b0 <__udivsi3>
    821c:	10800044 	addi	r2,r2,1
    8220:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
    8224:	e0fffe17 	ldw	r3,-8(fp)
    8228:	00800074 	movhi	r2,1
    822c:	10850404 	addi	r2,r2,5136
    8230:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    8234:	00c02004 	movi	r3,128
    8238:	00800074 	movhi	r2,1
    823c:	10850304 	addi	r2,r2,5132
    8240:	10c00035 	stwio	r3,0(r2)
}
    8244:	e037883a 	mov	sp,fp
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	df000017 	ldw	fp,0(sp)
    8250:	dec00204 	addi	sp,sp,8
    8254:	f800283a 	ret

00008258 <IsrUart0>:
 
void IsrUart0(void* context, unsigned int id)
{
    8258:	defffc04 	addi	sp,sp,-16
    825c:	df000315 	stw	fp,12(sp)
    8260:	df000304 	addi	fp,sp,12
    8264:	e13ffe15 	stw	r4,-8(fp)
    8268:	e17fff15 	stw	r5,-4(fp)
    int sr;
    
    sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    826c:	00800074 	movhi	r2,1
    8270:	10850204 	addi	r2,r2,5128
    8274:	10800037 	ldwio	r2,0(r2)
    8278:	e0bffd15 	stw	r2,-12(fp)

    if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
    827c:	e0bffd17 	ldw	r2,-12(fp)
    8280:	1080200c 	andi	r2,r2,128
    8284:	10001526 	beq	r2,zero,82dc <IsrUart0+0x84>
        rx_buffer_0[RxHead_0] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8288:	d0a0e50b 	ldhu	r2,-31852(gp)
    828c:	10bfffcc 	andi	r2,r2,65535
    8290:	00c00074 	movhi	r3,1
    8294:	18c50004 	addi	r3,r3,5120
    8298:	18c00037 	ldwio	r3,0(r3)
    829c:	01000074 	movhi	r4,1
    82a0:	2135bd04 	addi	r4,r4,-10508
    82a4:	2085883a 	add	r2,r4,r2
    82a8:	10c00005 	stb	r3,0(r2)
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
    82ac:	0007883a 	mov	r3,zero
    82b0:	00800074 	movhi	r2,1
    82b4:	10850204 	addi	r2,r2,5128
    82b8:	10c00035 	stwio	r3,0(r2)
        if (++RxHead_0 > (RX_BUFFER_SIZE_0 - 1)) {
    82bc:	d0a0e50b 	ldhu	r2,-31852(gp)
    82c0:	10800044 	addi	r2,r2,1
    82c4:	d0a0e50d 	sth	r2,-31852(gp)
    82c8:	d0a0e50b 	ldhu	r2,-31852(gp)
    82cc:	10bfffcc 	andi	r2,r2,65535
    82d0:	10810030 	cmpltui	r2,r2,1024
    82d4:	1000011e 	bne	r2,zero,82dc <IsrUart0+0x84>
            RxHead_0 = 0;
    82d8:	d020e50d 	sth	zero,-31852(gp)
        }
    }

    if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
    82dc:	e0bffd17 	ldw	r2,-12(fp)
    82e0:	1080100c 	andi	r2,r2,64
    82e4:	10002126 	beq	r2,zero,836c <IsrUart0+0x114>
        if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK) {
    82e8:	00800074 	movhi	r2,1
    82ec:	10850304 	addi	r2,r2,5132
    82f0:	10800037 	ldwio	r2,0(r2)
    82f4:	1080100c 	andi	r2,r2,64
    82f8:	10001c26 	beq	r2,zero,836c <IsrUart0+0x114>
            if (TxTail_0 != TxHead_0) {
    82fc:	d0e0e48b 	ldhu	r3,-31854(gp)
    8300:	d0a0e40b 	ldhu	r2,-31856(gp)
    8304:	18ffffcc 	andi	r3,r3,65535
    8308:	10bfffcc 	andi	r2,r2,65535
    830c:	18801326 	beq	r3,r2,835c <IsrUart0+0x104>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_0[TxTail_0]);
    8310:	d0a0e48b 	ldhu	r2,-31854(gp)
    8314:	10bfffcc 	andi	r2,r2,65535
    8318:	00c00074 	movhi	r3,1
    831c:	18f6bd04 	addi	r3,r3,-9484
    8320:	1885883a 	add	r2,r3,r2
    8324:	10800003 	ldbu	r2,0(r2)
    8328:	10c03fcc 	andi	r3,r2,255
    832c:	00800074 	movhi	r2,1
    8330:	10850104 	addi	r2,r2,5124
    8334:	10c00035 	stwio	r3,0(r2)
                if (++TxTail_0 > (TX_BUFFER_SIZE_0 - 1)) {
    8338:	d0a0e48b 	ldhu	r2,-31854(gp)
    833c:	10800044 	addi	r2,r2,1
    8340:	d0a0e48d 	sth	r2,-31854(gp)
    8344:	d0a0e48b 	ldhu	r2,-31854(gp)
    8348:	10bfffcc 	andi	r2,r2,65535
    834c:	10810030 	cmpltui	r2,r2,1024
    8350:	1000061e 	bne	r2,zero,836c <IsrUart0+0x114>
                    TxTail_0 = 0;
    8354:	d020e48d 	sth	zero,-31854(gp)
    8358:	00000406 	br	836c <IsrUart0+0x114>
                }
            }
            else {
                IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    835c:	00c02004 	movi	r3,128
    8360:	00800074 	movhi	r2,1
    8364:	10850304 	addi	r2,r2,5132
    8368:	10c00035 	stwio	r3,0(r2)
            }
        }
    }
}
    836c:	e037883a 	mov	sp,fp
    8370:	df000017 	ldw	fp,0(sp)
    8374:	dec00104 	addi	sp,sp,4
    8378:	f800283a 	ret

0000837c <EmptyUart0>:
 
unsigned char EmptyUart0()
{
    837c:	deffff04 	addi	sp,sp,-4
    8380:	df000015 	stw	fp,0(sp)
    8384:	d839883a 	mov	fp,sp
    if(RxHead_0 == RxTail_0) {
    8388:	d0e0e50b 	ldhu	r3,-31852(gp)
    838c:	d0a0e58b 	ldhu	r2,-31850(gp)
    8390:	18ffffcc 	andi	r3,r3,65535
    8394:	10bfffcc 	andi	r2,r2,65535
    8398:	1880021e 	bne	r3,r2,83a4 <EmptyUart0+0x28>
        return 1;
    839c:	00800044 	movi	r2,1
    83a0:	00000106 	br	83a8 <EmptyUart0+0x2c>
    }
    
    return 0;
    83a4:	0005883a 	mov	r2,zero
} 
    83a8:	e037883a 	mov	sp,fp
    83ac:	df000017 	ldw	fp,0(sp)
    83b0:	dec00104 	addi	sp,sp,4
    83b4:	f800283a 	ret

000083b8 <GetUart0>:
    
unsigned char GetUart0(void)
{
    83b8:	defffe04 	addi	sp,sp,-8
    83bc:	df000115 	stw	fp,4(sp)
    83c0:	df000104 	addi	fp,sp,4
    unsigned char rxChar; 
    
    /* buffer is empty */
    
    rxChar=rx_buffer_0[RxTail_0];
    83c4:	d0a0e58b 	ldhu	r2,-31850(gp)
    83c8:	10bfffcc 	andi	r2,r2,65535
    83cc:	00c00074 	movhi	r3,1
    83d0:	18f5bd04 	addi	r3,r3,-10508
    83d4:	1885883a 	add	r2,r3,r2
    83d8:	10800003 	ldbu	r2,0(r2)
    83dc:	e0bfff05 	stb	r2,-4(fp)
    if (++RxTail_0 > (RX_BUFFER_SIZE_0 - 1)) {
    83e0:	d0a0e58b 	ldhu	r2,-31850(gp)
    83e4:	10800044 	addi	r2,r2,1
    83e8:	d0a0e58d 	sth	r2,-31850(gp)
    83ec:	d0a0e58b 	ldhu	r2,-31850(gp)
    83f0:	10bfffcc 	andi	r2,r2,65535
    83f4:	10810030 	cmpltui	r2,r2,1024
    83f8:	1000011e 	bne	r2,zero,8400 <GetUart0+0x48>
        RxTail_0 = 0;
    83fc:	d020e58d 	sth	zero,-31850(gp)
    }
    
    return rxChar;
    8400:	e0bfff03 	ldbu	r2,-4(fp)
}
    8404:	e037883a 	mov	sp,fp
    8408:	df000017 	ldw	fp,0(sp)
    840c:	dec00104 	addi	sp,sp,4
    8410:	f800283a 	ret

00008414 <PutUart0>:
 
unsigned char PutUart0(unsigned char in_char)
{
    8414:	defffc04 	addi	sp,sp,-16
    8418:	df000315 	stw	fp,12(sp)
    841c:	df000304 	addi	fp,sp,12
    8420:	2005883a 	mov	r2,r4
    8424:	e0bfff05 	stb	r2,-4(fp)
    unsigned short size;
    unsigned int z;
    
    z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
    8428:	00800074 	movhi	r2,1
    842c:	10850204 	addi	r2,r2,5128
    8430:	10800037 	ldwio	r2,0(r2)
    8434:	1080100c 	andi	r2,r2,64
    8438:	e0bffe15 	stw	r2,-8(fp)
    
    if ((TxHead_0==TxTail_0) && z) {
    843c:	d0e0e40b 	ldhu	r3,-31856(gp)
    8440:	d0a0e48b 	ldhu	r2,-31854(gp)
    8444:	18ffffcc 	andi	r3,r3,65535
    8448:	10bfffcc 	andi	r2,r2,65535
    844c:	1880071e 	bne	r3,r2,846c <PutUart0+0x58>
    8450:	e0bffe17 	ldw	r2,-8(fp)
    8454:	10000526 	beq	r2,zero,846c <PutUart0+0x58>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
    8458:	e0ffff03 	ldbu	r3,-4(fp)
    845c:	00800074 	movhi	r2,1
    8460:	10850104 	addi	r2,r2,5124
    8464:	10c00035 	stwio	r3,0(r2)
    8468:	00002c06 	br	851c <PutUart0+0x108>
    } else {
        if (TxHead_0 >= TxTail_0) {
    846c:	d0e0e40b 	ldhu	r3,-31856(gp)
    8470:	d0a0e48b 	ldhu	r2,-31854(gp)
    8474:	18ffffcc 	andi	r3,r3,65535
    8478:	10bfffcc 	andi	r2,r2,65535
    847c:	18800536 	bltu	r3,r2,8494 <PutUart0+0x80>
            size = TxHead_0 - TxTail_0;
    8480:	d0e0e40b 	ldhu	r3,-31856(gp)
    8484:	d0a0e48b 	ldhu	r2,-31854(gp)
    8488:	1885c83a 	sub	r2,r3,r2
    848c:	e0bffd0d 	sth	r2,-12(fp)
    8490:	00000506 	br	84a8 <PutUart0+0x94>
        } else {
            size = ((TX_BUFFER_SIZE_0 - 1) - TxTail_0) + TxHead_0;
    8494:	d0e0e40b 	ldhu	r3,-31856(gp)
    8498:	d0a0e48b 	ldhu	r2,-31854(gp)
    849c:	1885c83a 	sub	r2,r3,r2
    84a0:	1080ffc4 	addi	r2,r2,1023
    84a4:	e0bffd0d 	sth	r2,-12(fp)
        }

        if (size > (TX_BUFFER_SIZE_0 - 3)) {
    84a8:	e0bffd0b 	ldhu	r2,-12(fp)
    84ac:	1080ffb0 	cmpltui	r2,r2,1022
    84b0:	1000021e 	bne	r2,zero,84bc <PutUart0+0xa8>
            return (-1);
    84b4:	00bfffc4 	movi	r2,-1
    84b8:	00001906 	br	8520 <PutUart0+0x10c>
        }
        
        tx_buffer_0[TxHead_0] = in_char;
    84bc:	d0a0e40b 	ldhu	r2,-31856(gp)
    84c0:	10bfffcc 	andi	r2,r2,65535
    84c4:	00c00074 	movhi	r3,1
    84c8:	18f6bd04 	addi	r3,r3,-9484
    84cc:	1885883a 	add	r2,r3,r2
    84d0:	e0ffff03 	ldbu	r3,-4(fp)
    84d4:	10c00005 	stb	r3,0(r2)

        if (++TxHead_0 > (TX_BUFFER_SIZE_0-1)) {
    84d8:	d0a0e40b 	ldhu	r2,-31856(gp)
    84dc:	10800044 	addi	r2,r2,1
    84e0:	d0a0e40d 	sth	r2,-31856(gp)
    84e4:	d0a0e40b 	ldhu	r2,-31856(gp)
    84e8:	10bfffcc 	andi	r2,r2,65535
    84ec:	10810030 	cmpltui	r2,r2,1024
    84f0:	1000011e 	bne	r2,zero,84f8 <PutUart0+0xe4>
            TxHead_0 = 0;
    84f4:	d020e40d 	sth	zero,-31856(gp)
        }

        z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    84f8:	00800074 	movhi	r2,1
    84fc:	10850304 	addi	r2,r2,5132
    8500:	10800037 	ldwio	r2,0(r2)
    8504:	10801014 	ori	r2,r2,64
    8508:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
    850c:	e0fffe17 	ldw	r3,-8(fp)
    8510:	00800074 	movhi	r2,1
    8514:	10850304 	addi	r2,r2,5132
    8518:	10c00035 	stwio	r3,0(r2)
    }

    return(1);
    851c:	00800044 	movi	r2,1
}
    8520:	e037883a 	mov	sp,fp
    8524:	df000017 	ldw	fp,0(sp)
    8528:	dec00104 	addi	sp,sp,4
    852c:	f800283a 	ret

00008530 <InitUart>:
#include "xxsubmod.h"

#define pi 3.1415926538

void InitUart()
{
    8530:	defff904 	addi	sp,sp,-28
    8534:	dfc00615 	stw	ra,24(sp)
    8538:	df000515 	stw	fp,20(sp)
    853c:	df000504 	addi	fp,sp,20
    int context_uart0;

    InitUart0(BAUD_RATE_0);
    8540:	010000b4 	movhi	r4,2
    8544:	21308004 	addi	r4,r4,-15872
    8548:	00081f80 	call	81f8 <InitUart0>

    //alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ,&context_uart1,IsrUart1,NULL); // install UART1 ISR
    alt_irq_register(UART_0_IRQ,&context_uart0,IsrUart0); // install UART0 ISR
    854c:	e0bfff04 	addi	r2,fp,-4
    8550:	0009883a 	mov	r4,zero
    8554:	100b883a 	mov	r5,r2
    8558:	01800074 	movhi	r6,1
    855c:	31a09604 	addi	r6,r6,-32168
    8560:	000b52c0 	call	b52c <alt_irq_register>
    8564:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8568:	0005303a 	rdctl	r2,status
    856c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8570:	e0fffc17 	ldw	r3,-16(fp)
    8574:	00bfff84 	movi	r2,-2
    8578:	1884703a 	and	r2,r3,r2
    857c:	1001703a 	wrctl	status,r2
  
  return context;
    8580:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8584:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8588:	e0bffb17 	ldw	r2,-20(fp)
    858c:	00c00044 	movi	r3,1
    8590:	1884983a 	sll	r2,r3,r2
    8594:	1007883a 	mov	r3,r2
    8598:	00800074 	movhi	r2,1
    859c:	10b5b704 	addi	r2,r2,-10532
    85a0:	10800017 	ldw	r2,0(r2)
    85a4:	1886b03a 	or	r3,r3,r2
    85a8:	00800074 	movhi	r2,1
    85ac:	10b5b704 	addi	r2,r2,-10532
    85b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    85b4:	00800074 	movhi	r2,1
    85b8:	10b5b704 	addi	r2,r2,-10532
    85bc:	10800017 	ldw	r2,0(r2)
    85c0:	100170fa 	wrctl	ienable,r2
    85c4:	e0bffd17 	ldw	r2,-12(fp)
    85c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    85cc:	e0bffe17 	ldw	r2,-8(fp)
    85d0:	1001703a 	wrctl	status,r2

    //alt_ic_irq_enable (UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ);
    alt_irq_enable (UART_0_IRQ);
}
    85d4:	e037883a 	mov	sp,fp
    85d8:	dfc00117 	ldw	ra,4(sp)
    85dc:	df000017 	ldw	fp,0(sp)
    85e0:	dec00204 	addi	sp,sp,8
    85e4:	f800283a 	ret

000085e8 <StepcountTiltToSI>:

double StepcountTiltToSI(int16_t steps)
{
    85e8:	defffd04 	addi	sp,sp,-12
    85ec:	dfc00215 	stw	ra,8(sp)
    85f0:	df000115 	stw	fp,4(sp)
    85f4:	df000104 	addi	fp,sp,4
    85f8:	2005883a 	mov	r2,r4
    85fc:	e0bfff0d 	sth	r2,-4(fp)
	static double stepsPerRotation = 221/170*360;
	return steps/stepsPerRotation*2*pi;
    8600:	e0bfff0f 	ldh	r2,-4(fp)
    8604:	1009883a 	mov	r4,r2
    8608:	000a1e80 	call	a1e8 <__floatsidf>
    860c:	100b883a 	mov	r5,r2
    8610:	180d883a 	mov	r6,r3
    8614:	d0a00217 	ldw	r2,-32760(gp)
    8618:	01000074 	movhi	r4,1
    861c:	2134cd04 	addi	r4,r4,-11468
    8620:	20c00017 	ldw	r3,0(r4)
    8624:	2809883a 	mov	r4,r5
    8628:	300b883a 	mov	r5,r6
    862c:	100d883a 	mov	r6,r2
    8630:	180f883a 	mov	r7,r3
    8634:	0009f100 	call	9f10 <__divdf3>
    8638:	1009883a 	mov	r4,r2
    863c:	180b883a 	mov	r5,r3
    8640:	2005883a 	mov	r2,r4
    8644:	2807883a 	mov	r3,r5
    8648:	1009883a 	mov	r4,r2
    864c:	180b883a 	mov	r5,r3
    8650:	100d883a 	mov	r6,r2
    8654:	180f883a 	mov	r7,r3
    8658:	0009b780 	call	9b78 <__adddf3>
    865c:	1009883a 	mov	r4,r2
    8660:	180b883a 	mov	r5,r3
    8664:	2005883a 	mov	r2,r4
    8668:	2807883a 	mov	r3,r5
    866c:	1009883a 	mov	r4,r2
    8670:	180b883a 	mov	r5,r3
    8674:	019512f4 	movhi	r6,21579
    8678:	31998604 	addi	r6,r6,26136
    867c:	01d00274 	movhi	r7,16393
    8680:	39c87ec4 	addi	r7,r7,8699
    8684:	0009c2c0 	call	9c2c <__muldf3>
    8688:	100f883a 	mov	r7,r2
    868c:	1811883a 	mov	r8,r3
    8690:	380b883a 	mov	r5,r7
    8694:	400d883a 	mov	r6,r8
    8698:	2807883a 	mov	r3,r5
    869c:	3009883a 	mov	r4,r6

}
    86a0:	1805883a 	mov	r2,r3
    86a4:	2007883a 	mov	r3,r4
    86a8:	e037883a 	mov	sp,fp
    86ac:	dfc00117 	ldw	ra,4(sp)
    86b0:	df000017 	ldw	fp,0(sp)
    86b4:	dec00204 	addi	sp,sp,8
    86b8:	f800283a 	ret

000086bc <StepcountPanToSI>:

double StepcountPanToSI(int16_t steps)
{
    86bc:	defffd04 	addi	sp,sp,-12
    86c0:	dfc00215 	stw	ra,8(sp)
    86c4:	df000115 	stw	fp,4(sp)
    86c8:	df000104 	addi	fp,sp,4
    86cc:	2005883a 	mov	r2,r4
    86d0:	e0bfff0d 	sth	r2,-4(fp)
	static double stepsPerRotation = 617/180*360;
	return steps/stepsPerRotation*2*pi;
    86d4:	e0bfff0f 	ldh	r2,-4(fp)
    86d8:	1009883a 	mov	r4,r2
    86dc:	000a1e80 	call	a1e8 <__floatsidf>
    86e0:	100b883a 	mov	r5,r2
    86e4:	180d883a 	mov	r6,r3
    86e8:	d0a00017 	ldw	r2,-32768(gp)
    86ec:	01000074 	movhi	r4,1
    86f0:	2134cb04 	addi	r4,r4,-11476
    86f4:	20c00017 	ldw	r3,0(r4)
    86f8:	2809883a 	mov	r4,r5
    86fc:	300b883a 	mov	r5,r6
    8700:	100d883a 	mov	r6,r2
    8704:	180f883a 	mov	r7,r3
    8708:	0009f100 	call	9f10 <__divdf3>
    870c:	1009883a 	mov	r4,r2
    8710:	180b883a 	mov	r5,r3
    8714:	2005883a 	mov	r2,r4
    8718:	2807883a 	mov	r3,r5
    871c:	1009883a 	mov	r4,r2
    8720:	180b883a 	mov	r5,r3
    8724:	100d883a 	mov	r6,r2
    8728:	180f883a 	mov	r7,r3
    872c:	0009b780 	call	9b78 <__adddf3>
    8730:	1009883a 	mov	r4,r2
    8734:	180b883a 	mov	r5,r3
    8738:	2005883a 	mov	r2,r4
    873c:	2807883a 	mov	r3,r5
    8740:	1009883a 	mov	r4,r2
    8744:	180b883a 	mov	r5,r3
    8748:	019512f4 	movhi	r6,21579
    874c:	31998604 	addi	r6,r6,26136
    8750:	01d00274 	movhi	r7,16393
    8754:	39c87ec4 	addi	r7,r7,8699
    8758:	0009c2c0 	call	9c2c <__muldf3>
    875c:	100f883a 	mov	r7,r2
    8760:	1811883a 	mov	r8,r3
    8764:	380b883a 	mov	r5,r7
    8768:	400d883a 	mov	r6,r8
    876c:	2807883a 	mov	r3,r5
    8770:	3009883a 	mov	r4,r6

}
    8774:	1805883a 	mov	r2,r3
    8778:	2007883a 	mov	r3,r4
    877c:	e037883a 	mov	sp,fp
    8780:	dfc00117 	ldw	ra,4(sp)
    8784:	df000017 	ldw	fp,0(sp)
    8788:	dec00204 	addi	sp,sp,8
    878c:	f800283a 	ret

00008790 <main>:

int main()
{
    8790:	deffe904 	addi	sp,sp,-92
    8794:	dfc01615 	stw	ra,88(sp)
    8798:	df001515 	stw	fp,84(sp)
    879c:	df001504 	addi	fp,sp,84
	unsigned char ch;
	printf("\n\nHello NiosII!!!!!\n");
    87a0:	01000074 	movhi	r4,1
    87a4:	2133a904 	addi	r4,r4,-12636
    87a8:	000ac4c0 	call	ac4c <puts>

	InitUart();
    87ac:	00085300 	call	8530 <InitUart>
	//initialize 20-sim
	XXDouble u [3 + 1];
	XXDouble y [1 + 1];

	/* Initialize the inputs and outputs with correct initial values */
	u[0] = 0.0;		/* corr */
    87b0:	e03ff415 	stw	zero,-48(fp)
    87b4:	e03ff515 	stw	zero,-44(fp)
	u[1] = 0.0;		/* in */
    87b8:	e03ff615 	stw	zero,-40(fp)
    87bc:	e03ff715 	stw	zero,-36(fp)
	u[2] = 0.0;		/* position */
    87c0:	e03ff815 	stw	zero,-32(fp)
    87c4:	e03ff915 	stw	zero,-28(fp)

	y[0] = 0.0;		/* out */
    87c8:	e03ffc15 	stw	zero,-16(fp)
    87cc:	e03ffd15 	stw	zero,-12(fp)


	/* Initialize the submodel itself */
	XXInitializeSubmodel (&u, &y, xx_time);
    87d0:	01000074 	movhi	r4,1
    87d4:	2135b204 	addi	r4,r4,-10552
    87d8:	20800017 	ldw	r2,0(r4)
    87dc:	20c00117 	ldw	r3,4(r4)
    87e0:	e13ff404 	addi	r4,fp,-48
    87e4:	e17ffc04 	addi	r5,fp,-16
    87e8:	100d883a 	mov	r6,r2
    87ec:	180f883a 	mov	r7,r3
    87f0:	00096b40 	call	96b4 <XXInitializeSubmodel>
	
	//end initialize 20-sim
	
	//variables for avalon communication
	int32_t nReadOut = 0;
    87f4:	e03fec15 	stw	zero,-80(fp)
	uint16_t stepCount0 = 0;
    87f8:	e03fed0d 	sth	zero,-76(fp)
	uint16_t stepCount1 = 0;
    87fc:	e03fed8d 	sth	zero,-74(fp)
	uint16_t stepCount0Old = 0;
    8800:	e03feb0d 	sth	zero,-84(fp)
	uint16_t stepCount1Old = 0;
    8804:	e03feb8d 	sth	zero,-82(fp)
	int8_t PWM0 = 0;
    8808:	e03fee05 	stb	zero,-72(fp)
	int8_t PWM1 = 0;
    880c:	e03fee45 	stb	zero,-71(fp)
	int32_t avalondSend = 0;
    8810:	e03fef15 	stw	zero,-68(fp)
	while( (xx_stop_simulation == XXFALSE) ) {
    8814:	0000ad06 	br	8acc <main+0x33c>

		//avalon bus communication
		nReadOut = IORD(ESL_NIOS_II_IP_0_BASE, 0x00);
    8818:	00800074 	movhi	r2,1
    881c:	10840004 	addi	r2,r2,4096
    8820:	10800037 	ldwio	r2,0(r2)
    8824:	e0bfec15 	stw	r2,-80(fp)

		stepCount0 = nReadOut >> (32-11);
    8828:	e0bfec17 	ldw	r2,-80(fp)
    882c:	1005d57a 	srai	r2,r2,21
    8830:	e0bfed0d 	sth	r2,-76(fp)
		int32_t temp32 = 0;
    8834:	e03ff015 	stw	zero,-64(fp)
		temp32 = nReadOut << 11;
    8838:	e0bfec17 	ldw	r2,-80(fp)
    883c:	100492fa 	slli	r2,r2,11
    8840:	e0bff015 	stw	r2,-64(fp)
		stepCount1 = temp32 >> (32-11);
    8844:	e0bff017 	ldw	r2,-64(fp)
    8848:	1005d57a 	srai	r2,r2,21
    884c:	e0bfed8d 	sth	r2,-74(fp)

		if(stepCount0 != stepCount0Old || stepCount1 != stepCount1Old)
    8850:	e0ffed0b 	ldhu	r3,-76(fp)
    8854:	e0bfeb0b 	ldhu	r2,-84(fp)
    8858:	1880031e 	bne	r3,r2,8868 <main+0xd8>
    885c:	e0ffed8b 	ldhu	r3,-74(fp)
    8860:	e0bfeb8b 	ldhu	r2,-82(fp)
    8864:	18800726 	beq	r3,r2,8884 <main+0xf4>
			printf("stepCount0: %d\t stepCount1: %d \n\r", stepCount0, stepCount1);
    8868:	e0ffed0b 	ldhu	r3,-76(fp)
    886c:	e0bfed8b 	ldhu	r2,-74(fp)
    8870:	01000074 	movhi	r4,1
    8874:	2133ae04 	addi	r4,r4,-12616
    8878:	180b883a 	mov	r5,r3
    887c:	100d883a 	mov	r6,r2
    8880:	000ab800 	call	ab80 <printf>
		
		//generate inputs
		u[1] = 0;
    8884:	e03ff615 	stw	zero,-40(fp)
    8888:	e03ff715 	stw	zero,-36(fp)
		if(xx_time >= 1){
    888c:	01000074 	movhi	r4,1
    8890:	2135b204 	addi	r4,r4,-10552
    8894:	20800017 	ldw	r2,0(r4)
    8898:	20c00117 	ldw	r3,4(r4)
    889c:	1009883a 	mov	r4,r2
    88a0:	180b883a 	mov	r5,r3
    88a4:	000d883a 	mov	r6,zero
    88a8:	01cffc34 	movhi	r7,16368
    88ac:	000a1280 	call	a128 <__gedf2>
    88b0:	10000616 	blt	r2,zero,88cc <main+0x13c>
			u[1] = 0.5*pi;
    88b4:	009512f4 	movhi	r2,21579
    88b8:	10998604 	addi	r2,r2,26136
    88bc:	e0bff615 	stw	r2,-40(fp)
    88c0:	008ffe74 	movhi	r2,16377
    88c4:	10887ec4 	addi	r2,r2,8699
    88c8:	e0bff715 	stw	r2,-36(fp)

		}
		if(xx_time >= 5){
    88cc:	01000074 	movhi	r4,1
    88d0:	2135b204 	addi	r4,r4,-10552
    88d4:	20800017 	ldw	r2,0(r4)
    88d8:	20c00117 	ldw	r3,4(r4)
    88dc:	1009883a 	mov	r4,r2
    88e0:	180b883a 	mov	r5,r3
    88e4:	000d883a 	mov	r6,zero
    88e8:	01d00534 	movhi	r7,16404
    88ec:	000a1280 	call	a128 <__gedf2>
    88f0:	10000616 	blt	r2,zero,890c <main+0x17c>
			u[1] = 1.5*pi;
    88f4:	009fce74 	movhi	r2,32569
    88f8:	10a32484 	addi	r2,r2,-29550
    88fc:	e0bff615 	stw	r2,-40(fp)
    8900:	009004f4 	movhi	r2,16403
    8904:	10b65f04 	addi	r2,r2,-9860
    8908:	e0bff715 	stw	r2,-36(fp)

		}
		if(xx_time >= 10){
    890c:	01000074 	movhi	r4,1
    8910:	2135b204 	addi	r4,r4,-10552
    8914:	20800017 	ldw	r2,0(r4)
    8918:	20c00117 	ldw	r3,4(r4)
    891c:	1009883a 	mov	r4,r2
    8920:	180b883a 	mov	r5,r3
    8924:	000d883a 	mov	r6,zero
    8928:	01d00934 	movhi	r7,16420
    892c:	000a1280 	call	a128 <__gedf2>
    8930:	10000616 	blt	r2,zero,894c <main+0x1bc>
			u[1] = 0.5*pi;
    8934:	009512f4 	movhi	r2,21579
    8938:	10998604 	addi	r2,r2,26136
    893c:	e0bff615 	stw	r2,-40(fp)
    8940:	008ffe74 	movhi	r2,16377
    8944:	10887ec4 	addi	r2,r2,8699
    8948:	e0bff715 	stw	r2,-36(fp)

		}
		
		
		/* Call the 20-sim submodel to calculate the output */
		u[2] = StepcountTiltToSI(stepCount0);
    894c:	e0bfed0b 	ldhu	r2,-76(fp)
    8950:	10bfffcc 	andi	r2,r2,65535
    8954:	10a0001c 	xori	r2,r2,32768
    8958:	10a00004 	addi	r2,r2,-32768
    895c:	1009883a 	mov	r4,r2
    8960:	00085e80 	call	85e8 <StepcountTiltToSI>
    8964:	1009883a 	mov	r4,r2
    8968:	180b883a 	mov	r5,r3
    896c:	e13ff815 	stw	r4,-32(fp)
    8970:	e17ff915 	stw	r5,-28(fp)
		double temp = y[0];
    8974:	e0bffc17 	ldw	r2,-16(fp)
    8978:	e0fffd17 	ldw	r3,-12(fp)
    897c:	e0bff115 	stw	r2,-60(fp)
    8980:	e0fff215 	stw	r3,-56(fp)
		
		printf("%f\n",temp);
    8984:	01000074 	movhi	r4,1
    8988:	2133b704 	addi	r4,r4,-12580
    898c:	e17ff117 	ldw	r5,-60(fp)
    8990:	e1bff217 	ldw	r6,-56(fp)
    8994:	000ab800 	call	ab80 <printf>

		XXCalculateSubmodel (&u, &y, xx_time);
    8998:	01000074 	movhi	r4,1
    899c:	2135b204 	addi	r4,r4,-10552
    89a0:	20800017 	ldw	r2,0(r4)
    89a4:	20c00117 	ldw	r3,4(r4)
    89a8:	e13ff404 	addi	r4,fp,-48
    89ac:	e17ffc04 	addi	r5,fp,-16
    89b0:	100d883a 	mov	r6,r2
    89b4:	180f883a 	mov	r7,r3
    89b8:	00097540 	call	9754 <XXCalculateSubmodel>
		PWM0 = y[0]*20;
    89bc:	e0bffc17 	ldw	r2,-16(fp)
    89c0:	e0fffd17 	ldw	r3,-12(fp)
    89c4:	1009883a 	mov	r4,r2
    89c8:	180b883a 	mov	r5,r3
    89cc:	000d883a 	mov	r6,zero
    89d0:	01d00d34 	movhi	r7,16436
    89d4:	0009c2c0 	call	9c2c <__muldf3>
    89d8:	1009883a 	mov	r4,r2
    89dc:	180b883a 	mov	r5,r3
    89e0:	2005883a 	mov	r2,r4
    89e4:	2807883a 	mov	r3,r5
    89e8:	1009883a 	mov	r4,r2
    89ec:	180b883a 	mov	r5,r3
    89f0:	000a2bc0 	call	a2bc <__fixdfsi>
    89f4:	e0bfee05 	stb	r2,-72(fp)
		int16_t temp16 = 0;
    89f8:	e03ff30d 	sth	zero,-52(fp)
		avalondSend = PWM0 << 24 | PWM1 <<16 | temp16;
    89fc:	e0bfee07 	ldb	r2,-72(fp)
    8a00:	1006963a 	slli	r3,r2,24
    8a04:	e0bfee47 	ldb	r2,-71(fp)
    8a08:	1004943a 	slli	r2,r2,16
    8a0c:	1886b03a 	or	r3,r3,r2
    8a10:	e0bff30f 	ldh	r2,-52(fp)
    8a14:	1884b03a 	or	r2,r3,r2
    8a18:	e0bfef15 	stw	r2,-68(fp)
		//printf("%x\n",avalondSend);
		IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,avalondSend);
    8a1c:	00800074 	movhi	r2,1
    8a20:	10840004 	addi	r2,r2,4096
    8a24:	e0ffef17 	ldw	r3,-68(fp)
    8a28:	10c00035 	stwio	r3,0(r2)
		
		if(!EmptyUart0()){
    8a2c:	000837c0 	call	837c <EmptyUart0>
    8a30:	10803fcc 	andi	r2,r2,255
    8a34:	10000e1e 	bne	r2,zero,8a70 <main+0x2e0>
			ch = GetUart0();
    8a38:	00083b80 	call	83b8 <GetUart0>
    8a3c:	e0bff385 	stb	r2,-50(fp)
			printf("received message: %c\n",ch);
    8a40:	e0bff383 	ldbu	r2,-50(fp)
    8a44:	01000074 	movhi	r4,1
    8a48:	2133b804 	addi	r4,r4,-12576
    8a4c:	100b883a 	mov	r5,r2
    8a50:	000ab800 	call	ab80 <printf>
			PutUart0(ch);
    8a54:	e0bff383 	ldbu	r2,-50(fp)
    8a58:	1009883a 	mov	r4,r2
    8a5c:	00084140 	call	8414 <PutUart0>
			PutUart0('\r');
    8a60:	01000344 	movi	r4,13
    8a64:	00084140 	call	8414 <PutUart0>
			PutUart0('\n');
    8a68:	01000284 	movi	r4,10
    8a6c:	00084140 	call	8414 <PutUart0>
			
			
		}
		
		stepCount0Old = stepCount0;
    8a70:	e0bfed0b 	ldhu	r2,-76(fp)
    8a74:	e0bfeb0d 	sth	r2,-84(fp)
		stepCount1Old = stepCount1;
    8a78:	e0bfed8b 	ldhu	r2,-74(fp)
    8a7c:	e0bfeb8d 	sth	r2,-82(fp)
		xx_time+=0.003;
    8a80:	01000074 	movhi	r4,1
    8a84:	2135b204 	addi	r4,r4,-10552
    8a88:	20800017 	ldw	r2,0(r4)
    8a8c:	20c00117 	ldw	r3,4(r4)
    8a90:	1009883a 	mov	r4,r2
    8a94:	180b883a 	mov	r5,r3
    8a98:	01af1ab4 	movhi	r6,48234
    8a9c:	319fbe84 	addi	r6,r6,32506
    8aa0:	01cfda74 	movhi	r7,16233
    8aa4:	39e4dd04 	addi	r7,r7,-27788
    8aa8:	0009b780 	call	9b78 <__adddf3>
    8aac:	1009883a 	mov	r4,r2
    8ab0:	180b883a 	mov	r5,r3
    8ab4:	2005883a 	mov	r2,r4
    8ab8:	2807883a 	mov	r3,r5
    8abc:	01000074 	movhi	r4,1
    8ac0:	2135b204 	addi	r4,r4,-10552
    8ac4:	20800015 	stw	r2,0(r4)
    8ac8:	20c00115 	stw	r3,4(r4)
	uint16_t stepCount0Old = 0;
	uint16_t stepCount1Old = 0;
	int8_t PWM0 = 0;
	int8_t PWM1 = 0;
	int32_t avalondSend = 0;
	while( (xx_stop_simulation == XXFALSE) ) {
    8acc:	00800074 	movhi	r2,1
    8ad0:	10b5b504 	addi	r2,r2,-10540
    8ad4:	10800003 	ldbu	r2,0(r2)
    8ad8:	10803fcc 	andi	r2,r2,255
    8adc:	1080201c 	xori	r2,r2,128
    8ae0:	10bfe004 	addi	r2,r2,-128
    8ae4:	103f4c26 	beq	r2,zero,8818 <main+0x88>
		stepCount1Old = stepCount1;
		xx_time+=0.003;
	} 

	/* Perform the final 20-sim calculations */
	XXTerminateSubmodel (&u, &y, xx_time);
    8ae8:	01000074 	movhi	r4,1
    8aec:	2135b204 	addi	r4,r4,-10552
    8af0:	20800017 	ldw	r2,0(r4)
    8af4:	20c00117 	ldw	r3,4(r4)
    8af8:	e13ff404 	addi	r4,fp,-48
    8afc:	e17ffc04 	addi	r5,fp,-16
    8b00:	100d883a 	mov	r6,r2
    8b04:	180f883a 	mov	r7,r3
    8b08:	00097bc0 	call	97bc <XXTerminateSubmodel>

return 0;
    8b0c:	0005883a 	mov	r2,zero

}
    8b10:	e037883a 	mov	sp,fp
    8b14:	dfc00117 	ldw	ra,4(sp)
    8b18:	df000017 	ldw	fp,0(sp)
    8b1c:	dec00204 	addi	sp,sp,8
    8b20:	f800283a 	ret

00008b24 <XXString2Double>:
	double m_double;
	const char* m_char;
}str2dbl;

XXDouble XXString2Double(const char* argument)
{
    8b24:	defffc04 	addi	sp,sp,-16
    8b28:	df000315 	stw	fp,12(sp)
    8b2c:	df000304 	addi	fp,sp,12
    8b30:	e13fff15 	stw	r4,-4(fp)
	str2dbl myConversion;
	myConversion.m_char = argument;
    8b34:	e0bfff17 	ldw	r2,-4(fp)
    8b38:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_double;
    8b3c:	e17ffd17 	ldw	r5,-12(fp)
    8b40:	e1bffe17 	ldw	r6,-8(fp)
    8b44:	2807883a 	mov	r3,r5
    8b48:	3009883a 	mov	r4,r6

}
    8b4c:	1805883a 	mov	r2,r3
    8b50:	2007883a 	mov	r3,r4
    8b54:	e037883a 	mov	sp,fp
    8b58:	df000017 	ldw	fp,0(sp)
    8b5c:	dec00104 	addi	sp,sp,4
    8b60:	f800283a 	ret

00008b64 <XXDouble2String>:

const char* XXDouble2String(XXDouble argument)
{
    8b64:	defffb04 	addi	sp,sp,-20
    8b68:	df000415 	stw	fp,16(sp)
    8b6c:	df000404 	addi	fp,sp,16
    8b70:	e13ffe15 	stw	r4,-8(fp)
    8b74:	e17fff15 	stw	r5,-4(fp)
	str2dbl myConversion;
	myConversion.m_double = argument;
    8b78:	e0bffe17 	ldw	r2,-8(fp)
    8b7c:	e0bffc15 	stw	r2,-16(fp)
    8b80:	e0bfff17 	ldw	r2,-4(fp)
    8b84:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_char;
    8b88:	e0bffc17 	ldw	r2,-16(fp)
}
    8b8c:	e037883a 	mov	sp,fp
    8b90:	df000017 	ldw	fp,0(sp)
    8b94:	dec00104 	addi	sp,sp,4
    8b98:	f800283a 	ret

00008b9c <XXDiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void XXDiscreteInitialize (void)
{
    8b9c:	deffff04 	addi	sp,sp,-4
    8ba0:	df000015 	stw	fp,0(sp)
    8ba4:	d839883a 	mov	fp,sp
	/* nothing to be done */
	xx_major = XXTRUE;
    8ba8:	00800074 	movhi	r2,1
    8bac:	10b4d244 	addi	r2,r2,-11447
    8bb0:	00c00044 	movi	r3,1
    8bb4:	10c00005 	stb	r3,0(r2)
}
    8bb8:	e037883a 	mov	sp,fp
    8bbc:	df000017 	ldw	fp,0(sp)
    8bc0:	dec00104 	addi	sp,sp,4
    8bc4:	f800283a 	ret

00008bc8 <XXDiscreteTerminate>:

/* the termination of the Discrete integration method */
void XXDiscreteTerminate (void)
{
    8bc8:	deffff04 	addi	sp,sp,-4
    8bcc:	df000015 	stw	fp,0(sp)
    8bd0:	d839883a 	mov	fp,sp
	/* nothing to be done */
}
    8bd4:	e037883a 	mov	sp,fp
    8bd8:	df000017 	ldw	fp,0(sp)
    8bdc:	dec00104 	addi	sp,sp,4
    8be0:	f800283a 	ret

00008be4 <XXDiscreteStep>:

/* the Discrete integration method itself */
void XXDiscreteStep (void)
{
    8be4:	defffd04 	addi	sp,sp,-12
    8be8:	dfc00215 	stw	ra,8(sp)
    8bec:	df000115 	stw	fp,4(sp)
    8bf0:	df000104 	addi	fp,sp,4
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8bf4:	e03fff15 	stw	zero,-4(fp)
    8bf8:	00001106 	br	8c40 <XXDiscreteStep+0x5c>
	{
		/* just a move of the new state */
		xx_s [index] = xx_R [index];
    8bfc:	00c00074 	movhi	r3,1
    8c00:	18f7bd04 	addi	r3,r3,-8460
    8c04:	e0bfff17 	ldw	r2,-4(fp)
    8c08:	100490fa 	slli	r2,r2,3
    8c0c:	1889883a 	add	r4,r3,r2
    8c10:	20800017 	ldw	r2,0(r4)
    8c14:	20c00117 	ldw	r3,4(r4)
    8c18:	01400074 	movhi	r5,1
    8c1c:	2977ef04 	addi	r5,r5,-8260
    8c20:	e13fff17 	ldw	r4,-4(fp)
    8c24:	200890fa 	slli	r4,r4,3
    8c28:	2909883a 	add	r4,r5,r4
    8c2c:	20800015 	stw	r2,0(r4)
    8c30:	20c00115 	stw	r3,4(r4)
void XXDiscreteStep (void)
{
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8c34:	e0bfff17 	ldw	r2,-4(fp)
    8c38:	10800044 	addi	r2,r2,1
    8c3c:	e0bfff15 	stw	r2,-4(fp)
    8c40:	e0bfff17 	ldw	r2,-4(fp)
    8c44:	108000d0 	cmplti	r2,r2,3
    8c48:	103fec1e 	bne	r2,zero,8bfc <XXDiscreteStep+0x18>
	{
		/* just a move of the new state */
		xx_s [index] = xx_R [index];
	}
	/* increment the simulation time */
	xx_time += xx_step_size;
    8c4c:	00800074 	movhi	r2,1
    8c50:	10b5b204 	addi	r2,r2,-10552
    8c54:	11400017 	ldw	r5,0(r2)
    8c58:	11800117 	ldw	r6,4(r2)
    8c5c:	01000074 	movhi	r4,1
    8c60:	2134d004 	addi	r4,r4,-11456
    8c64:	20800017 	ldw	r2,0(r4)
    8c68:	20c00117 	ldw	r3,4(r4)
    8c6c:	2809883a 	mov	r4,r5
    8c70:	300b883a 	mov	r5,r6
    8c74:	100d883a 	mov	r6,r2
    8c78:	180f883a 	mov	r7,r3
    8c7c:	0009b780 	call	9b78 <__adddf3>
    8c80:	1009883a 	mov	r4,r2
    8c84:	180b883a 	mov	r5,r3
    8c88:	2005883a 	mov	r2,r4
    8c8c:	2807883a 	mov	r3,r5
    8c90:	01000074 	movhi	r4,1
    8c94:	2135b204 	addi	r4,r4,-10552
    8c98:	20800015 	stw	r2,0(r4)
    8c9c:	20c00115 	stw	r3,4(r4)

	xx_major = XXTRUE;
    8ca0:	00800074 	movhi	r2,1
    8ca4:	10b4d244 	addi	r2,r2,-11447
    8ca8:	00c00044 	movi	r3,1
    8cac:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	XXCalculateDynamic ();
    8cb0:	0008f300 	call	8f30 <XXCalculateDynamic>
}
    8cb4:	e037883a 	mov	sp,fp
    8cb8:	dfc00117 	ldw	ra,4(sp)
    8cbc:	df000017 	ldw	fp,0(sp)
    8cc0:	dec00204 	addi	sp,sp,8
    8cc4:	f800283a 	ret

00008cc8 <XXModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void XXModelInitialize_parameters(void)
{
    8cc8:	deffff04 	addi	sp,sp,-4
    8ccc:	df000015 	stw	fp,0(sp)
    8cd0:	d839883a 	mov	fp,sp
	/* set the parameters */
	xx_P[0] = 0.0;		/* corrGain\K */
    8cd4:	00800074 	movhi	r2,1
    8cd8:	10b7c904 	addi	r2,r2,-8412
    8cdc:	10000015 	stw	zero,0(r2)
    8ce0:	10000115 	stw	zero,4(r2)
	xx_P[1] = 1.6;		/* PID1\kp */
    8ce4:	00800074 	movhi	r2,1
    8ce8:	10b7c904 	addi	r2,r2,-8412
    8cec:	00e666b4 	movhi	r3,39322
    8cf0:	18e66684 	addi	r3,r3,-26214
    8cf4:	10c00215 	stw	r3,8(r2)
    8cf8:	00cffeb4 	movhi	r3,16378
    8cfc:	18e66644 	addi	r3,r3,-26215
    8d00:	10c00315 	stw	r3,12(r2)
	xx_P[2] = 0.05;		/* PID1\tauD */
    8d04:	00800074 	movhi	r2,1
    8d08:	10b7c904 	addi	r2,r2,-8412
    8d0c:	00e666b4 	movhi	r3,39322
    8d10:	18e66684 	addi	r3,r3,-26214
    8d14:	10c00415 	stw	r3,16(r2)
    8d18:	00cfeab4 	movhi	r3,16298
    8d1c:	18e66644 	addi	r3,r3,-26215
    8d20:	10c00515 	stw	r3,20(r2)
	xx_P[3] = 0.001;		/* PID1\beta */
    8d24:	00800074 	movhi	r2,1
    8d28:	10b7c904 	addi	r2,r2,-8412
    8d2c:	00f4bcb4 	movhi	r3,54002
    8d30:	18ea7f04 	addi	r3,r3,-22020
    8d34:	10c00615 	stw	r3,24(r2)
    8d38:	00cfd434 	movhi	r3,16208
    8d3c:	18d89344 	addi	r3,r3,25165
    8d40:	10c00715 	stw	r3,28(r2)
	xx_P[4] = 10.5;		/* PID1\tauI */
    8d44:	00800074 	movhi	r2,1
    8d48:	10b7c904 	addi	r2,r2,-8412
    8d4c:	10000815 	stw	zero,32(r2)
    8d50:	00d00974 	movhi	r3,16421
    8d54:	10c00915 	stw	r3,36(r2)
	xx_P[5] = -0.99;		/* SignalLimiter2\minimum */
    8d58:	00800074 	movhi	r2,1
    8d5c:	10b7c904 	addi	r2,r2,-8412
    8d60:	00deb874 	movhi	r3,31457
    8d64:	18d1eb84 	addi	r3,r3,18350
    8d68:	10c00a15 	stw	r3,40(r2)
    8d6c:	00effc34 	movhi	r3,49136
    8d70:	18eb8504 	addi	r3,r3,-20972
    8d74:	10c00b15 	stw	r3,44(r2)
	xx_P[6] = 0.99;		/* SignalLimiter2\maximum */
    8d78:	00800074 	movhi	r2,1
    8d7c:	10b7c904 	addi	r2,r2,-8412
    8d80:	00deb874 	movhi	r3,31457
    8d84:	18d1eb84 	addi	r3,r3,18350
    8d88:	10c00c15 	stw	r3,48(r2)
    8d8c:	00cffc34 	movhi	r3,16368
    8d90:	18eb8504 	addi	r3,r3,-20972
    8d94:	10c00d15 	stw	r3,52(r2)

}
    8d98:	e037883a 	mov	sp,fp
    8d9c:	df000017 	ldw	fp,0(sp)
    8da0:	dec00104 	addi	sp,sp,4
    8da4:	f800283a 	ret

00008da8 <XXModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void XXModelInitialize_initialvalues(void)
{
    8da8:	deffff04 	addi	sp,sp,-4
    8dac:	df000015 	stw	fp,0(sp)
    8db0:	d839883a 	mov	fp,sp
	/* set the initial values */
	xx_I[0] = 0.0;		/* PID1\uD_previous_initial */
    8db4:	00800074 	movhi	r2,1
    8db8:	10b7c304 	addi	r2,r2,-8436
    8dbc:	10000015 	stw	zero,0(r2)
    8dc0:	10000115 	stw	zero,4(r2)
	xx_I[1] = 0.0;		/* PID1\error_previous_initial */
    8dc4:	00800074 	movhi	r2,1
    8dc8:	10b7c304 	addi	r2,r2,-8436
    8dcc:	10000215 	stw	zero,8(r2)
    8dd0:	10000315 	stw	zero,12(r2)
	xx_I[2] = 0.0;		/* PID1\uI_previous_initial */
    8dd4:	00800074 	movhi	r2,1
    8dd8:	10b7c304 	addi	r2,r2,-8436
    8ddc:	10000415 	stw	zero,16(r2)
    8de0:	10000515 	stw	zero,20(r2)

}
    8de4:	e037883a 	mov	sp,fp
    8de8:	df000017 	ldw	fp,0(sp)
    8dec:	dec00104 	addi	sp,sp,4
    8df0:	f800283a 	ret

00008df4 <XXModelInitialize_states>:

void XXModelInitialize_states(void)
{
    8df4:	deffff04 	addi	sp,sp,-4
    8df8:	df000015 	stw	fp,0(sp)
    8dfc:	d839883a 	mov	fp,sp
	/* set the states */
	xx_s[0] = xx_I[0];		/* PID1\uD_previous */
    8e00:	01000074 	movhi	r4,1
    8e04:	2137c304 	addi	r4,r4,-8436
    8e08:	20800017 	ldw	r2,0(r4)
    8e0c:	20c00117 	ldw	r3,4(r4)
    8e10:	01000074 	movhi	r4,1
    8e14:	2137ef04 	addi	r4,r4,-8260
    8e18:	20800015 	stw	r2,0(r4)
    8e1c:	20c00115 	stw	r3,4(r4)
	xx_s[1] = xx_I[1];		/* PID1\error_previous */
    8e20:	01000074 	movhi	r4,1
    8e24:	2137c304 	addi	r4,r4,-8436
    8e28:	20800217 	ldw	r2,8(r4)
    8e2c:	20c00317 	ldw	r3,12(r4)
    8e30:	01000074 	movhi	r4,1
    8e34:	2137ef04 	addi	r4,r4,-8260
    8e38:	20800215 	stw	r2,8(r4)
    8e3c:	20c00315 	stw	r3,12(r4)
	xx_s[2] = xx_I[2];		/* PID1\uI_previous */
    8e40:	01000074 	movhi	r4,1
    8e44:	2137c304 	addi	r4,r4,-8436
    8e48:	20800417 	ldw	r2,16(r4)
    8e4c:	20c00517 	ldw	r3,20(r4)
    8e50:	01000074 	movhi	r4,1
    8e54:	2137ef04 	addi	r4,r4,-8260
    8e58:	20800415 	stw	r2,16(r4)
    8e5c:	20c00515 	stw	r3,20(r4)

}
    8e60:	e037883a 	mov	sp,fp
    8e64:	df000017 	ldw	fp,0(sp)
    8e68:	dec00104 	addi	sp,sp,4
    8e6c:	f800283a 	ret

00008e70 <XXModelInitialize_variables>:

void XXModelInitialize_variables(void)
{
    8e70:	defffe04 	addi	sp,sp,-8
    8e74:	dfc00115 	stw	ra,4(sp)
    8e78:	df000015 	stw	fp,0(sp)
    8e7c:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(xx_V, 0, xx_variables_size * sizeof(XXDouble));
    8e80:	01000074 	movhi	r4,1
    8e84:	2137d704 	addi	r4,r4,-8356
    8e88:	000b883a 	mov	r5,zero
    8e8c:	01801804 	movi	r6,96
    8e90:	000ab240 	call	ab24 <memset>
}
    8e94:	e037883a 	mov	sp,fp
    8e98:	dfc00117 	ldw	ra,4(sp)
    8e9c:	df000017 	ldw	fp,0(sp)
    8ea0:	dec00204 	addi	sp,sp,8
    8ea4:	f800283a 	ret

00008ea8 <XXModelInitialize>:

/* this method is called before calculation is possible */
void XXModelInitialize (void)
{
    8ea8:	defffe04 	addi	sp,sp,-8
    8eac:	dfc00115 	stw	ra,4(sp)
    8eb0:	df000015 	stw	fp,0(sp)
    8eb4:	d839883a 	mov	fp,sp
	XXModelInitialize_parameters();
    8eb8:	0008cc80 	call	8cc8 <XXModelInitialize_parameters>
	XXModelInitialize_variables();
    8ebc:	0008e700 	call	8e70 <XXModelInitialize_variables>
	XXModelInitialize_initialvalues();
    8ec0:	0008da80 	call	8da8 <XXModelInitialize_initialvalues>
	XXModelInitialize_states();
    8ec4:	0008df40 	call	8df4 <XXModelInitialize_states>
}
    8ec8:	e037883a 	mov	sp,fp
    8ecc:	dfc00117 	ldw	ra,4(sp)
    8ed0:	df000017 	ldw	fp,0(sp)
    8ed4:	dec00204 	addi	sp,sp,8
    8ed8:	f800283a 	ret

00008edc <XXCalculateInitial>:

/* This function calculates the initial equations of the model.
 * These equations are calculated before anything else
 */
void XXCalculateInitial (void)
{
    8edc:	deffff04 	addi	sp,sp,-4
    8ee0:	df000015 	stw	fp,0(sp)
    8ee4:	d839883a 	mov	fp,sp

}
    8ee8:	e037883a 	mov	sp,fp
    8eec:	df000017 	ldw	fp,0(sp)
    8ef0:	dec00104 	addi	sp,sp,4
    8ef4:	f800283a 	ret

00008ef8 <XXCalculateStatic>:

/* This function calculates the static equations of the model.
 * These equations are only dependent from parameters and constants
 */
void XXCalculateStatic (void)
{
    8ef8:	deffff04 	addi	sp,sp,-4
    8efc:	df000015 	stw	fp,0(sp)
    8f00:	d839883a 	mov	fp,sp

}
    8f04:	e037883a 	mov	sp,fp
    8f08:	df000017 	ldw	fp,0(sp)
    8f0c:	dec00104 	addi	sp,sp,4
    8f10:	f800283a 	ret

00008f14 <XXCalculateInput>:
/* This function calculates the input equations of the model.
 * These equations are dynamic equations that must not change
 * in calls from the integration method (like random and delay).
 */
void XXCalculateInput (void)
{
    8f14:	deffff04 	addi	sp,sp,-4
    8f18:	df000015 	stw	fp,0(sp)
    8f1c:	d839883a 	mov	fp,sp

}
    8f20:	e037883a 	mov	sp,fp
    8f24:	df000017 	ldw	fp,0(sp)
    8f28:	dec00104 	addi	sp,sp,4
    8f2c:	f800283a 	ret

00008f30 <XXCalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void XXCalculateDynamic (void)
{
    8f30:	defff804 	addi	sp,sp,-32
    8f34:	dfc00715 	stw	ra,28(sp)
    8f38:	df000615 	stw	fp,24(sp)
    8f3c:	dd400515 	stw	r21,20(sp)
    8f40:	dd000415 	stw	r20,16(sp)
    8f44:	dcc00315 	stw	r19,12(sp)
    8f48:	dc800215 	stw	r18,8(sp)
    8f4c:	dc400115 	stw	r17,4(sp)
    8f50:	dc000015 	stw	r16,0(sp)
    8f54:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	xx_V[3] = 1.0 / (xx_step_size + xx_P[2] * xx_P[3]);
    8f58:	00800074 	movhi	r2,1
    8f5c:	10b7c904 	addi	r2,r2,-8412
    8f60:	11400417 	ldw	r5,16(r2)
    8f64:	11800517 	ldw	r6,20(r2)
    8f68:	01000074 	movhi	r4,1
    8f6c:	2137c904 	addi	r4,r4,-8412
    8f70:	20800617 	ldw	r2,24(r4)
    8f74:	20c00717 	ldw	r3,28(r4)
    8f78:	2809883a 	mov	r4,r5
    8f7c:	300b883a 	mov	r5,r6
    8f80:	100d883a 	mov	r6,r2
    8f84:	180f883a 	mov	r7,r3
    8f88:	0009c2c0 	call	9c2c <__muldf3>
    8f8c:	100f883a 	mov	r7,r2
    8f90:	1811883a 	mov	r8,r3
    8f94:	380b883a 	mov	r5,r7
    8f98:	400d883a 	mov	r6,r8
    8f9c:	d0a00617 	ldw	r2,-32744(gp)
    8fa0:	01000074 	movhi	r4,1
    8fa4:	2134d104 	addi	r4,r4,-11452
    8fa8:	20c00017 	ldw	r3,0(r4)
    8fac:	2809883a 	mov	r4,r5
    8fb0:	300b883a 	mov	r5,r6
    8fb4:	100d883a 	mov	r6,r2
    8fb8:	180f883a 	mov	r7,r3
    8fbc:	0009b780 	call	9b78 <__adddf3>
    8fc0:	1009883a 	mov	r4,r2
    8fc4:	180b883a 	mov	r5,r3
    8fc8:	2005883a 	mov	r2,r4
    8fcc:	2807883a 	mov	r3,r5
    8fd0:	0009883a 	mov	r4,zero
    8fd4:	014ffc34 	movhi	r5,16368
    8fd8:	100d883a 	mov	r6,r2
    8fdc:	180f883a 	mov	r7,r3
    8fe0:	0009f100 	call	9f10 <__divdf3>
    8fe4:	1009883a 	mov	r4,r2
    8fe8:	180b883a 	mov	r5,r3
    8fec:	2005883a 	mov	r2,r4
    8ff0:	2807883a 	mov	r3,r5
    8ff4:	01000074 	movhi	r4,1
    8ff8:	2137d704 	addi	r4,r4,-8356
    8ffc:	20800615 	stw	r2,24(r4)
    9000:	20c00715 	stw	r3,28(r4)

	/* corrGain\input = corr; */
	xx_V[0] = xx_V[8];
    9004:	01000074 	movhi	r4,1
    9008:	2137d704 	addi	r4,r4,-8356
    900c:	20801017 	ldw	r2,64(r4)
    9010:	20c01117 	ldw	r3,68(r4)
    9014:	01000074 	movhi	r4,1
    9018:	2137d704 	addi	r4,r4,-8356
    901c:	20800015 	stw	r2,0(r4)
    9020:	20c00115 	stw	r3,4(r4)

	/* PlusMinus2\plus1 = in; */
	xx_V[5] = xx_V[9];
    9024:	01000074 	movhi	r4,1
    9028:	2137d704 	addi	r4,r4,-8356
    902c:	20801217 	ldw	r2,72(r4)
    9030:	20c01317 	ldw	r3,76(r4)
    9034:	01000074 	movhi	r4,1
    9038:	2137d704 	addi	r4,r4,-8356
    903c:	20800a15 	stw	r2,40(r4)
    9040:	20c00b15 	stw	r3,44(r4)

	/* PlusMinus2\minus1 = position; */
	xx_V[6] = xx_V[10];
    9044:	01000074 	movhi	r4,1
    9048:	2137d704 	addi	r4,r4,-8356
    904c:	20801417 	ldw	r2,80(r4)
    9050:	20c01517 	ldw	r3,84(r4)
    9054:	01000074 	movhi	r4,1
    9058:	2137d704 	addi	r4,r4,-8356
    905c:	20800c15 	stw	r2,48(r4)
    9060:	20c00d15 	stw	r3,52(r4)

	/* corrGain\output = corrGain\K * corrGain\input; */
	xx_V[1] = xx_P[0] * xx_V[0];
    9064:	00800074 	movhi	r2,1
    9068:	10b7c904 	addi	r2,r2,-8412
    906c:	11400017 	ldw	r5,0(r2)
    9070:	11800117 	ldw	r6,4(r2)
    9074:	01000074 	movhi	r4,1
    9078:	2137d704 	addi	r4,r4,-8356
    907c:	20800017 	ldw	r2,0(r4)
    9080:	20c00117 	ldw	r3,4(r4)
    9084:	2809883a 	mov	r4,r5
    9088:	300b883a 	mov	r5,r6
    908c:	100d883a 	mov	r6,r2
    9090:	180f883a 	mov	r7,r3
    9094:	0009c2c0 	call	9c2c <__muldf3>
    9098:	1009883a 	mov	r4,r2
    909c:	180b883a 	mov	r5,r3
    90a0:	2005883a 	mov	r2,r4
    90a4:	2807883a 	mov	r3,r5
    90a8:	01000074 	movhi	r4,1
    90ac:	2137d704 	addi	r4,r4,-8356
    90b0:	20800215 	stw	r2,8(r4)
    90b4:	20c00315 	stw	r3,12(r4)

	/* PID1\error = PlusMinus2\plus1 - PlusMinus2\minus1; */
	xx_R[1] = xx_V[5] - xx_V[6];
    90b8:	00800074 	movhi	r2,1
    90bc:	10b7d704 	addi	r2,r2,-8356
    90c0:	11400a17 	ldw	r5,40(r2)
    90c4:	11800b17 	ldw	r6,44(r2)
    90c8:	01000074 	movhi	r4,1
    90cc:	2137d704 	addi	r4,r4,-8356
    90d0:	20800c17 	ldw	r2,48(r4)
    90d4:	20c00d17 	ldw	r3,52(r4)
    90d8:	2809883a 	mov	r4,r5
    90dc:	300b883a 	mov	r5,r6
    90e0:	100d883a 	mov	r6,r2
    90e4:	180f883a 	mov	r7,r3
    90e8:	0009bcc0 	call	9bcc <__subdf3>
    90ec:	1009883a 	mov	r4,r2
    90f0:	180b883a 	mov	r5,r3
    90f4:	2005883a 	mov	r2,r4
    90f8:	2807883a 	mov	r3,r5
    90fc:	01000074 	movhi	r4,1
    9100:	2137bd04 	addi	r4,r4,-8460
    9104:	20800215 	stw	r2,8(r4)
    9108:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	xx_R[0] = xx_V[3] * (((xx_P[2] * xx_s[0]) * xx_P[3] + (xx_P[2] * xx_P[1]) * (xx_R[1] - xx_s[1])) + (xx_step_size * xx_P[1]) * xx_R[1]);
    910c:	00800074 	movhi	r2,1
    9110:	10b7d704 	addi	r2,r2,-8356
    9114:	14000617 	ldw	r16,24(r2)
    9118:	14400717 	ldw	r17,28(r2)
    911c:	00800074 	movhi	r2,1
    9120:	10b7c904 	addi	r2,r2,-8412
    9124:	11400417 	ldw	r5,16(r2)
    9128:	11800517 	ldw	r6,20(r2)
    912c:	01000074 	movhi	r4,1
    9130:	2137ef04 	addi	r4,r4,-8260
    9134:	20800017 	ldw	r2,0(r4)
    9138:	20c00117 	ldw	r3,4(r4)
    913c:	2809883a 	mov	r4,r5
    9140:	300b883a 	mov	r5,r6
    9144:	100d883a 	mov	r6,r2
    9148:	180f883a 	mov	r7,r3
    914c:	0009c2c0 	call	9c2c <__muldf3>
    9150:	100f883a 	mov	r7,r2
    9154:	1811883a 	mov	r8,r3
    9158:	380b883a 	mov	r5,r7
    915c:	400d883a 	mov	r6,r8
    9160:	01000074 	movhi	r4,1
    9164:	2137c904 	addi	r4,r4,-8412
    9168:	20800617 	ldw	r2,24(r4)
    916c:	20c00717 	ldw	r3,28(r4)
    9170:	2809883a 	mov	r4,r5
    9174:	300b883a 	mov	r5,r6
    9178:	100d883a 	mov	r6,r2
    917c:	180f883a 	mov	r7,r3
    9180:	0009c2c0 	call	9c2c <__muldf3>
    9184:	1009883a 	mov	r4,r2
    9188:	180b883a 	mov	r5,r3
    918c:	2025883a 	mov	r18,r4
    9190:	2827883a 	mov	r19,r5
    9194:	00800074 	movhi	r2,1
    9198:	10b7c904 	addi	r2,r2,-8412
    919c:	11400417 	ldw	r5,16(r2)
    91a0:	11800517 	ldw	r6,20(r2)
    91a4:	01000074 	movhi	r4,1
    91a8:	2137c904 	addi	r4,r4,-8412
    91ac:	20800217 	ldw	r2,8(r4)
    91b0:	20c00317 	ldw	r3,12(r4)
    91b4:	2809883a 	mov	r4,r5
    91b8:	300b883a 	mov	r5,r6
    91bc:	100d883a 	mov	r6,r2
    91c0:	180f883a 	mov	r7,r3
    91c4:	0009c2c0 	call	9c2c <__muldf3>
    91c8:	1009883a 	mov	r4,r2
    91cc:	180b883a 	mov	r5,r3
    91d0:	2029883a 	mov	r20,r4
    91d4:	282b883a 	mov	r21,r5
    91d8:	00800074 	movhi	r2,1
    91dc:	10b7bd04 	addi	r2,r2,-8460
    91e0:	11400217 	ldw	r5,8(r2)
    91e4:	11800317 	ldw	r6,12(r2)
    91e8:	01000074 	movhi	r4,1
    91ec:	2137ef04 	addi	r4,r4,-8260
    91f0:	20800217 	ldw	r2,8(r4)
    91f4:	20c00317 	ldw	r3,12(r4)
    91f8:	2809883a 	mov	r4,r5
    91fc:	300b883a 	mov	r5,r6
    9200:	100d883a 	mov	r6,r2
    9204:	180f883a 	mov	r7,r3
    9208:	0009bcc0 	call	9bcc <__subdf3>
    920c:	1009883a 	mov	r4,r2
    9210:	180b883a 	mov	r5,r3
    9214:	2005883a 	mov	r2,r4
    9218:	2807883a 	mov	r3,r5
    921c:	a009883a 	mov	r4,r20
    9220:	a80b883a 	mov	r5,r21
    9224:	100d883a 	mov	r6,r2
    9228:	180f883a 	mov	r7,r3
    922c:	0009c2c0 	call	9c2c <__muldf3>
    9230:	1009883a 	mov	r4,r2
    9234:	180b883a 	mov	r5,r3
    9238:	2005883a 	mov	r2,r4
    923c:	2807883a 	mov	r3,r5
    9240:	9009883a 	mov	r4,r18
    9244:	980b883a 	mov	r5,r19
    9248:	100d883a 	mov	r6,r2
    924c:	180f883a 	mov	r7,r3
    9250:	0009b780 	call	9b78 <__adddf3>
    9254:	1009883a 	mov	r4,r2
    9258:	180b883a 	mov	r5,r3
    925c:	2025883a 	mov	r18,r4
    9260:	2827883a 	mov	r19,r5
    9264:	00800074 	movhi	r2,1
    9268:	10b7c904 	addi	r2,r2,-8412
    926c:	11400217 	ldw	r5,8(r2)
    9270:	11800317 	ldw	r6,12(r2)
    9274:	d0a00617 	ldw	r2,-32744(gp)
    9278:	01000074 	movhi	r4,1
    927c:	2134d104 	addi	r4,r4,-11452
    9280:	20c00017 	ldw	r3,0(r4)
    9284:	2809883a 	mov	r4,r5
    9288:	300b883a 	mov	r5,r6
    928c:	100d883a 	mov	r6,r2
    9290:	180f883a 	mov	r7,r3
    9294:	0009c2c0 	call	9c2c <__muldf3>
    9298:	100f883a 	mov	r7,r2
    929c:	1811883a 	mov	r8,r3
    92a0:	380b883a 	mov	r5,r7
    92a4:	400d883a 	mov	r6,r8
    92a8:	01000074 	movhi	r4,1
    92ac:	2137bd04 	addi	r4,r4,-8460
    92b0:	20800217 	ldw	r2,8(r4)
    92b4:	20c00317 	ldw	r3,12(r4)
    92b8:	2809883a 	mov	r4,r5
    92bc:	300b883a 	mov	r5,r6
    92c0:	100d883a 	mov	r6,r2
    92c4:	180f883a 	mov	r7,r3
    92c8:	0009c2c0 	call	9c2c <__muldf3>
    92cc:	1009883a 	mov	r4,r2
    92d0:	180b883a 	mov	r5,r3
    92d4:	2005883a 	mov	r2,r4
    92d8:	2807883a 	mov	r3,r5
    92dc:	9009883a 	mov	r4,r18
    92e0:	980b883a 	mov	r5,r19
    92e4:	100d883a 	mov	r6,r2
    92e8:	180f883a 	mov	r7,r3
    92ec:	0009b780 	call	9b78 <__adddf3>
    92f0:	1009883a 	mov	r4,r2
    92f4:	180b883a 	mov	r5,r3
    92f8:	2005883a 	mov	r2,r4
    92fc:	2807883a 	mov	r3,r5
    9300:	8009883a 	mov	r4,r16
    9304:	880b883a 	mov	r5,r17
    9308:	100d883a 	mov	r6,r2
    930c:	180f883a 	mov	r7,r3
    9310:	0009c2c0 	call	9c2c <__muldf3>
    9314:	1009883a 	mov	r4,r2
    9318:	180b883a 	mov	r5,r3
    931c:	2005883a 	mov	r2,r4
    9320:	2807883a 	mov	r3,r5
    9324:	01000074 	movhi	r4,1
    9328:	2137bd04 	addi	r4,r4,-8460
    932c:	20800015 	stw	r2,0(r4)
    9330:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	xx_R[2] = xx_s[2] + (xx_step_size * xx_R[0]) / xx_P[4];
    9334:	00800074 	movhi	r2,1
    9338:	10b7ef04 	addi	r2,r2,-8260
    933c:	14000417 	ldw	r16,16(r2)
    9340:	14400517 	ldw	r17,20(r2)
    9344:	00800074 	movhi	r2,1
    9348:	10b7bd04 	addi	r2,r2,-8460
    934c:	11400017 	ldw	r5,0(r2)
    9350:	11800117 	ldw	r6,4(r2)
    9354:	d0a00617 	ldw	r2,-32744(gp)
    9358:	01000074 	movhi	r4,1
    935c:	2134d104 	addi	r4,r4,-11452
    9360:	20c00017 	ldw	r3,0(r4)
    9364:	2809883a 	mov	r4,r5
    9368:	300b883a 	mov	r5,r6
    936c:	100d883a 	mov	r6,r2
    9370:	180f883a 	mov	r7,r3
    9374:	0009c2c0 	call	9c2c <__muldf3>
    9378:	100f883a 	mov	r7,r2
    937c:	1811883a 	mov	r8,r3
    9380:	380b883a 	mov	r5,r7
    9384:	400d883a 	mov	r6,r8
    9388:	01000074 	movhi	r4,1
    938c:	2137c904 	addi	r4,r4,-8412
    9390:	20800817 	ldw	r2,32(r4)
    9394:	20c00917 	ldw	r3,36(r4)
    9398:	2809883a 	mov	r4,r5
    939c:	300b883a 	mov	r5,r6
    93a0:	100d883a 	mov	r6,r2
    93a4:	180f883a 	mov	r7,r3
    93a8:	0009f100 	call	9f10 <__divdf3>
    93ac:	1009883a 	mov	r4,r2
    93b0:	180b883a 	mov	r5,r3
    93b4:	2005883a 	mov	r2,r4
    93b8:	2807883a 	mov	r3,r5
    93bc:	8009883a 	mov	r4,r16
    93c0:	880b883a 	mov	r5,r17
    93c4:	100d883a 	mov	r6,r2
    93c8:	180f883a 	mov	r7,r3
    93cc:	0009b780 	call	9b78 <__adddf3>
    93d0:	1009883a 	mov	r4,r2
    93d4:	180b883a 	mov	r5,r3
    93d8:	2005883a 	mov	r2,r4
    93dc:	2807883a 	mov	r3,r5
    93e0:	01000074 	movhi	r4,1
    93e4:	2137bd04 	addi	r4,r4,-8460
    93e8:	20800415 	stw	r2,16(r4)
    93ec:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	xx_V[2] = xx_R[2] + xx_R[0];
    93f0:	00800074 	movhi	r2,1
    93f4:	10b7bd04 	addi	r2,r2,-8460
    93f8:	11400417 	ldw	r5,16(r2)
    93fc:	11800517 	ldw	r6,20(r2)
    9400:	01000074 	movhi	r4,1
    9404:	2137bd04 	addi	r4,r4,-8460
    9408:	20800017 	ldw	r2,0(r4)
    940c:	20c00117 	ldw	r3,4(r4)
    9410:	2809883a 	mov	r4,r5
    9414:	300b883a 	mov	r5,r6
    9418:	100d883a 	mov	r6,r2
    941c:	180f883a 	mov	r7,r3
    9420:	0009b780 	call	9b78 <__adddf3>
    9424:	1009883a 	mov	r4,r2
    9428:	180b883a 	mov	r5,r3
    942c:	2005883a 	mov	r2,r4
    9430:	2807883a 	mov	r3,r5
    9434:	01000074 	movhi	r4,1
    9438:	2137d704 	addi	r4,r4,-8356
    943c:	20800415 	stw	r2,16(r4)
    9440:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	xx_V[4] = xx_V[1] + xx_V[2];
    9444:	00800074 	movhi	r2,1
    9448:	10b7d704 	addi	r2,r2,-8356
    944c:	11400217 	ldw	r5,8(r2)
    9450:	11800317 	ldw	r6,12(r2)
    9454:	01000074 	movhi	r4,1
    9458:	2137d704 	addi	r4,r4,-8356
    945c:	20800417 	ldw	r2,16(r4)
    9460:	20c00517 	ldw	r3,20(r4)
    9464:	2809883a 	mov	r4,r5
    9468:	300b883a 	mov	r5,r6
    946c:	100d883a 	mov	r6,r2
    9470:	180f883a 	mov	r7,r3
    9474:	0009b780 	call	9b78 <__adddf3>
    9478:	1009883a 	mov	r4,r2
    947c:	180b883a 	mov	r5,r3
    9480:	2005883a 	mov	r2,r4
    9484:	2807883a 	mov	r3,r5
    9488:	01000074 	movhi	r4,1
    948c:	2137d704 	addi	r4,r4,-8356
    9490:	20800815 	stw	r2,32(r4)
    9494:	20c00915 	stw	r3,36(r4)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	xx_V[7] = ((xx_V[4] < xx_P[5]) ? 
    9498:	00800074 	movhi	r2,1
    949c:	10b7d704 	addi	r2,r2,-8356
    94a0:	11400817 	ldw	r5,32(r2)
    94a4:	11800917 	ldw	r6,36(r2)
    94a8:	01000074 	movhi	r4,1
    94ac:	2137c904 	addi	r4,r4,-8412
    94b0:	20800a17 	ldw	r2,40(r4)
    94b4:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		xx_P[5]
	:
    94b8:	2809883a 	mov	r4,r5
    94bc:	300b883a 	mov	r5,r6
    94c0:	100d883a 	mov	r6,r2
    94c4:	180f883a 	mov	r7,r3
    94c8:	000a18c0 	call	a18c <__ltdf2>
    94cc:	1000050e 	bge	r2,zero,94e4 <XXCalculateDynamic+0x5b4>
    94d0:	01000074 	movhi	r4,1
    94d4:	2137c904 	addi	r4,r4,-8412
    94d8:	20800a17 	ldw	r2,40(r4)
    94dc:	20c00b17 	ldw	r3,44(r4)
    94e0:	00001906 	br	9548 <XXCalculateDynamic+0x618>
		/* (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) */
		((xx_V[4] > xx_P[6]) ? 
    94e4:	00800074 	movhi	r2,1
    94e8:	10b7d704 	addi	r2,r2,-8356
    94ec:	11400817 	ldw	r5,32(r2)
    94f0:	11800917 	ldw	r6,36(r2)
    94f4:	01000074 	movhi	r4,1
    94f8:	2137c904 	addi	r4,r4,-8412
    94fc:	20800c17 	ldw	r2,48(r4)
    9500:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			xx_P[6]
		:
    9504:	2809883a 	mov	r4,r5
    9508:	300b883a 	mov	r5,r6
    950c:	100d883a 	mov	r6,r2
    9510:	180f883a 	mov	r7,r3
    9514:	000a0c40 	call	a0c4 <__gtdf2>
    9518:	0080050e 	bge	zero,r2,9530 <XXCalculateDynamic+0x600>
    951c:	00800074 	movhi	r2,1
    9520:	10b7c904 	addi	r2,r2,-8412
    9524:	11000c17 	ldw	r4,48(r2)
    9528:	11400d17 	ldw	r5,52(r2)
    952c:	00000406 	br	9540 <XXCalculateDynamic+0x610>
    9530:	00800074 	movhi	r2,1
    9534:	10b7d704 	addi	r2,r2,-8356
    9538:	11000817 	ldw	r4,32(r2)
    953c:	11400917 	ldw	r5,36(r2)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	xx_V[7] = ((xx_V[4] < xx_P[5]) ? 
		/* SignalLimiter2\minimum */
		xx_P[5]
	:
    9540:	2005883a 	mov	r2,r4
    9544:	2807883a 	mov	r3,r5

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	xx_V[4] = xx_V[1] + xx_V[2];

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	xx_V[7] = ((xx_V[4] < xx_P[5]) ? 
    9548:	01000074 	movhi	r4,1
    954c:	2137d704 	addi	r4,r4,-8356
    9550:	20800e15 	stw	r2,56(r4)
    9554:	20c00f15 	stw	r3,60(r4)
		)
	);


	/* increment the step counter */
	xx_steps++;
    9558:	d0a0ea17 	ldw	r2,-31832(gp)
    955c:	10800044 	addi	r2,r2,1
    9560:	d0a0ea15 	stw	r2,-31832(gp)
}
    9564:	e037883a 	mov	sp,fp
    9568:	dfc00717 	ldw	ra,28(sp)
    956c:	df000617 	ldw	fp,24(sp)
    9570:	dd400517 	ldw	r21,20(sp)
    9574:	dd000417 	ldw	r20,16(sp)
    9578:	dcc00317 	ldw	r19,12(sp)
    957c:	dc800217 	ldw	r18,8(sp)
    9580:	dc400117 	ldw	r17,4(sp)
    9584:	dc000017 	ldw	r16,0(sp)
    9588:	dec00804 	addi	sp,sp,32
    958c:	f800283a 	ret

00009590 <XXCalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void XXCalculateOutput (void)
{
    9590:	deffff04 	addi	sp,sp,-4
    9594:	df000015 	stw	fp,0(sp)
    9598:	d839883a 	mov	fp,sp
	/* out = SignalLimiter2\output; */
	xx_V[11] = xx_V[7];
    959c:	01000074 	movhi	r4,1
    95a0:	2137d704 	addi	r4,r4,-8356
    95a4:	20800e17 	ldw	r2,56(r4)
    95a8:	20c00f17 	ldw	r3,60(r4)
    95ac:	01000074 	movhi	r4,1
    95b0:	2137d704 	addi	r4,r4,-8356
    95b4:	20801615 	stw	r2,88(r4)
    95b8:	20c01715 	stw	r3,92(r4)

}
    95bc:	e037883a 	mov	sp,fp
    95c0:	df000017 	ldw	fp,0(sp)
    95c4:	dec00104 	addi	sp,sp,4
    95c8:	f800283a 	ret

000095cc <XXCalculateFinal>:
/* This function calculates the final equations of the model.
 * These equations are calculated after all the calculations
 * are performed
 */
void XXCalculateFinal (void)
{
    95cc:	deffff04 	addi	sp,sp,-4
    95d0:	df000015 	stw	fp,0(sp)
    95d4:	d839883a 	mov	fp,sp

}
    95d8:	e037883a 	mov	sp,fp
    95dc:	df000017 	ldw	fp,0(sp)
    95e0:	dec00104 	addi	sp,sp,4
    95e4:	f800283a 	ret

000095e8 <XXModelTerminate>:

/* this method is called after all calculations are performed */
void XXModelTerminate(void)
{
    95e8:	deffff04 	addi	sp,sp,-4
    95ec:	df000015 	stw	fp,0(sp)
    95f0:	d839883a 	mov	fp,sp
}
    95f4:	e037883a 	mov	sp,fp
    95f8:	df000017 	ldw	fp,0(sp)
    95fc:	dec00104 	addi	sp,sp,4
    9600:	f800283a 	ret

00009604 <XXCopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void XXCopyInputsToVariables (XXDouble *u)
{
    9604:	defffe04 	addi	sp,sp,-8
    9608:	df000115 	stw	fp,4(sp)
    960c:	df000104 	addi	fp,sp,4
    9610:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	xx_V[8] = u[0];		/* corr */
    9614:	e13fff17 	ldw	r4,-4(fp)
    9618:	20800017 	ldw	r2,0(r4)
    961c:	20c00117 	ldw	r3,4(r4)
    9620:	01000074 	movhi	r4,1
    9624:	2137d704 	addi	r4,r4,-8356
    9628:	20801015 	stw	r2,64(r4)
    962c:	20c01115 	stw	r3,68(r4)
	xx_V[9] = u[1];		/* in */
    9630:	e13fff17 	ldw	r4,-4(fp)
    9634:	20800217 	ldw	r2,8(r4)
    9638:	20c00317 	ldw	r3,12(r4)
    963c:	01000074 	movhi	r4,1
    9640:	2137d704 	addi	r4,r4,-8356
    9644:	20801215 	stw	r2,72(r4)
    9648:	20c01315 	stw	r3,76(r4)
	xx_V[10] = u[2];		/* position */
    964c:	e13fff17 	ldw	r4,-4(fp)
    9650:	20800417 	ldw	r2,16(r4)
    9654:	20c00517 	ldw	r3,20(r4)
    9658:	01000074 	movhi	r4,1
    965c:	2137d704 	addi	r4,r4,-8356
    9660:	20801415 	stw	r2,80(r4)
    9664:	20c01515 	stw	r3,84(r4)

}
    9668:	e037883a 	mov	sp,fp
    966c:	df000017 	ldw	fp,0(sp)
    9670:	dec00104 	addi	sp,sp,4
    9674:	f800283a 	ret

00009678 <XXCopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void XXCopyVariablesToOutputs (XXDouble *y)
{
    9678:	defffe04 	addi	sp,sp,-8
    967c:	df000115 	stw	fp,4(sp)
    9680:	df000104 	addi	fp,sp,4
    9684:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	xx_V[11];		/* out */
    9688:	01000074 	movhi	r4,1
    968c:	2137d704 	addi	r4,r4,-8356
    9690:	20801617 	ldw	r2,88(r4)
    9694:	20c01717 	ldw	r3,92(r4)
    9698:	e13fff17 	ldw	r4,-4(fp)
    969c:	20800015 	stw	r2,0(r4)
    96a0:	20c00115 	stw	r3,4(r4)

}
    96a4:	e037883a 	mov	sp,fp
    96a8:	df000017 	ldw	fp,0(sp)
    96ac:	dec00104 	addi	sp,sp,4
    96b0:	f800283a 	ret

000096b4 <XXInitializeSubmodel>:

/* The initialization function for submodel */
void XXInitializeSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    96b4:	defffa04 	addi	sp,sp,-24
    96b8:	dfc00515 	stw	ra,20(sp)
    96bc:	df000415 	stw	fp,16(sp)
    96c0:	df000404 	addi	fp,sp,16
    96c4:	e13ffc15 	stw	r4,-16(fp)
    96c8:	e17ffd15 	stw	r5,-12(fp)
    96cc:	e1bffe15 	stw	r6,-8(fp)
    96d0:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	xx_initialize = XXTRUE;
    96d4:	00800074 	movhi	r2,1
    96d8:	10b4d204 	addi	r2,r2,-11448
    96dc:	00c00044 	movi	r3,1
    96e0:	10c00005 	stb	r3,0(r2)
	xx_steps = 0;
    96e4:	00800074 	movhi	r2,1
    96e8:	10b5b404 	addi	r2,r2,-10544
    96ec:	10000015 	stw	zero,0(r2)
	XXModelInitialize ();
    96f0:	0008ea80 	call	8ea8 <XXModelInitialize>
	XXDiscreteInitialize ();
    96f4:	0008b9c0 	call	8b9c <XXDiscreteInitialize>

	/* Copy the inputs */
	xx_time = t;
    96f8:	00800074 	movhi	r2,1
    96fc:	10b5b204 	addi	r2,r2,-10552
    9700:	e0fffe17 	ldw	r3,-8(fp)
    9704:	10c00015 	stw	r3,0(r2)
    9708:	e0ffff17 	ldw	r3,-4(fp)
    970c:	10c00115 	stw	r3,4(r2)
	XXCopyInputsToVariables (u);
    9710:	e13ffc17 	ldw	r4,-16(fp)
    9714:	00096040 	call	9604 <XXCopyInputsToVariables>

	/* Calculate the model for the first time */
	XXCalculateInitial ();
    9718:	0008edc0 	call	8edc <XXCalculateInitial>
	XXCalculateStatic ();
    971c:	0008ef80 	call	8ef8 <XXCalculateStatic>
	XXCalculateInput ();
    9720:	0008f140 	call	8f14 <XXCalculateInput>
	XXCalculateDynamic ();
    9724:	0008f300 	call	8f30 <XXCalculateDynamic>
	XXCalculateOutput ();
    9728:	00095900 	call	9590 <XXCalculateOutput>

	/* Set the outputs */
	XXCopyVariablesToOutputs (y);
    972c:	e13ffd17 	ldw	r4,-12(fp)
    9730:	00096780 	call	9678 <XXCopyVariablesToOutputs>

	/* End of initialization phase */
	xx_initialize = XXFALSE;
    9734:	00800074 	movhi	r2,1
    9738:	10b4d204 	addi	r2,r2,-11448
    973c:	10000005 	stb	zero,0(r2)
}
    9740:	e037883a 	mov	sp,fp
    9744:	dfc00117 	ldw	ra,4(sp)
    9748:	df000017 	ldw	fp,0(sp)
    974c:	dec00204 	addi	sp,sp,8
    9750:	f800283a 	ret

00009754 <XXCalculateSubmodel>:

/* The function that calculates the submodel */
void XXCalculateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    9754:	defffa04 	addi	sp,sp,-24
    9758:	dfc00515 	stw	ra,20(sp)
    975c:	df000415 	stw	fp,16(sp)
    9760:	df000404 	addi	fp,sp,16
    9764:	e13ffc15 	stw	r4,-16(fp)
    9768:	e17ffd15 	stw	r5,-12(fp)
    976c:	e1bffe15 	stw	r6,-8(fp)
    9770:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	xx_time = t;
    9774:	00800074 	movhi	r2,1
    9778:	10b5b204 	addi	r2,r2,-10552
    977c:	e0fffe17 	ldw	r3,-8(fp)
    9780:	10c00015 	stw	r3,0(r2)
    9784:	e0ffff17 	ldw	r3,-4(fp)
    9788:	10c00115 	stw	r3,4(r2)
	XXCopyInputsToVariables (u);
    978c:	e13ffc17 	ldw	r4,-16(fp)
    9790:	00096040 	call	9604 <XXCopyInputsToVariables>

	/* Calculate the model */
	XXCalculateInput ();
    9794:	0008f140 	call	8f14 <XXCalculateInput>
	XXDiscreteStep ();
    9798:	0008be40 	call	8be4 <XXDiscreteStep>
	XXCalculateOutput ();
    979c:	00095900 	call	9590 <XXCalculateOutput>

	/* Copy the outputs */
	XXCopyVariablesToOutputs (y);
    97a0:	e13ffd17 	ldw	r4,-12(fp)
    97a4:	00096780 	call	9678 <XXCopyVariablesToOutputs>
}
    97a8:	e037883a 	mov	sp,fp
    97ac:	dfc00117 	ldw	ra,4(sp)
    97b0:	df000017 	ldw	fp,0(sp)
    97b4:	dec00204 	addi	sp,sp,8
    97b8:	f800283a 	ret

000097bc <XXTerminateSubmodel>:

/* The termination function for submodel */
void XXTerminateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    97bc:	defffa04 	addi	sp,sp,-24
    97c0:	dfc00515 	stw	ra,20(sp)
    97c4:	df000415 	stw	fp,16(sp)
    97c8:	df000404 	addi	fp,sp,16
    97cc:	e13ffc15 	stw	r4,-16(fp)
    97d0:	e17ffd15 	stw	r5,-12(fp)
    97d4:	e1bffe15 	stw	r6,-8(fp)
    97d8:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	xx_time = t;
    97dc:	00800074 	movhi	r2,1
    97e0:	10b5b204 	addi	r2,r2,-10552
    97e4:	e0fffe17 	ldw	r3,-8(fp)
    97e8:	10c00015 	stw	r3,0(r2)
    97ec:	e0ffff17 	ldw	r3,-4(fp)
    97f0:	10c00115 	stw	r3,4(r2)
	XXCopyInputsToVariables (u);
    97f4:	e13ffc17 	ldw	r4,-16(fp)
    97f8:	00096040 	call	9604 <XXCopyInputsToVariables>

	/* Calculate the final model equations */
	XXCalculateFinal ();
    97fc:	00095cc0 	call	95cc <XXCalculateFinal>

	/* Set the outputs */
	XXCopyVariablesToOutputs (y);
    9800:	e13ffd17 	ldw	r4,-12(fp)
    9804:	00096780 	call	9678 <XXCopyVariablesToOutputs>

	/* and terminate the model itself (releasing memory) */
	XXModelTerminate ();
    9808:	00095e80 	call	95e8 <XXModelTerminate>
	XXDiscreteTerminate ();
    980c:	0008bc80 	call	8bc8 <XXDiscreteTerminate>
}
    9810:	e037883a 	mov	sp,fp
    9814:	dfc00117 	ldw	ra,4(sp)
    9818:	df000017 	ldw	fp,0(sp)
    981c:	dec00204 	addi	sp,sp,8
    9820:	f800283a 	ret

00009824 <_fpadd_parts>:
    9824:	2005883a 	mov	r2,r4
    9828:	21000017 	ldw	r4,0(r4)
    982c:	01c00044 	movi	r7,1
    9830:	3900622e 	bgeu	r7,r4,99bc <_fpadd_parts+0x198>
    9834:	28c00017 	ldw	r3,0(r5)
    9838:	38c05f2e 	bgeu	r7,r3,99b8 <_fpadd_parts+0x194>
    983c:	01c00104 	movi	r7,4
    9840:	21c0c626 	beq	r4,r7,9b5c <_fpadd_parts+0x338>
    9844:	19c05c26 	beq	r3,r7,99b8 <_fpadd_parts+0x194>
    9848:	01c00084 	movi	r7,2
    984c:	19c06b26 	beq	r3,r7,99fc <_fpadd_parts+0x1d8>
    9850:	21c05926 	beq	r4,r7,99b8 <_fpadd_parts+0x194>
    9854:	11c00217 	ldw	r7,8(r2)
    9858:	2ac00217 	ldw	r11,8(r5)
    985c:	13000317 	ldw	r12,12(r2)
    9860:	13400417 	ldw	r13,16(r2)
    9864:	3ac9c83a 	sub	r4,r7,r11
    9868:	2a000317 	ldw	r8,12(r5)
    986c:	2a400417 	ldw	r9,16(r5)
    9870:	2015883a 	mov	r10,r4
    9874:	20007516 	blt	r4,zero,9a4c <_fpadd_parts+0x228>
    9878:	00c00fc4 	movi	r3,63
    987c:	1a805016 	blt	r3,r10,99c0 <_fpadd_parts+0x19c>
    9880:	0100870e 	bge	zero,r4,9aa0 <_fpadd_parts+0x27c>
    9884:	50fff804 	addi	r3,r10,-32
    9888:	18009916 	blt	r3,zero,9af0 <_fpadd_parts+0x2cc>
    988c:	48d6d83a 	srl	r11,r9,r3
    9890:	001d883a 	mov	r14,zero
    9894:	18009e16 	blt	r3,zero,9b10 <_fpadd_parts+0x2ec>
    9898:	01000044 	movi	r4,1
    989c:	20c6983a 	sll	r3,r4,r3
    98a0:	0015883a 	mov	r10,zero
    98a4:	513fffc4 	addi	r4,r10,-1
    98a8:	2295403a 	cmpgeu	r10,r4,r10
    98ac:	1a87c83a 	sub	r3,r3,r10
    98b0:	1a52703a 	and	r9,r3,r9
    98b4:	2210703a 	and	r8,r4,r8
    98b8:	4250b03a 	or	r8,r8,r9
    98bc:	4010c03a 	cmpne	r8,r8,zero
    98c0:	42d0b03a 	or	r8,r8,r11
    98c4:	7013883a 	mov	r9,r14
    98c8:	11000117 	ldw	r4,4(r2)
    98cc:	28800117 	ldw	r2,4(r5)
    98d0:	20804126 	beq	r4,r2,99d8 <_fpadd_parts+0x1b4>
    98d4:	20006326 	beq	r4,zero,9a64 <_fpadd_parts+0x240>
    98d8:	4305c83a 	sub	r2,r8,r12
    98dc:	4091803a 	cmpltu	r8,r8,r2
    98e0:	4b47c83a 	sub	r3,r9,r13
    98e4:	1a07c83a 	sub	r3,r3,r8
    98e8:	18006316 	blt	r3,zero,9a78 <_fpadd_parts+0x254>
    98ec:	30000115 	stw	zero,4(r6)
    98f0:	31c00215 	stw	r7,8(r6)
    98f4:	30800315 	stw	r2,12(r6)
    98f8:	30c00415 	stw	r3,16(r6)
    98fc:	11ffffc4 	addi	r7,r2,-1
    9900:	388b403a 	cmpgeu	r5,r7,r2
    9904:	194bc83a 	sub	r5,r3,r5
    9908:	01040034 	movhi	r4,4096
    990c:	213fffc4 	addi	r4,r4,-1
    9910:	21401736 	bltu	r4,r5,9970 <_fpadd_parts+0x14c>
    9914:	29008226 	beq	r5,r4,9b20 <_fpadd_parts+0x2fc>
    9918:	31400217 	ldw	r5,8(r6)
    991c:	02840034 	movhi	r10,4096
    9920:	52bfffc4 	addi	r10,r10,-1
    9924:	033fff84 	movi	r12,-2
    9928:	297fffc4 	addi	r5,r5,-1
    992c:	00000106 	br	9934 <_fpadd_parts+0x110>
    9930:	3a804a26 	beq	r7,r10,9a5c <_fpadd_parts+0x238>
    9934:	1089883a 	add	r4,r2,r2
    9938:	2091803a 	cmpltu	r8,r4,r2
    993c:	18c7883a 	add	r3,r3,r3
    9940:	227fffc4 	addi	r9,r4,-1
    9944:	40d1883a 	add	r8,r8,r3
    9948:	490f403a 	cmpgeu	r7,r9,r4
    994c:	41cfc83a 	sub	r7,r8,r7
    9950:	2817883a 	mov	r11,r5
    9954:	2005883a 	mov	r2,r4
    9958:	4007883a 	mov	r3,r8
    995c:	297fffc4 	addi	r5,r5,-1
    9960:	51fff32e 	bgeu	r10,r7,9930 <_fpadd_parts+0x10c>
    9964:	31000315 	stw	r4,12(r6)
    9968:	32000415 	stw	r8,16(r6)
    996c:	32c00215 	stw	r11,8(r6)
    9970:	010000c4 	movi	r4,3
    9974:	31000015 	stw	r4,0(r6)
    9978:	01080034 	movhi	r4,8192
    997c:	213fffc4 	addi	r4,r4,-1
    9980:	20c00b2e 	bgeu	r4,r3,99b0 <_fpadd_parts+0x18c>
    9984:	180e97fa 	slli	r7,r3,31
    9988:	1008d07a 	srli	r4,r2,1
    998c:	31400217 	ldw	r5,8(r6)
    9990:	1806d07a 	srli	r3,r3,1
    9994:	1080004c 	andi	r2,r2,1
    9998:	3908b03a 	or	r4,r7,r4
    999c:	1108b03a 	or	r4,r2,r4
    99a0:	29400044 	addi	r5,r5,1
    99a4:	31000315 	stw	r4,12(r6)
    99a8:	30c00415 	stw	r3,16(r6)
    99ac:	31400215 	stw	r5,8(r6)
    99b0:	3005883a 	mov	r2,r6
    99b4:	f800283a 	ret
    99b8:	2805883a 	mov	r2,r5
    99bc:	f800283a 	ret
    99c0:	59c01e0e 	bge	r11,r7,9a3c <_fpadd_parts+0x218>
    99c4:	11000117 	ldw	r4,4(r2)
    99c8:	28800117 	ldw	r2,4(r5)
    99cc:	0011883a 	mov	r8,zero
    99d0:	0013883a 	mov	r9,zero
    99d4:	20bfbf1e 	bne	r4,r2,98d4 <_fpadd_parts+0xb0>
    99d8:	4305883a 	add	r2,r8,r12
    99dc:	1207803a 	cmpltu	r3,r2,r8
    99e0:	4b53883a 	add	r9,r9,r13
    99e4:	1a47883a 	add	r3,r3,r9
    99e8:	31000115 	stw	r4,4(r6)
    99ec:	31c00215 	stw	r7,8(r6)
    99f0:	30800315 	stw	r2,12(r6)
    99f4:	30c00415 	stw	r3,16(r6)
    99f8:	003fdd06 	br	9970 <_fpadd_parts+0x14c>
    99fc:	20ffef1e 	bne	r4,r3,99bc <_fpadd_parts+0x198>
    9a00:	31000015 	stw	r4,0(r6)
    9a04:	10c00117 	ldw	r3,4(r2)
    9a08:	30c00115 	stw	r3,4(r6)
    9a0c:	10c00217 	ldw	r3,8(r2)
    9a10:	11000117 	ldw	r4,4(r2)
    9a14:	29400117 	ldw	r5,4(r5)
    9a18:	30c00215 	stw	r3,8(r6)
    9a1c:	10c00317 	ldw	r3,12(r2)
    9a20:	2908703a 	and	r4,r5,r4
    9a24:	30c00315 	stw	r3,12(r6)
    9a28:	10c00417 	ldw	r3,16(r2)
    9a2c:	31000115 	stw	r4,4(r6)
    9a30:	3005883a 	mov	r2,r6
    9a34:	30c00415 	stw	r3,16(r6)
    9a38:	f800283a 	ret
    9a3c:	580f883a 	mov	r7,r11
    9a40:	0019883a 	mov	r12,zero
    9a44:	001b883a 	mov	r13,zero
    9a48:	003f9f06 	br	98c8 <_fpadd_parts+0xa4>
    9a4c:	0115c83a 	sub	r10,zero,r4
    9a50:	00c00fc4 	movi	r3,63
    9a54:	1abfda16 	blt	r3,r10,99c0 <_fpadd_parts+0x19c>
    9a58:	003f8906 	br	9880 <_fpadd_parts+0x5c>
    9a5c:	627fb52e 	bgeu	r12,r9,9934 <_fpadd_parts+0x110>
    9a60:	003fc006 	br	9964 <_fpadd_parts+0x140>
    9a64:	6205c83a 	sub	r2,r12,r8
    9a68:	6099803a 	cmpltu	r12,r12,r2
    9a6c:	6a47c83a 	sub	r3,r13,r9
    9a70:	1b07c83a 	sub	r3,r3,r12
    9a74:	183f9d0e 	bge	r3,zero,98ec <_fpadd_parts+0xc8>
    9a78:	0085c83a 	sub	r2,zero,r2
    9a7c:	1008c03a 	cmpne	r4,r2,zero
    9a80:	00c7c83a 	sub	r3,zero,r3
    9a84:	1907c83a 	sub	r3,r3,r4
    9a88:	01000044 	movi	r4,1
    9a8c:	31000115 	stw	r4,4(r6)
    9a90:	31c00215 	stw	r7,8(r6)
    9a94:	30800315 	stw	r2,12(r6)
    9a98:	30c00415 	stw	r3,16(r6)
    9a9c:	003f9706 	br	98fc <_fpadd_parts+0xd8>
    9aa0:	203f8926 	beq	r4,zero,98c8 <_fpadd_parts+0xa4>
    9aa4:	50fff804 	addi	r3,r10,-32
    9aa8:	3a8f883a 	add	r7,r7,r10
    9aac:	18002316 	blt	r3,zero,9b3c <_fpadd_parts+0x318>
    9ab0:	68d6d83a 	srl	r11,r13,r3
    9ab4:	001d883a 	mov	r14,zero
    9ab8:	18001c16 	blt	r3,zero,9b2c <_fpadd_parts+0x308>
    9abc:	01000044 	movi	r4,1
    9ac0:	20c6983a 	sll	r3,r4,r3
    9ac4:	0015883a 	mov	r10,zero
    9ac8:	513fffc4 	addi	r4,r10,-1
    9acc:	2295403a 	cmpgeu	r10,r4,r10
    9ad0:	1a87c83a 	sub	r3,r3,r10
    9ad4:	1b5a703a 	and	r13,r3,r13
    9ad8:	2318703a 	and	r12,r4,r12
    9adc:	6358b03a 	or	r12,r12,r13
    9ae0:	6018c03a 	cmpne	r12,r12,zero
    9ae4:	62d8b03a 	or	r12,r12,r11
    9ae8:	701b883a 	mov	r13,r14
    9aec:	003f7606 	br	98c8 <_fpadd_parts+0xa4>
    9af0:	4808907a 	slli	r4,r9,1
    9af4:	02c007c4 	movi	r11,31
    9af8:	5a97c83a 	sub	r11,r11,r10
    9afc:	22c8983a 	sll	r4,r4,r11
    9b00:	4296d83a 	srl	r11,r8,r10
    9b04:	4a9cd83a 	srl	r14,r9,r10
    9b08:	22d6b03a 	or	r11,r4,r11
    9b0c:	003f6106 	br	9894 <_fpadd_parts+0x70>
    9b10:	00c00044 	movi	r3,1
    9b14:	1a94983a 	sll	r10,r3,r10
    9b18:	0007883a 	mov	r3,zero
    9b1c:	003f6106 	br	98a4 <_fpadd_parts+0x80>
    9b20:	013fff84 	movi	r4,-2
    9b24:	21ff7c2e 	bgeu	r4,r7,9918 <_fpadd_parts+0xf4>
    9b28:	003f9106 	br	9970 <_fpadd_parts+0x14c>
    9b2c:	00c00044 	movi	r3,1
    9b30:	1a94983a 	sll	r10,r3,r10
    9b34:	0007883a 	mov	r3,zero
    9b38:	003fe306 	br	9ac8 <_fpadd_parts+0x2a4>
    9b3c:	6816907a 	slli	r11,r13,1
    9b40:	010007c4 	movi	r4,31
    9b44:	2289c83a 	sub	r4,r4,r10
    9b48:	5908983a 	sll	r4,r11,r4
    9b4c:	6296d83a 	srl	r11,r12,r10
    9b50:	6a9cd83a 	srl	r14,r13,r10
    9b54:	22d6b03a 	or	r11,r4,r11
    9b58:	003fd706 	br	9ab8 <_fpadd_parts+0x294>
    9b5c:	193f971e 	bne	r3,r4,99bc <_fpadd_parts+0x198>
    9b60:	11000117 	ldw	r4,4(r2)
    9b64:	28c00117 	ldw	r3,4(r5)
    9b68:	20ff9426 	beq	r4,r3,99bc <_fpadd_parts+0x198>
    9b6c:	00800074 	movhi	r2,1
    9b70:	10b3be04 	addi	r2,r2,-12552
    9b74:	f800283a 	ret

00009b78 <__adddf3>:
    9b78:	deffec04 	addi	sp,sp,-80
    9b7c:	d9001115 	stw	r4,68(sp)
    9b80:	d9401215 	stw	r5,72(sp)
    9b84:	d9001104 	addi	r4,sp,68
    9b88:	d9400a04 	addi	r5,sp,40
    9b8c:	dfc01315 	stw	ra,76(sp)
    9b90:	d9c01015 	stw	r7,64(sp)
    9b94:	d9800f15 	stw	r6,60(sp)
    9b98:	000a8a00 	call	a8a0 <__unpack_d>
    9b9c:	d9000f04 	addi	r4,sp,60
    9ba0:	d9400504 	addi	r5,sp,20
    9ba4:	000a8a00 	call	a8a0 <__unpack_d>
    9ba8:	d9000a04 	addi	r4,sp,40
    9bac:	d9400504 	addi	r5,sp,20
    9bb0:	d80d883a 	mov	r6,sp
    9bb4:	00098240 	call	9824 <_fpadd_parts>
    9bb8:	1009883a 	mov	r4,r2
    9bbc:	000a67c0 	call	a67c <__pack_d>
    9bc0:	dfc01317 	ldw	ra,76(sp)
    9bc4:	dec01404 	addi	sp,sp,80
    9bc8:	f800283a 	ret

00009bcc <__subdf3>:
    9bcc:	deffec04 	addi	sp,sp,-80
    9bd0:	d9001115 	stw	r4,68(sp)
    9bd4:	d9401215 	stw	r5,72(sp)
    9bd8:	d9001104 	addi	r4,sp,68
    9bdc:	d9400a04 	addi	r5,sp,40
    9be0:	dfc01315 	stw	ra,76(sp)
    9be4:	d9c01015 	stw	r7,64(sp)
    9be8:	d9800f15 	stw	r6,60(sp)
    9bec:	000a8a00 	call	a8a0 <__unpack_d>
    9bf0:	d9000f04 	addi	r4,sp,60
    9bf4:	d9400504 	addi	r5,sp,20
    9bf8:	000a8a00 	call	a8a0 <__unpack_d>
    9bfc:	d8800617 	ldw	r2,24(sp)
    9c00:	d9000a04 	addi	r4,sp,40
    9c04:	d9400504 	addi	r5,sp,20
    9c08:	d80d883a 	mov	r6,sp
    9c0c:	1080005c 	xori	r2,r2,1
    9c10:	d8800615 	stw	r2,24(sp)
    9c14:	00098240 	call	9824 <_fpadd_parts>
    9c18:	1009883a 	mov	r4,r2
    9c1c:	000a67c0 	call	a67c <__pack_d>
    9c20:	dfc01317 	ldw	ra,76(sp)
    9c24:	dec01404 	addi	sp,sp,80
    9c28:	f800283a 	ret

00009c2c <__muldf3>:
    9c2c:	deffe404 	addi	sp,sp,-112
    9c30:	d9001115 	stw	r4,68(sp)
    9c34:	d9401215 	stw	r5,72(sp)
    9c38:	d9001104 	addi	r4,sp,68
    9c3c:	d9400a04 	addi	r5,sp,40
    9c40:	dfc01b15 	stw	ra,108(sp)
    9c44:	d9800f15 	stw	r6,60(sp)
    9c48:	d9c01015 	stw	r7,64(sp)
    9c4c:	ddc01a15 	stw	r23,104(sp)
    9c50:	dd801915 	stw	r22,100(sp)
    9c54:	dd401815 	stw	r21,96(sp)
    9c58:	dd001715 	stw	r20,92(sp)
    9c5c:	dcc01615 	stw	r19,88(sp)
    9c60:	dc801515 	stw	r18,84(sp)
    9c64:	dc401415 	stw	r17,80(sp)
    9c68:	dc001315 	stw	r16,76(sp)
    9c6c:	000a8a00 	call	a8a0 <__unpack_d>
    9c70:	d9000f04 	addi	r4,sp,60
    9c74:	d9400504 	addi	r5,sp,20
    9c78:	000a8a00 	call	a8a0 <__unpack_d>
    9c7c:	d8c00a17 	ldw	r3,40(sp)
    9c80:	00800044 	movi	r2,1
    9c84:	10c01136 	bltu	r2,r3,9ccc <__muldf3+0xa0>
    9c88:	d8c00b17 	ldw	r3,44(sp)
    9c8c:	d8800617 	ldw	r2,24(sp)
    9c90:	d9000a04 	addi	r4,sp,40
    9c94:	1884c03a 	cmpne	r2,r3,r2
    9c98:	d8800b15 	stw	r2,44(sp)
    9c9c:	000a67c0 	call	a67c <__pack_d>
    9ca0:	dfc01b17 	ldw	ra,108(sp)
    9ca4:	ddc01a17 	ldw	r23,104(sp)
    9ca8:	dd801917 	ldw	r22,100(sp)
    9cac:	dd401817 	ldw	r21,96(sp)
    9cb0:	dd001717 	ldw	r20,92(sp)
    9cb4:	dcc01617 	ldw	r19,88(sp)
    9cb8:	dc801517 	ldw	r18,84(sp)
    9cbc:	dc401417 	ldw	r17,80(sp)
    9cc0:	dc001317 	ldw	r16,76(sp)
    9cc4:	dec01c04 	addi	sp,sp,112
    9cc8:	f800283a 	ret
    9ccc:	d9000517 	ldw	r4,20(sp)
    9cd0:	11000636 	bltu	r2,r4,9cec <__muldf3+0xc0>
    9cd4:	d8800617 	ldw	r2,24(sp)
    9cd8:	d8c00b17 	ldw	r3,44(sp)
    9cdc:	d9000504 	addi	r4,sp,20
    9ce0:	1884c03a 	cmpne	r2,r3,r2
    9ce4:	d8800615 	stw	r2,24(sp)
    9ce8:	003fec06 	br	9c9c <__muldf3+0x70>
    9cec:	00800104 	movi	r2,4
    9cf0:	1880051e 	bne	r3,r2,9d08 <__muldf3+0xdc>
    9cf4:	00800084 	movi	r2,2
    9cf8:	20bfe31e 	bne	r4,r2,9c88 <__muldf3+0x5c>
    9cfc:	01000074 	movhi	r4,1
    9d00:	2133be04 	addi	r4,r4,-12552
    9d04:	003fe506 	br	9c9c <__muldf3+0x70>
    9d08:	2080031e 	bne	r4,r2,9d18 <__muldf3+0xec>
    9d0c:	00800084 	movi	r2,2
    9d10:	18bffa26 	beq	r3,r2,9cfc <__muldf3+0xd0>
    9d14:	003fef06 	br	9cd4 <__muldf3+0xa8>
    9d18:	00800084 	movi	r2,2
    9d1c:	18bfda26 	beq	r3,r2,9c88 <__muldf3+0x5c>
    9d20:	20bfec26 	beq	r4,r2,9cd4 <__muldf3+0xa8>
    9d24:	dc000d17 	ldw	r16,52(sp)
    9d28:	dd000817 	ldw	r20,32(sp)
    9d2c:	dc800917 	ldw	r18,36(sp)
    9d30:	8009883a 	mov	r4,r16
    9d34:	000b883a 	mov	r5,zero
    9d38:	a00d883a 	mov	r6,r20
    9d3c:	000f883a 	mov	r7,zero
    9d40:	000a4c00 	call	a4c0 <__muldi3>
    9d44:	dc400e17 	ldw	r17,56(sp)
    9d48:	9009883a 	mov	r4,r18
    9d4c:	800d883a 	mov	r6,r16
    9d50:	000b883a 	mov	r5,zero
    9d54:	000f883a 	mov	r7,zero
    9d58:	102f883a 	mov	r23,r2
    9d5c:	1827883a 	mov	r19,r3
    9d60:	000a4c00 	call	a4c0 <__muldi3>
    9d64:	900d883a 	mov	r6,r18
    9d68:	8809883a 	mov	r4,r17
    9d6c:	000b883a 	mov	r5,zero
    9d70:	000f883a 	mov	r7,zero
    9d74:	102b883a 	mov	r21,r2
    9d78:	1821883a 	mov	r16,r3
    9d7c:	000a4c00 	call	a4c0 <__muldi3>
    9d80:	8809883a 	mov	r4,r17
    9d84:	000b883a 	mov	r5,zero
    9d88:	a00d883a 	mov	r6,r20
    9d8c:	000f883a 	mov	r7,zero
    9d90:	102d883a 	mov	r22,r2
    9d94:	1825883a 	mov	r18,r3
    9d98:	000a4c00 	call	a4c0 <__muldi3>
    9d9c:	154b883a 	add	r5,r2,r21
    9da0:	2889803a 	cmpltu	r4,r5,r2
    9da4:	1c07883a 	add	r3,r3,r16
    9da8:	20c9883a 	add	r4,r4,r3
    9dac:	24004b36 	bltu	r4,r16,9edc <__muldf3+0x2b0>
    9db0:	8100011e 	bne	r16,r4,9db8 <__muldf3+0x18c>
    9db4:	2d404936 	bltu	r5,r21,9edc <__muldf3+0x2b0>
    9db8:	0011883a 	mov	r8,zero
    9dbc:	0007883a 	mov	r3,zero
    9dc0:	2ccb883a 	add	r5,r5,r19
    9dc4:	b80d883a 	mov	r6,r23
    9dc8:	2cc0012e 	bgeu	r5,r19,9dd0 <__muldf3+0x1a4>
    9dcc:	02000044 	movi	r8,1
    9dd0:	258f883a 	add	r7,r4,r22
    9dd4:	3909803a 	cmpltu	r4,r7,r4
    9dd8:	da400c17 	ldw	r9,48(sp)
    9ddc:	2489883a 	add	r4,r4,r18
    9de0:	d8800717 	ldw	r2,28(sp)
    9de4:	20c9883a 	add	r4,r4,r3
    9de8:	da800b17 	ldw	r10,44(sp)
    9dec:	d8c00617 	ldw	r3,24(sp)
    9df0:	3a11883a 	add	r8,r7,r8
    9df4:	4885883a 	add	r2,r9,r2
    9df8:	50c6c03a 	cmpne	r3,r10,r3
    9dfc:	41cf803a 	cmpltu	r7,r8,r7
    9e00:	12400104 	addi	r9,r2,4
    9e04:	d8c00115 	stw	r3,4(sp)
    9e08:	3909883a 	add	r4,r7,r4
    9e0c:	da400215 	stw	r9,8(sp)
    9e10:	03480034 	movhi	r13,8192
    9e14:	6b7fffc4 	addi	r13,r13,-1
    9e18:	4007883a 	mov	r3,r8
    9e1c:	6900102e 	bgeu	r13,r4,9e60 <__muldf3+0x234>
    9e20:	10800144 	addi	r2,r2,5
    9e24:	180ed07a 	srli	r7,r3,1
    9e28:	18c0004c 	andi	r3,r3,1
    9e2c:	201097fa 	slli	r8,r4,31
    9e30:	281697fa 	slli	r11,r5,31
    9e34:	2008d07a 	srli	r4,r4,1
    9e38:	3014d07a 	srli	r10,r6,1
    9e3c:	2812d07a 	srli	r9,r5,1
    9e40:	1019883a 	mov	r12,r2
    9e44:	18000226 	beq	r3,zero,9e50 <__muldf3+0x224>
    9e48:	5a8cb03a 	or	r6,r11,r10
    9e4c:	49600034 	orhi	r5,r9,32768
    9e50:	41c6b03a 	or	r3,r8,r7
    9e54:	10800044 	addi	r2,r2,1
    9e58:	693ff236 	bltu	r13,r4,9e24 <__muldf3+0x1f8>
    9e5c:	db000215 	stw	r12,8(sp)
    9e60:	03440034 	movhi	r13,4096
    9e64:	6b7fffc4 	addi	r13,r13,-1
    9e68:	69001336 	bltu	r13,r4,9eb8 <__muldf3+0x28c>
    9e6c:	d8800217 	ldw	r2,8(sp)
    9e70:	10bfffc4 	addi	r2,r2,-1
    9e74:	18d3883a 	add	r9,r3,r3
    9e78:	48c7803a 	cmpltu	r3,r9,r3
    9e7c:	2109883a 	add	r4,r4,r4
    9e80:	190f883a 	add	r7,r3,r4
    9e84:	3191883a 	add	r8,r6,r6
    9e88:	4197803a 	cmpltu	r11,r8,r6
    9e8c:	2955883a 	add	r10,r5,r5
    9e90:	1019883a 	mov	r12,r2
    9e94:	4807883a 	mov	r3,r9
    9e98:	3809883a 	mov	r4,r7
    9e9c:	2800010e 	bge	r5,zero,9ea4 <__muldf3+0x278>
    9ea0:	48c00054 	ori	r3,r9,1
    9ea4:	400d883a 	mov	r6,r8
    9ea8:	5a8b883a 	add	r5,r11,r10
    9eac:	10bfffc4 	addi	r2,r2,-1
    9eb0:	69fff02e 	bgeu	r13,r7,9e74 <__muldf3+0x248>
    9eb4:	db000215 	stw	r12,8(sp)
    9eb8:	18803fcc 	andi	r2,r3,255
    9ebc:	01c02004 	movi	r7,128
    9ec0:	11c00926 	beq	r2,r7,9ee8 <__muldf3+0x2bc>
    9ec4:	008000c4 	movi	r2,3
    9ec8:	d9000415 	stw	r4,16(sp)
    9ecc:	d8c00315 	stw	r3,12(sp)
    9ed0:	d8800015 	stw	r2,0(sp)
    9ed4:	d809883a 	mov	r4,sp
    9ed8:	003f7006 	br	9c9c <__muldf3+0x70>
    9edc:	0011883a 	mov	r8,zero
    9ee0:	00c00044 	movi	r3,1
    9ee4:	003fb606 	br	9dc0 <__muldf3+0x194>
    9ee8:	19c0400c 	andi	r7,r3,256
    9eec:	383ff51e 	bne	r7,zero,9ec4 <__muldf3+0x298>
    9ef0:	314ab03a 	or	r5,r6,r5
    9ef4:	283ff326 	beq	r5,zero,9ec4 <__muldf3+0x298>
    9ef8:	1885883a 	add	r2,r3,r2
    9efc:	10cb803a 	cmpltu	r5,r2,r3
    9f00:	00ffc004 	movi	r3,-256
    9f04:	10c6703a 	and	r3,r2,r3
    9f08:	2909883a 	add	r4,r5,r4
    9f0c:	003fed06 	br	9ec4 <__muldf3+0x298>

00009f10 <__divdf3>:
    9f10:	defff104 	addi	sp,sp,-60
    9f14:	d9000c15 	stw	r4,48(sp)
    9f18:	d9400d15 	stw	r5,52(sp)
    9f1c:	d9000c04 	addi	r4,sp,48
    9f20:	d9400504 	addi	r5,sp,20
    9f24:	dfc00e15 	stw	ra,56(sp)
    9f28:	d9800a15 	stw	r6,40(sp)
    9f2c:	d9c00b15 	stw	r7,44(sp)
    9f30:	000a8a00 	call	a8a0 <__unpack_d>
    9f34:	d9000a04 	addi	r4,sp,40
    9f38:	d80b883a 	mov	r5,sp
    9f3c:	000a8a00 	call	a8a0 <__unpack_d>
    9f40:	d8c00517 	ldw	r3,20(sp)
    9f44:	00800044 	movi	r2,1
    9f48:	10c00536 	bltu	r2,r3,9f60 <__divdf3+0x50>
    9f4c:	d9000504 	addi	r4,sp,20
    9f50:	000a67c0 	call	a67c <__pack_d>
    9f54:	dfc00e17 	ldw	ra,56(sp)
    9f58:	dec00f04 	addi	sp,sp,60
    9f5c:	f800283a 	ret
    9f60:	d9000017 	ldw	r4,0(sp)
    9f64:	11000536 	bltu	r2,r4,9f7c <__divdf3+0x6c>
    9f68:	d809883a 	mov	r4,sp
    9f6c:	000a67c0 	call	a67c <__pack_d>
    9f70:	dfc00e17 	ldw	ra,56(sp)
    9f74:	dec00f04 	addi	sp,sp,60
    9f78:	f800283a 	ret
    9f7c:	d9800617 	ldw	r6,24(sp)
    9f80:	d9400117 	ldw	r5,4(sp)
    9f84:	00800104 	movi	r2,4
    9f88:	314af03a 	xor	r5,r6,r5
    9f8c:	d9400615 	stw	r5,24(sp)
    9f90:	18800226 	beq	r3,r2,9f9c <__divdf3+0x8c>
    9f94:	01400084 	movi	r5,2
    9f98:	1940041e 	bne	r3,r5,9fac <__divdf3+0x9c>
    9f9c:	193feb1e 	bne	r3,r4,9f4c <__divdf3+0x3c>
    9fa0:	01000074 	movhi	r4,1
    9fa4:	2133be04 	addi	r4,r4,-12552
    9fa8:	003fe906 	br	9f50 <__divdf3+0x40>
    9fac:	20803326 	beq	r4,r2,a07c <__divdf3+0x16c>
    9fb0:	21403726 	beq	r4,r5,a090 <__divdf3+0x180>
    9fb4:	d8800217 	ldw	r2,8(sp)
    9fb8:	d9000717 	ldw	r4,28(sp)
    9fbc:	d8c00917 	ldw	r3,36(sp)
    9fc0:	da000417 	ldw	r8,16(sp)
    9fc4:	2089c83a 	sub	r4,r4,r2
    9fc8:	d9000715 	stw	r4,28(sp)
    9fcc:	d8800817 	ldw	r2,32(sp)
    9fd0:	dbc00317 	ldw	r15,12(sp)
    9fd4:	1a000236 	bltu	r3,r8,9fe0 <__divdf3+0xd0>
    9fd8:	40c0081e 	bne	r8,r3,9ffc <__divdf3+0xec>
    9fdc:	13c0072e 	bgeu	r2,r15,9ffc <__divdf3+0xec>
    9fe0:	108b883a 	add	r5,r2,r2
    9fe4:	288d803a 	cmpltu	r6,r5,r2
    9fe8:	18c7883a 	add	r3,r3,r3
    9fec:	213fffc4 	addi	r4,r4,-1
    9ff0:	2805883a 	mov	r2,r5
    9ff4:	30c7883a 	add	r3,r6,r3
    9ff8:	d9000715 	stw	r4,28(sp)
    9ffc:	01400f44 	movi	r5,61
    a000:	000f883a 	mov	r7,zero
    a004:	01040034 	movhi	r4,4096
    a008:	0019883a 	mov	r12,zero
    a00c:	001b883a 	mov	r13,zero
    a010:	201697fa 	slli	r11,r4,31
    a014:	3814d07a 	srli	r10,r7,1
    a018:	297fffc4 	addi	r5,r5,-1
    a01c:	1a000936 	bltu	r3,r8,a044 <__divdf3+0x134>
    a020:	13cdc83a 	sub	r6,r2,r15
    a024:	1193803a 	cmpltu	r9,r2,r6
    a028:	1a1dc83a 	sub	r14,r3,r8
    a02c:	40c0011e 	bne	r8,r3,a034 <__divdf3+0x124>
    a030:	13c00436 	bltu	r2,r15,a044 <__divdf3+0x134>
    a034:	3005883a 	mov	r2,r6
    a038:	7247c83a 	sub	r3,r14,r9
    a03c:	61d8b03a 	or	r12,r12,r7
    a040:	691ab03a 	or	r13,r13,r4
    a044:	108d883a 	add	r6,r2,r2
    a048:	3093803a 	cmpltu	r9,r6,r2
    a04c:	18c7883a 	add	r3,r3,r3
    a050:	5a8eb03a 	or	r7,r11,r10
    a054:	2008d07a 	srli	r4,r4,1
    a058:	3005883a 	mov	r2,r6
    a05c:	48c7883a 	add	r3,r9,r3
    a060:	283feb1e 	bne	r5,zero,a010 <__divdf3+0x100>
    a064:	61003fcc 	andi	r4,r12,255
    a068:	01402004 	movi	r5,128
    a06c:	21400b26 	beq	r4,r5,a09c <__divdf3+0x18c>
    a070:	db000815 	stw	r12,32(sp)
    a074:	db400915 	stw	r13,36(sp)
    a078:	003fb406 	br	9f4c <__divdf3+0x3c>
    a07c:	d8000815 	stw	zero,32(sp)
    a080:	d8000915 	stw	zero,36(sp)
    a084:	d8000715 	stw	zero,28(sp)
    a088:	d9000504 	addi	r4,sp,20
    a08c:	003fb006 	br	9f50 <__divdf3+0x40>
    a090:	d8800515 	stw	r2,20(sp)
    a094:	d9000504 	addi	r4,sp,20
    a098:	003fad06 	br	9f50 <__divdf3+0x40>
    a09c:	6140400c 	andi	r5,r12,256
    a0a0:	283ff31e 	bne	r5,zero,a070 <__divdf3+0x160>
    a0a4:	30c4b03a 	or	r2,r6,r3
    a0a8:	103ff126 	beq	r2,zero,a070 <__divdf3+0x160>
    a0ac:	6109883a 	add	r4,r12,r4
    a0b0:	2305803a 	cmpltu	r2,r4,r12
    a0b4:	033fc004 	movi	r12,-256
    a0b8:	2318703a 	and	r12,r4,r12
    a0bc:	135b883a 	add	r13,r2,r13
    a0c0:	003feb06 	br	a070 <__divdf3+0x160>

0000a0c4 <__gtdf2>:
    a0c4:	defff104 	addi	sp,sp,-60
    a0c8:	d9000c15 	stw	r4,48(sp)
    a0cc:	d9400d15 	stw	r5,52(sp)
    a0d0:	d9000c04 	addi	r4,sp,48
    a0d4:	d9400504 	addi	r5,sp,20
    a0d8:	dfc00e15 	stw	ra,56(sp)
    a0dc:	d9800a15 	stw	r6,40(sp)
    a0e0:	d9c00b15 	stw	r7,44(sp)
    a0e4:	000a8a00 	call	a8a0 <__unpack_d>
    a0e8:	d9000a04 	addi	r4,sp,40
    a0ec:	d80b883a 	mov	r5,sp
    a0f0:	000a8a00 	call	a8a0 <__unpack_d>
    a0f4:	d8c00517 	ldw	r3,20(sp)
    a0f8:	00800044 	movi	r2,1
    a0fc:	10c0082e 	bgeu	r2,r3,a120 <__gtdf2+0x5c>
    a100:	d8c00017 	ldw	r3,0(sp)
    a104:	10c0062e 	bgeu	r2,r3,a120 <__gtdf2+0x5c>
    a108:	d9000504 	addi	r4,sp,20
    a10c:	d80b883a 	mov	r5,sp
    a110:	000a9a40 	call	a9a4 <__fpcmp_parts_d>
    a114:	dfc00e17 	ldw	ra,56(sp)
    a118:	dec00f04 	addi	sp,sp,60
    a11c:	f800283a 	ret
    a120:	00bfffc4 	movi	r2,-1
    a124:	003ffb06 	br	a114 <__gtdf2+0x50>

0000a128 <__gedf2>:
    a128:	defff104 	addi	sp,sp,-60
    a12c:	d9000c15 	stw	r4,48(sp)
    a130:	d9400d15 	stw	r5,52(sp)
    a134:	d9000c04 	addi	r4,sp,48
    a138:	d9400504 	addi	r5,sp,20
    a13c:	dfc00e15 	stw	ra,56(sp)
    a140:	d9800a15 	stw	r6,40(sp)
    a144:	d9c00b15 	stw	r7,44(sp)
    a148:	000a8a00 	call	a8a0 <__unpack_d>
    a14c:	d9000a04 	addi	r4,sp,40
    a150:	d80b883a 	mov	r5,sp
    a154:	000a8a00 	call	a8a0 <__unpack_d>
    a158:	d8c00517 	ldw	r3,20(sp)
    a15c:	00800044 	movi	r2,1
    a160:	10c0082e 	bgeu	r2,r3,a184 <__gedf2+0x5c>
    a164:	d8c00017 	ldw	r3,0(sp)
    a168:	10c0062e 	bgeu	r2,r3,a184 <__gedf2+0x5c>
    a16c:	d9000504 	addi	r4,sp,20
    a170:	d80b883a 	mov	r5,sp
    a174:	000a9a40 	call	a9a4 <__fpcmp_parts_d>
    a178:	dfc00e17 	ldw	ra,56(sp)
    a17c:	dec00f04 	addi	sp,sp,60
    a180:	f800283a 	ret
    a184:	00bfffc4 	movi	r2,-1
    a188:	003ffb06 	br	a178 <__gedf2+0x50>

0000a18c <__ltdf2>:
    a18c:	defff104 	addi	sp,sp,-60
    a190:	d9000c15 	stw	r4,48(sp)
    a194:	d9400d15 	stw	r5,52(sp)
    a198:	d9000c04 	addi	r4,sp,48
    a19c:	d9400504 	addi	r5,sp,20
    a1a0:	dfc00e15 	stw	ra,56(sp)
    a1a4:	d9800a15 	stw	r6,40(sp)
    a1a8:	d9c00b15 	stw	r7,44(sp)
    a1ac:	000a8a00 	call	a8a0 <__unpack_d>
    a1b0:	d9000a04 	addi	r4,sp,40
    a1b4:	d80b883a 	mov	r5,sp
    a1b8:	000a8a00 	call	a8a0 <__unpack_d>
    a1bc:	d8c00517 	ldw	r3,20(sp)
    a1c0:	00800044 	movi	r2,1
    a1c4:	10c0052e 	bgeu	r2,r3,a1dc <__ltdf2+0x50>
    a1c8:	d8c00017 	ldw	r3,0(sp)
    a1cc:	10c0032e 	bgeu	r2,r3,a1dc <__ltdf2+0x50>
    a1d0:	d9000504 	addi	r4,sp,20
    a1d4:	d80b883a 	mov	r5,sp
    a1d8:	000a9a40 	call	a9a4 <__fpcmp_parts_d>
    a1dc:	dfc00e17 	ldw	ra,56(sp)
    a1e0:	dec00f04 	addi	sp,sp,60
    a1e4:	f800283a 	ret

0000a1e8 <__floatsidf>:
    a1e8:	2004d7fa 	srli	r2,r4,31
    a1ec:	defff904 	addi	sp,sp,-28
    a1f0:	00c000c4 	movi	r3,3
    a1f4:	dfc00615 	stw	ra,24(sp)
    a1f8:	dc000515 	stw	r16,20(sp)
    a1fc:	d8c00015 	stw	r3,0(sp)
    a200:	d8800115 	stw	r2,4(sp)
    a204:	2000081e 	bne	r4,zero,a228 <__floatsidf+0x40>
    a208:	00800084 	movi	r2,2
    a20c:	d8800015 	stw	r2,0(sp)
    a210:	d809883a 	mov	r4,sp
    a214:	000a67c0 	call	a67c <__pack_d>
    a218:	dfc00617 	ldw	ra,24(sp)
    a21c:	dc000517 	ldw	r16,20(sp)
    a220:	dec00704 	addi	sp,sp,28
    a224:	f800283a 	ret
    a228:	00c00f04 	movi	r3,60
    a22c:	d8c00215 	stw	r3,8(sp)
    a230:	10000f1e 	bne	r2,zero,a270 <__floatsidf+0x88>
    a234:	2021883a 	mov	r16,r4
    a238:	8009883a 	mov	r4,r16
    a23c:	000a5d00 	call	a5d0 <__clzsi2>
    a240:	11000744 	addi	r4,r2,29
    a244:	0100110e 	bge	zero,r4,a28c <__floatsidf+0xa4>
    a248:	10ffff44 	addi	r3,r2,-3
    a24c:	18001216 	blt	r3,zero,a298 <__floatsidf+0xb0>
    a250:	80c6983a 	sll	r3,r16,r3
    a254:	0009883a 	mov	r4,zero
    a258:	014007c4 	movi	r5,31
    a25c:	2885c83a 	sub	r2,r5,r2
    a260:	d9000315 	stw	r4,12(sp)
    a264:	d8c00415 	stw	r3,16(sp)
    a268:	d8800215 	stw	r2,8(sp)
    a26c:	003fe806 	br	a210 <__floatsidf+0x28>
    a270:	00a00034 	movhi	r2,32768
    a274:	20800e26 	beq	r4,r2,a2b0 <__floatsidf+0xc8>
    a278:	0121c83a 	sub	r16,zero,r4
    a27c:	8009883a 	mov	r4,r16
    a280:	000a5d00 	call	a5d0 <__clzsi2>
    a284:	11000744 	addi	r4,r2,29
    a288:	013fef16 	blt	zero,r4,a248 <__floatsidf+0x60>
    a28c:	dc000315 	stw	r16,12(sp)
    a290:	d8000415 	stw	zero,16(sp)
    a294:	003fde06 	br	a210 <__floatsidf+0x28>
    a298:	800ad07a 	srli	r5,r16,1
    a29c:	00c007c4 	movi	r3,31
    a2a0:	1907c83a 	sub	r3,r3,r4
    a2a4:	28c6d83a 	srl	r3,r5,r3
    a2a8:	8108983a 	sll	r4,r16,r4
    a2ac:	003fea06 	br	a258 <__floatsidf+0x70>
    a2b0:	0005883a 	mov	r2,zero
    a2b4:	00f07834 	movhi	r3,49632
    a2b8:	003fd706 	br	a218 <__floatsidf+0x30>

0000a2bc <__fixdfsi>:
    a2bc:	defff804 	addi	sp,sp,-32
    a2c0:	d9000515 	stw	r4,20(sp)
    a2c4:	d9400615 	stw	r5,24(sp)
    a2c8:	d9000504 	addi	r4,sp,20
    a2cc:	d80b883a 	mov	r5,sp
    a2d0:	dfc00715 	stw	ra,28(sp)
    a2d4:	000a8a00 	call	a8a0 <__unpack_d>
    a2d8:	d8800017 	ldw	r2,0(sp)
    a2dc:	00c00084 	movi	r3,2
    a2e0:	10c01c26 	beq	r2,r3,a354 <__fixdfsi+0x98>
    a2e4:	00c00044 	movi	r3,1
    a2e8:	18801a2e 	bgeu	r3,r2,a354 <__fixdfsi+0x98>
    a2ec:	00c00104 	movi	r3,4
    a2f0:	10c01126 	beq	r2,r3,a338 <__fixdfsi+0x7c>
    a2f4:	d8800217 	ldw	r2,8(sp)
    a2f8:	10001616 	blt	r2,zero,a354 <__fixdfsi+0x98>
    a2fc:	00c00784 	movi	r3,30
    a300:	18800d16 	blt	r3,r2,a338 <__fixdfsi+0x7c>
    a304:	00c00f04 	movi	r3,60
    a308:	1885c83a 	sub	r2,r3,r2
    a30c:	10fff804 	addi	r3,r2,-32
    a310:	d9400317 	ldw	r5,12(sp)
    a314:	d9000417 	ldw	r4,16(sp)
    a318:	18001616 	blt	r3,zero,a374 <__fixdfsi+0xb8>
    a31c:	20c4d83a 	srl	r2,r4,r3
    a320:	d8c00117 	ldw	r3,4(sp)
    a324:	18000126 	beq	r3,zero,a32c <__fixdfsi+0x70>
    a328:	0085c83a 	sub	r2,zero,r2
    a32c:	dfc00717 	ldw	ra,28(sp)
    a330:	dec00804 	addi	sp,sp,32
    a334:	f800283a 	ret
    a338:	d8800117 	ldw	r2,4(sp)
    a33c:	1000091e 	bne	r2,zero,a364 <__fixdfsi+0xa8>
    a340:	00a00034 	movhi	r2,32768
    a344:	10bfffc4 	addi	r2,r2,-1
    a348:	dfc00717 	ldw	ra,28(sp)
    a34c:	dec00804 	addi	sp,sp,32
    a350:	f800283a 	ret
    a354:	0005883a 	mov	r2,zero
    a358:	dfc00717 	ldw	ra,28(sp)
    a35c:	dec00804 	addi	sp,sp,32
    a360:	f800283a 	ret
    a364:	00a00034 	movhi	r2,32768
    a368:	dfc00717 	ldw	ra,28(sp)
    a36c:	dec00804 	addi	sp,sp,32
    a370:	f800283a 	ret
    a374:	2008907a 	slli	r4,r4,1
    a378:	018007c4 	movi	r6,31
    a37c:	308dc83a 	sub	r6,r6,r2
    a380:	2188983a 	sll	r4,r4,r6
    a384:	2884d83a 	srl	r2,r5,r2
    a388:	2084b03a 	or	r2,r4,r2
    a38c:	003fe406 	br	a320 <__fixdfsi+0x64>

0000a390 <udivmodsi4>:
    a390:	2005883a 	mov	r2,r4
    a394:	2900182e 	bgeu	r5,r4,a3f8 <udivmodsi4+0x68>
    a398:	28001716 	blt	r5,zero,a3f8 <udivmodsi4+0x68>
    a39c:	01000804 	movi	r4,32
    a3a0:	00c00044 	movi	r3,1
    a3a4:	00000206 	br	a3b0 <udivmodsi4+0x20>
    a3a8:	20001126 	beq	r4,zero,a3f0 <udivmodsi4+0x60>
    a3ac:	28000516 	blt	r5,zero,a3c4 <udivmodsi4+0x34>
    a3b0:	294b883a 	add	r5,r5,r5
    a3b4:	213fffc4 	addi	r4,r4,-1
    a3b8:	18c7883a 	add	r3,r3,r3
    a3bc:	28bffa36 	bltu	r5,r2,a3a8 <udivmodsi4+0x18>
    a3c0:	18000b26 	beq	r3,zero,a3f0 <udivmodsi4+0x60>
    a3c4:	0009883a 	mov	r4,zero
    a3c8:	11400236 	bltu	r2,r5,a3d4 <udivmodsi4+0x44>
    a3cc:	1145c83a 	sub	r2,r2,r5
    a3d0:	20c8b03a 	or	r4,r4,r3
    a3d4:	1806d07a 	srli	r3,r3,1
    a3d8:	280ad07a 	srli	r5,r5,1
    a3dc:	183ffa1e 	bne	r3,zero,a3c8 <udivmodsi4+0x38>
    a3e0:	3000021e 	bne	r6,zero,a3ec <udivmodsi4+0x5c>
    a3e4:	2005883a 	mov	r2,r4
    a3e8:	f800283a 	ret
    a3ec:	f800283a 	ret
    a3f0:	0009883a 	mov	r4,zero
    a3f4:	003ffa06 	br	a3e0 <udivmodsi4+0x50>
    a3f8:	00c00044 	movi	r3,1
    a3fc:	0009883a 	mov	r4,zero
    a400:	003ff106 	br	a3c8 <udivmodsi4+0x38>

0000a404 <__divsi3>:
    a404:	defffe04 	addi	sp,sp,-8
    a408:	dfc00115 	stw	ra,4(sp)
    a40c:	dc000015 	stw	r16,0(sp)
    a410:	20000a16 	blt	r4,zero,a43c <__divsi3+0x38>
    a414:	0021883a 	mov	r16,zero
    a418:	28000b16 	blt	r5,zero,a448 <__divsi3+0x44>
    a41c:	000d883a 	mov	r6,zero
    a420:	000a3900 	call	a390 <udivmodsi4>
    a424:	80000126 	beq	r16,zero,a42c <__divsi3+0x28>
    a428:	0085c83a 	sub	r2,zero,r2
    a42c:	dfc00117 	ldw	ra,4(sp)
    a430:	dc000017 	ldw	r16,0(sp)
    a434:	dec00204 	addi	sp,sp,8
    a438:	f800283a 	ret
    a43c:	0109c83a 	sub	r4,zero,r4
    a440:	04000044 	movi	r16,1
    a444:	283ff50e 	bge	r5,zero,a41c <__divsi3+0x18>
    a448:	014bc83a 	sub	r5,zero,r5
    a44c:	8400005c 	xori	r16,r16,1
    a450:	003ff206 	br	a41c <__divsi3+0x18>

0000a454 <__modsi3>:
    a454:	deffff04 	addi	sp,sp,-4
    a458:	dfc00015 	stw	ra,0(sp)
    a45c:	20000516 	blt	r4,zero,a474 <__modsi3+0x20>
    a460:	28000c16 	blt	r5,zero,a494 <__modsi3+0x40>
    a464:	01800044 	movi	r6,1
    a468:	dfc00017 	ldw	ra,0(sp)
    a46c:	dec00104 	addi	sp,sp,4
    a470:	000a3901 	jmpi	a390 <udivmodsi4>
    a474:	0109c83a 	sub	r4,zero,r4
    a478:	28000b16 	blt	r5,zero,a4a8 <__modsi3+0x54>
    a47c:	01800044 	movi	r6,1
    a480:	000a3900 	call	a390 <udivmodsi4>
    a484:	0085c83a 	sub	r2,zero,r2
    a488:	dfc00017 	ldw	ra,0(sp)
    a48c:	dec00104 	addi	sp,sp,4
    a490:	f800283a 	ret
    a494:	014bc83a 	sub	r5,zero,r5
    a498:	01800044 	movi	r6,1
    a49c:	dfc00017 	ldw	ra,0(sp)
    a4a0:	dec00104 	addi	sp,sp,4
    a4a4:	000a3901 	jmpi	a390 <udivmodsi4>
    a4a8:	014bc83a 	sub	r5,zero,r5
    a4ac:	003ff306 	br	a47c <__modsi3+0x28>

0000a4b0 <__udivsi3>:
    a4b0:	000d883a 	mov	r6,zero
    a4b4:	000a3901 	jmpi	a390 <udivmodsi4>

0000a4b8 <__umodsi3>:
    a4b8:	01800044 	movi	r6,1
    a4bc:	000a3901 	jmpi	a390 <udivmodsi4>

0000a4c0 <__muldi3>:
    a4c0:	defff604 	addi	sp,sp,-40
    a4c4:	dd400515 	stw	r21,20(sp)
    a4c8:	dd000415 	stw	r20,16(sp)
    a4cc:	257fffcc 	andi	r21,r4,65535
    a4d0:	353fffcc 	andi	r20,r6,65535
    a4d4:	dcc00315 	stw	r19,12(sp)
    a4d8:	3026d43a 	srli	r19,r6,16
    a4dc:	dd800615 	stw	r22,24(sp)
    a4e0:	dc800215 	stw	r18,8(sp)
    a4e4:	dc400115 	stw	r17,4(sp)
    a4e8:	2024d43a 	srli	r18,r4,16
    a4ec:	2023883a 	mov	r17,r4
    a4f0:	282d883a 	mov	r22,r5
    a4f4:	a009883a 	mov	r4,r20
    a4f8:	a80b883a 	mov	r5,r21
    a4fc:	dfc00915 	stw	ra,36(sp)
    a500:	df000815 	stw	fp,32(sp)
    a504:	ddc00715 	stw	r23,28(sp)
    a508:	3839883a 	mov	fp,r7
    a50c:	dc000015 	stw	r16,0(sp)
    a510:	3021883a 	mov	r16,r6
    a514:	000aa740 	call	aa74 <__mulsi3>
    a518:	a80b883a 	mov	r5,r21
    a51c:	9809883a 	mov	r4,r19
    a520:	102f883a 	mov	r23,r2
    a524:	000aa740 	call	aa74 <__mulsi3>
    a528:	a009883a 	mov	r4,r20
    a52c:	900b883a 	mov	r5,r18
    a530:	102b883a 	mov	r21,r2
    a534:	000aa740 	call	aa74 <__mulsi3>
    a538:	9809883a 	mov	r4,r19
    a53c:	900b883a 	mov	r5,r18
    a540:	1029883a 	mov	r20,r2
    a544:	000aa740 	call	aa74 <__mulsi3>
    a548:	1007883a 	mov	r3,r2
    a54c:	b804d43a 	srli	r2,r23,16
    a550:	a549883a 	add	r4,r20,r21
    a554:	2089883a 	add	r4,r4,r2
    a558:	2500022e 	bgeu	r4,r20,a564 <__muldi3+0xa4>
    a55c:	00800074 	movhi	r2,1
    a560:	1887883a 	add	r3,r3,r2
    a564:	200cd43a 	srli	r6,r4,16
    a568:	2004943a 	slli	r2,r4,16
    a56c:	e00b883a 	mov	r5,fp
    a570:	8809883a 	mov	r4,r17
    a574:	bdffffcc 	andi	r23,r23,65535
    a578:	19a3883a 	add	r17,r3,r6
    a57c:	15ef883a 	add	r23,r2,r23
    a580:	000aa740 	call	aa74 <__mulsi3>
    a584:	8009883a 	mov	r4,r16
    a588:	b00b883a 	mov	r5,r22
    a58c:	1025883a 	mov	r18,r2
    a590:	000aa740 	call	aa74 <__mulsi3>
    a594:	9085883a 	add	r2,r18,r2
    a598:	1447883a 	add	r3,r2,r17
    a59c:	b805883a 	mov	r2,r23
    a5a0:	dfc00917 	ldw	ra,36(sp)
    a5a4:	df000817 	ldw	fp,32(sp)
    a5a8:	ddc00717 	ldw	r23,28(sp)
    a5ac:	dd800617 	ldw	r22,24(sp)
    a5b0:	dd400517 	ldw	r21,20(sp)
    a5b4:	dd000417 	ldw	r20,16(sp)
    a5b8:	dcc00317 	ldw	r19,12(sp)
    a5bc:	dc800217 	ldw	r18,8(sp)
    a5c0:	dc400117 	ldw	r17,4(sp)
    a5c4:	dc000017 	ldw	r16,0(sp)
    a5c8:	dec00a04 	addi	sp,sp,40
    a5cc:	f800283a 	ret

0000a5d0 <__clzsi2>:
    a5d0:	00bfffd4 	movui	r2,65535
    a5d4:	11000b36 	bltu	r2,r4,a604 <__clzsi2+0x34>
    a5d8:	00803fc4 	movi	r2,255
    a5dc:	11001e2e 	bgeu	r2,r4,a658 <__clzsi2+0x88>
    a5e0:	00c00204 	movi	r3,8
    a5e4:	20c8d83a 	srl	r4,r4,r3
    a5e8:	00c00074 	movhi	r3,1
    a5ec:	18f3c304 	addi	r3,r3,-12532
    a5f0:	00800604 	movi	r2,24
    a5f4:	1909883a 	add	r4,r3,r4
    a5f8:	20c00003 	ldbu	r3,0(r4)
    a5fc:	10c5c83a 	sub	r2,r2,r3
    a600:	f800283a 	ret
    a604:	00804034 	movhi	r2,256
    a608:	10bfffc4 	addi	r2,r2,-1
    a60c:	11000936 	bltu	r2,r4,a634 <__clzsi2+0x64>
    a610:	00800404 	movi	r2,16
    a614:	1007883a 	mov	r3,r2
    a618:	20c8d83a 	srl	r4,r4,r3
    a61c:	00c00074 	movhi	r3,1
    a620:	18f3c304 	addi	r3,r3,-12532
    a624:	1909883a 	add	r4,r3,r4
    a628:	20c00003 	ldbu	r3,0(r4)
    a62c:	10c5c83a 	sub	r2,r2,r3
    a630:	f800283a 	ret
    a634:	00c00604 	movi	r3,24
    a638:	20c8d83a 	srl	r4,r4,r3
    a63c:	00c00074 	movhi	r3,1
    a640:	18f3c304 	addi	r3,r3,-12532
    a644:	00800204 	movi	r2,8
    a648:	1909883a 	add	r4,r3,r4
    a64c:	20c00003 	ldbu	r3,0(r4)
    a650:	10c5c83a 	sub	r2,r2,r3
    a654:	f800283a 	ret
    a658:	0007883a 	mov	r3,zero
    a65c:	20c8d83a 	srl	r4,r4,r3
    a660:	00c00074 	movhi	r3,1
    a664:	18f3c304 	addi	r3,r3,-12532
    a668:	00800804 	movi	r2,32
    a66c:	1909883a 	add	r4,r3,r4
    a670:	20c00003 	ldbu	r3,0(r4)
    a674:	10c5c83a 	sub	r2,r2,r3
    a678:	f800283a 	ret

0000a67c <__pack_d>:
    a67c:	20800017 	ldw	r2,0(r4)
    a680:	defff804 	addi	sp,sp,-32
    a684:	dcc00315 	stw	r19,12(sp)
    a688:	dc800215 	stw	r18,8(sp)
    a68c:	dfc00715 	stw	ra,28(sp)
    a690:	dd800615 	stw	r22,24(sp)
    a694:	dd400515 	stw	r21,20(sp)
    a698:	dd000415 	stw	r20,16(sp)
    a69c:	dc400115 	stw	r17,4(sp)
    a6a0:	dc000015 	stw	r16,0(sp)
    a6a4:	04800044 	movi	r18,1
    a6a8:	24400317 	ldw	r17,12(r4)
    a6ac:	24000417 	ldw	r16,16(r4)
    a6b0:	24c00117 	ldw	r19,4(r4)
    a6b4:	9080422e 	bgeu	r18,r2,a7c0 <__pack_d+0x144>
    a6b8:	00c00104 	movi	r3,4
    a6bc:	10c03c26 	beq	r2,r3,a7b0 <__pack_d+0x134>
    a6c0:	00c00084 	movi	r3,2
    a6c4:	10c01926 	beq	r2,r3,a72c <__pack_d+0xb0>
    a6c8:	8c04b03a 	or	r2,r17,r16
    a6cc:	10001726 	beq	r2,zero,a72c <__pack_d+0xb0>
    a6d0:	21000217 	ldw	r4,8(r4)
    a6d4:	00bf0084 	movi	r2,-1022
    a6d8:	20804016 	blt	r4,r2,a7dc <__pack_d+0x160>
    a6dc:	0080ffc4 	movi	r2,1023
    a6e0:	11003316 	blt	r2,r4,a7b0 <__pack_d+0x134>
    a6e4:	88803fcc 	andi	r2,r17,255
    a6e8:	00c02004 	movi	r3,128
    a6ec:	10c02926 	beq	r2,r3,a794 <__pack_d+0x118>
    a6f0:	88801fc4 	addi	r2,r17,127
    a6f4:	1463803a 	cmpltu	r17,r2,r17
    a6f8:	8c21883a 	add	r16,r17,r16
    a6fc:	1023883a 	mov	r17,r2
    a700:	00880034 	movhi	r2,8192
    a704:	10bfffc4 	addi	r2,r2,-1
    a708:	14001c36 	bltu	r2,r16,a77c <__pack_d+0x100>
    a70c:	2100ffc4 	addi	r4,r4,1023
    a710:	8006963a 	slli	r3,r16,24
    a714:	8804d23a 	srli	r2,r17,8
    a718:	8020913a 	slli	r16,r16,4
    a71c:	2101ffcc 	andi	r4,r4,2047
    a720:	1884b03a 	or	r2,r3,r2
    a724:	8020d33a 	srli	r16,r16,12
    a728:	00000306 	br	a738 <__pack_d+0xbc>
    a72c:	0009883a 	mov	r4,zero
    a730:	0005883a 	mov	r2,zero
    a734:	0021883a 	mov	r16,zero
    a738:	2008953a 	slli	r4,r4,20
    a73c:	982697fa 	slli	r19,r19,31
    a740:	00c00434 	movhi	r3,16
    a744:	18ffffc4 	addi	r3,r3,-1
    a748:	80e0703a 	and	r16,r16,r3
    a74c:	8106b03a 	or	r3,r16,r4
    a750:	1cc6b03a 	or	r3,r3,r19
    a754:	dfc00717 	ldw	ra,28(sp)
    a758:	dd800617 	ldw	r22,24(sp)
    a75c:	dd400517 	ldw	r21,20(sp)
    a760:	dd000417 	ldw	r20,16(sp)
    a764:	dcc00317 	ldw	r19,12(sp)
    a768:	dc800217 	ldw	r18,8(sp)
    a76c:	dc400117 	ldw	r17,4(sp)
    a770:	dc000017 	ldw	r16,0(sp)
    a774:	dec00804 	addi	sp,sp,32
    a778:	f800283a 	ret
    a77c:	800697fa 	slli	r3,r16,31
    a780:	8804d07a 	srli	r2,r17,1
    a784:	21010004 	addi	r4,r4,1024
    a788:	8020d07a 	srli	r16,r16,1
    a78c:	18a2b03a 	or	r17,r3,r2
    a790:	003fdf06 	br	a710 <__pack_d+0x94>
    a794:	88c0400c 	andi	r3,r17,256
    a798:	183fd926 	beq	r3,zero,a700 <__pack_d+0x84>
    a79c:	8885883a 	add	r2,r17,r2
    a7a0:	1463803a 	cmpltu	r17,r2,r17
    a7a4:	8c21883a 	add	r16,r17,r16
    a7a8:	1023883a 	mov	r17,r2
    a7ac:	003fd406 	br	a700 <__pack_d+0x84>
    a7b0:	0101ffc4 	movi	r4,2047
    a7b4:	0005883a 	mov	r2,zero
    a7b8:	0021883a 	mov	r16,zero
    a7bc:	003fde06 	br	a738 <__pack_d+0xbc>
    a7c0:	84000234 	orhi	r16,r16,8
    a7c4:	00c00434 	movhi	r3,16
    a7c8:	18ffffc4 	addi	r3,r3,-1
    a7cc:	8805883a 	mov	r2,r17
    a7d0:	80e0703a 	and	r16,r16,r3
    a7d4:	0101ffc4 	movi	r4,2047
    a7d8:	003fd706 	br	a738 <__pack_d+0xbc>
    a7dc:	1129c83a 	sub	r20,r2,r4
    a7e0:	00800e04 	movi	r2,56
    a7e4:	15002716 	blt	r2,r20,a884 <__pack_d+0x208>
    a7e8:	800b883a 	mov	r5,r16
    a7ec:	a00d883a 	mov	r6,r20
    a7f0:	8809883a 	mov	r4,r17
    a7f4:	000aa9c0 	call	aa9c <__lshrdi3>
    a7f8:	9009883a 	mov	r4,r18
    a7fc:	000b883a 	mov	r5,zero
    a800:	a00d883a 	mov	r6,r20
    a804:	102d883a 	mov	r22,r2
    a808:	182b883a 	mov	r21,r3
    a80c:	000aae00 	call	aae0 <__ashldi3>
    a810:	1009003a 	cmpeq	r4,r2,zero
    a814:	1907c83a 	sub	r3,r3,r4
    a818:	10bfffc4 	addi	r2,r2,-1
    a81c:	1c20703a 	and	r16,r3,r16
    a820:	1444703a 	and	r2,r2,r17
    a824:	1404b03a 	or	r2,r2,r16
    a828:	1004c03a 	cmpne	r2,r2,zero
    a82c:	1584b03a 	or	r2,r2,r22
    a830:	11003fcc 	andi	r4,r2,255
    a834:	01402004 	movi	r5,128
    a838:	a807883a 	mov	r3,r21
    a83c:	2140131e 	bne	r4,r5,a88c <__pack_d+0x210>
    a840:	1140400c 	andi	r5,r2,256
    a844:	28000426 	beq	r5,zero,a858 <__pack_d+0x1dc>
    a848:	1109883a 	add	r4,r2,r4
    a84c:	2085803a 	cmpltu	r2,r4,r2
    a850:	1547883a 	add	r3,r2,r21
    a854:	2005883a 	mov	r2,r4
    a858:	1808963a 	slli	r4,r3,24
    a85c:	1004d23a 	srli	r2,r2,8
    a860:	1820913a 	slli	r16,r3,4
    a864:	01440034 	movhi	r5,4096
    a868:	297fffc4 	addi	r5,r5,-1
    a86c:	2084b03a 	or	r2,r4,r2
    a870:	8020d33a 	srli	r16,r16,12
    a874:	01000044 	movi	r4,1
    a878:	28ffaf36 	bltu	r5,r3,a738 <__pack_d+0xbc>
    a87c:	0009883a 	mov	r4,zero
    a880:	003fad06 	br	a738 <__pack_d+0xbc>
    a884:	0005883a 	mov	r2,zero
    a888:	0007883a 	mov	r3,zero
    a88c:	11001fc4 	addi	r4,r2,127
    a890:	2085803a 	cmpltu	r2,r4,r2
    a894:	10c7883a 	add	r3,r2,r3
    a898:	2005883a 	mov	r2,r4
    a89c:	003fee06 	br	a858 <__pack_d+0x1dc>

0000a8a0 <__unpack_d>:
    a8a0:	21800117 	ldw	r6,4(r4)
    a8a4:	20c00017 	ldw	r3,0(r4)
    a8a8:	3004d7fa 	srli	r2,r6,31
    a8ac:	3008d53a 	srli	r4,r6,20
    a8b0:	28800115 	stw	r2,4(r5)
    a8b4:	2101ffcc 	andi	r4,r4,2047
    a8b8:	00800434 	movhi	r2,16
    a8bc:	10bfffc4 	addi	r2,r2,-1
    a8c0:	3084703a 	and	r2,r6,r2
    a8c4:	20001a1e 	bne	r4,zero,a930 <__unpack_d+0x90>
    a8c8:	1888b03a 	or	r4,r3,r2
    a8cc:	20002626 	beq	r4,zero,a968 <__unpack_d+0xc8>
    a8d0:	1808d63a 	srli	r4,r3,24
    a8d4:	1004923a 	slli	r2,r2,8
    a8d8:	01bf0084 	movi	r6,-1022
    a8dc:	29800215 	stw	r6,8(r5)
    a8e0:	2084b03a 	or	r2,r4,r2
    a8e4:	010000c4 	movi	r4,3
    a8e8:	29000015 	stw	r4,0(r5)
    a8ec:	02040034 	movhi	r8,4096
    a8f0:	423fffc4 	addi	r8,r8,-1
    a8f4:	1806923a 	slli	r3,r3,8
    a8f8:	40801836 	bltu	r8,r2,a95c <__unpack_d+0xbc>
    a8fc:	013f0044 	movi	r4,-1023
    a900:	18cd883a 	add	r6,r3,r3
    a904:	30c7803a 	cmpltu	r3,r6,r3
    a908:	1085883a 	add	r2,r2,r2
    a90c:	1885883a 	add	r2,r3,r2
    a910:	200f883a 	mov	r7,r4
    a914:	3007883a 	mov	r3,r6
    a918:	213fffc4 	addi	r4,r4,-1
    a91c:	40bff82e 	bgeu	r8,r2,a900 <__unpack_d+0x60>
    a920:	29c00215 	stw	r7,8(r5)
    a924:	28c00315 	stw	r3,12(r5)
    a928:	28800415 	stw	r2,16(r5)
    a92c:	f800283a 	ret
    a930:	01c1ffc4 	movi	r7,2047
    a934:	21c00f26 	beq	r4,r7,a974 <__unpack_d+0xd4>
    a938:	180cd63a 	srli	r6,r3,24
    a93c:	1004923a 	slli	r2,r2,8
    a940:	213f0044 	addi	r4,r4,-1023
    a944:	1806923a 	slli	r3,r3,8
    a948:	3084b03a 	or	r2,r6,r2
    a94c:	29000215 	stw	r4,8(r5)
    a950:	010000c4 	movi	r4,3
    a954:	10840034 	orhi	r2,r2,4096
    a958:	29000015 	stw	r4,0(r5)
    a95c:	28c00315 	stw	r3,12(r5)
    a960:	28800415 	stw	r2,16(r5)
    a964:	f800283a 	ret
    a968:	00800084 	movi	r2,2
    a96c:	28800015 	stw	r2,0(r5)
    a970:	f800283a 	ret
    a974:	1888b03a 	or	r4,r3,r2
    a978:	20000526 	beq	r4,zero,a990 <__unpack_d+0xf0>
    a97c:	3180022c 	andhi	r6,r6,8
    a980:	30000626 	beq	r6,zero,a99c <__unpack_d+0xfc>
    a984:	01000044 	movi	r4,1
    a988:	29000015 	stw	r4,0(r5)
    a98c:	003ff306 	br	a95c <__unpack_d+0xbc>
    a990:	00800104 	movi	r2,4
    a994:	28800015 	stw	r2,0(r5)
    a998:	f800283a 	ret
    a99c:	28000015 	stw	zero,0(r5)
    a9a0:	003fee06 	br	a95c <__unpack_d+0xbc>

0000a9a4 <__fpcmp_parts_d>:
    a9a4:	20c00017 	ldw	r3,0(r4)
    a9a8:	00800044 	movi	r2,1
    a9ac:	10c0142e 	bgeu	r2,r3,aa00 <__fpcmp_parts_d+0x5c>
    a9b0:	29800017 	ldw	r6,0(r5)
    a9b4:	1180122e 	bgeu	r2,r6,aa00 <__fpcmp_parts_d+0x5c>
    a9b8:	01c00104 	movi	r7,4
    a9bc:	19c02826 	beq	r3,r7,aa60 <__fpcmp_parts_d+0xbc>
    a9c0:	31c00926 	beq	r6,r7,a9e8 <__fpcmp_parts_d+0x44>
    a9c4:	01c00084 	movi	r7,2
    a9c8:	19c00626 	beq	r3,r7,a9e4 <__fpcmp_parts_d+0x40>
    a9cc:	31c00a26 	beq	r6,r7,a9f8 <__fpcmp_parts_d+0x54>
    a9d0:	20c00117 	ldw	r3,4(r4)
    a9d4:	29800117 	ldw	r6,4(r5)
    a9d8:	19800b26 	beq	r3,r6,aa08 <__fpcmp_parts_d+0x64>
    a9dc:	1800041e 	bne	r3,zero,a9f0 <__fpcmp_parts_d+0x4c>
    a9e0:	f800283a 	ret
    a9e4:	30c01a26 	beq	r6,r3,aa50 <__fpcmp_parts_d+0xac>
    a9e8:	28800117 	ldw	r2,4(r5)
    a9ec:	1000041e 	bne	r2,zero,aa00 <__fpcmp_parts_d+0x5c>
    a9f0:	00bfffc4 	movi	r2,-1
    a9f4:	f800283a 	ret
    a9f8:	20800117 	ldw	r2,4(r4)
    a9fc:	103ffc1e 	bne	r2,zero,a9f0 <__fpcmp_parts_d+0x4c>
    aa00:	00800044 	movi	r2,1
    aa04:	f800283a 	ret
    aa08:	21c00217 	ldw	r7,8(r4)
    aa0c:	29800217 	ldw	r6,8(r5)
    aa10:	31c0020e 	bge	r6,r7,aa1c <__fpcmp_parts_d+0x78>
    aa14:	183ff61e 	bne	r3,zero,a9f0 <__fpcmp_parts_d+0x4c>
    aa18:	f800283a 	ret
    aa1c:	39800a16 	blt	r7,r6,aa48 <__fpcmp_parts_d+0xa4>
    aa20:	20800417 	ldw	r2,16(r4)
    aa24:	29800417 	ldw	r6,16(r5)
    aa28:	21c00317 	ldw	r7,12(r4)
    aa2c:	29000317 	ldw	r4,12(r5)
    aa30:	30800936 	bltu	r6,r2,aa58 <__fpcmp_parts_d+0xb4>
    aa34:	1180011e 	bne	r2,r6,aa3c <__fpcmp_parts_d+0x98>
    aa38:	21c00736 	bltu	r4,r7,aa58 <__fpcmp_parts_d+0xb4>
    aa3c:	11800236 	bltu	r2,r6,aa48 <__fpcmp_parts_d+0xa4>
    aa40:	3080031e 	bne	r6,r2,aa50 <__fpcmp_parts_d+0xac>
    aa44:	3900022e 	bgeu	r7,r4,aa50 <__fpcmp_parts_d+0xac>
    aa48:	183fe926 	beq	r3,zero,a9f0 <__fpcmp_parts_d+0x4c>
    aa4c:	003fec06 	br	aa00 <__fpcmp_parts_d+0x5c>
    aa50:	0005883a 	mov	r2,zero
    aa54:	f800283a 	ret
    aa58:	183fe926 	beq	r3,zero,aa00 <__fpcmp_parts_d+0x5c>
    aa5c:	003fe406 	br	a9f0 <__fpcmp_parts_d+0x4c>
    aa60:	30ffe51e 	bne	r6,r3,a9f8 <__fpcmp_parts_d+0x54>
    aa64:	28c00117 	ldw	r3,4(r5)
    aa68:	20800117 	ldw	r2,4(r4)
    aa6c:	1885c83a 	sub	r2,r3,r2
    aa70:	f800283a 	ret

0000aa74 <__mulsi3>:
    aa74:	0005883a 	mov	r2,zero
    aa78:	20000726 	beq	r4,zero,aa98 <__mulsi3+0x24>
    aa7c:	20c0004c 	andi	r3,r4,1
    aa80:	2008d07a 	srli	r4,r4,1
    aa84:	18000126 	beq	r3,zero,aa8c <__mulsi3+0x18>
    aa88:	1145883a 	add	r2,r2,r5
    aa8c:	294b883a 	add	r5,r5,r5
    aa90:	203ffa1e 	bne	r4,zero,aa7c <__mulsi3+0x8>
    aa94:	f800283a 	ret
    aa98:	f800283a 	ret

0000aa9c <__lshrdi3>:
    aa9c:	2005883a 	mov	r2,r4
    aaa0:	2807883a 	mov	r3,r5
    aaa4:	30000826 	beq	r6,zero,aac8 <__lshrdi3+0x2c>
    aaa8:	01000804 	movi	r4,32
    aaac:	2189c83a 	sub	r4,r4,r6
    aab0:	0100060e 	bge	zero,r4,aacc <__lshrdi3+0x30>
    aab4:	1184d83a 	srl	r2,r2,r6
    aab8:	2908983a 	sll	r4,r5,r4
    aabc:	298cd83a 	srl	r6,r5,r6
    aac0:	2084b03a 	or	r2,r4,r2
    aac4:	3007883a 	mov	r3,r6
    aac8:	f800283a 	ret
    aacc:	0105c83a 	sub	r2,zero,r4
    aad0:	000d883a 	mov	r6,zero
    aad4:	2884d83a 	srl	r2,r5,r2
    aad8:	3007883a 	mov	r3,r6
    aadc:	003ffa06 	br	aac8 <__lshrdi3+0x2c>

0000aae0 <__ashldi3>:
    aae0:	2005883a 	mov	r2,r4
    aae4:	2807883a 	mov	r3,r5
    aae8:	30000826 	beq	r6,zero,ab0c <__ashldi3+0x2c>
    aaec:	01000804 	movi	r4,32
    aaf0:	2189c83a 	sub	r4,r4,r6
    aaf4:	0100060e 	bge	zero,r4,ab10 <__ashldi3+0x30>
    aaf8:	1108d83a 	srl	r4,r2,r4
    aafc:	2986983a 	sll	r3,r5,r6
    ab00:	118c983a 	sll	r6,r2,r6
    ab04:	20c6b03a 	or	r3,r4,r3
    ab08:	3005883a 	mov	r2,r6
    ab0c:	f800283a 	ret
    ab10:	0107c83a 	sub	r3,zero,r4
    ab14:	000d883a 	mov	r6,zero
    ab18:	10c6983a 	sll	r3,r2,r3
    ab1c:	3005883a 	mov	r2,r6
    ab20:	003ffa06 	br	ab0c <__ashldi3+0x2c>

0000ab24 <memset>:
    ab24:	2005883a 	mov	r2,r4
    ab28:	30000526 	beq	r6,zero,ab40 <memset+0x1c>
    ab2c:	218d883a 	add	r6,r4,r6
    ab30:	2007883a 	mov	r3,r4
    ab34:	19400005 	stb	r5,0(r3)
    ab38:	18c00044 	addi	r3,r3,1
    ab3c:	19bffd1e 	bne	r3,r6,ab34 <memset+0x10>
    ab40:	f800283a 	ret

0000ab44 <_printf_r>:
    ab44:	defffd04 	addi	sp,sp,-12
    ab48:	dfc00015 	stw	ra,0(sp)
    ab4c:	d9800115 	stw	r6,4(sp)
    ab50:	d9c00215 	stw	r7,8(sp)
    ab54:	20800217 	ldw	r2,8(r4)
    ab58:	00c00074 	movhi	r3,1
    ab5c:	18ecf804 	addi	r3,r3,-19488
    ab60:	280d883a 	mov	r6,r5
    ab64:	10c00115 	stw	r3,4(r2)
    ab68:	100b883a 	mov	r5,r2
    ab6c:	d9c00104 	addi	r7,sp,4
    ab70:	000ac880 	call	ac88 <___vfprintf_internal_r>
    ab74:	dfc00017 	ldw	ra,0(sp)
    ab78:	dec00304 	addi	sp,sp,12
    ab7c:	f800283a 	ret

0000ab80 <printf>:
    ab80:	defffc04 	addi	sp,sp,-16
    ab84:	dfc00015 	stw	ra,0(sp)
    ab88:	d9400115 	stw	r5,4(sp)
    ab8c:	d9800215 	stw	r6,8(sp)
    ab90:	d9c00315 	stw	r7,12(sp)
    ab94:	00800074 	movhi	r2,1
    ab98:	10b4d604 	addi	r2,r2,-11432
    ab9c:	10800017 	ldw	r2,0(r2)
    aba0:	00c00074 	movhi	r3,1
    aba4:	18ecf804 	addi	r3,r3,-19488
    aba8:	200b883a 	mov	r5,r4
    abac:	10800217 	ldw	r2,8(r2)
    abb0:	d9800104 	addi	r6,sp,4
    abb4:	10c00115 	stw	r3,4(r2)
    abb8:	1009883a 	mov	r4,r2
    abbc:	000b3bc0 	call	b3bc <__vfprintf_internal>
    abc0:	dfc00017 	ldw	ra,0(sp)
    abc4:	dec00404 	addi	sp,sp,16
    abc8:	f800283a 	ret

0000abcc <_puts_r>:
    abcc:	defffd04 	addi	sp,sp,-12
    abd0:	dc000015 	stw	r16,0(sp)
    abd4:	2021883a 	mov	r16,r4
    abd8:	2809883a 	mov	r4,r5
    abdc:	dfc00215 	stw	ra,8(sp)
    abe0:	dc400115 	stw	r17,4(sp)
    abe4:	2823883a 	mov	r17,r5
    abe8:	000ac600 	call	ac60 <strlen>
    abec:	81400217 	ldw	r5,8(r16)
    abf0:	00c00074 	movhi	r3,1
    abf4:	18ecf804 	addi	r3,r3,-19488
    abf8:	880d883a 	mov	r6,r17
    abfc:	8009883a 	mov	r4,r16
    ac00:	28c00115 	stw	r3,4(r5)
    ac04:	100f883a 	mov	r7,r2
    ac08:	183ee83a 	callr	r3
    ac0c:	047fffc4 	movi	r17,-1
    ac10:	14400926 	beq	r2,r17,ac38 <_puts_r+0x6c>
    ac14:	81400217 	ldw	r5,8(r16)
    ac18:	8009883a 	mov	r4,r16
    ac1c:	01800074 	movhi	r6,1
    ac20:	31b40304 	addi	r6,r6,-12276
    ac24:	28800117 	ldw	r2,4(r5)
    ac28:	01c00044 	movi	r7,1
    ac2c:	103ee83a 	callr	r2
    ac30:	14400126 	beq	r2,r17,ac38 <_puts_r+0x6c>
    ac34:	0005883a 	mov	r2,zero
    ac38:	dfc00217 	ldw	ra,8(sp)
    ac3c:	dc400117 	ldw	r17,4(sp)
    ac40:	dc000017 	ldw	r16,0(sp)
    ac44:	dec00304 	addi	sp,sp,12
    ac48:	f800283a 	ret

0000ac4c <puts>:
    ac4c:	00800074 	movhi	r2,1
    ac50:	10b4d604 	addi	r2,r2,-11432
    ac54:	200b883a 	mov	r5,r4
    ac58:	11000017 	ldw	r4,0(r2)
    ac5c:	000abcc1 	jmpi	abcc <_puts_r>

0000ac60 <strlen>:
    ac60:	20800007 	ldb	r2,0(r4)
    ac64:	10000626 	beq	r2,zero,ac80 <strlen+0x20>
    ac68:	2005883a 	mov	r2,r4
    ac6c:	10800044 	addi	r2,r2,1
    ac70:	10c00007 	ldb	r3,0(r2)
    ac74:	183ffd1e 	bne	r3,zero,ac6c <strlen+0xc>
    ac78:	1105c83a 	sub	r2,r2,r4
    ac7c:	f800283a 	ret
    ac80:	0005883a 	mov	r2,zero
    ac84:	f800283a 	ret

0000ac88 <___vfprintf_internal_r>:
    ac88:	deffe004 	addi	sp,sp,-128
    ac8c:	d8c00804 	addi	r3,sp,32
    ac90:	ddc01d15 	stw	r23,116(sp)
    ac94:	dd401b15 	stw	r21,108(sp)
    ac98:	dd001a15 	stw	r20,104(sp)
    ac9c:	dcc01915 	stw	r19,100(sp)
    aca0:	dc801815 	stw	r18,96(sp)
    aca4:	dc001615 	stw	r16,88(sp)
    aca8:	dfc01f15 	stw	ra,124(sp)
    acac:	df001e15 	stw	fp,120(sp)
    acb0:	dd801c15 	stw	r22,112(sp)
    acb4:	dc401715 	stw	r17,92(sp)
    acb8:	d9000f15 	stw	r4,60(sp)
    acbc:	d9c00e15 	stw	r7,56(sp)
    acc0:	3021883a 	mov	r16,r6
    acc4:	0025883a 	mov	r18,zero
    acc8:	d8001415 	stw	zero,80(sp)
    accc:	d8000d15 	stw	zero,52(sp)
    acd0:	0029883a 	mov	r20,zero
    acd4:	d8000b15 	stw	zero,44(sp)
    acd8:	d8000c15 	stw	zero,48(sp)
    acdc:	d8001315 	stw	zero,76(sp)
    ace0:	d8001015 	stw	zero,64(sp)
    ace4:	002b883a 	mov	r21,zero
    ace8:	04c00044 	movi	r19,1
    acec:	d8c00a15 	stw	r3,40(sp)
    acf0:	282f883a 	mov	r23,r5
    acf4:	80c00003 	ldbu	r3,0(r16)
    acf8:	84000044 	addi	r16,r16,1
    acfc:	18803fcc 	andi	r2,r3,255
    ad00:	1080201c 	xori	r2,r2,128
    ad04:	10bfe004 	addi	r2,r2,-128
    ad08:	10001426 	beq	r2,zero,ad5c <___vfprintf_internal_r+0xd4>
    ad0c:	acc03026 	beq	r21,r19,add0 <___vfprintf_internal_r+0x148>
    ad10:	9d401f16 	blt	r19,r21,ad90 <___vfprintf_internal_r+0x108>
    ad14:	a83ff71e 	bne	r21,zero,acf4 <___vfprintf_internal_r+0x6c>
    ad18:	01000944 	movi	r4,37
    ad1c:	1100d926 	beq	r2,r4,b084 <___vfprintf_internal_r+0x3fc>
    ad20:	b8800117 	ldw	r2,4(r23)
    ad24:	d9000f17 	ldw	r4,60(sp)
    ad28:	d8c00905 	stb	r3,36(sp)
    ad2c:	b80b883a 	mov	r5,r23
    ad30:	d9800904 	addi	r6,sp,36
    ad34:	01c00044 	movi	r7,1
    ad38:	103ee83a 	callr	r2
    ad3c:	1000a31e 	bne	r2,zero,afcc <___vfprintf_internal_r+0x344>
    ad40:	80c00003 	ldbu	r3,0(r16)
    ad44:	94800044 	addi	r18,r18,1
    ad48:	84000044 	addi	r16,r16,1
    ad4c:	18803fcc 	andi	r2,r3,255
    ad50:	1080201c 	xori	r2,r2,128
    ad54:	10bfe004 	addi	r2,r2,-128
    ad58:	103fec1e 	bne	r2,zero,ad0c <___vfprintf_internal_r+0x84>
    ad5c:	9005883a 	mov	r2,r18
    ad60:	dfc01f17 	ldw	ra,124(sp)
    ad64:	df001e17 	ldw	fp,120(sp)
    ad68:	ddc01d17 	ldw	r23,116(sp)
    ad6c:	dd801c17 	ldw	r22,112(sp)
    ad70:	dd401b17 	ldw	r21,108(sp)
    ad74:	dd001a17 	ldw	r20,104(sp)
    ad78:	dcc01917 	ldw	r19,100(sp)
    ad7c:	dc801817 	ldw	r18,96(sp)
    ad80:	dc401717 	ldw	r17,92(sp)
    ad84:	dc001617 	ldw	r16,88(sp)
    ad88:	dec02004 	addi	sp,sp,128
    ad8c:	f800283a 	ret
    ad90:	01000084 	movi	r4,2
    ad94:	a9001226 	beq	r21,r4,ade0 <___vfprintf_internal_r+0x158>
    ad98:	010000c4 	movi	r4,3
    ad9c:	a93fd51e 	bne	r21,r4,acf4 <___vfprintf_internal_r+0x6c>
    ada0:	1c7ff404 	addi	r17,r3,-48
    ada4:	8c403fcc 	andi	r17,r17,255
    ada8:	01000244 	movi	r4,9
    adac:	24401b36 	bltu	r4,r17,ae1c <___vfprintf_internal_r+0x194>
    adb0:	d9000b17 	ldw	r4,44(sp)
    adb4:	00bfffc4 	movi	r2,-1
    adb8:	2080ea26 	beq	r4,r2,b164 <___vfprintf_internal_r+0x4dc>
    adbc:	01400284 	movi	r5,10
    adc0:	000aa740 	call	aa74 <__mulsi3>
    adc4:	88a3883a 	add	r17,r17,r2
    adc8:	dc400b15 	stw	r17,44(sp)
    adcc:	003fc906 	br	acf4 <___vfprintf_internal_r+0x6c>
    add0:	01000c04 	movi	r4,48
    add4:	1100de26 	beq	r2,r4,b150 <___vfprintf_internal_r+0x4c8>
    add8:	01000944 	movi	r4,37
    addc:	1100fd26 	beq	r2,r4,b1d4 <___vfprintf_internal_r+0x54c>
    ade0:	1c7ff404 	addi	r17,r3,-48
    ade4:	8c403fcc 	andi	r17,r17,255
    ade8:	01000244 	movi	r4,9
    adec:	24400936 	bltu	r4,r17,ae14 <___vfprintf_internal_r+0x18c>
    adf0:	d9000c17 	ldw	r4,48(sp)
    adf4:	00bfffc4 	movi	r2,-1
    adf8:	2080d826 	beq	r4,r2,b15c <___vfprintf_internal_r+0x4d4>
    adfc:	01400284 	movi	r5,10
    ae00:	000aa740 	call	aa74 <__mulsi3>
    ae04:	88a3883a 	add	r17,r17,r2
    ae08:	dc400c15 	stw	r17,48(sp)
    ae0c:	05400084 	movi	r21,2
    ae10:	003fb806 	br	acf4 <___vfprintf_internal_r+0x6c>
    ae14:	01000b84 	movi	r4,46
    ae18:	1100a726 	beq	r2,r4,b0b8 <___vfprintf_internal_r+0x430>
    ae1c:	01401b04 	movi	r5,108
    ae20:	1140a326 	beq	r2,r5,b0b0 <___vfprintf_internal_r+0x428>
    ae24:	d9000b17 	ldw	r4,44(sp)
    ae28:	00bfffc4 	movi	r2,-1
    ae2c:	2080e626 	beq	r4,r2,b1c8 <___vfprintf_internal_r+0x540>
    ae30:	d8001015 	stw	zero,64(sp)
    ae34:	18ffea04 	addi	r3,r3,-88
    ae38:	18c03fcc 	andi	r3,r3,255
    ae3c:	00800804 	movi	r2,32
    ae40:	10c0022e 	bgeu	r2,r3,ae4c <___vfprintf_internal_r+0x1c4>
    ae44:	002b883a 	mov	r21,zero
    ae48:	003faa06 	br	acf4 <___vfprintf_internal_r+0x6c>
    ae4c:	18c7883a 	add	r3,r3,r3
    ae50:	18c7883a 	add	r3,r3,r3
    ae54:	01400074 	movhi	r5,1
    ae58:	296b9a04 	addi	r5,r5,-20888
    ae5c:	1947883a 	add	r3,r3,r5
    ae60:	18800017 	ldw	r2,0(r3)
    ae64:	1000683a 	jmp	r2
    ae68:	0000b200 	call	b20 <__alt_mem_onchip_mem-0x74e0>
    ae6c:	0000ae44 	movi	zero,697
    ae70:	0000ae44 	movi	zero,697
    ae74:	0000ae44 	movi	zero,697
    ae78:	0000ae44 	movi	zero,697
    ae7c:	0000ae44 	movi	zero,697
    ae80:	0000ae44 	movi	zero,697
    ae84:	0000ae44 	movi	zero,697
    ae88:	0000ae44 	movi	zero,697
    ae8c:	0000ae44 	movi	zero,697
    ae90:	0000ae44 	movi	zero,697
    ae94:	0000b210 	cmplti	zero,zero,712
    ae98:	0000aeec 	andhi	zero,zero,699
    ae9c:	0000ae44 	movi	zero,697
    aea0:	0000ae44 	movi	zero,697
    aea4:	0000ae44 	movi	zero,697
    aea8:	0000ae44 	movi	zero,697
    aeac:	0000aeec 	andhi	zero,zero,699
    aeb0:	0000ae44 	movi	zero,697
    aeb4:	0000ae44 	movi	zero,697
    aeb8:	0000ae44 	movi	zero,697
    aebc:	0000ae44 	movi	zero,697
    aec0:	0000ae44 	movi	zero,697
    aec4:	0000afd4 	movui	zero,703
    aec8:	0000ae44 	movi	zero,697
    aecc:	0000ae44 	movi	zero,697
    aed0:	0000ae44 	movi	zero,697
    aed4:	0000b25c 	xori	zero,zero,713
    aed8:	0000ae44 	movi	zero,697
    aedc:	0000afd8 	cmpnei	zero,zero,703
    aee0:	0000ae44 	movi	zero,697
    aee4:	0000ae44 	movi	zero,697
    aee8:	0000b208 	cmpgei	zero,zero,712
    aeec:	d8c00d17 	ldw	r3,52(sp)
    aef0:	18003926 	beq	r3,zero,afd8 <___vfprintf_internal_r+0x350>
    aef4:	d9000e17 	ldw	r4,56(sp)
    aef8:	00c00044 	movi	r3,1
    aefc:	25400017 	ldw	r21,0(r4)
    af00:	21000104 	addi	r4,r4,4
    af04:	d9000e15 	stw	r4,56(sp)
    af08:	d8c00d15 	stw	r3,52(sp)
    af0c:	a8012116 	blt	r21,zero,b394 <___vfprintf_internal_r+0x70c>
    af10:	d8001215 	stw	zero,72(sp)
    af14:	d823883a 	mov	r17,sp
    af18:	a800371e 	bne	r21,zero,aff8 <___vfprintf_internal_r+0x370>
    af1c:	d9400b17 	ldw	r5,44(sp)
    af20:	d809883a 	mov	r4,sp
    af24:	01400b0e 	bge	zero,r5,af54 <___vfprintf_internal_r+0x2cc>
    af28:	d8800b17 	ldw	r2,44(sp)
    af2c:	d823883a 	mov	r17,sp
    af30:	00c00c04 	movi	r3,48
    af34:	00000206 	br	af40 <___vfprintf_internal_r+0x2b8>
    af38:	d9400a17 	ldw	r5,40(sp)
    af3c:	89400426 	beq	r17,r5,af50 <___vfprintf_internal_r+0x2c8>
    af40:	88c00005 	stb	r3,0(r17)
    af44:	10bfffc4 	addi	r2,r2,-1
    af48:	8c400044 	addi	r17,r17,1
    af4c:	103ffa1e 	bne	r2,zero,af38 <___vfprintf_internal_r+0x2b0>
    af50:	892bc83a 	sub	r21,r17,r4
    af54:	d8c01217 	ldw	r3,72(sp)
    af58:	d9000c17 	ldw	r4,48(sp)
    af5c:	a8c5883a 	add	r2,r21,r3
    af60:	d8c01017 	ldw	r3,64(sp)
    af64:	2085c83a 	sub	r2,r4,r2
    af68:	d8801115 	stw	r2,68(sp)
    af6c:	18007f26 	beq	r3,zero,b16c <___vfprintf_internal_r+0x4e4>
    af70:	d8c01217 	ldw	r3,72(sp)
    af74:	1800fa1e 	bne	r3,zero,b360 <___vfprintf_internal_r+0x6d8>
    af78:	d8c01117 	ldw	r3,68(sp)
    af7c:	00c0620e 	bge	zero,r3,b108 <___vfprintf_internal_r+0x480>
    af80:	00800c04 	movi	r2,48
    af84:	d88008c5 	stb	r2,35(sp)
    af88:	b805883a 	mov	r2,r23
    af8c:	dc001215 	stw	r16,72(sp)
    af90:	882f883a 	mov	r23,r17
    af94:	1f3fffc4 	addi	fp,r3,-1
    af98:	05bfffc4 	movi	r22,-1
    af9c:	dc000f17 	ldw	r16,60(sp)
    afa0:	1023883a 	mov	r17,r2
    afa4:	00000206 	br	afb0 <___vfprintf_internal_r+0x328>
    afa8:	e73fffc4 	addi	fp,fp,-1
    afac:	e580fc26 	beq	fp,r22,b3a0 <___vfprintf_internal_r+0x718>
    afb0:	88800117 	ldw	r2,4(r17)
    afb4:	8009883a 	mov	r4,r16
    afb8:	880b883a 	mov	r5,r17
    afbc:	d98008c4 	addi	r6,sp,35
    afc0:	01c00044 	movi	r7,1
    afc4:	103ee83a 	callr	r2
    afc8:	103ff726 	beq	r2,zero,afa8 <___vfprintf_internal_r+0x320>
    afcc:	04bfffc4 	movi	r18,-1
    afd0:	003f6206 	br	ad5c <___vfprintf_internal_r+0xd4>
    afd4:	05000204 	movi	r20,8
    afd8:	d9400e17 	ldw	r5,56(sp)
    afdc:	2d400017 	ldw	r21,0(r5)
    afe0:	29400104 	addi	r5,r5,4
    afe4:	d9400e15 	stw	r5,56(sp)
    afe8:	d8000d15 	stw	zero,52(sp)
    afec:	d8001215 	stw	zero,72(sp)
    aff0:	d823883a 	mov	r17,sp
    aff4:	a83fc926 	beq	r21,zero,af1c <___vfprintf_internal_r+0x294>
    aff8:	05800244 	movi	r22,9
    affc:	dc001115 	stw	r16,68(sp)
    b000:	df001417 	ldw	fp,80(sp)
    b004:	00000506 	br	b01c <___vfprintf_internal_r+0x394>
    b008:	15400c04 	addi	r21,r2,48
    b00c:	8d400005 	stb	r21,0(r17)
    b010:	802b883a 	mov	r21,r16
    b014:	8c400044 	addi	r17,r17,1
    b018:	80000f26 	beq	r16,zero,b058 <___vfprintf_internal_r+0x3d0>
    b01c:	a809883a 	mov	r4,r21
    b020:	a00b883a 	mov	r5,r20
    b024:	000a4b00 	call	a4b0 <__udivsi3>
    b028:	a009883a 	mov	r4,r20
    b02c:	100b883a 	mov	r5,r2
    b030:	1021883a 	mov	r16,r2
    b034:	000aa740 	call	aa74 <__mulsi3>
    b038:	a885c83a 	sub	r2,r21,r2
    b03c:	b0bff20e 	bge	r22,r2,b008 <___vfprintf_internal_r+0x380>
    b040:	e0000e26 	beq	fp,zero,b07c <___vfprintf_internal_r+0x3f4>
    b044:	15400dc4 	addi	r21,r2,55
    b048:	8d400005 	stb	r21,0(r17)
    b04c:	802b883a 	mov	r21,r16
    b050:	8c400044 	addi	r17,r17,1
    b054:	803ff11e 	bne	r16,zero,b01c <___vfprintf_internal_r+0x394>
    b058:	d9000b17 	ldw	r4,44(sp)
    b05c:	8eebc83a 	sub	r21,r17,sp
    b060:	dc001117 	ldw	r16,68(sp)
    b064:	2545c83a 	sub	r2,r4,r21
    b068:	d809883a 	mov	r4,sp
    b06c:	00bfb90e 	bge	zero,r2,af54 <___vfprintf_internal_r+0x2cc>
    b070:	d8c00a17 	ldw	r3,40(sp)
    b074:	88ffae36 	bltu	r17,r3,af30 <___vfprintf_internal_r+0x2a8>
    b078:	003fb606 	br	af54 <___vfprintf_internal_r+0x2cc>
    b07c:	154015c4 	addi	r21,r2,87
    b080:	003fe206 	br	b00c <___vfprintf_internal_r+0x384>
    b084:	00c00044 	movi	r3,1
    b088:	013fffc4 	movi	r4,-1
    b08c:	d8c00d15 	stw	r3,52(sp)
    b090:	d9000b15 	stw	r4,44(sp)
    b094:	d8001415 	stw	zero,80(sp)
    b098:	05000284 	movi	r20,10
    b09c:	d9000c15 	stw	r4,48(sp)
    b0a0:	d8001315 	stw	zero,76(sp)
    b0a4:	d8001015 	stw	zero,64(sp)
    b0a8:	182b883a 	mov	r21,r3
    b0ac:	003f1106 	br	acf4 <___vfprintf_internal_r+0x6c>
    b0b0:	00c00044 	movi	r3,1
    b0b4:	d8c01315 	stw	r3,76(sp)
    b0b8:	054000c4 	movi	r21,3
    b0bc:	003f0d06 	br	acf4 <___vfprintf_internal_r+0x6c>
    b0c0:	d8c01117 	ldw	r3,68(sp)
    b0c4:	dc001517 	ldw	r16,84(sp)
    b0c8:	8805883a 	mov	r2,r17
    b0cc:	90e5883a 	add	r18,r18,r3
    b0d0:	b823883a 	mov	r17,r23
    b0d4:	102f883a 	mov	r23,r2
    b0d8:	d8c01217 	ldw	r3,72(sp)
    b0dc:	18000a26 	beq	r3,zero,b108 <___vfprintf_internal_r+0x480>
    b0e0:	b8800117 	ldw	r2,4(r23)
    b0e4:	d9000f17 	ldw	r4,60(sp)
    b0e8:	00c00b44 	movi	r3,45
    b0ec:	d8c00905 	stb	r3,36(sp)
    b0f0:	b80b883a 	mov	r5,r23
    b0f4:	d9800904 	addi	r6,sp,36
    b0f8:	01c00044 	movi	r7,1
    b0fc:	103ee83a 	callr	r2
    b100:	103fb21e 	bne	r2,zero,afcc <___vfprintf_internal_r+0x344>
    b104:	94800044 	addi	r18,r18,1
    b108:	8d6dc83a 	sub	r22,r17,r21
    b10c:	057f4d0e 	bge	zero,r21,ae44 <___vfprintf_internal_r+0x1bc>
    b110:	dd400f17 	ldw	r21,60(sp)
    b114:	00000206 	br	b120 <___vfprintf_internal_r+0x498>
    b118:	94800044 	addi	r18,r18,1
    b11c:	8dbf4926 	beq	r17,r22,ae44 <___vfprintf_internal_r+0x1bc>
    b120:	8c7fffc4 	addi	r17,r17,-1
    b124:	88c00003 	ldbu	r3,0(r17)
    b128:	b8800117 	ldw	r2,4(r23)
    b12c:	a809883a 	mov	r4,r21
    b130:	d8c00905 	stb	r3,36(sp)
    b134:	b80b883a 	mov	r5,r23
    b138:	d9800904 	addi	r6,sp,36
    b13c:	01c00044 	movi	r7,1
    b140:	103ee83a 	callr	r2
    b144:	103ff426 	beq	r2,zero,b118 <___vfprintf_internal_r+0x490>
    b148:	04bfffc4 	movi	r18,-1
    b14c:	003f0306 	br	ad5c <___vfprintf_internal_r+0xd4>
    b150:	dd401015 	stw	r21,64(sp)
    b154:	05400084 	movi	r21,2
    b158:	003ee606 	br	acf4 <___vfprintf_internal_r+0x6c>
    b15c:	0005883a 	mov	r2,zero
    b160:	003f2806 	br	ae04 <___vfprintf_internal_r+0x17c>
    b164:	0005883a 	mov	r2,zero
    b168:	003f1606 	br	adc4 <___vfprintf_internal_r+0x13c>
    b16c:	d8c01117 	ldw	r3,68(sp)
    b170:	00ffd90e 	bge	zero,r3,b0d8 <___vfprintf_internal_r+0x450>
    b174:	00800804 	movi	r2,32
    b178:	d8800885 	stb	r2,34(sp)
    b17c:	b805883a 	mov	r2,r23
    b180:	dc001515 	stw	r16,84(sp)
    b184:	882f883a 	mov	r23,r17
    b188:	1f3fffc4 	addi	fp,r3,-1
    b18c:	05bfffc4 	movi	r22,-1
    b190:	dc000f17 	ldw	r16,60(sp)
    b194:	1023883a 	mov	r17,r2
    b198:	00000206 	br	b1a4 <___vfprintf_internal_r+0x51c>
    b19c:	e73fffc4 	addi	fp,fp,-1
    b1a0:	e5bfc726 	beq	fp,r22,b0c0 <___vfprintf_internal_r+0x438>
    b1a4:	88800117 	ldw	r2,4(r17)
    b1a8:	8009883a 	mov	r4,r16
    b1ac:	880b883a 	mov	r5,r17
    b1b0:	d9800884 	addi	r6,sp,34
    b1b4:	01c00044 	movi	r7,1
    b1b8:	103ee83a 	callr	r2
    b1bc:	103ff726 	beq	r2,zero,b19c <___vfprintf_internal_r+0x514>
    b1c0:	04bfffc4 	movi	r18,-1
    b1c4:	003ee506 	br	ad5c <___vfprintf_internal_r+0xd4>
    b1c8:	01000044 	movi	r4,1
    b1cc:	d9000b15 	stw	r4,44(sp)
    b1d0:	003f1806 	br	ae34 <___vfprintf_internal_r+0x1ac>
    b1d4:	b8c00117 	ldw	r3,4(r23)
    b1d8:	d9000f17 	ldw	r4,60(sp)
    b1dc:	d8800905 	stb	r2,36(sp)
    b1e0:	b80b883a 	mov	r5,r23
    b1e4:	d9800904 	addi	r6,sp,36
    b1e8:	a80f883a 	mov	r7,r21
    b1ec:	183ee83a 	callr	r3
    b1f0:	103f761e 	bne	r2,zero,afcc <___vfprintf_internal_r+0x344>
    b1f4:	94800044 	addi	r18,r18,1
    b1f8:	002b883a 	mov	r21,zero
    b1fc:	003ebd06 	br	acf4 <___vfprintf_internal_r+0x6c>
    b200:	00c00044 	movi	r3,1
    b204:	d8c01415 	stw	r3,80(sp)
    b208:	05000404 	movi	r20,16
    b20c:	003f7206 	br	afd8 <___vfprintf_internal_r+0x350>
    b210:	d9000c17 	ldw	r4,48(sp)
    b214:	9900420e 	bge	r19,r4,b320 <___vfprintf_internal_r+0x698>
    b218:	df000f17 	ldw	fp,60(sp)
    b21c:	25bfffc4 	addi	r22,r4,-1
    b220:	00800804 	movi	r2,32
    b224:	d8800845 	stb	r2,33(sp)
    b228:	b023883a 	mov	r17,r22
    b22c:	057fffc4 	movi	r21,-1
    b230:	8c7fffc4 	addi	r17,r17,-1
    b234:	8d403926 	beq	r17,r21,b31c <___vfprintf_internal_r+0x694>
    b238:	b8800117 	ldw	r2,4(r23)
    b23c:	e009883a 	mov	r4,fp
    b240:	b80b883a 	mov	r5,r23
    b244:	d9800844 	addi	r6,sp,33
    b248:	01c00044 	movi	r7,1
    b24c:	103ee83a 	callr	r2
    b250:	103ff726 	beq	r2,zero,b230 <___vfprintf_internal_r+0x5a8>
    b254:	04bfffc4 	movi	r18,-1
    b258:	003ec006 	br	ad5c <___vfprintf_internal_r+0xd4>
    b25c:	d9000e17 	ldw	r4,56(sp)
    b260:	d8c00e17 	ldw	r3,56(sp)
    b264:	21000017 	ldw	r4,0(r4)
    b268:	18c00104 	addi	r3,r3,4
    b26c:	d8c00e15 	stw	r3,56(sp)
    b270:	d9001215 	stw	r4,72(sp)
    b274:	000ac600 	call	ac60 <strlen>
    b278:	d9000c17 	ldw	r4,48(sp)
    b27c:	102d883a 	mov	r22,r2
    b280:	20b9c83a 	sub	fp,r4,r2
    b284:	07001b0e 	bge	zero,fp,b2f4 <___vfprintf_internal_r+0x66c>
    b288:	00800804 	movi	r2,32
    b28c:	d8800805 	stb	r2,32(sp)
    b290:	b805883a 	mov	r2,r23
    b294:	dc001115 	stw	r16,68(sp)
    b298:	b02f883a 	mov	r23,r22
    b29c:	e47fffc4 	addi	r17,fp,-1
    b2a0:	902d883a 	mov	r22,r18
    b2a4:	057fffc4 	movi	r21,-1
    b2a8:	dc000f17 	ldw	r16,60(sp)
    b2ac:	1025883a 	mov	r18,r2
    b2b0:	00000206 	br	b2bc <___vfprintf_internal_r+0x634>
    b2b4:	8c7fffc4 	addi	r17,r17,-1
    b2b8:	8d400826 	beq	r17,r21,b2dc <___vfprintf_internal_r+0x654>
    b2bc:	90800117 	ldw	r2,4(r18)
    b2c0:	8009883a 	mov	r4,r16
    b2c4:	900b883a 	mov	r5,r18
    b2c8:	d9800804 	addi	r6,sp,32
    b2cc:	01c00044 	movi	r7,1
    b2d0:	103ee83a 	callr	r2
    b2d4:	103ff726 	beq	r2,zero,b2b4 <___vfprintf_internal_r+0x62c>
    b2d8:	003f3c06 	br	afcc <___vfprintf_internal_r+0x344>
    b2dc:	dc001117 	ldw	r16,68(sp)
    b2e0:	9005883a 	mov	r2,r18
    b2e4:	b025883a 	mov	r18,r22
    b2e8:	9725883a 	add	r18,r18,fp
    b2ec:	b82d883a 	mov	r22,r23
    b2f0:	102f883a 	mov	r23,r2
    b2f4:	b8800117 	ldw	r2,4(r23)
    b2f8:	d9000f17 	ldw	r4,60(sp)
    b2fc:	d9801217 	ldw	r6,72(sp)
    b300:	b80b883a 	mov	r5,r23
    b304:	b00f883a 	mov	r7,r22
    b308:	103ee83a 	callr	r2
    b30c:	103f2f1e 	bne	r2,zero,afcc <___vfprintf_internal_r+0x344>
    b310:	95a5883a 	add	r18,r18,r22
    b314:	002b883a 	mov	r21,zero
    b318:	003e7606 	br	acf4 <___vfprintf_internal_r+0x6c>
    b31c:	95a5883a 	add	r18,r18,r22
    b320:	d9400e17 	ldw	r5,56(sp)
    b324:	b8800117 	ldw	r2,4(r23)
    b328:	d9000f17 	ldw	r4,60(sp)
    b32c:	28c00017 	ldw	r3,0(r5)
    b330:	d9800904 	addi	r6,sp,36
    b334:	b80b883a 	mov	r5,r23
    b338:	d8c00905 	stb	r3,36(sp)
    b33c:	d8c00e17 	ldw	r3,56(sp)
    b340:	01c00044 	movi	r7,1
    b344:	1c400104 	addi	r17,r3,4
    b348:	103ee83a 	callr	r2
    b34c:	103f1f1e 	bne	r2,zero,afcc <___vfprintf_internal_r+0x344>
    b350:	94800044 	addi	r18,r18,1
    b354:	dc400e15 	stw	r17,56(sp)
    b358:	002b883a 	mov	r21,zero
    b35c:	003e6506 	br	acf4 <___vfprintf_internal_r+0x6c>
    b360:	b8800117 	ldw	r2,4(r23)
    b364:	d9000f17 	ldw	r4,60(sp)
    b368:	00c00b44 	movi	r3,45
    b36c:	d8c00905 	stb	r3,36(sp)
    b370:	b80b883a 	mov	r5,r23
    b374:	d9800904 	addi	r6,sp,36
    b378:	01c00044 	movi	r7,1
    b37c:	103ee83a 	callr	r2
    b380:	103f121e 	bne	r2,zero,afcc <___vfprintf_internal_r+0x344>
    b384:	d8c01117 	ldw	r3,68(sp)
    b388:	94800044 	addi	r18,r18,1
    b38c:	00fefc16 	blt	zero,r3,af80 <___vfprintf_internal_r+0x2f8>
    b390:	003f5d06 	br	b108 <___vfprintf_internal_r+0x480>
    b394:	056bc83a 	sub	r21,zero,r21
    b398:	d8c01215 	stw	r3,72(sp)
    b39c:	003f1406 	br	aff0 <___vfprintf_internal_r+0x368>
    b3a0:	d8c01117 	ldw	r3,68(sp)
    b3a4:	8805883a 	mov	r2,r17
    b3a8:	dc001217 	ldw	r16,72(sp)
    b3ac:	b823883a 	mov	r17,r23
    b3b0:	90e5883a 	add	r18,r18,r3
    b3b4:	102f883a 	mov	r23,r2
    b3b8:	003f5306 	br	b108 <___vfprintf_internal_r+0x480>

0000b3bc <__vfprintf_internal>:
    b3bc:	00800074 	movhi	r2,1
    b3c0:	10b4d604 	addi	r2,r2,-11432
    b3c4:	2007883a 	mov	r3,r4
    b3c8:	11000017 	ldw	r4,0(r2)
    b3cc:	2805883a 	mov	r2,r5
    b3d0:	300f883a 	mov	r7,r6
    b3d4:	180b883a 	mov	r5,r3
    b3d8:	100d883a 	mov	r6,r2
    b3dc:	000ac881 	jmpi	ac88 <___vfprintf_internal_r>

0000b3e0 <__sfvwrite_small_dev>:
    b3e0:	2880000b 	ldhu	r2,0(r5)
    b3e4:	defffa04 	addi	sp,sp,-24
    b3e8:	dcc00315 	stw	r19,12(sp)
    b3ec:	10c0020c 	andi	r3,r2,8
    b3f0:	18ffffcc 	andi	r3,r3,65535
    b3f4:	18e0001c 	xori	r3,r3,32768
    b3f8:	dc800215 	stw	r18,8(sp)
    b3fc:	dc400115 	stw	r17,4(sp)
    b400:	dfc00515 	stw	ra,20(sp)
    b404:	dd000415 	stw	r20,16(sp)
    b408:	dc000015 	stw	r16,0(sp)
    b40c:	18e00004 	addi	r3,r3,-32768
    b410:	2825883a 	mov	r18,r5
    b414:	2027883a 	mov	r19,r4
    b418:	3023883a 	mov	r17,r6
    b41c:	18002626 	beq	r3,zero,b4b8 <__sfvwrite_small_dev+0xd8>
    b420:	2940008f 	ldh	r5,2(r5)
    b424:	28001016 	blt	r5,zero,b468 <__sfvwrite_small_dev+0x88>
    b428:	01c01a0e 	bge	zero,r7,b494 <__sfvwrite_small_dev+0xb4>
    b42c:	3821883a 	mov	r16,r7
    b430:	05010004 	movi	r20,1024
    b434:	00000306 	br	b444 <__sfvwrite_small_dev+0x64>
    b438:	88a3883a 	add	r17,r17,r2
    b43c:	0400150e 	bge	zero,r16,b494 <__sfvwrite_small_dev+0xb4>
    b440:	9140008f 	ldh	r5,2(r18)
    b444:	880d883a 	mov	r6,r17
    b448:	9809883a 	mov	r4,r19
    b44c:	800f883a 	mov	r7,r16
    b450:	a400010e 	bge	r20,r16,b458 <__sfvwrite_small_dev+0x78>
    b454:	01c10004 	movi	r7,1024
    b458:	000b4c00 	call	b4c0 <_write_r>
    b45c:	80a1c83a 	sub	r16,r16,r2
    b460:	00bff516 	blt	zero,r2,b438 <__sfvwrite_small_dev+0x58>
    b464:	9080000b 	ldhu	r2,0(r18)
    b468:	10801014 	ori	r2,r2,64
    b46c:	9080000d 	sth	r2,0(r18)
    b470:	00bfffc4 	movi	r2,-1
    b474:	dfc00517 	ldw	ra,20(sp)
    b478:	dd000417 	ldw	r20,16(sp)
    b47c:	dcc00317 	ldw	r19,12(sp)
    b480:	dc800217 	ldw	r18,8(sp)
    b484:	dc400117 	ldw	r17,4(sp)
    b488:	dc000017 	ldw	r16,0(sp)
    b48c:	dec00604 	addi	sp,sp,24
    b490:	f800283a 	ret
    b494:	0005883a 	mov	r2,zero
    b498:	dfc00517 	ldw	ra,20(sp)
    b49c:	dd000417 	ldw	r20,16(sp)
    b4a0:	dcc00317 	ldw	r19,12(sp)
    b4a4:	dc800217 	ldw	r18,8(sp)
    b4a8:	dc400117 	ldw	r17,4(sp)
    b4ac:	dc000017 	ldw	r16,0(sp)
    b4b0:	dec00604 	addi	sp,sp,24
    b4b4:	f800283a 	ret
    b4b8:	00bfffc4 	movi	r2,-1
    b4bc:	003fed06 	br	b474 <__sfvwrite_small_dev+0x94>

0000b4c0 <_write_r>:
    b4c0:	defffd04 	addi	sp,sp,-12
    b4c4:	dc400115 	stw	r17,4(sp)
    b4c8:	dc000015 	stw	r16,0(sp)
    b4cc:	2023883a 	mov	r17,r4
    b4d0:	04000074 	movhi	r16,1
    b4d4:	8435b604 	addi	r16,r16,-10536
    b4d8:	2809883a 	mov	r4,r5
    b4dc:	300b883a 	mov	r5,r6
    b4e0:	380d883a 	mov	r6,r7
    b4e4:	dfc00215 	stw	ra,8(sp)
    b4e8:	80000015 	stw	zero,0(r16)
    b4ec:	000b8800 	call	b880 <write>
    b4f0:	00ffffc4 	movi	r3,-1
    b4f4:	10c00526 	beq	r2,r3,b50c <_write_r+0x4c>
    b4f8:	dfc00217 	ldw	ra,8(sp)
    b4fc:	dc400117 	ldw	r17,4(sp)
    b500:	dc000017 	ldw	r16,0(sp)
    b504:	dec00304 	addi	sp,sp,12
    b508:	f800283a 	ret
    b50c:	80c00017 	ldw	r3,0(r16)
    b510:	183ff926 	beq	r3,zero,b4f8 <_write_r+0x38>
    b514:	88c00015 	stw	r3,0(r17)
    b518:	dfc00217 	ldw	ra,8(sp)
    b51c:	dc400117 	ldw	r17,4(sp)
    b520:	dc000017 	ldw	r16,0(sp)
    b524:	dec00304 	addi	sp,sp,12
    b528:	f800283a 	ret

0000b52c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b52c:	defff004 	addi	sp,sp,-64
    b530:	df000f15 	stw	fp,60(sp)
    b534:	df000f04 	addi	fp,sp,60
    b538:	e13ffd15 	stw	r4,-12(fp)
    b53c:	e17ffe15 	stw	r5,-8(fp)
    b540:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    b544:	00bffa84 	movi	r2,-22
    b548:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b54c:	e0bffd17 	ldw	r2,-12(fp)
    b550:	10800828 	cmpgeui	r2,r2,32
    b554:	10005c1e 	bne	r2,zero,b6c8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b558:	0005303a 	rdctl	r2,status
    b55c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b560:	e0fff317 	ldw	r3,-52(fp)
    b564:	00bfff84 	movi	r2,-2
    b568:	1884703a 	and	r2,r3,r2
    b56c:	1001703a 	wrctl	status,r2
  
  return context;
    b570:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b574:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    b578:	00c00074 	movhi	r3,1
    b57c:	18f7f504 	addi	r3,r3,-8236
    b580:	e0bffd17 	ldw	r2,-12(fp)
    b584:	100490fa 	slli	r2,r2,3
    b588:	1885883a 	add	r2,r3,r2
    b58c:	e0ffff17 	ldw	r3,-4(fp)
    b590:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    b594:	00c00074 	movhi	r3,1
    b598:	18f7f504 	addi	r3,r3,-8236
    b59c:	e0bffd17 	ldw	r2,-12(fp)
    b5a0:	100490fa 	slli	r2,r2,3
    b5a4:	1885883a 	add	r2,r3,r2
    b5a8:	10800104 	addi	r2,r2,4
    b5ac:	e0fffe17 	ldw	r3,-8(fp)
    b5b0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b5b4:	e0bfff17 	ldw	r2,-4(fp)
    b5b8:	10001f26 	beq	r2,zero,b638 <alt_irq_register+0x10c>
    b5bc:	e0bffd17 	ldw	r2,-12(fp)
    b5c0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b5c4:	0005303a 	rdctl	r2,status
    b5c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b5cc:	e0fff517 	ldw	r3,-44(fp)
    b5d0:	00bfff84 	movi	r2,-2
    b5d4:	1884703a 	and	r2,r3,r2
    b5d8:	1001703a 	wrctl	status,r2
  
  return context;
    b5dc:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b5e0:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    b5e4:	e0bff417 	ldw	r2,-48(fp)
    b5e8:	00c00044 	movi	r3,1
    b5ec:	1884983a 	sll	r2,r3,r2
    b5f0:	1007883a 	mov	r3,r2
    b5f4:	00800074 	movhi	r2,1
    b5f8:	10b5b704 	addi	r2,r2,-10532
    b5fc:	10800017 	ldw	r2,0(r2)
    b600:	1886b03a 	or	r3,r3,r2
    b604:	00800074 	movhi	r2,1
    b608:	10b5b704 	addi	r2,r2,-10532
    b60c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b610:	00800074 	movhi	r2,1
    b614:	10b5b704 	addi	r2,r2,-10532
    b618:	10800017 	ldw	r2,0(r2)
    b61c:	100170fa 	wrctl	ienable,r2
    b620:	e0bff617 	ldw	r2,-40(fp)
    b624:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b628:	e0bff717 	ldw	r2,-36(fp)
    b62c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b630:	0005883a 	mov	r2,zero
    b634:	00001f06 	br	b6b4 <alt_irq_register+0x188>
    b638:	e0bffd17 	ldw	r2,-12(fp)
    b63c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b640:	0005303a 	rdctl	r2,status
    b644:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b648:	e0fff917 	ldw	r3,-28(fp)
    b64c:	00bfff84 	movi	r2,-2
    b650:	1884703a 	and	r2,r3,r2
    b654:	1001703a 	wrctl	status,r2
  
  return context;
    b658:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b65c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    b660:	e0bff817 	ldw	r2,-32(fp)
    b664:	00c00044 	movi	r3,1
    b668:	1884983a 	sll	r2,r3,r2
    b66c:	0084303a 	nor	r2,zero,r2
    b670:	1007883a 	mov	r3,r2
    b674:	00800074 	movhi	r2,1
    b678:	10b5b704 	addi	r2,r2,-10532
    b67c:	10800017 	ldw	r2,0(r2)
    b680:	1886703a 	and	r3,r3,r2
    b684:	00800074 	movhi	r2,1
    b688:	10b5b704 	addi	r2,r2,-10532
    b68c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b690:	00800074 	movhi	r2,1
    b694:	10b5b704 	addi	r2,r2,-10532
    b698:	10800017 	ldw	r2,0(r2)
    b69c:	100170fa 	wrctl	ienable,r2
    b6a0:	e0bffa17 	ldw	r2,-24(fp)
    b6a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6a8:	e0bffb17 	ldw	r2,-20(fp)
    b6ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b6b0:	0005883a 	mov	r2,zero
    b6b4:	e0bff115 	stw	r2,-60(fp)
    b6b8:	e0bff217 	ldw	r2,-56(fp)
    b6bc:	e0bffc15 	stw	r2,-16(fp)
    b6c0:	e0bffc17 	ldw	r2,-16(fp)
    b6c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    b6c8:	e0bff117 	ldw	r2,-60(fp)
}
    b6cc:	e037883a 	mov	sp,fp
    b6d0:	df000017 	ldw	fp,0(sp)
    b6d4:	dec00104 	addi	sp,sp,4
    b6d8:	f800283a 	ret

0000b6dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b6dc:	defffc04 	addi	sp,sp,-16
    b6e0:	df000315 	stw	fp,12(sp)
    b6e4:	df000304 	addi	fp,sp,12
    b6e8:	e13ffd15 	stw	r4,-12(fp)
    b6ec:	e17ffe15 	stw	r5,-8(fp)
    b6f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b6f4:	e0fffe17 	ldw	r3,-8(fp)
    b6f8:	e0bffd17 	ldw	r2,-12(fp)
    b6fc:	18800e26 	beq	r3,r2,b738 <alt_load_section+0x5c>
  {
    while( to != end )
    b700:	00000a06 	br	b72c <alt_load_section+0x50>
    {
      *to++ = *from++;
    b704:	e0bffd17 	ldw	r2,-12(fp)
    b708:	10c00017 	ldw	r3,0(r2)
    b70c:	e0bffe17 	ldw	r2,-8(fp)
    b710:	10c00015 	stw	r3,0(r2)
    b714:	e0bffe17 	ldw	r2,-8(fp)
    b718:	10800104 	addi	r2,r2,4
    b71c:	e0bffe15 	stw	r2,-8(fp)
    b720:	e0bffd17 	ldw	r2,-12(fp)
    b724:	10800104 	addi	r2,r2,4
    b728:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b72c:	e0fffe17 	ldw	r3,-8(fp)
    b730:	e0bfff17 	ldw	r2,-4(fp)
    b734:	18bff31e 	bne	r3,r2,b704 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b738:	e037883a 	mov	sp,fp
    b73c:	df000017 	ldw	fp,0(sp)
    b740:	dec00104 	addi	sp,sp,4
    b744:	f800283a 	ret

0000b748 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b748:	defffe04 	addi	sp,sp,-8
    b74c:	dfc00115 	stw	ra,4(sp)
    b750:	df000015 	stw	fp,0(sp)
    b754:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b758:	01000074 	movhi	r4,1
    b75c:	2134e004 	addi	r4,r4,-11392
    b760:	01400074 	movhi	r5,1
    b764:	29741204 	addi	r5,r5,-12216
    b768:	01800074 	movhi	r6,1
    b76c:	31b4e004 	addi	r6,r6,-11392
    b770:	000b6dc0 	call	b6dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b774:	01000074 	movhi	r4,1
    b778:	21200804 	addi	r4,r4,-32736
    b77c:	01400074 	movhi	r5,1
    b780:	29600804 	addi	r5,r5,-32736
    b784:	01800074 	movhi	r6,1
    b788:	31a06f04 	addi	r6,r6,-32324
    b78c:	000b6dc0 	call	b6dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b790:	01000074 	movhi	r4,1
    b794:	2133a904 	addi	r4,r4,-12636
    b798:	01400074 	movhi	r5,1
    b79c:	2973a904 	addi	r5,r5,-12636
    b7a0:	01800074 	movhi	r6,1
    b7a4:	31b41204 	addi	r6,r6,-12216
    b7a8:	000b6dc0 	call	b6dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b7ac:	000c1900 	call	c190 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b7b0:	000c2c80 	call	c2c8 <alt_icache_flush_all>
}
    b7b4:	e037883a 	mov	sp,fp
    b7b8:	dfc00117 	ldw	ra,4(sp)
    b7bc:	df000017 	ldw	fp,0(sp)
    b7c0:	dec00204 	addi	sp,sp,8
    b7c4:	f800283a 	ret

0000b7c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b7c8:	defffd04 	addi	sp,sp,-12
    b7cc:	dfc00215 	stw	ra,8(sp)
    b7d0:	df000115 	stw	fp,4(sp)
    b7d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b7d8:	0009883a 	mov	r4,zero
    b7dc:	000b9a80 	call	b9a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b7e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b7e4:	000b9dc0 	call	b9dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b7e8:	01000074 	movhi	r4,1
    b7ec:	21340404 	addi	r4,r4,-12272
    b7f0:	01400074 	movhi	r5,1
    b7f4:	29740404 	addi	r5,r5,-12272
    b7f8:	01800074 	movhi	r6,1
    b7fc:	31b40404 	addi	r6,r6,-12272
    b800:	000c3d80 	call	c3d8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b804:	d120ee17 	ldw	r4,-31816(gp)
    b808:	d0e0ef17 	ldw	r3,-31812(gp)
    b80c:	d0a0f017 	ldw	r2,-31808(gp)
    b810:	180b883a 	mov	r5,r3
    b814:	100d883a 	mov	r6,r2
    b818:	00087900 	call	8790 <main>
    b81c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b820:	01000044 	movi	r4,1
    b824:	000c0c40 	call	c0c4 <close>
  exit (result);
    b828:	e13fff17 	ldw	r4,-4(fp)
    b82c:	000cc280 	call	cc28 <exit>

0000b830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b830:	defffe04 	addi	sp,sp,-8
    b834:	dfc00115 	stw	ra,4(sp)
    b838:	df000015 	stw	fp,0(sp)
    b83c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b840:	00800074 	movhi	r2,1
    b844:	10b4dd04 	addi	r2,r2,-11404
    b848:	10800017 	ldw	r2,0(r2)
    b84c:	10000526 	beq	r2,zero,b864 <alt_get_errno+0x34>
    b850:	00800074 	movhi	r2,1
    b854:	10b4dd04 	addi	r2,r2,-11404
    b858:	10800017 	ldw	r2,0(r2)
    b85c:	103ee83a 	callr	r2
    b860:	00000206 	br	b86c <alt_get_errno+0x3c>
    b864:	00800074 	movhi	r2,1
    b868:	10b5b604 	addi	r2,r2,-10536
}
    b86c:	e037883a 	mov	sp,fp
    b870:	dfc00117 	ldw	ra,4(sp)
    b874:	df000017 	ldw	fp,0(sp)
    b878:	dec00204 	addi	sp,sp,8
    b87c:	f800283a 	ret

0000b880 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b880:	defff904 	addi	sp,sp,-28
    b884:	dfc00615 	stw	ra,24(sp)
    b888:	df000515 	stw	fp,20(sp)
    b88c:	df000504 	addi	fp,sp,20
    b890:	e13ffd15 	stw	r4,-12(fp)
    b894:	e17ffe15 	stw	r5,-8(fp)
    b898:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b89c:	e0bffd17 	ldw	r2,-12(fp)
    b8a0:	10000716 	blt	r2,zero,b8c0 <write+0x40>
    b8a4:	e13ffd17 	ldw	r4,-12(fp)
    b8a8:	01400304 	movi	r5,12
    b8ac:	000aa740 	call	aa74 <__mulsi3>
    b8b0:	00c00074 	movhi	r3,1
    b8b4:	18f46a04 	addi	r3,r3,-11864
    b8b8:	10c5883a 	add	r2,r2,r3
    b8bc:	00000106 	br	b8c4 <write+0x44>
    b8c0:	0005883a 	mov	r2,zero
    b8c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b8c8:	e0bffb17 	ldw	r2,-20(fp)
    b8cc:	10001f26 	beq	r2,zero,b94c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b8d0:	e0bffb17 	ldw	r2,-20(fp)
    b8d4:	10800217 	ldw	r2,8(r2)
    b8d8:	108000cc 	andi	r2,r2,3
    b8dc:	10001726 	beq	r2,zero,b93c <write+0xbc>
    b8e0:	e0bffb17 	ldw	r2,-20(fp)
    b8e4:	10800017 	ldw	r2,0(r2)
    b8e8:	10800617 	ldw	r2,24(r2)
    b8ec:	10001326 	beq	r2,zero,b93c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b8f0:	e0bffb17 	ldw	r2,-20(fp)
    b8f4:	10800017 	ldw	r2,0(r2)
    b8f8:	10c00617 	ldw	r3,24(r2)
    b8fc:	e0bfff17 	ldw	r2,-4(fp)
    b900:	e13ffb17 	ldw	r4,-20(fp)
    b904:	e17ffe17 	ldw	r5,-8(fp)
    b908:	100d883a 	mov	r6,r2
    b90c:	183ee83a 	callr	r3
    b910:	e0bffc15 	stw	r2,-16(fp)
    b914:	e0bffc17 	ldw	r2,-16(fp)
    b918:	1000060e 	bge	r2,zero,b934 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    b91c:	000b8300 	call	b830 <alt_get_errno>
    b920:	e0fffc17 	ldw	r3,-16(fp)
    b924:	00c7c83a 	sub	r3,zero,r3
    b928:	10c00015 	stw	r3,0(r2)
        return -1;
    b92c:	00bfffc4 	movi	r2,-1
    b930:	00000a06 	br	b95c <write+0xdc>
      }
      return rval;
    b934:	e0bffc17 	ldw	r2,-16(fp)
    b938:	00000806 	br	b95c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b93c:	000b8300 	call	b830 <alt_get_errno>
    b940:	00c00344 	movi	r3,13
    b944:	10c00015 	stw	r3,0(r2)
    b948:	00000306 	br	b958 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b94c:	000b8300 	call	b830 <alt_get_errno>
    b950:	00c01444 	movi	r3,81
    b954:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    b958:	00bfffc4 	movi	r2,-1
}
    b95c:	e037883a 	mov	sp,fp
    b960:	dfc00117 	ldw	ra,4(sp)
    b964:	df000017 	ldw	fp,0(sp)
    b968:	dec00204 	addi	sp,sp,8
    b96c:	f800283a 	ret

0000b970 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b970:	defffd04 	addi	sp,sp,-12
    b974:	dfc00215 	stw	ra,8(sp)
    b978:	df000115 	stw	fp,4(sp)
    b97c:	df000104 	addi	fp,sp,4
    b980:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b984:	e13fff17 	ldw	r4,-4(fp)
    b988:	01400074 	movhi	r5,1
    b98c:	2974da04 	addi	r5,r5,-11416
    b990:	000c2280 	call	c228 <alt_dev_llist_insert>
}
    b994:	e037883a 	mov	sp,fp
    b998:	dfc00117 	ldw	ra,4(sp)
    b99c:	df000017 	ldw	fp,0(sp)
    b9a0:	dec00204 	addi	sp,sp,8
    b9a4:	f800283a 	ret

0000b9a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b9a8:	defffd04 	addi	sp,sp,-12
    b9ac:	dfc00215 	stw	ra,8(sp)
    b9b0:	df000115 	stw	fp,4(sp)
    b9b4:	df000104 	addi	fp,sp,4
    b9b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    b9bc:	000c9040 	call	c904 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b9c0:	00800044 	movi	r2,1
    b9c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b9c8:	e037883a 	mov	sp,fp
    b9cc:	dfc00117 	ldw	ra,4(sp)
    b9d0:	df000017 	ldw	fp,0(sp)
    b9d4:	dec00204 	addi	sp,sp,8
    b9d8:	f800283a 	ret

0000b9dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b9dc:	defffe04 	addi	sp,sp,-8
    b9e0:	dfc00115 	stw	ra,4(sp)
    b9e4:	df000015 	stw	fp,0(sp)
    b9e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLOCK_TIMER, sys_clock_timer);
    b9ec:	01000074 	movhi	r4,1
    b9f0:	21050804 	addi	r4,r4,5152
    b9f4:	000b883a 	mov	r5,zero
    b9f8:	01800044 	movi	r6,1
    b9fc:	01c0fa04 	movi	r7,1000
    ba00:	000bcf80 	call	bcf8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ba04:	01000074 	movhi	r4,1
    ba08:	21344a04 	addi	r4,r4,-11992
    ba0c:	000b9700 	call	b970 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ba10:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    ba14:	01000074 	movhi	r4,1
    ba18:	21345504 	addi	r4,r4,-11948
    ba1c:	000b9700 	call	b970 <alt_dev_reg>
}
    ba20:	e037883a 	mov	sp,fp
    ba24:	dfc00117 	ldw	ra,4(sp)
    ba28:	df000017 	ldw	fp,0(sp)
    ba2c:	dec00204 	addi	sp,sp,8
    ba30:	f800283a 	ret

0000ba34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ba34:	defffa04 	addi	sp,sp,-24
    ba38:	dfc00515 	stw	ra,20(sp)
    ba3c:	df000415 	stw	fp,16(sp)
    ba40:	df000404 	addi	fp,sp,16
    ba44:	e13ffd15 	stw	r4,-12(fp)
    ba48:	e17ffe15 	stw	r5,-8(fp)
    ba4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ba50:	e0bffd17 	ldw	r2,-12(fp)
    ba54:	10800017 	ldw	r2,0(r2)
    ba58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ba5c:	e0bffc17 	ldw	r2,-16(fp)
    ba60:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    ba64:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ba68:	10800217 	ldw	r2,8(r2)
    ba6c:	1809883a 	mov	r4,r3
    ba70:	e17ffe17 	ldw	r5,-8(fp)
    ba74:	e1bfff17 	ldw	r6,-4(fp)
    ba78:	100f883a 	mov	r7,r2
    ba7c:	000baf40 	call	baf4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ba80:	e037883a 	mov	sp,fp
    ba84:	dfc00117 	ldw	ra,4(sp)
    ba88:	df000017 	ldw	fp,0(sp)
    ba8c:	dec00204 	addi	sp,sp,8
    ba90:	f800283a 	ret

0000ba94 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ba94:	defffa04 	addi	sp,sp,-24
    ba98:	dfc00515 	stw	ra,20(sp)
    ba9c:	df000415 	stw	fp,16(sp)
    baa0:	df000404 	addi	fp,sp,16
    baa4:	e13ffd15 	stw	r4,-12(fp)
    baa8:	e17ffe15 	stw	r5,-8(fp)
    baac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bab0:	e0bffd17 	ldw	r2,-12(fp)
    bab4:	10800017 	ldw	r2,0(r2)
    bab8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    babc:	e0bffc17 	ldw	r2,-16(fp)
    bac0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    bac4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bac8:	10800217 	ldw	r2,8(r2)
    bacc:	1809883a 	mov	r4,r3
    bad0:	e17ffe17 	ldw	r5,-8(fp)
    bad4:	e1bfff17 	ldw	r6,-4(fp)
    bad8:	100f883a 	mov	r7,r2
    badc:	000bbe80 	call	bbe8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bae0:	e037883a 	mov	sp,fp
    bae4:	dfc00117 	ldw	ra,4(sp)
    bae8:	df000017 	ldw	fp,0(sp)
    baec:	dec00204 	addi	sp,sp,8
    baf0:	f800283a 	ret

0000baf4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    baf4:	defff704 	addi	sp,sp,-36
    baf8:	df000815 	stw	fp,32(sp)
    bafc:	df000804 	addi	fp,sp,32
    bb00:	e13ffc15 	stw	r4,-16(fp)
    bb04:	e17ffd15 	stw	r5,-12(fp)
    bb08:	e1bffe15 	stw	r6,-8(fp)
    bb0c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bb10:	e0bffc17 	ldw	r2,-16(fp)
    bb14:	10800017 	ldw	r2,0(r2)
    bb18:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    bb1c:	e0bffd17 	ldw	r2,-12(fp)
    bb20:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    bb24:	e0bffe17 	ldw	r2,-8(fp)
    bb28:	e0fffd17 	ldw	r3,-12(fp)
    bb2c:	1885883a 	add	r2,r3,r2
    bb30:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    bb34:	00001406 	br	bb88 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bb38:	e0bff917 	ldw	r2,-28(fp)
    bb3c:	10800037 	ldwio	r2,0(r2)
    bb40:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    bb44:	e0bffb17 	ldw	r2,-20(fp)
    bb48:	10a0000c 	andi	r2,r2,32768
    bb4c:	10000826 	beq	r2,zero,bb70 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bb50:	e0bffb17 	ldw	r2,-20(fp)
    bb54:	1007883a 	mov	r3,r2
    bb58:	e0bff817 	ldw	r2,-32(fp)
    bb5c:	10c00005 	stb	r3,0(r2)
    bb60:	e0bff817 	ldw	r2,-32(fp)
    bb64:	10800044 	addi	r2,r2,1
    bb68:	e0bff815 	stw	r2,-32(fp)
    bb6c:	00000606 	br	bb88 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    bb70:	e0fff817 	ldw	r3,-32(fp)
    bb74:	e0bffd17 	ldw	r2,-12(fp)
    bb78:	1880071e 	bne	r3,r2,bb98 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    bb7c:	e0bfff17 	ldw	r2,-4(fp)
    bb80:	1090000c 	andi	r2,r2,16384
    bb84:	1000061e 	bne	r2,zero,bba0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    bb88:	e0fff817 	ldw	r3,-32(fp)
    bb8c:	e0bffa17 	ldw	r2,-24(fp)
    bb90:	18bfe936 	bltu	r3,r2,bb38 <altera_avalon_jtag_uart_read+0x44>
    bb94:	00000306 	br	bba4 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    bb98:	0001883a 	nop
    bb9c:	00000106 	br	bba4 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    bba0:	0001883a 	nop
    
  }

  if (ptr != buffer)
    bba4:	e0fff817 	ldw	r3,-32(fp)
    bba8:	e0bffd17 	ldw	r2,-12(fp)
    bbac:	18800426 	beq	r3,r2,bbc0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    bbb0:	e0fff817 	ldw	r3,-32(fp)
    bbb4:	e0bffd17 	ldw	r2,-12(fp)
    bbb8:	1885c83a 	sub	r2,r3,r2
    bbbc:	00000606 	br	bbd8 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    bbc0:	e0bfff17 	ldw	r2,-4(fp)
    bbc4:	1090000c 	andi	r2,r2,16384
    bbc8:	10000226 	beq	r2,zero,bbd4 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    bbcc:	00bffd44 	movi	r2,-11
    bbd0:	00000106 	br	bbd8 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    bbd4:	00bffec4 	movi	r2,-5
}
    bbd8:	e037883a 	mov	sp,fp
    bbdc:	df000017 	ldw	fp,0(sp)
    bbe0:	dec00104 	addi	sp,sp,4
    bbe4:	f800283a 	ret

0000bbe8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bbe8:	defff904 	addi	sp,sp,-28
    bbec:	df000615 	stw	fp,24(sp)
    bbf0:	df000604 	addi	fp,sp,24
    bbf4:	e13ffc15 	stw	r4,-16(fp)
    bbf8:	e17ffd15 	stw	r5,-12(fp)
    bbfc:	e1bffe15 	stw	r6,-8(fp)
    bc00:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bc04:	e0bffc17 	ldw	r2,-16(fp)
    bc08:	10800017 	ldw	r2,0(r2)
    bc0c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    bc10:	e0bffe17 	ldw	r2,-8(fp)
    bc14:	e0fffd17 	ldw	r3,-12(fp)
    bc18:	1885883a 	add	r2,r3,r2
    bc1c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    bc20:	00000f06 	br	bc60 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    bc24:	e0bffa17 	ldw	r2,-24(fp)
    bc28:	10800104 	addi	r2,r2,4
    bc2c:	10800037 	ldwio	r2,0(r2)
    bc30:	10bfffec 	andhi	r2,r2,65535
    bc34:	10000a26 	beq	r2,zero,bc60 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    bc38:	e0bffa17 	ldw	r2,-24(fp)
    bc3c:	e0fffd17 	ldw	r3,-12(fp)
    bc40:	18c00003 	ldbu	r3,0(r3)
    bc44:	18c03fcc 	andi	r3,r3,255
    bc48:	18c0201c 	xori	r3,r3,128
    bc4c:	18ffe004 	addi	r3,r3,-128
    bc50:	e13ffd17 	ldw	r4,-12(fp)
    bc54:	21000044 	addi	r4,r4,1
    bc58:	e13ffd15 	stw	r4,-12(fp)
    bc5c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    bc60:	e0fffd17 	ldw	r3,-12(fp)
    bc64:	e0bffb17 	ldw	r2,-20(fp)
    bc68:	18bfee36 	bltu	r3,r2,bc24 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    bc6c:	e0bffe17 	ldw	r2,-8(fp)
}
    bc70:	e037883a 	mov	sp,fp
    bc74:	df000017 	ldw	fp,0(sp)
    bc78:	dec00104 	addi	sp,sp,4
    bc7c:	f800283a 	ret

0000bc80 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    bc80:	defff904 	addi	sp,sp,-28
    bc84:	dfc00615 	stw	ra,24(sp)
    bc88:	df000515 	stw	fp,20(sp)
    bc8c:	df000504 	addi	fp,sp,20
    bc90:	e13ffe15 	stw	r4,-8(fp)
    bc94:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    bc98:	0007883a 	mov	r3,zero
    bc9c:	e0bffe17 	ldw	r2,-8(fp)
    bca0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    bca4:	e0bffe17 	ldw	r2,-8(fp)
    bca8:	10800104 	addi	r2,r2,4
    bcac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bcb0:	0005303a 	rdctl	r2,status
    bcb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bcb8:	e0fffc17 	ldw	r3,-16(fp)
    bcbc:	00bfff84 	movi	r2,-2
    bcc0:	1884703a 	and	r2,r3,r2
    bcc4:	1001703a 	wrctl	status,r2
  
  return context;
    bcc8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    bccc:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    bcd0:	000c8000 	call	c800 <alt_tick>
    bcd4:	e0bffb17 	ldw	r2,-20(fp)
    bcd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bcdc:	e0bffd17 	ldw	r2,-12(fp)
    bce0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    bce4:	e037883a 	mov	sp,fp
    bce8:	dfc00117 	ldw	ra,4(sp)
    bcec:	df000017 	ldw	fp,0(sp)
    bcf0:	dec00204 	addi	sp,sp,8
    bcf4:	f800283a 	ret

0000bcf8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    bcf8:	defff904 	addi	sp,sp,-28
    bcfc:	dfc00615 	stw	ra,24(sp)
    bd00:	df000515 	stw	fp,20(sp)
    bd04:	df000504 	addi	fp,sp,20
    bd08:	e13ffc15 	stw	r4,-16(fp)
    bd0c:	e17ffd15 	stw	r5,-12(fp)
    bd10:	e1bffe15 	stw	r6,-8(fp)
    bd14:	e1ffff15 	stw	r7,-4(fp)
    bd18:	e0bfff17 	ldw	r2,-4(fp)
    bd1c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    bd20:	00800074 	movhi	r2,1
    bd24:	10b5bb04 	addi	r2,r2,-10516
    bd28:	10800017 	ldw	r2,0(r2)
    bd2c:	1000041e 	bne	r2,zero,bd40 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    bd30:	00800074 	movhi	r2,1
    bd34:	10b5bb04 	addi	r2,r2,-10516
    bd38:	e0fffb17 	ldw	r3,-20(fp)
    bd3c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    bd40:	e0bffc17 	ldw	r2,-16(fp)
    bd44:	10800104 	addi	r2,r2,4
    bd48:	00c001c4 	movi	r3,7
    bd4c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    bd50:	e13ffe17 	ldw	r4,-8(fp)
    bd54:	e17ffc17 	ldw	r5,-16(fp)
    bd58:	01800074 	movhi	r6,1
    bd5c:	31af2004 	addi	r6,r6,-17280
    bd60:	000b52c0 	call	b52c <alt_irq_register>
#endif  
}
    bd64:	e037883a 	mov	sp,fp
    bd68:	dfc00117 	ldw	ra,4(sp)
    bd6c:	df000017 	ldw	fp,0(sp)
    bd70:	dec00204 	addi	sp,sp,8
    bd74:	f800283a 	ret

0000bd78 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bd78:	defffa04 	addi	sp,sp,-24
    bd7c:	dfc00515 	stw	ra,20(sp)
    bd80:	df000415 	stw	fp,16(sp)
    bd84:	df000404 	addi	fp,sp,16
    bd88:	e13ffd15 	stw	r4,-12(fp)
    bd8c:	e17ffe15 	stw	r5,-8(fp)
    bd90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    bd94:	e0bffd17 	ldw	r2,-12(fp)
    bd98:	10800017 	ldw	r2,0(r2)
    bd9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    bda0:	e0bffc17 	ldw	r2,-16(fp)
    bda4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    bda8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    bdac:	10800217 	ldw	r2,8(r2)
    bdb0:	1809883a 	mov	r4,r3
    bdb4:	e17ffe17 	ldw	r5,-8(fp)
    bdb8:	e1bfff17 	ldw	r6,-4(fp)
    bdbc:	100f883a 	mov	r7,r2
    bdc0:	000be880 	call	be88 <altera_avalon_uart_read>
      fd->fd_flags);
}
    bdc4:	e037883a 	mov	sp,fp
    bdc8:	dfc00117 	ldw	ra,4(sp)
    bdcc:	df000017 	ldw	fp,0(sp)
    bdd0:	dec00204 	addi	sp,sp,8
    bdd4:	f800283a 	ret

0000bdd8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bdd8:	defffa04 	addi	sp,sp,-24
    bddc:	dfc00515 	stw	ra,20(sp)
    bde0:	df000415 	stw	fp,16(sp)
    bde4:	df000404 	addi	fp,sp,16
    bde8:	e13ffd15 	stw	r4,-12(fp)
    bdec:	e17ffe15 	stw	r5,-8(fp)
    bdf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    bdf4:	e0bffd17 	ldw	r2,-12(fp)
    bdf8:	10800017 	ldw	r2,0(r2)
    bdfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    be00:	e0bffc17 	ldw	r2,-16(fp)
    be04:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    be08:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    be0c:	10800217 	ldw	r2,8(r2)
    be10:	1809883a 	mov	r4,r3
    be14:	e17ffe17 	ldw	r5,-8(fp)
    be18:	e1bfff17 	ldw	r6,-4(fp)
    be1c:	100f883a 	mov	r7,r2
    be20:	000bf980 	call	bf98 <altera_avalon_uart_write>
      fd->fd_flags);
}
    be24:	e037883a 	mov	sp,fp
    be28:	dfc00117 	ldw	ra,4(sp)
    be2c:	df000017 	ldw	fp,0(sp)
    be30:	dec00204 	addi	sp,sp,8
    be34:	f800283a 	ret

0000be38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    be38:	defffe04 	addi	sp,sp,-8
    be3c:	dfc00115 	stw	ra,4(sp)
    be40:	df000015 	stw	fp,0(sp)
    be44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    be48:	00800074 	movhi	r2,1
    be4c:	10b4dd04 	addi	r2,r2,-11404
    be50:	10800017 	ldw	r2,0(r2)
    be54:	10000526 	beq	r2,zero,be6c <alt_get_errno+0x34>
    be58:	00800074 	movhi	r2,1
    be5c:	10b4dd04 	addi	r2,r2,-11404
    be60:	10800017 	ldw	r2,0(r2)
    be64:	103ee83a 	callr	r2
    be68:	00000206 	br	be74 <alt_get_errno+0x3c>
    be6c:	00800074 	movhi	r2,1
    be70:	10b5b604 	addi	r2,r2,-10536
}
    be74:	e037883a 	mov	sp,fp
    be78:	dfc00117 	ldw	ra,4(sp)
    be7c:	df000017 	ldw	fp,0(sp)
    be80:	dec00204 	addi	sp,sp,8
    be84:	f800283a 	ret

0000be88 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    be88:	defff804 	addi	sp,sp,-32
    be8c:	dfc00715 	stw	ra,28(sp)
    be90:	df000615 	stw	fp,24(sp)
    be94:	df000604 	addi	fp,sp,24
    be98:	e13ffc15 	stw	r4,-16(fp)
    be9c:	e17ffd15 	stw	r5,-12(fp)
    bea0:	e1bffe15 	stw	r6,-8(fp)
    bea4:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    bea8:	e0bfff17 	ldw	r2,-4(fp)
    beac:	1090000c 	andi	r2,r2,16384
    beb0:	1005003a 	cmpeq	r2,r2,zero
    beb4:	10803fcc 	andi	r2,r2,255
    beb8:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    bebc:	e0bffc17 	ldw	r2,-16(fp)
    bec0:	10800017 	ldw	r2,0(r2)
    bec4:	10800204 	addi	r2,r2,8
    bec8:	10800037 	ldwio	r2,0(r2)
    becc:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    bed0:	e0bffc17 	ldw	r2,-16(fp)
    bed4:	10800017 	ldw	r2,0(r2)
    bed8:	10800204 	addi	r2,r2,8
    bedc:	0007883a 	mov	r3,zero
    bee0:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    bee4:	e0bffb17 	ldw	r2,-20(fp)
    bee8:	1080200c 	andi	r2,r2,128
    beec:	10000b26 	beq	r2,zero,bf1c <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    bef0:	e0bffc17 	ldw	r2,-16(fp)
    bef4:	10800017 	ldw	r2,0(r2)
    bef8:	10800037 	ldwio	r2,0(r2)
    befc:	1007883a 	mov	r3,r2
    bf00:	e0bffd17 	ldw	r2,-12(fp)
    bf04:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    bf08:	e0bffb17 	ldw	r2,-20(fp)
    bf0c:	108000cc 	andi	r2,r2,3
    bf10:	1000021e 	bne	r2,zero,bf1c <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    bf14:	00800044 	movi	r2,1
    bf18:	00000606 	br	bf34 <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    bf1c:	e0bffa17 	ldw	r2,-24(fp)
    bf20:	103fe61e 	bne	r2,zero,bebc <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
    bf24:	000be380 	call	be38 <alt_get_errno>
    bf28:	00c002c4 	movi	r3,11
    bf2c:	10c00015 	stw	r3,0(r2)
 
  return 0;
    bf30:	0005883a 	mov	r2,zero
}
    bf34:	e037883a 	mov	sp,fp
    bf38:	dfc00117 	ldw	ra,4(sp)
    bf3c:	df000017 	ldw	fp,0(sp)
    bf40:	dec00204 	addi	sp,sp,8
    bf44:	f800283a 	ret

0000bf48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf48:	defffe04 	addi	sp,sp,-8
    bf4c:	dfc00115 	stw	ra,4(sp)
    bf50:	df000015 	stw	fp,0(sp)
    bf54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bf58:	00800074 	movhi	r2,1
    bf5c:	10b4dd04 	addi	r2,r2,-11404
    bf60:	10800017 	ldw	r2,0(r2)
    bf64:	10000526 	beq	r2,zero,bf7c <alt_get_errno+0x34>
    bf68:	00800074 	movhi	r2,1
    bf6c:	10b4dd04 	addi	r2,r2,-11404
    bf70:	10800017 	ldw	r2,0(r2)
    bf74:	103ee83a 	callr	r2
    bf78:	00000206 	br	bf84 <alt_get_errno+0x3c>
    bf7c:	00800074 	movhi	r2,1
    bf80:	10b5b604 	addi	r2,r2,-10536
}
    bf84:	e037883a 	mov	sp,fp
    bf88:	dfc00117 	ldw	ra,4(sp)
    bf8c:	df000017 	ldw	fp,0(sp)
    bf90:	dec00204 	addi	sp,sp,8
    bf94:	f800283a 	ret

0000bf98 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    bf98:	defff704 	addi	sp,sp,-36
    bf9c:	dfc00815 	stw	ra,32(sp)
    bfa0:	df000715 	stw	fp,28(sp)
    bfa4:	df000704 	addi	fp,sp,28
    bfa8:	e13ffc15 	stw	r4,-16(fp)
    bfac:	e17ffd15 	stw	r5,-12(fp)
    bfb0:	e1bffe15 	stw	r6,-8(fp)
    bfb4:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    bfb8:	e0bfff17 	ldw	r2,-4(fp)
    bfbc:	1090000c 	andi	r2,r2,16384
    bfc0:	1005003a 	cmpeq	r2,r2,zero
    bfc4:	10803fcc 	andi	r2,r2,255
    bfc8:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    bfcc:	e0bffe17 	ldw	r2,-8(fp)
    bfd0:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    bfd4:	e0bffc17 	ldw	r2,-16(fp)
    bfd8:	10800017 	ldw	r2,0(r2)
    bfdc:	10800204 	addi	r2,r2,8
    bfe0:	10800037 	ldwio	r2,0(r2)
    bfe4:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    bfe8:	e0bffb17 	ldw	r2,-20(fp)
    bfec:	1080100c 	andi	r2,r2,64
    bff0:	10000f26 	beq	r2,zero,c030 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    bff4:	e0bffc17 	ldw	r2,-16(fp)
    bff8:	10800017 	ldw	r2,0(r2)
    bffc:	10800104 	addi	r2,r2,4
    c000:	e0fffd17 	ldw	r3,-12(fp)
    c004:	18c00003 	ldbu	r3,0(r3)
    c008:	18c03fcc 	andi	r3,r3,255
    c00c:	18c0201c 	xori	r3,r3,128
    c010:	18ffe004 	addi	r3,r3,-128
    c014:	e13ffd17 	ldw	r4,-12(fp)
    c018:	21000044 	addi	r4,r4,1
    c01c:	e13ffd15 	stw	r4,-12(fp)
    c020:	10c00035 	stwio	r3,0(r2)
      count--;
    c024:	e0bff917 	ldw	r2,-28(fp)
    c028:	10bfffc4 	addi	r2,r2,-1
    c02c:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    c030:	e0bffa17 	ldw	r2,-24(fp)
    c034:	10000226 	beq	r2,zero,c040 <altera_avalon_uart_write+0xa8>
    c038:	e0bff917 	ldw	r2,-28(fp)
    c03c:	103fe51e 	bne	r2,zero,bfd4 <altera_avalon_uart_write+0x3c>

  if (count)
    c040:	e0bff917 	ldw	r2,-28(fp)
    c044:	10000326 	beq	r2,zero,c054 <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    c048:	000bf480 	call	bf48 <alt_get_errno>
    c04c:	00c002c4 	movi	r3,11
    c050:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    c054:	e0fffe17 	ldw	r3,-8(fp)
    c058:	e0bff917 	ldw	r2,-28(fp)
    c05c:	1885c83a 	sub	r2,r3,r2
}
    c060:	e037883a 	mov	sp,fp
    c064:	dfc00117 	ldw	ra,4(sp)
    c068:	df000017 	ldw	fp,0(sp)
    c06c:	dec00204 	addi	sp,sp,8
    c070:	f800283a 	ret

0000c074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c074:	defffe04 	addi	sp,sp,-8
    c078:	dfc00115 	stw	ra,4(sp)
    c07c:	df000015 	stw	fp,0(sp)
    c080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c084:	00800074 	movhi	r2,1
    c088:	10b4dd04 	addi	r2,r2,-11404
    c08c:	10800017 	ldw	r2,0(r2)
    c090:	10000526 	beq	r2,zero,c0a8 <alt_get_errno+0x34>
    c094:	00800074 	movhi	r2,1
    c098:	10b4dd04 	addi	r2,r2,-11404
    c09c:	10800017 	ldw	r2,0(r2)
    c0a0:	103ee83a 	callr	r2
    c0a4:	00000206 	br	c0b0 <alt_get_errno+0x3c>
    c0a8:	00800074 	movhi	r2,1
    c0ac:	10b5b604 	addi	r2,r2,-10536
}
    c0b0:	e037883a 	mov	sp,fp
    c0b4:	dfc00117 	ldw	ra,4(sp)
    c0b8:	df000017 	ldw	fp,0(sp)
    c0bc:	dec00204 	addi	sp,sp,8
    c0c0:	f800283a 	ret

0000c0c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c0c4:	defffb04 	addi	sp,sp,-20
    c0c8:	dfc00415 	stw	ra,16(sp)
    c0cc:	df000315 	stw	fp,12(sp)
    c0d0:	df000304 	addi	fp,sp,12
    c0d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c0d8:	e0bfff17 	ldw	r2,-4(fp)
    c0dc:	10000716 	blt	r2,zero,c0fc <close+0x38>
    c0e0:	e13fff17 	ldw	r4,-4(fp)
    c0e4:	01400304 	movi	r5,12
    c0e8:	000aa740 	call	aa74 <__mulsi3>
    c0ec:	00c00074 	movhi	r3,1
    c0f0:	18f46a04 	addi	r3,r3,-11864
    c0f4:	10c5883a 	add	r2,r2,r3
    c0f8:	00000106 	br	c100 <close+0x3c>
    c0fc:	0005883a 	mov	r2,zero
    c100:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    c104:	e0bffd17 	ldw	r2,-12(fp)
    c108:	10001826 	beq	r2,zero,c16c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c10c:	e0bffd17 	ldw	r2,-12(fp)
    c110:	10800017 	ldw	r2,0(r2)
    c114:	10800417 	ldw	r2,16(r2)
    c118:	10000626 	beq	r2,zero,c134 <close+0x70>
    c11c:	e0bffd17 	ldw	r2,-12(fp)
    c120:	10800017 	ldw	r2,0(r2)
    c124:	10800417 	ldw	r2,16(r2)
    c128:	e13ffd17 	ldw	r4,-12(fp)
    c12c:	103ee83a 	callr	r2
    c130:	00000106 	br	c138 <close+0x74>
    c134:	0005883a 	mov	r2,zero
    c138:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c13c:	e13fff17 	ldw	r4,-4(fp)
    c140:	000c6e80 	call	c6e8 <alt_release_fd>
    if (rval < 0)
    c144:	e0bffe17 	ldw	r2,-8(fp)
    c148:	1000060e 	bge	r2,zero,c164 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    c14c:	000c0740 	call	c074 <alt_get_errno>
    c150:	e0fffe17 	ldw	r3,-8(fp)
    c154:	00c7c83a 	sub	r3,zero,r3
    c158:	10c00015 	stw	r3,0(r2)
      return -1;
    c15c:	00bfffc4 	movi	r2,-1
    c160:	00000606 	br	c17c <close+0xb8>
    }
    return 0;
    c164:	0005883a 	mov	r2,zero
    c168:	00000406 	br	c17c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c16c:	000c0740 	call	c074 <alt_get_errno>
    c170:	00c01444 	movi	r3,81
    c174:	10c00015 	stw	r3,0(r2)
    return -1;
    c178:	00bfffc4 	movi	r2,-1
  }
}
    c17c:	e037883a 	mov	sp,fp
    c180:	dfc00117 	ldw	ra,4(sp)
    c184:	df000017 	ldw	fp,0(sp)
    c188:	dec00204 	addi	sp,sp,8
    c18c:	f800283a 	ret

0000c190 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c190:	deffff04 	addi	sp,sp,-4
    c194:	df000015 	stw	fp,0(sp)
    c198:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c19c:	e037883a 	mov	sp,fp
    c1a0:	df000017 	ldw	fp,0(sp)
    c1a4:	dec00104 	addi	sp,sp,4
    c1a8:	f800283a 	ret

0000c1ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c1ac:	defffc04 	addi	sp,sp,-16
    c1b0:	df000315 	stw	fp,12(sp)
    c1b4:	df000304 	addi	fp,sp,12
    c1b8:	e13ffd15 	stw	r4,-12(fp)
    c1bc:	e17ffe15 	stw	r5,-8(fp)
    c1c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c1c4:	e0bfff17 	ldw	r2,-4(fp)
}
    c1c8:	e037883a 	mov	sp,fp
    c1cc:	df000017 	ldw	fp,0(sp)
    c1d0:	dec00104 	addi	sp,sp,4
    c1d4:	f800283a 	ret

0000c1d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c1d8:	defffe04 	addi	sp,sp,-8
    c1dc:	dfc00115 	stw	ra,4(sp)
    c1e0:	df000015 	stw	fp,0(sp)
    c1e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c1e8:	00800074 	movhi	r2,1
    c1ec:	10b4dd04 	addi	r2,r2,-11404
    c1f0:	10800017 	ldw	r2,0(r2)
    c1f4:	10000526 	beq	r2,zero,c20c <alt_get_errno+0x34>
    c1f8:	00800074 	movhi	r2,1
    c1fc:	10b4dd04 	addi	r2,r2,-11404
    c200:	10800017 	ldw	r2,0(r2)
    c204:	103ee83a 	callr	r2
    c208:	00000206 	br	c214 <alt_get_errno+0x3c>
    c20c:	00800074 	movhi	r2,1
    c210:	10b5b604 	addi	r2,r2,-10536
}
    c214:	e037883a 	mov	sp,fp
    c218:	dfc00117 	ldw	ra,4(sp)
    c21c:	df000017 	ldw	fp,0(sp)
    c220:	dec00204 	addi	sp,sp,8
    c224:	f800283a 	ret

0000c228 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c228:	defffa04 	addi	sp,sp,-24
    c22c:	dfc00515 	stw	ra,20(sp)
    c230:	df000415 	stw	fp,16(sp)
    c234:	df000404 	addi	fp,sp,16
    c238:	e13ffe15 	stw	r4,-8(fp)
    c23c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c240:	e0bffe17 	ldw	r2,-8(fp)
    c244:	10000326 	beq	r2,zero,c254 <alt_dev_llist_insert+0x2c>
    c248:	e0bffe17 	ldw	r2,-8(fp)
    c24c:	10800217 	ldw	r2,8(r2)
    c250:	1000051e 	bne	r2,zero,c268 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    c254:	000c1d80 	call	c1d8 <alt_get_errno>
    c258:	00c00584 	movi	r3,22
    c25c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    c260:	00bffa84 	movi	r2,-22
    c264:	00001306 	br	c2b4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c268:	e0bffe17 	ldw	r2,-8(fp)
    c26c:	e0ffff17 	ldw	r3,-4(fp)
    c270:	e0fffc15 	stw	r3,-16(fp)
    c274:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c278:	e0bffd17 	ldw	r2,-12(fp)
    c27c:	e0fffc17 	ldw	r3,-16(fp)
    c280:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c284:	e0bffc17 	ldw	r2,-16(fp)
    c288:	10c00017 	ldw	r3,0(r2)
    c28c:	e0bffd17 	ldw	r2,-12(fp)
    c290:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c294:	e0bffc17 	ldw	r2,-16(fp)
    c298:	10800017 	ldw	r2,0(r2)
    c29c:	e0fffd17 	ldw	r3,-12(fp)
    c2a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c2a4:	e0bffc17 	ldw	r2,-16(fp)
    c2a8:	e0fffd17 	ldw	r3,-12(fp)
    c2ac:	10c00015 	stw	r3,0(r2)

  return 0;  
    c2b0:	0005883a 	mov	r2,zero
}
    c2b4:	e037883a 	mov	sp,fp
    c2b8:	dfc00117 	ldw	ra,4(sp)
    c2bc:	df000017 	ldw	fp,0(sp)
    c2c0:	dec00204 	addi	sp,sp,8
    c2c4:	f800283a 	ret

0000c2c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c2c8:	defffe04 	addi	sp,sp,-8
    c2cc:	dfc00115 	stw	ra,4(sp)
    c2d0:	df000015 	stw	fp,0(sp)
    c2d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c2d8:	0009883a 	mov	r4,zero
    c2dc:	01420004 	movi	r5,2048
    c2e0:	000cb9c0 	call	cb9c <alt_icache_flush>
#endif
}
    c2e4:	e037883a 	mov	sp,fp
    c2e8:	dfc00117 	ldw	ra,4(sp)
    c2ec:	df000017 	ldw	fp,0(sp)
    c2f0:	dec00204 	addi	sp,sp,8
    c2f4:	f800283a 	ret

0000c2f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c2f8:	defff804 	addi	sp,sp,-32
    c2fc:	dfc00715 	stw	ra,28(sp)
    c300:	df000615 	stw	fp,24(sp)
    c304:	dc000515 	stw	r16,20(sp)
    c308:	df000504 	addi	fp,sp,20
    c30c:	e13ffc15 	stw	r4,-16(fp)
    c310:	e17ffd15 	stw	r5,-12(fp)
    c314:	e1bffe15 	stw	r6,-8(fp)
    c318:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c31c:	e13ffd17 	ldw	r4,-12(fp)
    c320:	e17ffe17 	ldw	r5,-8(fp)
    c324:	e1bfff17 	ldw	r6,-4(fp)
    c328:	000c5900 	call	c590 <open>
    c32c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c330:	e0bffb17 	ldw	r2,-20(fp)
    c334:	10002216 	blt	r2,zero,c3c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    c338:	04000074 	movhi	r16,1
    c33c:	84346a04 	addi	r16,r16,-11864
    c340:	e0bffb17 	ldw	r2,-20(fp)
    c344:	1009883a 	mov	r4,r2
    c348:	01400304 	movi	r5,12
    c34c:	000aa740 	call	aa74 <__mulsi3>
    c350:	8085883a 	add	r2,r16,r2
    c354:	10c00017 	ldw	r3,0(r2)
    c358:	e0bffc17 	ldw	r2,-16(fp)
    c35c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c360:	04000074 	movhi	r16,1
    c364:	84346a04 	addi	r16,r16,-11864
    c368:	e0bffb17 	ldw	r2,-20(fp)
    c36c:	1009883a 	mov	r4,r2
    c370:	01400304 	movi	r5,12
    c374:	000aa740 	call	aa74 <__mulsi3>
    c378:	8085883a 	add	r2,r16,r2
    c37c:	10800104 	addi	r2,r2,4
    c380:	10c00017 	ldw	r3,0(r2)
    c384:	e0bffc17 	ldw	r2,-16(fp)
    c388:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c38c:	04000074 	movhi	r16,1
    c390:	84346a04 	addi	r16,r16,-11864
    c394:	e0bffb17 	ldw	r2,-20(fp)
    c398:	1009883a 	mov	r4,r2
    c39c:	01400304 	movi	r5,12
    c3a0:	000aa740 	call	aa74 <__mulsi3>
    c3a4:	8085883a 	add	r2,r16,r2
    c3a8:	10800204 	addi	r2,r2,8
    c3ac:	10c00017 	ldw	r3,0(r2)
    c3b0:	e0bffc17 	ldw	r2,-16(fp)
    c3b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c3b8:	e13ffb17 	ldw	r4,-20(fp)
    c3bc:	000c6e80 	call	c6e8 <alt_release_fd>
  }
} 
    c3c0:	e037883a 	mov	sp,fp
    c3c4:	dfc00217 	ldw	ra,8(sp)
    c3c8:	df000117 	ldw	fp,4(sp)
    c3cc:	dc000017 	ldw	r16,0(sp)
    c3d0:	dec00304 	addi	sp,sp,12
    c3d4:	f800283a 	ret

0000c3d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c3d8:	defffb04 	addi	sp,sp,-20
    c3dc:	dfc00415 	stw	ra,16(sp)
    c3e0:	df000315 	stw	fp,12(sp)
    c3e4:	df000304 	addi	fp,sp,12
    c3e8:	e13ffd15 	stw	r4,-12(fp)
    c3ec:	e17ffe15 	stw	r5,-8(fp)
    c3f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c3f4:	01000074 	movhi	r4,1
    c3f8:	21346d04 	addi	r4,r4,-11852
    c3fc:	e17ffd17 	ldw	r5,-12(fp)
    c400:	01800044 	movi	r6,1
    c404:	01c07fc4 	movi	r7,511
    c408:	000c2f80 	call	c2f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c40c:	01000074 	movhi	r4,1
    c410:	21346a04 	addi	r4,r4,-11864
    c414:	e17ffe17 	ldw	r5,-8(fp)
    c418:	000d883a 	mov	r6,zero
    c41c:	01c07fc4 	movi	r7,511
    c420:	000c2f80 	call	c2f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c424:	01000074 	movhi	r4,1
    c428:	21347004 	addi	r4,r4,-11840
    c42c:	e17fff17 	ldw	r5,-4(fp)
    c430:	01800044 	movi	r6,1
    c434:	01c07fc4 	movi	r7,511
    c438:	000c2f80 	call	c2f8 <alt_open_fd>
}  
    c43c:	e037883a 	mov	sp,fp
    c440:	dfc00117 	ldw	ra,4(sp)
    c444:	df000017 	ldw	fp,0(sp)
    c448:	dec00204 	addi	sp,sp,8
    c44c:	f800283a 	ret

0000c450 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c450:	defffe04 	addi	sp,sp,-8
    c454:	dfc00115 	stw	ra,4(sp)
    c458:	df000015 	stw	fp,0(sp)
    c45c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c460:	00800074 	movhi	r2,1
    c464:	10b4dd04 	addi	r2,r2,-11404
    c468:	10800017 	ldw	r2,0(r2)
    c46c:	10000526 	beq	r2,zero,c484 <alt_get_errno+0x34>
    c470:	00800074 	movhi	r2,1
    c474:	10b4dd04 	addi	r2,r2,-11404
    c478:	10800017 	ldw	r2,0(r2)
    c47c:	103ee83a 	callr	r2
    c480:	00000206 	br	c48c <alt_get_errno+0x3c>
    c484:	00800074 	movhi	r2,1
    c488:	10b5b604 	addi	r2,r2,-10536
}
    c48c:	e037883a 	mov	sp,fp
    c490:	dfc00117 	ldw	ra,4(sp)
    c494:	df000017 	ldw	fp,0(sp)
    c498:	dec00204 	addi	sp,sp,8
    c49c:	f800283a 	ret

0000c4a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c4a0:	defffb04 	addi	sp,sp,-20
    c4a4:	dfc00415 	stw	ra,16(sp)
    c4a8:	df000315 	stw	fp,12(sp)
    c4ac:	dc000215 	stw	r16,8(sp)
    c4b0:	df000204 	addi	fp,sp,8
    c4b4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c4b8:	e0bfff17 	ldw	r2,-4(fp)
    c4bc:	10800217 	ldw	r2,8(r2)
    c4c0:	10d00034 	orhi	r3,r2,16384
    c4c4:	e0bfff17 	ldw	r2,-4(fp)
    c4c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c4cc:	e03ffe15 	stw	zero,-8(fp)
    c4d0:	00002206 	br	c55c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c4d4:	04000074 	movhi	r16,1
    c4d8:	84346a04 	addi	r16,r16,-11864
    c4dc:	e0bffe17 	ldw	r2,-8(fp)
    c4e0:	1009883a 	mov	r4,r2
    c4e4:	01400304 	movi	r5,12
    c4e8:	000aa740 	call	aa74 <__mulsi3>
    c4ec:	8085883a 	add	r2,r16,r2
    c4f0:	10c00017 	ldw	r3,0(r2)
    c4f4:	e0bfff17 	ldw	r2,-4(fp)
    c4f8:	10800017 	ldw	r2,0(r2)
    c4fc:	1880141e 	bne	r3,r2,c550 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c500:	04000074 	movhi	r16,1
    c504:	84346a04 	addi	r16,r16,-11864
    c508:	e0bffe17 	ldw	r2,-8(fp)
    c50c:	1009883a 	mov	r4,r2
    c510:	01400304 	movi	r5,12
    c514:	000aa740 	call	aa74 <__mulsi3>
    c518:	8085883a 	add	r2,r16,r2
    c51c:	10800204 	addi	r2,r2,8
    c520:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c524:	10000a0e 	bge	r2,zero,c550 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c528:	e13ffe17 	ldw	r4,-8(fp)
    c52c:	01400304 	movi	r5,12
    c530:	000aa740 	call	aa74 <__mulsi3>
    c534:	00c00074 	movhi	r3,1
    c538:	18f46a04 	addi	r3,r3,-11864
    c53c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c540:	e0bfff17 	ldw	r2,-4(fp)
    c544:	18800226 	beq	r3,r2,c550 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c548:	00bffcc4 	movi	r2,-13
    c54c:	00000a06 	br	c578 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c550:	e0bffe17 	ldw	r2,-8(fp)
    c554:	10800044 	addi	r2,r2,1
    c558:	e0bffe15 	stw	r2,-8(fp)
    c55c:	00800074 	movhi	r2,1
    c560:	10b4dc04 	addi	r2,r2,-11408
    c564:	10800017 	ldw	r2,0(r2)
    c568:	1007883a 	mov	r3,r2
    c56c:	e0bffe17 	ldw	r2,-8(fp)
    c570:	18bfd82e 	bgeu	r3,r2,c4d4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c574:	0005883a 	mov	r2,zero
}
    c578:	e037883a 	mov	sp,fp
    c57c:	dfc00217 	ldw	ra,8(sp)
    c580:	df000117 	ldw	fp,4(sp)
    c584:	dc000017 	ldw	r16,0(sp)
    c588:	dec00304 	addi	sp,sp,12
    c58c:	f800283a 	ret

0000c590 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c590:	defff604 	addi	sp,sp,-40
    c594:	dfc00915 	stw	ra,36(sp)
    c598:	df000815 	stw	fp,32(sp)
    c59c:	df000804 	addi	fp,sp,32
    c5a0:	e13ffd15 	stw	r4,-12(fp)
    c5a4:	e17ffe15 	stw	r5,-8(fp)
    c5a8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c5ac:	00bfffc4 	movi	r2,-1
    c5b0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c5b4:	00bffb44 	movi	r2,-19
    c5b8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c5bc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c5c0:	e13ffd17 	ldw	r4,-12(fp)
    c5c4:	01400074 	movhi	r5,1
    c5c8:	2974da04 	addi	r5,r5,-11416
    c5cc:	000c9240 	call	c924 <alt_find_dev>
    c5d0:	e0bff815 	stw	r2,-32(fp)
    c5d4:	e0bff817 	ldw	r2,-32(fp)
    c5d8:	1000051e 	bne	r2,zero,c5f0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c5dc:	e13ffd17 	ldw	r4,-12(fp)
    c5e0:	000c9b40 	call	c9b4 <alt_find_file>
    c5e4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c5e8:	00800044 	movi	r2,1
    c5ec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c5f0:	e0bff817 	ldw	r2,-32(fp)
    c5f4:	10002a26 	beq	r2,zero,c6a0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c5f8:	e13ff817 	ldw	r4,-32(fp)
    c5fc:	000cac80 	call	cac8 <alt_get_fd>
    c600:	e0bff915 	stw	r2,-28(fp)
    c604:	e0bff917 	ldw	r2,-28(fp)
    c608:	1000030e 	bge	r2,zero,c618 <open+0x88>
    {
      status = index;
    c60c:	e0bff917 	ldw	r2,-28(fp)
    c610:	e0bffa15 	stw	r2,-24(fp)
    c614:	00002406 	br	c6a8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c618:	e13ff917 	ldw	r4,-28(fp)
    c61c:	01400304 	movi	r5,12
    c620:	000aa740 	call	aa74 <__mulsi3>
    c624:	00c00074 	movhi	r3,1
    c628:	18f46a04 	addi	r3,r3,-11864
    c62c:	10c5883a 	add	r2,r2,r3
    c630:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c634:	e0fffe17 	ldw	r3,-8(fp)
    c638:	00900034 	movhi	r2,16384
    c63c:	10bfffc4 	addi	r2,r2,-1
    c640:	1886703a 	and	r3,r3,r2
    c644:	e0bffc17 	ldw	r2,-16(fp)
    c648:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c64c:	e0bffb17 	ldw	r2,-20(fp)
    c650:	1000051e 	bne	r2,zero,c668 <open+0xd8>
    c654:	e13ffc17 	ldw	r4,-16(fp)
    c658:	000c4a00 	call	c4a0 <alt_file_locked>
    c65c:	e0bffa15 	stw	r2,-24(fp)
    c660:	e0bffa17 	ldw	r2,-24(fp)
    c664:	10001016 	blt	r2,zero,c6a8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c668:	e0bff817 	ldw	r2,-32(fp)
    c66c:	10800317 	ldw	r2,12(r2)
    c670:	10000826 	beq	r2,zero,c694 <open+0x104>
    c674:	e0bff817 	ldw	r2,-32(fp)
    c678:	10800317 	ldw	r2,12(r2)
    c67c:	e13ffc17 	ldw	r4,-16(fp)
    c680:	e17ffd17 	ldw	r5,-12(fp)
    c684:	e1bffe17 	ldw	r6,-8(fp)
    c688:	e1ffff17 	ldw	r7,-4(fp)
    c68c:	103ee83a 	callr	r2
    c690:	00000106 	br	c698 <open+0x108>
    c694:	0005883a 	mov	r2,zero
    c698:	e0bffa15 	stw	r2,-24(fp)
    c69c:	00000206 	br	c6a8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c6a0:	00bffb44 	movi	r2,-19
    c6a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c6a8:	e0bffa17 	ldw	r2,-24(fp)
    c6ac:	1000080e 	bge	r2,zero,c6d0 <open+0x140>
  {
    alt_release_fd (index);  
    c6b0:	e13ff917 	ldw	r4,-28(fp)
    c6b4:	000c6e80 	call	c6e8 <alt_release_fd>
    ALT_ERRNO = -status;
    c6b8:	000c4500 	call	c450 <alt_get_errno>
    c6bc:	e0fffa17 	ldw	r3,-24(fp)
    c6c0:	00c7c83a 	sub	r3,zero,r3
    c6c4:	10c00015 	stw	r3,0(r2)
    return -1;
    c6c8:	00bfffc4 	movi	r2,-1
    c6cc:	00000106 	br	c6d4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    c6d0:	e0bff917 	ldw	r2,-28(fp)
}
    c6d4:	e037883a 	mov	sp,fp
    c6d8:	dfc00117 	ldw	ra,4(sp)
    c6dc:	df000017 	ldw	fp,0(sp)
    c6e0:	dec00204 	addi	sp,sp,8
    c6e4:	f800283a 	ret

0000c6e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c6e8:	defffc04 	addi	sp,sp,-16
    c6ec:	dfc00315 	stw	ra,12(sp)
    c6f0:	df000215 	stw	fp,8(sp)
    c6f4:	dc000115 	stw	r16,4(sp)
    c6f8:	df000104 	addi	fp,sp,4
    c6fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c700:	e0bfff17 	ldw	r2,-4(fp)
    c704:	108000d0 	cmplti	r2,r2,3
    c708:	1000111e 	bne	r2,zero,c750 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    c70c:	04000074 	movhi	r16,1
    c710:	84346a04 	addi	r16,r16,-11864
    c714:	e0bfff17 	ldw	r2,-4(fp)
    c718:	1009883a 	mov	r4,r2
    c71c:	01400304 	movi	r5,12
    c720:	000aa740 	call	aa74 <__mulsi3>
    c724:	8085883a 	add	r2,r16,r2
    c728:	10800204 	addi	r2,r2,8
    c72c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c730:	04000074 	movhi	r16,1
    c734:	84346a04 	addi	r16,r16,-11864
    c738:	e0bfff17 	ldw	r2,-4(fp)
    c73c:	1009883a 	mov	r4,r2
    c740:	01400304 	movi	r5,12
    c744:	000aa740 	call	aa74 <__mulsi3>
    c748:	8085883a 	add	r2,r16,r2
    c74c:	10000015 	stw	zero,0(r2)
  }
}
    c750:	e037883a 	mov	sp,fp
    c754:	dfc00217 	ldw	ra,8(sp)
    c758:	df000117 	ldw	fp,4(sp)
    c75c:	dc000017 	ldw	r16,0(sp)
    c760:	dec00304 	addi	sp,sp,12
    c764:	f800283a 	ret

0000c768 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c768:	defffa04 	addi	sp,sp,-24
    c76c:	df000515 	stw	fp,20(sp)
    c770:	df000504 	addi	fp,sp,20
    c774:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c778:	0005303a 	rdctl	r2,status
    c77c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c780:	e0fffc17 	ldw	r3,-16(fp)
    c784:	00bfff84 	movi	r2,-2
    c788:	1884703a 	and	r2,r3,r2
    c78c:	1001703a 	wrctl	status,r2
  
  return context;
    c790:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c794:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c798:	e0bfff17 	ldw	r2,-4(fp)
    c79c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c7a0:	e0bffd17 	ldw	r2,-12(fp)
    c7a4:	10800017 	ldw	r2,0(r2)
    c7a8:	e0fffd17 	ldw	r3,-12(fp)
    c7ac:	18c00117 	ldw	r3,4(r3)
    c7b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c7b4:	e0bffd17 	ldw	r2,-12(fp)
    c7b8:	10800117 	ldw	r2,4(r2)
    c7bc:	e0fffd17 	ldw	r3,-12(fp)
    c7c0:	18c00017 	ldw	r3,0(r3)
    c7c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c7c8:	e0bffd17 	ldw	r2,-12(fp)
    c7cc:	e0fffd17 	ldw	r3,-12(fp)
    c7d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c7d4:	e0bffd17 	ldw	r2,-12(fp)
    c7d8:	e0fffd17 	ldw	r3,-12(fp)
    c7dc:	10c00015 	stw	r3,0(r2)
    c7e0:	e0bffb17 	ldw	r2,-20(fp)
    c7e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c7e8:	e0bffe17 	ldw	r2,-8(fp)
    c7ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c7f0:	e037883a 	mov	sp,fp
    c7f4:	df000017 	ldw	fp,0(sp)
    c7f8:	dec00104 	addi	sp,sp,4
    c7fc:	f800283a 	ret

0000c800 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c800:	defffb04 	addi	sp,sp,-20
    c804:	dfc00415 	stw	ra,16(sp)
    c808:	df000315 	stw	fp,12(sp)
    c80c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c810:	d0a01417 	ldw	r2,-32688(gp)
    c814:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c818:	d0a0f217 	ldw	r2,-31800(gp)
    c81c:	10800044 	addi	r2,r2,1
    c820:	d0a0f215 	stw	r2,-31800(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c824:	00002e06 	br	c8e0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c828:	e0bffd17 	ldw	r2,-12(fp)
    c82c:	10800017 	ldw	r2,0(r2)
    c830:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c834:	e0bffd17 	ldw	r2,-12(fp)
    c838:	10800403 	ldbu	r2,16(r2)
    c83c:	10803fcc 	andi	r2,r2,255
    c840:	10000426 	beq	r2,zero,c854 <alt_tick+0x54>
    c844:	d0a0f217 	ldw	r2,-31800(gp)
    c848:	1000021e 	bne	r2,zero,c854 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c84c:	e0bffd17 	ldw	r2,-12(fp)
    c850:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c854:	e0bffd17 	ldw	r2,-12(fp)
    c858:	10800217 	ldw	r2,8(r2)
    c85c:	d0e0f217 	ldw	r3,-31800(gp)
    c860:	18801d36 	bltu	r3,r2,c8d8 <alt_tick+0xd8>
    c864:	e0bffd17 	ldw	r2,-12(fp)
    c868:	10800403 	ldbu	r2,16(r2)
    c86c:	10803fcc 	andi	r2,r2,255
    c870:	1000191e 	bne	r2,zero,c8d8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c874:	e0bffd17 	ldw	r2,-12(fp)
    c878:	10c00317 	ldw	r3,12(r2)
    c87c:	e0bffd17 	ldw	r2,-12(fp)
    c880:	10800517 	ldw	r2,20(r2)
    c884:	1009883a 	mov	r4,r2
    c888:	183ee83a 	callr	r3
    c88c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c890:	e0bfff17 	ldw	r2,-4(fp)
    c894:	1000031e 	bne	r2,zero,c8a4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c898:	e13ffd17 	ldw	r4,-12(fp)
    c89c:	000c7680 	call	c768 <alt_alarm_stop>
    c8a0:	00000d06 	br	c8d8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c8a4:	e0bffd17 	ldw	r2,-12(fp)
    c8a8:	10c00217 	ldw	r3,8(r2)
    c8ac:	e0bfff17 	ldw	r2,-4(fp)
    c8b0:	1887883a 	add	r3,r3,r2
    c8b4:	e0bffd17 	ldw	r2,-12(fp)
    c8b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c8bc:	e0bffd17 	ldw	r2,-12(fp)
    c8c0:	10c00217 	ldw	r3,8(r2)
    c8c4:	d0a0f217 	ldw	r2,-31800(gp)
    c8c8:	1880032e 	bgeu	r3,r2,c8d8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c8cc:	e0bffd17 	ldw	r2,-12(fp)
    c8d0:	00c00044 	movi	r3,1
    c8d4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c8d8:	e0bffe17 	ldw	r2,-8(fp)
    c8dc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c8e0:	e0fffd17 	ldw	r3,-12(fp)
    c8e4:	d0a01404 	addi	r2,gp,-32688
    c8e8:	18bfcf1e 	bne	r3,r2,c828 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c8ec:	0001883a 	nop
}
    c8f0:	e037883a 	mov	sp,fp
    c8f4:	dfc00117 	ldw	ra,4(sp)
    c8f8:	df000017 	ldw	fp,0(sp)
    c8fc:	dec00204 	addi	sp,sp,8
    c900:	f800283a 	ret

0000c904 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c904:	deffff04 	addi	sp,sp,-4
    c908:	df000015 	stw	fp,0(sp)
    c90c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c910:	000170fa 	wrctl	ienable,zero
}
    c914:	e037883a 	mov	sp,fp
    c918:	df000017 	ldw	fp,0(sp)
    c91c:	dec00104 	addi	sp,sp,4
    c920:	f800283a 	ret

0000c924 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c924:	defffa04 	addi	sp,sp,-24
    c928:	dfc00515 	stw	ra,20(sp)
    c92c:	df000415 	stw	fp,16(sp)
    c930:	df000404 	addi	fp,sp,16
    c934:	e13ffe15 	stw	r4,-8(fp)
    c938:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c93c:	e0bfff17 	ldw	r2,-4(fp)
    c940:	10800017 	ldw	r2,0(r2)
    c944:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c948:	e13ffe17 	ldw	r4,-8(fp)
    c94c:	000ac600 	call	ac60 <strlen>
    c950:	10800044 	addi	r2,r2,1
    c954:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c958:	00000d06 	br	c990 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c95c:	e0bffc17 	ldw	r2,-16(fp)
    c960:	10c00217 	ldw	r3,8(r2)
    c964:	e0bffd17 	ldw	r2,-12(fp)
    c968:	1809883a 	mov	r4,r3
    c96c:	e17ffe17 	ldw	r5,-8(fp)
    c970:	100d883a 	mov	r6,r2
    c974:	000cc480 	call	cc48 <memcmp>
    c978:	1000021e 	bne	r2,zero,c984 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c97c:	e0bffc17 	ldw	r2,-16(fp)
    c980:	00000706 	br	c9a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c984:	e0bffc17 	ldw	r2,-16(fp)
    c988:	10800017 	ldw	r2,0(r2)
    c98c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c990:	e0fffc17 	ldw	r3,-16(fp)
    c994:	e0bfff17 	ldw	r2,-4(fp)
    c998:	18bff01e 	bne	r3,r2,c95c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c99c:	0005883a 	mov	r2,zero
}
    c9a0:	e037883a 	mov	sp,fp
    c9a4:	dfc00117 	ldw	ra,4(sp)
    c9a8:	df000017 	ldw	fp,0(sp)
    c9ac:	dec00204 	addi	sp,sp,8
    c9b0:	f800283a 	ret

0000c9b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c9b4:	defffb04 	addi	sp,sp,-20
    c9b8:	dfc00415 	stw	ra,16(sp)
    c9bc:	df000315 	stw	fp,12(sp)
    c9c0:	df000304 	addi	fp,sp,12
    c9c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c9c8:	00800074 	movhi	r2,1
    c9cc:	10b4d804 	addi	r2,r2,-11424
    c9d0:	10800017 	ldw	r2,0(r2)
    c9d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c9d8:	00003106 	br	caa0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    c9dc:	e0bffd17 	ldw	r2,-12(fp)
    c9e0:	10800217 	ldw	r2,8(r2)
    c9e4:	1009883a 	mov	r4,r2
    c9e8:	000ac600 	call	ac60 <strlen>
    c9ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c9f0:	e0bffd17 	ldw	r2,-12(fp)
    c9f4:	10c00217 	ldw	r3,8(r2)
    c9f8:	e0bffe17 	ldw	r2,-8(fp)
    c9fc:	10bfffc4 	addi	r2,r2,-1
    ca00:	1885883a 	add	r2,r3,r2
    ca04:	10800003 	ldbu	r2,0(r2)
    ca08:	10803fcc 	andi	r2,r2,255
    ca0c:	1080201c 	xori	r2,r2,128
    ca10:	10bfe004 	addi	r2,r2,-128
    ca14:	10800bd8 	cmpnei	r2,r2,47
    ca18:	1000031e 	bne	r2,zero,ca28 <alt_find_file+0x74>
    {
      len -= 1;
    ca1c:	e0bffe17 	ldw	r2,-8(fp)
    ca20:	10bfffc4 	addi	r2,r2,-1
    ca24:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ca28:	e0bffe17 	ldw	r2,-8(fp)
    ca2c:	e0ffff17 	ldw	r3,-4(fp)
    ca30:	1885883a 	add	r2,r3,r2
    ca34:	10800003 	ldbu	r2,0(r2)
    ca38:	10803fcc 	andi	r2,r2,255
    ca3c:	1080201c 	xori	r2,r2,128
    ca40:	10bfe004 	addi	r2,r2,-128
    ca44:	10800be0 	cmpeqi	r2,r2,47
    ca48:	1000081e 	bne	r2,zero,ca6c <alt_find_file+0xb8>
    ca4c:	e0bffe17 	ldw	r2,-8(fp)
    ca50:	e0ffff17 	ldw	r3,-4(fp)
    ca54:	1885883a 	add	r2,r3,r2
    ca58:	10800003 	ldbu	r2,0(r2)
    ca5c:	10803fcc 	andi	r2,r2,255
    ca60:	1080201c 	xori	r2,r2,128
    ca64:	10bfe004 	addi	r2,r2,-128
    ca68:	10000a1e 	bne	r2,zero,ca94 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ca6c:	e0bffd17 	ldw	r2,-12(fp)
    ca70:	10c00217 	ldw	r3,8(r2)
    ca74:	e0bffe17 	ldw	r2,-8(fp)
    ca78:	1809883a 	mov	r4,r3
    ca7c:	e17fff17 	ldw	r5,-4(fp)
    ca80:	100d883a 	mov	r6,r2
    ca84:	000cc480 	call	cc48 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ca88:	1000021e 	bne	r2,zero,ca94 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ca8c:	e0bffd17 	ldw	r2,-12(fp)
    ca90:	00000806 	br	cab4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    ca94:	e0bffd17 	ldw	r2,-12(fp)
    ca98:	10800017 	ldw	r2,0(r2)
    ca9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    caa0:	e0fffd17 	ldw	r3,-12(fp)
    caa4:	00800074 	movhi	r2,1
    caa8:	10b4d804 	addi	r2,r2,-11424
    caac:	18bfcb1e 	bne	r3,r2,c9dc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    cab0:	0005883a 	mov	r2,zero
}
    cab4:	e037883a 	mov	sp,fp
    cab8:	dfc00117 	ldw	ra,4(sp)
    cabc:	df000017 	ldw	fp,0(sp)
    cac0:	dec00204 	addi	sp,sp,8
    cac4:	f800283a 	ret

0000cac8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    cac8:	defffa04 	addi	sp,sp,-24
    cacc:	dfc00515 	stw	ra,20(sp)
    cad0:	df000415 	stw	fp,16(sp)
    cad4:	dc000315 	stw	r16,12(sp)
    cad8:	df000304 	addi	fp,sp,12
    cadc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    cae0:	00bffa04 	movi	r2,-24
    cae4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cae8:	e03ffd15 	stw	zero,-12(fp)
    caec:	00002106 	br	cb74 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    caf0:	04000074 	movhi	r16,1
    caf4:	84346a04 	addi	r16,r16,-11864
    caf8:	e0bffd17 	ldw	r2,-12(fp)
    cafc:	1009883a 	mov	r4,r2
    cb00:	01400304 	movi	r5,12
    cb04:	000aa740 	call	aa74 <__mulsi3>
    cb08:	8085883a 	add	r2,r16,r2
    cb0c:	10800017 	ldw	r2,0(r2)
    cb10:	1000151e 	bne	r2,zero,cb68 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    cb14:	04000074 	movhi	r16,1
    cb18:	84346a04 	addi	r16,r16,-11864
    cb1c:	e0bffd17 	ldw	r2,-12(fp)
    cb20:	1009883a 	mov	r4,r2
    cb24:	01400304 	movi	r5,12
    cb28:	000aa740 	call	aa74 <__mulsi3>
    cb2c:	8085883a 	add	r2,r16,r2
    cb30:	e0ffff17 	ldw	r3,-4(fp)
    cb34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    cb38:	00800074 	movhi	r2,1
    cb3c:	10b4dc04 	addi	r2,r2,-11408
    cb40:	10c00017 	ldw	r3,0(r2)
    cb44:	e0bffd17 	ldw	r2,-12(fp)
    cb48:	1880040e 	bge	r3,r2,cb5c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    cb4c:	00800074 	movhi	r2,1
    cb50:	10b4dc04 	addi	r2,r2,-11408
    cb54:	e0fffd17 	ldw	r3,-12(fp)
    cb58:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    cb5c:	e0bffd17 	ldw	r2,-12(fp)
    cb60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    cb64:	00000606 	br	cb80 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cb68:	e0bffd17 	ldw	r2,-12(fp)
    cb6c:	10800044 	addi	r2,r2,1
    cb70:	e0bffd15 	stw	r2,-12(fp)
    cb74:	e0bffd17 	ldw	r2,-12(fp)
    cb78:	10800810 	cmplti	r2,r2,32
    cb7c:	103fdc1e 	bne	r2,zero,caf0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    cb80:	e0bffe17 	ldw	r2,-8(fp)
}
    cb84:	e037883a 	mov	sp,fp
    cb88:	dfc00217 	ldw	ra,8(sp)
    cb8c:	df000117 	ldw	fp,4(sp)
    cb90:	dc000017 	ldw	r16,0(sp)
    cb94:	dec00304 	addi	sp,sp,12
    cb98:	f800283a 	ret

0000cb9c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    cb9c:	defffb04 	addi	sp,sp,-20
    cba0:	df000415 	stw	fp,16(sp)
    cba4:	df000404 	addi	fp,sp,16
    cba8:	e13ffe15 	stw	r4,-8(fp)
    cbac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    cbb0:	e0bfff17 	ldw	r2,-4(fp)
    cbb4:	10820070 	cmpltui	r2,r2,2049
    cbb8:	1000021e 	bne	r2,zero,cbc4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    cbbc:	00820004 	movi	r2,2048
    cbc0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    cbc4:	e0fffe17 	ldw	r3,-8(fp)
    cbc8:	e0bfff17 	ldw	r2,-4(fp)
    cbcc:	1885883a 	add	r2,r3,r2
    cbd0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    cbd4:	e0bffe17 	ldw	r2,-8(fp)
    cbd8:	e0bffc15 	stw	r2,-16(fp)
    cbdc:	00000506 	br	cbf4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    cbe0:	e0bffc17 	ldw	r2,-16(fp)
    cbe4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    cbe8:	e0bffc17 	ldw	r2,-16(fp)
    cbec:	10800804 	addi	r2,r2,32
    cbf0:	e0bffc15 	stw	r2,-16(fp)
    cbf4:	e0fffc17 	ldw	r3,-16(fp)
    cbf8:	e0bffd17 	ldw	r2,-12(fp)
    cbfc:	18bff836 	bltu	r3,r2,cbe0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    cc00:	e0bffe17 	ldw	r2,-8(fp)
    cc04:	108007cc 	andi	r2,r2,31
    cc08:	10000226 	beq	r2,zero,cc14 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    cc0c:	e0bffc17 	ldw	r2,-16(fp)
    cc10:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    cc14:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    cc18:	e037883a 	mov	sp,fp
    cc1c:	df000017 	ldw	fp,0(sp)
    cc20:	dec00104 	addi	sp,sp,4
    cc24:	f800283a 	ret

0000cc28 <exit>:
    cc28:	defffe04 	addi	sp,sp,-8
    cc2c:	000b883a 	mov	r5,zero
    cc30:	dc000015 	stw	r16,0(sp)
    cc34:	dfc00115 	stw	ra,4(sp)
    cc38:	2021883a 	mov	r16,r4
    cc3c:	000cc900 	call	cc90 <__call_exitprocs>
    cc40:	8009883a 	mov	r4,r16
    cc44:	000ce680 	call	ce68 <_exit>

0000cc48 <memcmp>:
    cc48:	30000d26 	beq	r6,zero,cc80 <memcmp+0x38>
    cc4c:	20c00003 	ldbu	r3,0(r4)
    cc50:	28800003 	ldbu	r2,0(r5)
    cc54:	18800c1e 	bne	r3,r2,cc88 <memcmp+0x40>
    cc58:	31bfff84 	addi	r6,r6,-2
    cc5c:	01ffffc4 	movi	r7,-1
    cc60:	00000406 	br	cc74 <memcmp+0x2c>
    cc64:	20c00003 	ldbu	r3,0(r4)
    cc68:	28800003 	ldbu	r2,0(r5)
    cc6c:	31bfffc4 	addi	r6,r6,-1
    cc70:	1880051e 	bne	r3,r2,cc88 <memcmp+0x40>
    cc74:	21000044 	addi	r4,r4,1
    cc78:	29400044 	addi	r5,r5,1
    cc7c:	31fff91e 	bne	r6,r7,cc64 <memcmp+0x1c>
    cc80:	0005883a 	mov	r2,zero
    cc84:	f800283a 	ret
    cc88:	1885c83a 	sub	r2,r3,r2
    cc8c:	f800283a 	ret

0000cc90 <__call_exitprocs>:
    cc90:	00800074 	movhi	r2,1
    cc94:	10b4d504 	addi	r2,r2,-11436
    cc98:	10800017 	ldw	r2,0(r2)
    cc9c:	defff204 	addi	sp,sp,-56
    cca0:	df000c15 	stw	fp,48(sp)
    cca4:	d8800015 	stw	r2,0(sp)
    cca8:	10800c04 	addi	r2,r2,48
    ccac:	dd400915 	stw	r21,36(sp)
    ccb0:	dfc00d15 	stw	ra,52(sp)
    ccb4:	ddc00b15 	stw	r23,44(sp)
    ccb8:	dd800a15 	stw	r22,40(sp)
    ccbc:	dd000815 	stw	r20,32(sp)
    ccc0:	dcc00715 	stw	r19,28(sp)
    ccc4:	dc800615 	stw	r18,24(sp)
    ccc8:	dc400515 	stw	r17,20(sp)
    cccc:	dc000415 	stw	r16,16(sp)
    ccd0:	d9000115 	stw	r4,4(sp)
    ccd4:	2839883a 	mov	fp,r5
    ccd8:	d8800215 	stw	r2,8(sp)
    ccdc:	057fffc4 	movi	r21,-1
    cce0:	d8800017 	ldw	r2,0(sp)
    cce4:	dd800217 	ldw	r22,8(sp)
    cce8:	15c00c17 	ldw	r23,48(r2)
    ccec:	b8001b26 	beq	r23,zero,cd5c <__call_exitprocs+0xcc>
    ccf0:	b9000117 	ldw	r4,4(r23)
    ccf4:	bd002217 	ldw	r20,136(r23)
    ccf8:	243fffc4 	addi	r16,r4,-1
    ccfc:	80001416 	blt	r16,zero,cd50 <__call_exitprocs+0xc0>
    cd00:	244007c4 	addi	r17,r4,31
    cd04:	21000044 	addi	r4,r4,1
    cd08:	8c63883a 	add	r17,r17,r17
    cd0c:	8427883a 	add	r19,r16,r16
    cd10:	2109883a 	add	r4,r4,r4
    cd14:	8c63883a 	add	r17,r17,r17
    cd18:	9ce7883a 	add	r19,r19,r19
    cd1c:	2109883a 	add	r4,r4,r4
    cd20:	a463883a 	add	r17,r20,r17
    cd24:	a4e7883a 	add	r19,r20,r19
    cd28:	b925883a 	add	r18,r23,r4
    cd2c:	e0001726 	beq	fp,zero,cd8c <__call_exitprocs+0xfc>
    cd30:	a0000226 	beq	r20,zero,cd3c <__call_exitprocs+0xac>
    cd34:	89400017 	ldw	r5,0(r17)
    cd38:	2f001426 	beq	r5,fp,cd8c <__call_exitprocs+0xfc>
    cd3c:	843fffc4 	addi	r16,r16,-1
    cd40:	8c7fff04 	addi	r17,r17,-4
    cd44:	9cffff04 	addi	r19,r19,-4
    cd48:	94bfff04 	addi	r18,r18,-4
    cd4c:	857ff71e 	bne	r16,r21,cd2c <__call_exitprocs+0x9c>
    cd50:	00800034 	movhi	r2,0
    cd54:	10800004 	addi	r2,r2,0
    cd58:	1000311e 	bne	r2,zero,ce20 <__call_exitprocs+0x190>
    cd5c:	dfc00d17 	ldw	ra,52(sp)
    cd60:	df000c17 	ldw	fp,48(sp)
    cd64:	ddc00b17 	ldw	r23,44(sp)
    cd68:	dd800a17 	ldw	r22,40(sp)
    cd6c:	dd400917 	ldw	r21,36(sp)
    cd70:	dd000817 	ldw	r20,32(sp)
    cd74:	dcc00717 	ldw	r19,28(sp)
    cd78:	dc800617 	ldw	r18,24(sp)
    cd7c:	dc400517 	ldw	r17,20(sp)
    cd80:	dc000417 	ldw	r16,16(sp)
    cd84:	dec00e04 	addi	sp,sp,56
    cd88:	f800283a 	ret
    cd8c:	b9000117 	ldw	r4,4(r23)
    cd90:	92000017 	ldw	r8,0(r18)
    cd94:	213fffc4 	addi	r4,r4,-1
    cd98:	24001a26 	beq	r4,r16,ce04 <__call_exitprocs+0x174>
    cd9c:	90000015 	stw	zero,0(r18)
    cda0:	403fe626 	beq	r8,zero,cd3c <__call_exitprocs+0xac>
    cda4:	ba400117 	ldw	r9,4(r23)
    cda8:	a0001226 	beq	r20,zero,cdf4 <__call_exitprocs+0x164>
    cdac:	00800044 	movi	r2,1
    cdb0:	1408983a 	sll	r4,r2,r16
    cdb4:	a1404017 	ldw	r5,256(r20)
    cdb8:	214a703a 	and	r5,r4,r5
    cdbc:	28000d26 	beq	r5,zero,cdf4 <__call_exitprocs+0x164>
    cdc0:	a1404117 	ldw	r5,260(r20)
    cdc4:	2148703a 	and	r4,r4,r5
    cdc8:	2000101e 	bne	r4,zero,ce0c <__call_exitprocs+0x17c>
    cdcc:	99400017 	ldw	r5,0(r19)
    cdd0:	d9000117 	ldw	r4,4(sp)
    cdd4:	da400315 	stw	r9,12(sp)
    cdd8:	403ee83a 	callr	r8
    cddc:	da400317 	ldw	r9,12(sp)
    cde0:	b9000117 	ldw	r4,4(r23)
    cde4:	227fbe1e 	bne	r4,r9,cce0 <__call_exitprocs+0x50>
    cde8:	b1000017 	ldw	r4,0(r22)
    cdec:	25ffd326 	beq	r4,r23,cd3c <__call_exitprocs+0xac>
    cdf0:	003fbb06 	br	cce0 <__call_exitprocs+0x50>
    cdf4:	da400315 	stw	r9,12(sp)
    cdf8:	403ee83a 	callr	r8
    cdfc:	da400317 	ldw	r9,12(sp)
    ce00:	003ff706 	br	cde0 <__call_exitprocs+0x150>
    ce04:	bc000115 	stw	r16,4(r23)
    ce08:	003fe506 	br	cda0 <__call_exitprocs+0x110>
    ce0c:	99000017 	ldw	r4,0(r19)
    ce10:	da400315 	stw	r9,12(sp)
    ce14:	403ee83a 	callr	r8
    ce18:	da400317 	ldw	r9,12(sp)
    ce1c:	003ff006 	br	cde0 <__call_exitprocs+0x150>
    ce20:	b9000117 	ldw	r4,4(r23)
    ce24:	20000e1e 	bne	r4,zero,ce60 <__call_exitprocs+0x1d0>
    ce28:	b9000017 	ldw	r4,0(r23)
    ce2c:	20000826 	beq	r4,zero,ce50 <__call_exitprocs+0x1c0>
    ce30:	b1000015 	stw	r4,0(r22)
    ce34:	a0000226 	beq	r20,zero,ce40 <__call_exitprocs+0x1b0>
    ce38:	a009883a 	mov	r4,r20
    ce3c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    ce40:	b809883a 	mov	r4,r23
    ce44:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    ce48:	b5c00017 	ldw	r23,0(r22)
    ce4c:	003fa706 	br	ccec <__call_exitprocs+0x5c>
    ce50:	0007883a 	mov	r3,zero
    ce54:	b82d883a 	mov	r22,r23
    ce58:	182f883a 	mov	r23,r3
    ce5c:	003fa306 	br	ccec <__call_exitprocs+0x5c>
    ce60:	b8c00017 	ldw	r3,0(r23)
    ce64:	003ffb06 	br	ce54 <__call_exitprocs+0x1c4>

0000ce68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ce68:	defffc04 	addi	sp,sp,-16
    ce6c:	df000315 	stw	fp,12(sp)
    ce70:	df000304 	addi	fp,sp,12
    ce74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ce78:	0001883a 	nop
    ce7c:	e0bfff17 	ldw	r2,-4(fp)
    ce80:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    ce84:	e0bffd17 	ldw	r2,-12(fp)
    ce88:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ce8c:	e0bffe17 	ldw	r2,-8(fp)
    ce90:	10000226 	beq	r2,zero,ce9c <_exit+0x34>
    ALT_SIM_FAIL();
    ce94:	002af070 	cmpltui	zero,zero,43969
    ce98:	00000106 	br	cea0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    ce9c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    cea0:	003fff06 	br	cea0 <_exit+0x38>
