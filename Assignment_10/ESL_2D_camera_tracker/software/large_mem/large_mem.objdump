
large_mem.elf:     file format elf32-littlenios2
large_mem.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020248

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006d1c memsz 0x00006d1c flags r-x
    LOAD off    0x00007d3c vaddr 0x00026d3c paddr 0x00027084 align 2**12
         filesz 0x00000348 memsz 0x00000348 flags rw-
    LOAD off    0x000083cc vaddr 0x000273cc paddr 0x000273cc align 2**12
         filesz 0x00000000 memsz 0x00000b08 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000068e8  00020248  00020248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000020c  00026b30  00026b30  00007b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000348  00026d3c  00027084  00007d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b08  000273cc  000273cc  000083cc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00027ed4  00027ed4  00008084  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000850  00000000  00000000  000080a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b006  00000000  00000000  000088f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003d11  00000000  00000000  000138fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004861  00000000  00000000  0001760f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000138c  00000000  00000000  0001be70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002973  00000000  00000000  0001d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000075fd  00000000  00000000  0001fb6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0002716c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c18  00000000  00000000  00027190  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002a4de  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002a4e1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002a4e4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002a4e5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002a4e6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002a4ea  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002a4ee  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002a4f2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002a4fb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002a504  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0002a50d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000070  00000000  00000000  0002a51f  2**0
                  CONTENTS, READONLY
 29 .jdi          000054b5  00000000  00000000  0002a58f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000424d8  00000000  00000000  0002fa44  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020248 l    d  .text	00000000 .text
00026b30 l    d  .rodata	00000000 .rodata
00026d3c l    d  .rwdata	00000000 .rwdata
000273cc l    d  .bss	00000000 .bss
00027ed4 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../large_mem_bsp//obj/HAL/src/crt0.o
00020280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 InterruptHandlerForUart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pan_integ.c
00000000 l    df *ABS*	00000000 pan_model.c
00000000 l    df *ABS*	00000000 pan_submod.c
00000000 l    df *ABS*	00000000 tilt_integ.c
00000000 l    df *ABS*	00000000 tilt_model.c
00000000 l    df *ABS*	00000000 tilt_submod.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00024bec l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00026d3c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00025428 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00025580 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000256b4 l     F .text	00000034 alt_dev_reg
00026e1c l     O .rwdata	0000002c jtag_uart
00026e48 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000259bc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00025b6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00025c6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
00025d88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00025eb4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00025ee0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00025ff4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00026134 l     F .text	0000003c alt_get_errno
00026170 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00027420 g     O .bss	00000004 alt_instruction_exception_handler
00025514 g     F .text	0000006c alt_main
00024b3c g     F .text	00000080 _puts_r
00027dd4 g     O .bss	00000100 alt_irq
000273d0 g     O .bss	00000002 RxHead_0
00027084 g       *ABS*	00000000 __flash_rwdata_start
00027cf4 g     O .bss	00000018 tilt_I
00024af0 g     F .text	0000004c printf
000215d8 g     F .text	00000060 pan_CalculateOutput
000273d2 g     O .bss	00000002 RxTail_0
000236f0 g     F .text	000000dc .hidden __gtdf2
00026590 g     F .text	00000024 altera_nios2_gen2_irq_init
00021008 g     F .text	000005d0 pan_CalculateDynamic
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00027404 g     O .bss	00000004 errno
00020284 g     F .text	00000064 InitUart0
00027d0c g     O .bss	00000018 tilt_R
000219f8 g     F .text	00000050 tilt_ModelInitialize_initialvalues
00027410 g     O .bss	00000004 alt_argv
0002f01c g       *ABS*	00000000 _gp
00026e9c g     O .rwdata	00000180 alt_fd_list
000265b4 g     F .text	00000090 alt_find_dev
000273ce g     O .bss	00000002 TxTail_0
00024954 g     F .text	000000dc .hidden __floatsidf
000260b8 g     F .text	0000007c alt_io_redirect
000237cc g     F .text	000000f4 .hidden __ltdf2
00024bbc g     F .text	00000014 puts
00026880 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002583c g     F .text	000000ec altera_avalon_jtag_uart_read
00024ab4 g     F .text	0000003c _printf_r
00022238 g     F .text	00000040 tilt_CopyVariablesToOutputs
000224a0 g     F .text	00000064 .hidden __udivsi3
00027034 g     O .rwdata	00000004 pan_number_of_inputs
0002704d g     O .rwdata	00000001 tilt_major
000267f0 g     F .text	00000090 alt_icache_flush
00020cf0 g     F .text	00000028 pan_DiscreteInitialize
00027c24 g     O .bss	00000018 pan_I
00027074 g     O .rwdata	00000004 alt_max_fd
00020414 g     F .text	0000003c EmptyUart0
000252a8 g     F .text	00000180 alt_irq_register
00020f94 g     F .text	0000003c pan_ModelInitialize_variables
0002255c g     F .text	000008ac .hidden __adddf3
00027400 g     O .bss	00000001 tilt_stop_simulation
00027058 g     O .rwdata	00000004 _global_impure_ptr
00027ed4 g       *ABS*	00000000 __bss_end
000217cc g     F .text	00000058 pan_TerminateSubmodel
000273d4 g     O .bss	00000008 pan_start_time
00026488 g     F .text	00000108 alt_tick
00020ec4 g     F .text	00000050 pan_ModelInitialize_initialvalues
000263ec g     F .text	0000009c alt_alarm_stop
00027408 g     O .bss	00000004 alt_irq_active
00027c3c g     O .bss	00000038 pan_P
00021914 g     F .text	000000e4 tilt_ModelInitialize_parameters
00020000 g       *ABS*	00000000 __alt_mem_onchip_mem
000200fc g     F .exceptions	000000d8 alt_irq_handler
00026e74 g     O .rwdata	00000028 alt_dev_null
00027c74 g     O .bss	00000018 pan_s
0002176c g     F .text	00000060 pan_CalculateSubmodel
000202e8 g     F .text	0000012c IsrUart0
0002704c g     O .rwdata	00000001 tilt_initialize
00025e94 g     F .text	00000020 alt_dcache_flush_all
000248d4 g     F .text	00000080 .hidden __fixdfsi
00027030 g     O .rwdata	00000001 pan_initialize
00027084 g       *ABS*	00000000 __ram_rwdata_end
0002706c g     O .rwdata	00000008 alt_dev_list
000255bc g     F .text	000000f8 write
00027d24 g     O .bss	00000060 tilt_V
00021824 g     F .text	00000028 tilt_DiscreteInitialize
00026d3c g       *ABS*	00000000 __ram_rodata_end
000237cc g     F .text	000000f4 .hidden __ledf2
000222f0 g     F .text	00000060 tilt_CalculateSubmodel
00022504 g     F .text	00000058 .hidden __umodsi3
00027020 g     O .rwdata	00000008 pan_finish_time
00022350 g     F .text	00000058 tilt_TerminateSubmodel
00027ed4 g       *ABS*	00000000 end
00022278 g     F .text	00000078 tilt_InitializeSubmodel
000273dc g     O .bss	00000008 pan_time
00025ca8 g     F .text	000000e0 altera_avalon_uart_write
000201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00027d84 g     O .bss	00000038 tilt_P
000386a0 g       *ABS*	00000000 __alt_stack_pointer
00021ac8 g     F .text	0000003c tilt_ModelInitialize_variables
00025a38 g     F .text	00000074 alt_avalon_timer_sc_init
00025b0c g     F .text	00000060 altera_avalon_uart_write_fd
00024a30 g     F .text	00000064 .hidden __clzsi2
00025928 g     F .text	00000094 altera_avalon_jtag_uart_write
00024c58 g     F .text	00000524 ___vfprintf_internal_r
0002696c g     F .text	00000190 __call_exitprocs
00020248 g     F .text	0000003c _start
00027418 g     O .bss	00000004 _alt_tick_rate
00021a48 g     F .text	00000080 tilt_ModelInitialize_states
0002741c g     O .bss	00000004 _alt_nticks
00025720 g     F .text	0000005c alt_sys_init
00020de0 g     F .text	000000e4 pan_ModelInitialize_parameters
00020450 g     F .text	0000005c GetUart0
00027050 g     O .rwdata	00000004 tilt_number_of_inputs
0002701c g     O .rwdata	00000002 maxStepCount0
00026d3c g       *ABS*	00000000 __ram_rwdata_start
00026b30 g       *ABS*	00000000 __ram_rodata_start
0002577c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002674c g     F .text	000000a4 alt_get_fd
000204ac g     F .text	0000011c PutUart0
00020d18 g     F .text	000000c8 pan_DiscreteStep
0002693c g     F .text	00000030 memcmp
00027ed4 g       *ABS*	00000000 __alt_stack_base
00027031 g     O .rwdata	00000001 pan_major
00022e08 g     F .text	000008e8 .hidden __divdf3
000273f4 g     O .bss	00000008 tilt_time
000238c0 g     F .text	00000718 .hidden __muldf3
00026644 g     F .text	00000108 alt_find_file
00025f1c g     F .text	000000a4 alt_dev_llist_insert
0002703c g     O .rwdata	00000008 tilt_finish_time
00025198 g     F .text	000000b8 __sfvwrite_small_dev
000273cc g       *ABS*	00000000 __bss_start
00024a94 g     F .text	00000020 memset
0002085c g     F .text	00000494 main
00027414 g     O .bss	00000004 alt_envp
000257dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002701e g     O .rwdata	00000002 maxStepCount1
00021694 g     F .text	00000060 pan_CopyVariablesToOutputs
00027078 g     O .rwdata	00000004 alt_errno
00027c8c g     O .bss	00000050 pan_V
000221c0 g     F .text	00000078 tilt_CopyInputsToVariables
000273fc g     O .bss	00000004 tilt_steps
000273e4 g     O .bss	00000004 pan_steps
000223a8 g     F .text	00000084 .hidden __divsi3
000273cc g     O .bss	00000002 TxHead_0
00026b30 g       *ABS*	00000000 __flash_rodata_start
000273e8 g     O .bss	00000001 pan_stop_simulation
000256e8 g     F .text	00000038 alt_irq_init
00026388 g     F .text	00000064 alt_release_fd
00026bfe g     O .rodata	00000100 .hidden __clz_tab
00025250 g     F .text	00000058 _write_r
00027424 g     O .bss	00000400 rx_buffer_0
00027028 g     O .rwdata	00000008 pan_step_size
00020f14 g     F .text	00000080 pan_ModelInitialize_states
0002705c g     O .rwdata	00000004 _impure_ptr
0002740c g     O .bss	00000004 alt_argc
000205c8 g     F .text	000000a4 InitUart
00020020 g       .exceptions	00000000 alt_irq_entry
00027064 g     O .rwdata	00000008 alt_fs_list
00021638 g     F .text	0000005c pan_CopyInputsToVariables
00021b04 g     F .text	00000038 tilt_ModelInitialize
00020020 g       *ABS*	00000000 __ram_exceptions_start
000216f4 g     F .text	00000078 pan_InitializeSubmodel
00020764 g     F .text	000000f8 Stepcount0ToSI
00027084 g       *ABS*	00000000 _edata
00025aac g     F .text	00000060 altera_avalon_uart_read_fd
00027ed4 g       *ABS*	00000000 _end
00020248 g       *ABS*	00000000 __ram_exceptions_end
00027038 g     O .rwdata	00000004 pan_number_of_outputs
00027dbc g     O .bss	00000018 tilt_s
0002691c g     F .text	00000020 exit
0002242c g     F .text	00000074 .hidden __modsi3
000386a0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00021b3c g     F .text	00000644 tilt_CalculateDynamic
00026afc g     F .text	00000034 _exit
00027044 g     O .rwdata	00000008 tilt_step_size
000273ec g     O .bss	00000008 tilt_start_time
00022180 g     F .text	00000040 tilt_CalculateOutput
00024bd0 g     F .text	0000001c strlen
00026234 g     F .text	00000154 open
000236f0 g     F .text	000000dc .hidden __gedf2
00027054 g     O .rwdata	00000004 tilt_number_of_outputs
00025fc0 g     F .text	00000034 alt_icache_flush_all
00027060 g     O .rwdata	00000004 alt_priority_mask
00027cdc g     O .bss	00000018 pan_R
0002517c g     F .text	0000001c __vfprintf_internal
00025ba8 g     F .text	000000c4 altera_avalon_uart_read
00020fd0 g     F .text	00000038 pan_ModelInitialize
00023fd8 g     F .text	000008fc .hidden __subdf3
0002066c g     F .text	000000f8 Stepcount1ToSI
0002707c g     O .rwdata	00000008 alt_alarm_list
00027824 g     O .bss	00000400 tx_buffer_0
00025dc4 g     F .text	000000d0 close
00025490 g     F .text	00000084 alt_load
0002184c g     F .text	000000c8 tilt_DiscreteStep



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe7964>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409214 	ori	at,at,584
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d40 	call	201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001526 	beq	r2,zero,20190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	008000b4 	movhi	r2,2
   20140:	109f7504 	addi	r2,r2,32212
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	109f7504 	addi	r2,r2,32212
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	e17ffd17 	ldw	r5,-12(fp)
   20174:	1009883a 	mov	r4,r2
   20178:	183ee83a 	callr	r3
#endif
        break;
   2017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20180:	0005313a 	rdctl	r2,ipending
   20184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20188:	e0bfff17 	ldw	r2,-4(fp)
   2018c:	00000706 	br	201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   20190:	e0bffc17 	ldw	r2,-16(fp)
   20194:	1085883a 	add	r2,r2,r2
   20198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   2019c:	e0bffd17 	ldw	r2,-12(fp)
   201a0:	10800044 	addi	r2,r2,1
   201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a8:	003fe006 	br	2012c <__alt_data_end+0xfffe7a8c>

    active = alt_irq_pending ();
   201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201b0:	e0bffb17 	ldw	r2,-20(fp)
   201b4:	103fda1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7a80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b8:	0001883a 	nop
}
   201bc:	0001883a 	nop
   201c0:	e037883a 	mov	sp,fp
   201c4:	dfc00117 	ldw	ra,4(sp)
   201c8:	df000017 	ldw	fp,0(sp)
   201cc:	dec00204 	addi	sp,sp,8
   201d0:	f800283a 	ret

000201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d4:	defffb04 	addi	sp,sp,-20
   201d8:	dfc00415 	stw	ra,16(sp)
   201dc:	df000315 	stw	fp,12(sp)
   201e0:	df000304 	addi	fp,sp,12
   201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e8:	000531fa 	rdctl	r2,exception
   201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201f0:	e0bffd17 	ldw	r2,-12(fp)
   201f4:	10801f0c 	andi	r2,r2,124
   201f8:	1004d0ba 	srli	r2,r2,2
   201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   20200:	0005333a 	rdctl	r2,badaddr
   20204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20208:	d0a10117 	ldw	r2,-31740(gp)
   2020c:	10000726 	beq	r2,zero,2022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20210:	d0a10117 	ldw	r2,-31740(gp)
   20214:	e0fffd17 	ldw	r3,-12(fp)
   20218:	e1bffe17 	ldw	r6,-8(fp)
   2021c:	e17fff17 	ldw	r5,-4(fp)
   20220:	1809883a 	mov	r4,r3
   20224:	103ee83a 	callr	r2
   20228:	00000206 	br	20234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   2022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20230:	0005883a 	mov	r2,zero
}
   20234:	e037883a 	mov	sp,fp
   20238:	dfc00117 	ldw	ra,4(sp)
   2023c:	df000017 	ldw	fp,0(sp)
   20240:	dec00204 	addi	sp,sp,8
   20244:	f800283a 	ret

Disassembly of section .text:

00020248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20248:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   2024c:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   20250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20254:	d6bc0714 	ori	gp,gp,61468
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   2025c:	109cf314 	ori	r2,r2,29644

    movhi r3, %hi(__bss_end)
   20260:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20264:	18dfb514 	ori	r3,r3,32468

    beq r2, r3, 1f
   20268:	10c00326 	beq	r2,r3,20278 <_start+0x30>

0:
    stw zero, (r2)
   2026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20274:	10fffd36 	bltu	r2,r3,2026c <__alt_data_end+0xfffe7bcc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20278:	00254900 	call	25490 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   2027c:	00255140 	call	25514 <alt_main>

00020280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20280:	003fff06 	br	20280 <__alt_data_end+0xfffe7be0>

00020284 <InitUart0>:
unsigned short RxHead_0=0;
unsigned short RxTail_0=0;
unsigned char rx_buffer_0[RX_BUFFER_SIZE_0];
 
void InitUart0(unsigned int BaudRate)
{
   20284:	defffc04 	addi	sp,sp,-16
   20288:	dfc00315 	stw	ra,12(sp)
   2028c:	df000215 	stw	fp,8(sp)
   20290:	df000204 	addi	fp,sp,8
   20294:	e13fff15 	stw	r4,-4(fp)
    unsigned int divisor;
    
    divisor = (ALT_CPU_FREQ/BaudRate) + 1;
   20298:	e17fff17 	ldw	r5,-4(fp)
   2029c:	0100bef4 	movhi	r4,763
   202a0:	213c2004 	addi	r4,r4,-3968
   202a4:	00224a00 	call	224a0 <__udivsi3>
   202a8:	10800044 	addi	r2,r2,1
   202ac:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
   202b0:	e0fffe17 	ldw	r3,-8(fp)
   202b4:	00800134 	movhi	r2,4
   202b8:	10850404 	addi	r2,r2,5136
   202bc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   202c0:	00c02004 	movi	r3,128
   202c4:	00800134 	movhi	r2,4
   202c8:	10850304 	addi	r2,r2,5132
   202cc:	10c00035 	stwio	r3,0(r2)
}
   202d0:	0001883a 	nop
   202d4:	e037883a 	mov	sp,fp
   202d8:	dfc00117 	ldw	ra,4(sp)
   202dc:	df000017 	ldw	fp,0(sp)
   202e0:	dec00204 	addi	sp,sp,8
   202e4:	f800283a 	ret

000202e8 <IsrUart0>:
 
void IsrUart0(void* context, unsigned int id)
{
   202e8:	defffc04 	addi	sp,sp,-16
   202ec:	df000315 	stw	fp,12(sp)
   202f0:	df000304 	addi	fp,sp,12
   202f4:	e13ffe15 	stw	r4,-8(fp)
   202f8:	e17fff15 	stw	r5,-4(fp)
    int sr;
    
    sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
   202fc:	00800134 	movhi	r2,4
   20300:	10850204 	addi	r2,r2,5128
   20304:	10800037 	ldwio	r2,0(r2)
   20308:	e0bffd15 	stw	r2,-12(fp)

    if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
   2030c:	e0bffd17 	ldw	r2,-12(fp)
   20310:	1080200c 	andi	r2,r2,128
   20314:	10001626 	beq	r2,zero,20370 <IsrUart0+0x88>
        rx_buffer_0[RxHead_0] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   20318:	d0a0ed0b 	ldhu	r2,-31820(gp)
   2031c:	10ffffcc 	andi	r3,r2,65535
   20320:	00800134 	movhi	r2,4
   20324:	10850004 	addi	r2,r2,5120
   20328:	10800037 	ldwio	r2,0(r2)
   2032c:	1009883a 	mov	r4,r2
   20330:	008000b4 	movhi	r2,2
   20334:	109d0904 	addi	r2,r2,29732
   20338:	10c5883a 	add	r2,r2,r3
   2033c:	11000005 	stb	r4,0(r2)
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
   20340:	0007883a 	mov	r3,zero
   20344:	00800134 	movhi	r2,4
   20348:	10850204 	addi	r2,r2,5128
   2034c:	10c00035 	stwio	r3,0(r2)
        if (++RxHead_0 > (RX_BUFFER_SIZE_0 - 1)) {
   20350:	d0a0ed0b 	ldhu	r2,-31820(gp)
   20354:	10800044 	addi	r2,r2,1
   20358:	d0a0ed0d 	sth	r2,-31820(gp)
   2035c:	d0a0ed0b 	ldhu	r2,-31820(gp)
   20360:	10bfffcc 	andi	r2,r2,65535
   20364:	10810030 	cmpltui	r2,r2,1024
   20368:	1000011e 	bne	r2,zero,20370 <IsrUart0+0x88>
            RxHead_0 = 0;
   2036c:	d020ed0d 	sth	zero,-31820(gp)
        }
    }

    if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
   20370:	e0bffd17 	ldw	r2,-12(fp)
   20374:	1080100c 	andi	r2,r2,64
   20378:	10002126 	beq	r2,zero,20400 <IsrUart0+0x118>
        if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK) {
   2037c:	00800134 	movhi	r2,4
   20380:	10850304 	addi	r2,r2,5132
   20384:	10800037 	ldwio	r2,0(r2)
   20388:	1080100c 	andi	r2,r2,64
   2038c:	10001c26 	beq	r2,zero,20400 <IsrUart0+0x118>
            if (TxTail_0 != TxHead_0) {
   20390:	d0e0ec8b 	ldhu	r3,-31822(gp)
   20394:	d0a0ec0b 	ldhu	r2,-31824(gp)
   20398:	18ffffcc 	andi	r3,r3,65535
   2039c:	10bfffcc 	andi	r2,r2,65535
   203a0:	18801326 	beq	r3,r2,203f0 <IsrUart0+0x108>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_0[TxTail_0]);
   203a4:	d0a0ec8b 	ldhu	r2,-31822(gp)
   203a8:	10ffffcc 	andi	r3,r2,65535
   203ac:	008000b4 	movhi	r2,2
   203b0:	109e0904 	addi	r2,r2,30756
   203b4:	10c5883a 	add	r2,r2,r3
   203b8:	10800003 	ldbu	r2,0(r2)
   203bc:	10c03fcc 	andi	r3,r2,255
   203c0:	00800134 	movhi	r2,4
   203c4:	10850104 	addi	r2,r2,5124
   203c8:	10c00035 	stwio	r3,0(r2)
                if (++TxTail_0 > (TX_BUFFER_SIZE_0 - 1)) {
   203cc:	d0a0ec8b 	ldhu	r2,-31822(gp)
   203d0:	10800044 	addi	r2,r2,1
   203d4:	d0a0ec8d 	sth	r2,-31822(gp)
   203d8:	d0a0ec8b 	ldhu	r2,-31822(gp)
   203dc:	10bfffcc 	andi	r2,r2,65535
   203e0:	10810030 	cmpltui	r2,r2,1024
   203e4:	1000061e 	bne	r2,zero,20400 <IsrUart0+0x118>
                    TxTail_0 = 0;
   203e8:	d020ec8d 	sth	zero,-31822(gp)
            else {
                IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
            }
        }
    }
}
   203ec:	00000406 	br	20400 <IsrUart0+0x118>
                if (++TxTail_0 > (TX_BUFFER_SIZE_0 - 1)) {
                    TxTail_0 = 0;
                }
            }
            else {
                IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   203f0:	00c02004 	movi	r3,128
   203f4:	00800134 	movhi	r2,4
   203f8:	10850304 	addi	r2,r2,5132
   203fc:	10c00035 	stwio	r3,0(r2)
            }
        }
    }
}
   20400:	0001883a 	nop
   20404:	e037883a 	mov	sp,fp
   20408:	df000017 	ldw	fp,0(sp)
   2040c:	dec00104 	addi	sp,sp,4
   20410:	f800283a 	ret

00020414 <EmptyUart0>:
 
unsigned char EmptyUart0()
{
   20414:	deffff04 	addi	sp,sp,-4
   20418:	df000015 	stw	fp,0(sp)
   2041c:	d839883a 	mov	fp,sp
    if(RxHead_0 == RxTail_0) {
   20420:	d0e0ed0b 	ldhu	r3,-31820(gp)
   20424:	d0a0ed8b 	ldhu	r2,-31818(gp)
   20428:	18ffffcc 	andi	r3,r3,65535
   2042c:	10bfffcc 	andi	r2,r2,65535
   20430:	1880021e 	bne	r3,r2,2043c <EmptyUart0+0x28>
        return 1;
   20434:	00800044 	movi	r2,1
   20438:	00000106 	br	20440 <EmptyUart0+0x2c>
    }
    
    return 0;
   2043c:	0005883a 	mov	r2,zero
} 
   20440:	e037883a 	mov	sp,fp
   20444:	df000017 	ldw	fp,0(sp)
   20448:	dec00104 	addi	sp,sp,4
   2044c:	f800283a 	ret

00020450 <GetUart0>:
    
unsigned char GetUart0(void)
{
   20450:	defffe04 	addi	sp,sp,-8
   20454:	df000115 	stw	fp,4(sp)
   20458:	df000104 	addi	fp,sp,4
    unsigned char rxChar; 
    
    /* buffer is empty */
    
    rxChar=rx_buffer_0[RxTail_0];
   2045c:	d0a0ed8b 	ldhu	r2,-31818(gp)
   20460:	10ffffcc 	andi	r3,r2,65535
   20464:	008000b4 	movhi	r2,2
   20468:	109d0904 	addi	r2,r2,29732
   2046c:	10c5883a 	add	r2,r2,r3
   20470:	10800003 	ldbu	r2,0(r2)
   20474:	e0bfff05 	stb	r2,-4(fp)
    if (++RxTail_0 > (RX_BUFFER_SIZE_0 - 1)) {
   20478:	d0a0ed8b 	ldhu	r2,-31818(gp)
   2047c:	10800044 	addi	r2,r2,1
   20480:	d0a0ed8d 	sth	r2,-31818(gp)
   20484:	d0a0ed8b 	ldhu	r2,-31818(gp)
   20488:	10bfffcc 	andi	r2,r2,65535
   2048c:	10810030 	cmpltui	r2,r2,1024
   20490:	1000011e 	bne	r2,zero,20498 <GetUart0+0x48>
        RxTail_0 = 0;
   20494:	d020ed8d 	sth	zero,-31818(gp)
    }
    
    return rxChar;
   20498:	e0bfff03 	ldbu	r2,-4(fp)
}
   2049c:	e037883a 	mov	sp,fp
   204a0:	df000017 	ldw	fp,0(sp)
   204a4:	dec00104 	addi	sp,sp,4
   204a8:	f800283a 	ret

000204ac <PutUart0>:
 
unsigned char PutUart0(unsigned char in_char)
{
   204ac:	defffc04 	addi	sp,sp,-16
   204b0:	df000315 	stw	fp,12(sp)
   204b4:	df000304 	addi	fp,sp,12
   204b8:	2005883a 	mov	r2,r4
   204bc:	e0bfff05 	stb	r2,-4(fp)
    unsigned short size;
    unsigned int z;
    
    z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
   204c0:	00800134 	movhi	r2,4
   204c4:	10850204 	addi	r2,r2,5128
   204c8:	10800037 	ldwio	r2,0(r2)
   204cc:	1080100c 	andi	r2,r2,64
   204d0:	e0bffe15 	stw	r2,-8(fp)
    
    if ((TxHead_0==TxTail_0) && z) {
   204d4:	d0e0ec0b 	ldhu	r3,-31824(gp)
   204d8:	d0a0ec8b 	ldhu	r2,-31822(gp)
   204dc:	18ffffcc 	andi	r3,r3,65535
   204e0:	10bfffcc 	andi	r2,r2,65535
   204e4:	1880071e 	bne	r3,r2,20504 <PutUart0+0x58>
   204e8:	e0bffe17 	ldw	r2,-8(fp)
   204ec:	10000526 	beq	r2,zero,20504 <PutUart0+0x58>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
   204f0:	e0ffff03 	ldbu	r3,-4(fp)
   204f4:	00800134 	movhi	r2,4
   204f8:	10850104 	addi	r2,r2,5124
   204fc:	10c00035 	stwio	r3,0(r2)
   20500:	00002c06 	br	205b4 <PutUart0+0x108>
    } else {
        if (TxHead_0 >= TxTail_0) {
   20504:	d0e0ec0b 	ldhu	r3,-31824(gp)
   20508:	d0a0ec8b 	ldhu	r2,-31822(gp)
   2050c:	18ffffcc 	andi	r3,r3,65535
   20510:	10bfffcc 	andi	r2,r2,65535
   20514:	18800536 	bltu	r3,r2,2052c <PutUart0+0x80>
            size = TxHead_0 - TxTail_0;
   20518:	d0e0ec0b 	ldhu	r3,-31824(gp)
   2051c:	d0a0ec8b 	ldhu	r2,-31822(gp)
   20520:	1885c83a 	sub	r2,r3,r2
   20524:	e0bffd0d 	sth	r2,-12(fp)
   20528:	00000506 	br	20540 <PutUart0+0x94>
        } else {
            size = ((TX_BUFFER_SIZE_0 - 1) - TxTail_0) + TxHead_0;
   2052c:	d0e0ec0b 	ldhu	r3,-31824(gp)
   20530:	d0a0ec8b 	ldhu	r2,-31822(gp)
   20534:	1885c83a 	sub	r2,r3,r2
   20538:	1080ffc4 	addi	r2,r2,1023
   2053c:	e0bffd0d 	sth	r2,-12(fp)
        }

        if (size > (TX_BUFFER_SIZE_0 - 3)) {
   20540:	e0bffd0b 	ldhu	r2,-12(fp)
   20544:	1080ffb0 	cmpltui	r2,r2,1022
   20548:	1000021e 	bne	r2,zero,20554 <PutUart0+0xa8>
            return (-1);
   2054c:	00bfffc4 	movi	r2,-1
   20550:	00001906 	br	205b8 <PutUart0+0x10c>
        }
        
        tx_buffer_0[TxHead_0] = in_char;
   20554:	d0a0ec0b 	ldhu	r2,-31824(gp)
   20558:	10ffffcc 	andi	r3,r2,65535
   2055c:	008000b4 	movhi	r2,2
   20560:	109e0904 	addi	r2,r2,30756
   20564:	10c5883a 	add	r2,r2,r3
   20568:	e0ffff03 	ldbu	r3,-4(fp)
   2056c:	10c00005 	stb	r3,0(r2)

        if (++TxHead_0 > (TX_BUFFER_SIZE_0-1)) {
   20570:	d0a0ec0b 	ldhu	r2,-31824(gp)
   20574:	10800044 	addi	r2,r2,1
   20578:	d0a0ec0d 	sth	r2,-31824(gp)
   2057c:	d0a0ec0b 	ldhu	r2,-31824(gp)
   20580:	10bfffcc 	andi	r2,r2,65535
   20584:	10810030 	cmpltui	r2,r2,1024
   20588:	1000011e 	bne	r2,zero,20590 <PutUart0+0xe4>
            TxHead_0 = 0;
   2058c:	d020ec0d 	sth	zero,-31824(gp)
        }

        z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   20590:	00800134 	movhi	r2,4
   20594:	10850304 	addi	r2,r2,5132
   20598:	10800037 	ldwio	r2,0(r2)
   2059c:	10801014 	ori	r2,r2,64
   205a0:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
   205a4:	e0fffe17 	ldw	r3,-8(fp)
   205a8:	00800134 	movhi	r2,4
   205ac:	10850304 	addi	r2,r2,5132
   205b0:	10c00035 	stwio	r3,0(r2)
    }

    return(1);
   205b4:	00800044 	movi	r2,1
}
   205b8:	e037883a 	mov	sp,fp
   205bc:	df000017 	ldw	fp,0(sp)
   205c0:	dec00104 	addi	sp,sp,4
   205c4:	f800283a 	ret

000205c8 <InitUart>:

uint16_t maxStepCount0 = 1115;
uint16_t maxStepCount1 = 221;

void InitUart()
{
   205c8:	defff904 	addi	sp,sp,-28
   205cc:	dfc00615 	stw	ra,24(sp)
   205d0:	df000515 	stw	fp,20(sp)
   205d4:	df000504 	addi	fp,sp,20
    int context_uart0;

    InitUart0(BAUD_RATE_0);
   205d8:	010000b4 	movhi	r4,2
   205dc:	21308004 	addi	r4,r4,-15872
   205e0:	00202840 	call	20284 <InitUart0>

    //alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ,&context_uart1,IsrUart1,NULL); // install UART1 ISR
    alt_irq_register(UART_0_IRQ,&context_uart0,IsrUart0); // install UART0 ISR
   205e4:	e0bfff04 	addi	r2,fp,-4
   205e8:	018000b4 	movhi	r6,2
   205ec:	3180ba04 	addi	r6,r6,744
   205f0:	100b883a 	mov	r5,r2
   205f4:	0009883a 	mov	r4,zero
   205f8:	00252a80 	call	252a8 <alt_irq_register>
   205fc:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20600:	0005303a 	rdctl	r2,status
   20604:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20608:	e0fffc17 	ldw	r3,-16(fp)
   2060c:	00bfff84 	movi	r2,-2
   20610:	1884703a 	and	r2,r3,r2
   20614:	1001703a 	wrctl	status,r2
  
  return context;
   20618:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2061c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   20620:	00c00044 	movi	r3,1
   20624:	e0bffb17 	ldw	r2,-20(fp)
   20628:	1884983a 	sll	r2,r3,r2
   2062c:	1007883a 	mov	r3,r2
   20630:	d0a0fb17 	ldw	r2,-31764(gp)
   20634:	1884b03a 	or	r2,r3,r2
   20638:	d0a0fb15 	stw	r2,-31764(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2063c:	d0a0fb17 	ldw	r2,-31764(gp)
   20640:	100170fa 	wrctl	ienable,r2
   20644:	e0bffd17 	ldw	r2,-12(fp)
   20648:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2064c:	e0bffe17 	ldw	r2,-8(fp)
   20650:	1001703a 	wrctl	status,r2

    //alt_ic_irq_enable (UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ);
    alt_irq_enable (UART_0_IRQ);
}
   20654:	0001883a 	nop
   20658:	e037883a 	mov	sp,fp
   2065c:	dfc00117 	ldw	ra,4(sp)
   20660:	df000017 	ldw	fp,0(sp)
   20664:	dec00204 	addi	sp,sp,8
   20668:	f800283a 	ret

0002066c <Stepcount1ToSI>:

double Stepcount1ToSI(int16_t steps)
{
   2066c:	defffb04 	addi	sp,sp,-20
   20670:	dfc00415 	stw	ra,16(sp)
   20674:	df000315 	stw	fp,12(sp)
   20678:	df000304 	addi	fp,sp,12
   2067c:	2005883a 	mov	r2,r4
   20680:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount1/170*360;
   20684:	d0a0008b 	ldhu	r2,-32766(gp)
   20688:	10bfffcc 	andi	r2,r2,65535
   2068c:	01402a84 	movi	r5,170
   20690:	1009883a 	mov	r4,r2
   20694:	00224a00 	call	224a0 <__udivsi3>
   20698:	10bfffcc 	andi	r2,r2,65535
   2069c:	10805a24 	muli	r2,r2,360
   206a0:	1009883a 	mov	r4,r2
   206a4:	00249540 	call	24954 <__floatsidf>
   206a8:	1009883a 	mov	r4,r2
   206ac:	180b883a 	mov	r5,r3
   206b0:	e13ffd15 	stw	r4,-12(fp)
   206b4:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
   206b8:	e0bfff0f 	ldh	r2,-4(fp)
   206bc:	1009883a 	mov	r4,r2
   206c0:	00249540 	call	24954 <__floatsidf>
   206c4:	1011883a 	mov	r8,r2
   206c8:	1813883a 	mov	r9,r3
   206cc:	e1bffd17 	ldw	r6,-12(fp)
   206d0:	e1fffe17 	ldw	r7,-8(fp)
   206d4:	4009883a 	mov	r4,r8
   206d8:	480b883a 	mov	r5,r9
   206dc:	0022e080 	call	22e08 <__divdf3>
   206e0:	1009883a 	mov	r4,r2
   206e4:	180b883a 	mov	r5,r3
   206e8:	2005883a 	mov	r2,r4
   206ec:	2807883a 	mov	r3,r5
   206f0:	100d883a 	mov	r6,r2
   206f4:	180f883a 	mov	r7,r3
   206f8:	1009883a 	mov	r4,r2
   206fc:	180b883a 	mov	r5,r3
   20700:	002255c0 	call	2255c <__adddf3>
   20704:	1009883a 	mov	r4,r2
   20708:	180b883a 	mov	r5,r3
   2070c:	2005883a 	mov	r2,r4
   20710:	2807883a 	mov	r3,r5
   20714:	01b020f4 	movhi	r6,49283
   20718:	31849bc4 	addi	r6,r6,4719
   2071c:	01d00274 	movhi	r7,16393
   20720:	39c87284 	addi	r7,r7,8650
   20724:	1009883a 	mov	r4,r2
   20728:	180b883a 	mov	r5,r3
   2072c:	00238c00 	call	238c0 <__muldf3>
   20730:	100f883a 	mov	r7,r2
   20734:	1811883a 	mov	r8,r3
   20738:	380b883a 	mov	r5,r7
   2073c:	400d883a 	mov	r6,r8
   20740:	2807883a 	mov	r3,r5
   20744:	3009883a 	mov	r4,r6

}
   20748:	1805883a 	mov	r2,r3
   2074c:	2007883a 	mov	r3,r4
   20750:	e037883a 	mov	sp,fp
   20754:	dfc00117 	ldw	ra,4(sp)
   20758:	df000017 	ldw	fp,0(sp)
   2075c:	dec00204 	addi	sp,sp,8
   20760:	f800283a 	ret

00020764 <Stepcount0ToSI>:

double Stepcount0ToSI(int16_t steps)
{
   20764:	defffb04 	addi	sp,sp,-20
   20768:	dfc00415 	stw	ra,16(sp)
   2076c:	df000315 	stw	fp,12(sp)
   20770:	df000304 	addi	fp,sp,12
   20774:	2005883a 	mov	r2,r4
   20778:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount0/325*360;
   2077c:	d0a0000b 	ldhu	r2,-32768(gp)
   20780:	10bfffcc 	andi	r2,r2,65535
   20784:	01405144 	movi	r5,325
   20788:	1009883a 	mov	r4,r2
   2078c:	00224a00 	call	224a0 <__udivsi3>
   20790:	10bfffcc 	andi	r2,r2,65535
   20794:	10805a24 	muli	r2,r2,360
   20798:	1009883a 	mov	r4,r2
   2079c:	00249540 	call	24954 <__floatsidf>
   207a0:	1009883a 	mov	r4,r2
   207a4:	180b883a 	mov	r5,r3
   207a8:	e13ffd15 	stw	r4,-12(fp)
   207ac:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
   207b0:	e0bfff0f 	ldh	r2,-4(fp)
   207b4:	1009883a 	mov	r4,r2
   207b8:	00249540 	call	24954 <__floatsidf>
   207bc:	1011883a 	mov	r8,r2
   207c0:	1813883a 	mov	r9,r3
   207c4:	e1bffd17 	ldw	r6,-12(fp)
   207c8:	e1fffe17 	ldw	r7,-8(fp)
   207cc:	4009883a 	mov	r4,r8
   207d0:	480b883a 	mov	r5,r9
   207d4:	0022e080 	call	22e08 <__divdf3>
   207d8:	1009883a 	mov	r4,r2
   207dc:	180b883a 	mov	r5,r3
   207e0:	2005883a 	mov	r2,r4
   207e4:	2807883a 	mov	r3,r5
   207e8:	100d883a 	mov	r6,r2
   207ec:	180f883a 	mov	r7,r3
   207f0:	1009883a 	mov	r4,r2
   207f4:	180b883a 	mov	r5,r3
   207f8:	002255c0 	call	2255c <__adddf3>
   207fc:	1009883a 	mov	r4,r2
   20800:	180b883a 	mov	r5,r3
   20804:	2005883a 	mov	r2,r4
   20808:	2807883a 	mov	r3,r5
   2080c:	01b020f4 	movhi	r6,49283
   20810:	31849bc4 	addi	r6,r6,4719
   20814:	01d00274 	movhi	r7,16393
   20818:	39c87284 	addi	r7,r7,8650
   2081c:	1009883a 	mov	r4,r2
   20820:	180b883a 	mov	r5,r3
   20824:	00238c00 	call	238c0 <__muldf3>
   20828:	100f883a 	mov	r7,r2
   2082c:	1811883a 	mov	r8,r3
   20830:	380b883a 	mov	r5,r7
   20834:	400d883a 	mov	r6,r8
   20838:	2807883a 	mov	r3,r5
   2083c:	3009883a 	mov	r4,r6
}
   20840:	1805883a 	mov	r2,r3
   20844:	2007883a 	mov	r3,r4
   20848:	e037883a 	mov	sp,fp
   2084c:	dfc00117 	ldw	ra,4(sp)
   20850:	df000017 	ldw	fp,0(sp)
   20854:	dec00204 	addi	sp,sp,8
   20858:	f800283a 	ret

0002085c <main>:

int main()
{
   2085c:	deffde04 	addi	sp,sp,-136
   20860:	dfc02115 	stw	ra,132(sp)
   20864:	df002015 	stw	fp,128(sp)
   20868:	df002004 	addi	fp,sp,128
	unsigned char ch;
	printf("\n\nHello NiosII!!!!!\n");
   2086c:	010000b4 	movhi	r4,2
   20870:	211acc04 	addi	r4,r4,27440
   20874:	0024bbc0 	call	24bbc <puts>

	InitUart();
   20878:	00205c80 	call	205c8 <InitUart>
	double pan_y [1 + 1];
	double tilt_u[3 + 1];
	double tilt_y[1 + 1];

	/* Initialize the inputs and outputs with correct initial values */
	pan_u[0] = 0.0;		/* corr */
   2087c:	e03fe815 	stw	zero,-96(fp)
   20880:	e03fe915 	stw	zero,-92(fp)
	pan_u[1] = 0.0;		/* in */
   20884:	e03fea15 	stw	zero,-88(fp)
   20888:	e03feb15 	stw	zero,-84(fp)
	pan_u[2] = 0.0;		/* position */
   2088c:	e03fec15 	stw	zero,-80(fp)
   20890:	e03fed15 	stw	zero,-76(fp)

	pan_y[0] = 0.0;		/* out */
   20894:	e03ff015 	stw	zero,-64(fp)
   20898:	e03ff115 	stw	zero,-60(fp)
	
	tilt_u[0] = 0.0;		/* corr */
   2089c:	e03ff415 	stw	zero,-48(fp)
   208a0:	e03ff515 	stw	zero,-44(fp)
	tilt_u[1] = 0.0;		/* in */
   208a4:	e03ff615 	stw	zero,-40(fp)
   208a8:	e03ff715 	stw	zero,-36(fp)
	tilt_u[2] = 0.0;		/* position */
   208ac:	e03ff815 	stw	zero,-32(fp)
   208b0:	e03ff915 	stw	zero,-28(fp)

	tilt_y[0] = 0.0;		/* out */
   208b4:	e03ffc15 	stw	zero,-16(fp)
   208b8:	e03ffd15 	stw	zero,-12(fp)




	/* Initialize the submodel itself */
	pan_InitializeSubmodel (&pan_u, &pan_y, pan_time);
   208bc:	d0a0f017 	ldw	r2,-31808(gp)
   208c0:	d0e0f117 	ldw	r3,-31804(gp)
   208c4:	e17ff004 	addi	r5,fp,-64
   208c8:	e13fe804 	addi	r4,fp,-96
   208cc:	100d883a 	mov	r6,r2
   208d0:	180f883a 	mov	r7,r3
   208d4:	00216f40 	call	216f4 <pan_InitializeSubmodel>
	tilt_InitializeSubmodel(&tilt_u, &tilt_y, pan_time);
   208d8:	d0a0f017 	ldw	r2,-31808(gp)
   208dc:	d0e0f117 	ldw	r3,-31804(gp)
   208e0:	e17ffc04 	addi	r5,fp,-16
   208e4:	e13ff404 	addi	r4,fp,-48
   208e8:	100d883a 	mov	r6,r2
   208ec:	180f883a 	mov	r7,r3
   208f0:	00222780 	call	22278 <tilt_InitializeSubmodel>
	
	//reset calibration
	IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000001000000000000000);
   208f4:	00e00014 	movui	r3,32768
   208f8:	00800134 	movhi	r2,4
   208fc:	10840004 	addi	r2,r2,4096
   20900:	10c00035 	stwio	r3,0(r2)
	IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000000000000000000000);
   20904:	0007883a 	mov	r3,zero
   20908:	00800134 	movhi	r2,4
   2090c:	10840004 	addi	r2,r2,4096
   20910:	10c00035 	stwio	r3,0(r2)
	
	
	//variables
	uint32_t nReadOut = 0;
   20914:	e03fe215 	stw	zero,-120(fp)
	uint16_t stepCount0 = 0;
   20918:	e03fe00d 	sth	zero,-128(fp)
	uint16_t stepCount1 = 0;
   2091c:	e03fe08d 	sth	zero,-126(fp)
	uint16_t stepCount0Old = 0;
   20920:	e03fe10d 	sth	zero,-124(fp)
	uint16_t stepCount1Old = 0;
   20924:	e03fe18d 	sth	zero,-122(fp)
	int8_t PWM0 = 0;
   20928:	e03fe305 	stb	zero,-116(fp)
	int8_t PWM1 = 0;
   2092c:	e03fe345 	stb	zero,-115(fp)
	uint32_t avalondSend = 0;
   20930:	e03fe415 	stw	zero,-112(fp)
	while( (pan_stop_simulation == 0) ) {
   20934:	0000d506 	br	20c8c <main+0x430>

		//avalon bus communication
		nReadOut = IORD(ESL_NIOS_II_IP_0_BASE, 0x00);
   20938:	00800134 	movhi	r2,4
   2093c:	10840004 	addi	r2,r2,4096
   20940:	10800037 	ldwio	r2,0(r2)
   20944:	e0bfe215 	stw	r2,-120(fp)
		unsigned int readID = nReadOut >> 29;
   20948:	e0bfe217 	ldw	r2,-120(fp)
   2094c:	1004d77a 	srli	r2,r2,29
   20950:	e0bfe515 	stw	r2,-108(fp)
		nReadOut = nReadOut << 3;
   20954:	e0bfe217 	ldw	r2,-120(fp)
   20958:	100490fa 	slli	r2,r2,3
   2095c:	e0bfe215 	stw	r2,-120(fp)
		uint32_t temp32;

		switch(readID) {
   20960:	e0bfe517 	ldw	r2,-108(fp)
   20964:	10c00060 	cmpeqi	r3,r2,1
   20968:	1800031e 	bne	r3,zero,20978 <main+0x11c>
   2096c:	108000a0 	cmpeqi	r2,r2,2
   20970:	10000b1e 	bne	r2,zero,209a0 <main+0x144>
   20974:	00002006 	br	209f8 <main+0x19c>
			case 1:
				stepCount0 = nReadOut >> (32-11);
   20978:	e0bfe217 	ldw	r2,-120(fp)
   2097c:	1004d57a 	srli	r2,r2,21
   20980:	e0bfe00d 	sth	r2,-128(fp)

				temp32 = nReadOut << 11;
   20984:	e0bfe217 	ldw	r2,-120(fp)
   20988:	100492fa 	slli	r2,r2,11
   2098c:	e0bfe615 	stw	r2,-104(fp)
				stepCount1 = temp32 >> (32-11);
   20990:	e0bfe617 	ldw	r2,-104(fp)
   20994:	1004d57a 	srli	r2,r2,21
   20998:	e0bfe08d 	sth	r2,-126(fp)
				break;
   2099c:	00001a06 	br	20a08 <main+0x1ac>
			case 2:
				maxStepCount0 = nReadOut >> (32-11);
   209a0:	e0bfe217 	ldw	r2,-120(fp)
   209a4:	1004d57a 	srli	r2,r2,21
   209a8:	d0a0000d 	sth	r2,-32768(gp)
				temp32 = nReadOut << 11;
   209ac:	e0bfe217 	ldw	r2,-120(fp)
   209b0:	100492fa 	slli	r2,r2,11
   209b4:	e0bfe615 	stw	r2,-104(fp)
				maxStepCount1 = temp32 >> (32-11);
   209b8:	e0bfe617 	ldw	r2,-104(fp)
   209bc:	1004d57a 	srli	r2,r2,21
   209c0:	d0a0008d 	sth	r2,-32766(gp)
				printf(".....................Received new calibration values!:\t");
   209c4:	010000b4 	movhi	r4,2
   209c8:	211ad104 	addi	r4,r4,27460
   209cc:	0024af00 	call	24af0 <printf>
				printf("stepCount0_max: %d\t stepCount1_max: %d \n\r", maxStepCount0, maxStepCount1);
   209d0:	d0a0000b 	ldhu	r2,-32768(gp)
   209d4:	10bfffcc 	andi	r2,r2,65535
   209d8:	d0e0008b 	ldhu	r3,-32766(gp)
   209dc:	18ffffcc 	andi	r3,r3,65535
   209e0:	180d883a 	mov	r6,r3
   209e4:	100b883a 	mov	r5,r2
   209e8:	010000b4 	movhi	r4,2
   209ec:	211adf04 	addi	r4,r4,27516
   209f0:	0024af00 	call	24af0 <printf>
				break;
   209f4:	00000406 	br	20a08 <main+0x1ac>
			default:
				// default statements
				printf("Received incorrect message");
   209f8:	010000b4 	movhi	r4,2
   209fc:	211aea04 	addi	r4,r4,27560
   20a00:	0024af00 	call	24af0 <printf>
				break;
   20a04:	0001883a 	nop
		}
		
		
		

		if(stepCount0 != stepCount0Old || stepCount1 != stepCount1Old)
   20a08:	e0ffe00b 	ldhu	r3,-128(fp)
   20a0c:	e0bfe10b 	ldhu	r2,-124(fp)
   20a10:	1880031e 	bne	r3,r2,20a20 <main+0x1c4>
   20a14:	e0ffe08b 	ldhu	r3,-126(fp)
   20a18:	e0bfe18b 	ldhu	r2,-122(fp)
   20a1c:	18800726 	beq	r3,r2,20a3c <main+0x1e0>
			printf("stepCount0: %d\t stepCount1: %d \n\r", stepCount0, stepCount1);
   20a20:	e0bfe00b 	ldhu	r2,-128(fp)
   20a24:	e0ffe08b 	ldhu	r3,-126(fp)
   20a28:	180d883a 	mov	r6,r3
   20a2c:	100b883a 	mov	r5,r2
   20a30:	010000b4 	movhi	r4,2
   20a34:	211af104 	addi	r4,r4,27588
   20a38:	0024af00 	call	24af0 <printf>
		
		//generate inputs
		pan_u[1] = 0;
   20a3c:	e03fea15 	stw	zero,-88(fp)
   20a40:	e03feb15 	stw	zero,-84(fp)
		if(pan_time >= 1){
   20a44:	d0a0f017 	ldw	r2,-31808(gp)
   20a48:	d0e0f117 	ldw	r3,-31804(gp)
   20a4c:	000d883a 	mov	r6,zero
   20a50:	01cffc34 	movhi	r7,16368
   20a54:	1009883a 	mov	r4,r2
   20a58:	180b883a 	mov	r5,r3
   20a5c:	00236f00 	call	236f0 <__gedf2>
   20a60:	10000616 	blt	r2,zero,20a7c <main+0x220>
			pan_u[1] = 0.5*pi;
   20a64:	00b020f4 	movhi	r2,49283
   20a68:	10849bc4 	addi	r2,r2,4719
   20a6c:	e0bfea15 	stw	r2,-88(fp)
   20a70:	008ffe74 	movhi	r2,16377
   20a74:	10887284 	addi	r2,r2,8650
   20a78:	e0bfeb15 	stw	r2,-84(fp)

		}
		if(pan_time >= 5){
   20a7c:	d0a0f017 	ldw	r2,-31808(gp)
   20a80:	d0e0f117 	ldw	r3,-31804(gp)
   20a84:	000d883a 	mov	r6,zero
   20a88:	01d00534 	movhi	r7,16404
   20a8c:	1009883a 	mov	r4,r2
   20a90:	180b883a 	mov	r5,r3
   20a94:	00236f00 	call	236f0 <__gedf2>
   20a98:	10000616 	blt	r2,zero,20ab4 <main+0x258>
			pan_u[1] = 1.5*pi;
   20a9c:	008418b4 	movhi	r2,4194
   20aa0:	109374c4 	addi	r2,r2,19923
   20aa4:	e0bfea15 	stw	r2,-88(fp)
   20aa8:	009004f4 	movhi	r2,16403
   20aac:	10b65604 	addi	r2,r2,-9896
   20ab0:	e0bfeb15 	stw	r2,-84(fp)

		}
		if(pan_time >= 10){
   20ab4:	d0a0f017 	ldw	r2,-31808(gp)
   20ab8:	d0e0f117 	ldw	r3,-31804(gp)
   20abc:	000d883a 	mov	r6,zero
   20ac0:	01d00934 	movhi	r7,16420
   20ac4:	1009883a 	mov	r4,r2
   20ac8:	180b883a 	mov	r5,r3
   20acc:	00236f00 	call	236f0 <__gedf2>
   20ad0:	10000616 	blt	r2,zero,20aec <main+0x290>

			pan_u[1] = 0.5*pi;
   20ad4:	00b020f4 	movhi	r2,49283
   20ad8:	10849bc4 	addi	r2,r2,4719
   20adc:	e0bfea15 	stw	r2,-88(fp)
   20ae0:	008ffe74 	movhi	r2,16377
   20ae4:	10887284 	addi	r2,r2,8650
   20ae8:	e0bfeb15 	stw	r2,-84(fp)

		}
		
		
		/* Call the 20-sim submodel to calculate the output */
		pan_u[2] = Stepcount0ToSI(stepCount0);
   20aec:	e0bfe00b 	ldhu	r2,-128(fp)
   20af0:	10bfffcc 	andi	r2,r2,65535
   20af4:	10a0001c 	xori	r2,r2,32768
   20af8:	10a00004 	addi	r2,r2,-32768
   20afc:	1009883a 	mov	r4,r2
   20b00:	00207640 	call	20764 <Stepcount0ToSI>
   20b04:	1009883a 	mov	r4,r2
   20b08:	180b883a 	mov	r5,r3
   20b0c:	e13fec15 	stw	r4,-80(fp)
   20b10:	e17fed15 	stw	r5,-76(fp)
		

		pan_CalculateSubmodel (&pan_u, &pan_y, pan_time);
   20b14:	d0a0f017 	ldw	r2,-31808(gp)
   20b18:	d0e0f117 	ldw	r3,-31804(gp)
   20b1c:	e17ff004 	addi	r5,fp,-64
   20b20:	e13fe804 	addi	r4,fp,-96
   20b24:	100d883a 	mov	r6,r2
   20b28:	180f883a 	mov	r7,r3
   20b2c:	002176c0 	call	2176c <pan_CalculateSubmodel>
		tilt_CalculateSubmodel(&tilt_u, &tilt_y,pan_time);
   20b30:	d0a0f017 	ldw	r2,-31808(gp)
   20b34:	d0e0f117 	ldw	r3,-31804(gp)
   20b38:	e17ffc04 	addi	r5,fp,-16
   20b3c:	e13ff404 	addi	r4,fp,-48
   20b40:	100d883a 	mov	r6,r2
   20b44:	180f883a 	mov	r7,r3
   20b48:	00222f00 	call	222f0 <tilt_CalculateSubmodel>
		PWM0 = pan_y[0]*maxPWMPan;
   20b4c:	e0bff017 	ldw	r2,-64(fp)
   20b50:	e0fff117 	ldw	r3,-60(fp)
   20b54:	000d883a 	mov	r6,zero
   20b58:	01d014b4 	movhi	r7,16466
   20b5c:	39e00004 	addi	r7,r7,-32768
   20b60:	1009883a 	mov	r4,r2
   20b64:	180b883a 	mov	r5,r3
   20b68:	00238c00 	call	238c0 <__muldf3>
   20b6c:	1009883a 	mov	r4,r2
   20b70:	180b883a 	mov	r5,r3
   20b74:	2005883a 	mov	r2,r4
   20b78:	2807883a 	mov	r3,r5
   20b7c:	1009883a 	mov	r4,r2
   20b80:	180b883a 	mov	r5,r3
   20b84:	00248d40 	call	248d4 <__fixdfsi>
   20b88:	e0bfe305 	stb	r2,-116(fp)
		PWM1 = tilt_y[0]*maxPWMTilt;
   20b8c:	e0bffc17 	ldw	r2,-16(fp)
   20b90:	e0fffd17 	ldw	r3,-12(fp)
   20b94:	000d883a 	mov	r6,zero
   20b98:	01d00fb4 	movhi	r7,16446
   20b9c:	1009883a 	mov	r4,r2
   20ba0:	180b883a 	mov	r5,r3
   20ba4:	00238c00 	call	238c0 <__muldf3>
   20ba8:	1009883a 	mov	r4,r2
   20bac:	180b883a 	mov	r5,r3
   20bb0:	2005883a 	mov	r2,r4
   20bb4:	2807883a 	mov	r3,r5
   20bb8:	1009883a 	mov	r4,r2
   20bbc:	180b883a 	mov	r5,r3
   20bc0:	00248d40 	call	248d4 <__fixdfsi>
   20bc4:	e0bfe345 	stb	r2,-115(fp)
		int16_t temp16 = 0;
   20bc8:	e03fe70d 	sth	zero,-100(fp)
		avalondSend = PWM0 << 24 | PWM1 <<16 | temp16;
   20bcc:	e0bfe307 	ldb	r2,-116(fp)
   20bd0:	1006963a 	slli	r3,r2,24
   20bd4:	e0bfe347 	ldb	r2,-115(fp)
   20bd8:	1004943a 	slli	r2,r2,16
   20bdc:	1886b03a 	or	r3,r3,r2
   20be0:	e0bfe70f 	ldh	r2,-100(fp)
   20be4:	1884b03a 	or	r2,r3,r2
   20be8:	e0bfe415 	stw	r2,-112(fp)
		//printf("%x\n",avalondSend);
		IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,avalondSend);
   20bec:	e0ffe417 	ldw	r3,-112(fp)
   20bf0:	00800134 	movhi	r2,4
   20bf4:	10840004 	addi	r2,r2,4096
   20bf8:	10c00035 	stwio	r3,0(r2)
		
		if(!EmptyUart0()){
   20bfc:	00204140 	call	20414 <EmptyUart0>
   20c00:	10803fcc 	andi	r2,r2,255
   20c04:	10000e1e 	bne	r2,zero,20c40 <main+0x3e4>
			ch = GetUart0();
   20c08:	00204500 	call	20450 <GetUart0>
   20c0c:	e0bfe785 	stb	r2,-98(fp)
			printf("received message: %c\n",ch);
   20c10:	e0bfe783 	ldbu	r2,-98(fp)
   20c14:	100b883a 	mov	r5,r2
   20c18:	010000b4 	movhi	r4,2
   20c1c:	211afa04 	addi	r4,r4,27624
   20c20:	0024af00 	call	24af0 <printf>
			PutUart0(ch);
   20c24:	e0bfe783 	ldbu	r2,-98(fp)
   20c28:	1009883a 	mov	r4,r2
   20c2c:	00204ac0 	call	204ac <PutUart0>
			PutUart0('\r');
   20c30:	01000344 	movi	r4,13
   20c34:	00204ac0 	call	204ac <PutUart0>
			PutUart0('\n');
   20c38:	01000284 	movi	r4,10
   20c3c:	00204ac0 	call	204ac <PutUart0>
			
			
		}
		
		stepCount0Old = stepCount0;
   20c40:	e0bfe00b 	ldhu	r2,-128(fp)
   20c44:	e0bfe10d 	sth	r2,-124(fp)
		stepCount1Old = stepCount1;
   20c48:	e0bfe08b 	ldhu	r2,-126(fp)
   20c4c:	e0bfe18d 	sth	r2,-122(fp)
		pan_time+=0.0013;
   20c50:	d0a0f017 	ldw	r2,-31808(gp)
   20c54:	d0e0f117 	ldw	r3,-31804(gp)
   20c58:	0197c1f4 	movhi	r6,24327
   20c5c:	31bda504 	addi	r6,r6,-2412
   20c60:	01cfd574 	movhi	r7,16213
   20c64:	39d32604 	addi	r7,r7,19608
   20c68:	1009883a 	mov	r4,r2
   20c6c:	180b883a 	mov	r5,r3
   20c70:	002255c0 	call	2255c <__adddf3>
   20c74:	1009883a 	mov	r4,r2
   20c78:	180b883a 	mov	r5,r3
   20c7c:	2005883a 	mov	r2,r4
   20c80:	2807883a 	mov	r3,r5
   20c84:	d0a0f015 	stw	r2,-31808(gp)
   20c88:	d0e0f115 	stw	r3,-31804(gp)
	uint16_t stepCount0Old = 0;
	uint16_t stepCount1Old = 0;
	int8_t PWM0 = 0;
	int8_t PWM1 = 0;
	uint32_t avalondSend = 0;
	while( (pan_stop_simulation == 0) ) {
   20c8c:	d0a0f303 	ldbu	r2,-31796(gp)
   20c90:	10803fcc 	andi	r2,r2,255
   20c94:	1080201c 	xori	r2,r2,128
   20c98:	10bfe004 	addi	r2,r2,-128
   20c9c:	103f2626 	beq	r2,zero,20938 <__alt_data_end+0xfffe8298>
		stepCount1Old = stepCount1;
		pan_time+=0.0013;
	} 

	/* Perform the final 20-sim calculations */
	pan_TerminateSubmodel (&pan_u, &pan_y, pan_time);
   20ca0:	d0a0f017 	ldw	r2,-31808(gp)
   20ca4:	d0e0f117 	ldw	r3,-31804(gp)
   20ca8:	e17ff004 	addi	r5,fp,-64
   20cac:	e13fe804 	addi	r4,fp,-96
   20cb0:	100d883a 	mov	r6,r2
   20cb4:	180f883a 	mov	r7,r3
   20cb8:	00217cc0 	call	217cc <pan_TerminateSubmodel>
	tilt_TerminateSubmodel(&tilt_u,&tilt_y,pan_time);
   20cbc:	d0a0f017 	ldw	r2,-31808(gp)
   20cc0:	d0e0f117 	ldw	r3,-31804(gp)
   20cc4:	e17ffc04 	addi	r5,fp,-16
   20cc8:	e13ff404 	addi	r4,fp,-48
   20ccc:	100d883a 	mov	r6,r2
   20cd0:	180f883a 	mov	r7,r3
   20cd4:	00223500 	call	22350 <tilt_TerminateSubmodel>

return 0;
   20cd8:	0005883a 	mov	r2,zero

}
   20cdc:	e037883a 	mov	sp,fp
   20ce0:	dfc00117 	ldw	ra,4(sp)
   20ce4:	df000017 	ldw	fp,0(sp)
   20ce8:	dec00204 	addi	sp,sp,8
   20cec:	f800283a 	ret

00020cf0 <pan_DiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void pan_DiscreteInitialize (void)
{
   20cf0:	deffff04 	addi	sp,sp,-4
   20cf4:	df000015 	stw	fp,0(sp)
   20cf8:	d839883a 	mov	fp,sp
	/* nothing to be done */
	pan_major = 1;
   20cfc:	00800044 	movi	r2,1
   20d00:	d0a00545 	stb	r2,-32747(gp)
}
   20d04:	0001883a 	nop
   20d08:	e037883a 	mov	sp,fp
   20d0c:	df000017 	ldw	fp,0(sp)
   20d10:	dec00104 	addi	sp,sp,4
   20d14:	f800283a 	ret

00020d18 <pan_DiscreteStep>:

/* the Discrete integration method itself */
void pan_DiscreteStep (void)
{
   20d18:	defffd04 	addi	sp,sp,-12
   20d1c:	dfc00215 	stw	ra,8(sp)
   20d20:	df000115 	stw	fp,4(sp)
   20d24:	df000104 	addi	fp,sp,4

	/* for each of the supplied states */
	for (int index = 0; index < pan_STATE_SIZE; index++)
   20d28:	e03fff15 	stw	zero,-4(fp)
   20d2c:	00001106 	br	20d74 <pan_DiscreteStep+0x5c>
	{
		/* just a move of the new state */
		pan_s [index] = pan_R [index];
   20d30:	008000b4 	movhi	r2,2
   20d34:	109f3704 	addi	r2,r2,31964
   20d38:	e0ffff17 	ldw	r3,-4(fp)
   20d3c:	180690fa 	slli	r3,r3,3
   20d40:	10c9883a 	add	r4,r2,r3
   20d44:	20800017 	ldw	r2,0(r4)
   20d48:	20c00117 	ldw	r3,4(r4)
   20d4c:	010000b4 	movhi	r4,2
   20d50:	211f1d04 	addi	r4,r4,31860
   20d54:	e17fff17 	ldw	r5,-4(fp)
   20d58:	280a90fa 	slli	r5,r5,3
   20d5c:	2149883a 	add	r4,r4,r5
   20d60:	20800015 	stw	r2,0(r4)
   20d64:	20c00115 	stw	r3,4(r4)
/* the Discrete integration method itself */
void pan_DiscreteStep (void)
{

	/* for each of the supplied states */
	for (int index = 0; index < pan_STATE_SIZE; index++)
   20d68:	e0bfff17 	ldw	r2,-4(fp)
   20d6c:	10800044 	addi	r2,r2,1
   20d70:	e0bfff15 	stw	r2,-4(fp)
   20d74:	e0bfff17 	ldw	r2,-4(fp)
   20d78:	108000d0 	cmplti	r2,r2,3
   20d7c:	103fec1e 	bne	r2,zero,20d30 <__alt_data_end+0xfffe8690>
	{
		/* just a move of the new state */
		pan_s [index] = pan_R [index];
	}
	/* increment the simulation time */
	pan_time += pan_step_size;
   20d80:	d0a0f017 	ldw	r2,-31808(gp)
   20d84:	d0e0f117 	ldw	r3,-31804(gp)
   20d88:	d1200317 	ldw	r4,-32756(gp)
   20d8c:	d1600417 	ldw	r5,-32752(gp)
   20d90:	200d883a 	mov	r6,r4
   20d94:	280f883a 	mov	r7,r5
   20d98:	1009883a 	mov	r4,r2
   20d9c:	180b883a 	mov	r5,r3
   20da0:	002255c0 	call	2255c <__adddf3>
   20da4:	1009883a 	mov	r4,r2
   20da8:	180b883a 	mov	r5,r3
   20dac:	2005883a 	mov	r2,r4
   20db0:	2807883a 	mov	r3,r5
   20db4:	d0a0f015 	stw	r2,-31808(gp)
   20db8:	d0e0f115 	stw	r3,-31804(gp)

	pan_major = 1;
   20dbc:	00800044 	movi	r2,1
   20dc0:	d0a00545 	stb	r2,-32747(gp)

	/* evaluate the dynamic part to calculate the new rates */
	pan_CalculateDynamic ();
   20dc4:	00210080 	call	21008 <pan_CalculateDynamic>
}
   20dc8:	0001883a 	nop
   20dcc:	e037883a 	mov	sp,fp
   20dd0:	dfc00117 	ldw	ra,4(sp)
   20dd4:	df000017 	ldw	fp,0(sp)
   20dd8:	dec00204 	addi	sp,sp,8
   20ddc:	f800283a 	ret

00020de0 <pan_ModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void pan_ModelInitialize_parameters(void)
{
   20de0:	deffff04 	addi	sp,sp,-4
   20de4:	df000015 	stw	fp,0(sp)
   20de8:	d839883a 	mov	fp,sp
	/* set the parameters */
	pan_P[0] = 0.0;		/* corrGain\K */
   20dec:	008000b4 	movhi	r2,2
   20df0:	109f0f04 	addi	r2,r2,31804
   20df4:	10000015 	stw	zero,0(r2)
   20df8:	10000115 	stw	zero,4(r2)
	pan_P[1] = 2.6;		/* PID1\kp */
   20dfc:	008000b4 	movhi	r2,2
   20e00:	109f0f04 	addi	r2,r2,31804
   20e04:	00f33374 	movhi	r3,52429
   20e08:	18f33344 	addi	r3,r3,-13107
   20e0c:	10c00215 	stw	r3,8(r2)
   20e10:	00d00174 	movhi	r3,16389
   20e14:	18f33304 	addi	r3,r3,-13108
   20e18:	10c00315 	stw	r3,12(r2)
	pan_P[2] = 0.05;		/* PID1\tauD */
   20e1c:	008000b4 	movhi	r2,2
   20e20:	109f0f04 	addi	r2,r2,31804
   20e24:	00e666b4 	movhi	r3,39322
   20e28:	18e66684 	addi	r3,r3,-26214
   20e2c:	10c00415 	stw	r3,16(r2)
   20e30:	00cfeab4 	movhi	r3,16298
   20e34:	18e66644 	addi	r3,r3,-26215
   20e38:	10c00515 	stw	r3,20(r2)
	pan_P[3] = 0.17;		/* PID1\beta */
   20e3c:	008000b4 	movhi	r2,2
   20e40:	109f0f04 	addi	r2,r2,31804
   20e44:	00d70a74 	movhi	r3,23593
   20e48:	18fd70c4 	addi	r3,r3,-2621
   20e4c:	10c00615 	stw	r3,24(r2)
   20e50:	00cff1b4 	movhi	r3,16326
   20e54:	18f0a3c4 	addi	r3,r3,-15729
   20e58:	10c00715 	stw	r3,28(r2)
	pan_P[4] = 9.0;		/* PID1\tauI */
   20e5c:	008000b4 	movhi	r2,2
   20e60:	109f0f04 	addi	r2,r2,31804
   20e64:	10000815 	stw	zero,32(r2)
   20e68:	00d008b4 	movhi	r3,16418
   20e6c:	10c00915 	stw	r3,36(r2)
	pan_P[5] = -0.99;		/* SignalLimiter2\minimum */
   20e70:	008000b4 	movhi	r2,2
   20e74:	109f0f04 	addi	r2,r2,31804
   20e78:	00deb874 	movhi	r3,31457
   20e7c:	18d1eb84 	addi	r3,r3,18350
   20e80:	10c00a15 	stw	r3,40(r2)
   20e84:	00effc34 	movhi	r3,49136
   20e88:	18eb8504 	addi	r3,r3,-20972
   20e8c:	10c00b15 	stw	r3,44(r2)
	pan_P[6] = 0.99;		/* SignalLimiter2\maximum */
   20e90:	008000b4 	movhi	r2,2
   20e94:	109f0f04 	addi	r2,r2,31804
   20e98:	00deb874 	movhi	r3,31457
   20e9c:	18d1eb84 	addi	r3,r3,18350
   20ea0:	10c00c15 	stw	r3,48(r2)
   20ea4:	00cffc34 	movhi	r3,16368
   20ea8:	18eb8504 	addi	r3,r3,-20972
   20eac:	10c00d15 	stw	r3,52(r2)

}
   20eb0:	0001883a 	nop
   20eb4:	e037883a 	mov	sp,fp
   20eb8:	df000017 	ldw	fp,0(sp)
   20ebc:	dec00104 	addi	sp,sp,4
   20ec0:	f800283a 	ret

00020ec4 <pan_ModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void pan_ModelInitialize_initialvalues(void)
{
   20ec4:	deffff04 	addi	sp,sp,-4
   20ec8:	df000015 	stw	fp,0(sp)
   20ecc:	d839883a 	mov	fp,sp
	/* set the initial values */
	pan_I[0] = 0.0;		/* PID1\uD_previous_initial */
   20ed0:	008000b4 	movhi	r2,2
   20ed4:	109f0904 	addi	r2,r2,31780
   20ed8:	10000015 	stw	zero,0(r2)
   20edc:	10000115 	stw	zero,4(r2)
	pan_I[1] = 0.0;		/* PID1\error_previous_initial */
   20ee0:	008000b4 	movhi	r2,2
   20ee4:	109f0904 	addi	r2,r2,31780
   20ee8:	10000215 	stw	zero,8(r2)
   20eec:	10000315 	stw	zero,12(r2)
	pan_I[2] = 0.0;		/* PID1\uI_previous_initial */
   20ef0:	008000b4 	movhi	r2,2
   20ef4:	109f0904 	addi	r2,r2,31780
   20ef8:	10000415 	stw	zero,16(r2)
   20efc:	10000515 	stw	zero,20(r2)

}
   20f00:	0001883a 	nop
   20f04:	e037883a 	mov	sp,fp
   20f08:	df000017 	ldw	fp,0(sp)
   20f0c:	dec00104 	addi	sp,sp,4
   20f10:	f800283a 	ret

00020f14 <pan_ModelInitialize_states>:

void pan_ModelInitialize_states(void)
{
   20f14:	deffff04 	addi	sp,sp,-4
   20f18:	df000015 	stw	fp,0(sp)
   20f1c:	d839883a 	mov	fp,sp
	/* set the states */
	pan_s[0] = pan_I[0];		/* PID1\uD_previous */
   20f20:	010000b4 	movhi	r4,2
   20f24:	211f0904 	addi	r4,r4,31780
   20f28:	20800017 	ldw	r2,0(r4)
   20f2c:	20c00117 	ldw	r3,4(r4)
   20f30:	010000b4 	movhi	r4,2
   20f34:	211f1d04 	addi	r4,r4,31860
   20f38:	20800015 	stw	r2,0(r4)
   20f3c:	20c00115 	stw	r3,4(r4)
	pan_s[1] = pan_I[1];		/* PID1\error_previous */
   20f40:	010000b4 	movhi	r4,2
   20f44:	211f0904 	addi	r4,r4,31780
   20f48:	20800217 	ldw	r2,8(r4)
   20f4c:	20c00317 	ldw	r3,12(r4)
   20f50:	010000b4 	movhi	r4,2
   20f54:	211f1d04 	addi	r4,r4,31860
   20f58:	20800215 	stw	r2,8(r4)
   20f5c:	20c00315 	stw	r3,12(r4)
	pan_s[2] = pan_I[2];		/* PID1\uI_previous */
   20f60:	010000b4 	movhi	r4,2
   20f64:	211f0904 	addi	r4,r4,31780
   20f68:	20800417 	ldw	r2,16(r4)
   20f6c:	20c00517 	ldw	r3,20(r4)
   20f70:	010000b4 	movhi	r4,2
   20f74:	211f1d04 	addi	r4,r4,31860
   20f78:	20800415 	stw	r2,16(r4)
   20f7c:	20c00515 	stw	r3,20(r4)

}
   20f80:	0001883a 	nop
   20f84:	e037883a 	mov	sp,fp
   20f88:	df000017 	ldw	fp,0(sp)
   20f8c:	dec00104 	addi	sp,sp,4
   20f90:	f800283a 	ret

00020f94 <pan_ModelInitialize_variables>:

void pan_ModelInitialize_variables(void)
{
   20f94:	defffe04 	addi	sp,sp,-8
   20f98:	dfc00115 	stw	ra,4(sp)
   20f9c:	df000015 	stw	fp,0(sp)
   20fa0:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(pan_V, 0, pan_variables_size * sizeof(double));
   20fa4:	01801404 	movi	r6,80
   20fa8:	000b883a 	mov	r5,zero
   20fac:	010000b4 	movhi	r4,2
   20fb0:	211f2304 	addi	r4,r4,31884
   20fb4:	0024a940 	call	24a94 <memset>
}
   20fb8:	0001883a 	nop
   20fbc:	e037883a 	mov	sp,fp
   20fc0:	dfc00117 	ldw	ra,4(sp)
   20fc4:	df000017 	ldw	fp,0(sp)
   20fc8:	dec00204 	addi	sp,sp,8
   20fcc:	f800283a 	ret

00020fd0 <pan_ModelInitialize>:

/* this method is called before calculation is possible */
void pan_ModelInitialize (void)
{
   20fd0:	defffe04 	addi	sp,sp,-8
   20fd4:	dfc00115 	stw	ra,4(sp)
   20fd8:	df000015 	stw	fp,0(sp)
   20fdc:	d839883a 	mov	fp,sp
	pan_ModelInitialize_parameters();
   20fe0:	0020de00 	call	20de0 <pan_ModelInitialize_parameters>
	pan_ModelInitialize_variables();
   20fe4:	0020f940 	call	20f94 <pan_ModelInitialize_variables>
	pan_ModelInitialize_initialvalues();
   20fe8:	0020ec40 	call	20ec4 <pan_ModelInitialize_initialvalues>
	pan_ModelInitialize_states();
   20fec:	0020f140 	call	20f14 <pan_ModelInitialize_states>
}
   20ff0:	0001883a 	nop
   20ff4:	e037883a 	mov	sp,fp
   20ff8:	dfc00117 	ldw	ra,4(sp)
   20ffc:	df000017 	ldw	fp,0(sp)
   21000:	dec00204 	addi	sp,sp,8
   21004:	f800283a 	ret

00021008 <pan_CalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void pan_CalculateDynamic (void)
{
   21008:	defff804 	addi	sp,sp,-32
   2100c:	dfc00715 	stw	ra,28(sp)
   21010:	df000615 	stw	fp,24(sp)
   21014:	dd400515 	stw	r21,20(sp)
   21018:	dd000415 	stw	r20,16(sp)
   2101c:	dcc00315 	stw	r19,12(sp)
   21020:	dc800215 	stw	r18,8(sp)
   21024:	dc400115 	stw	r17,4(sp)
   21028:	dc000015 	stw	r16,0(sp)
   2102c:	df000604 	addi	fp,sp,24
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	pan_V[2] = 1.0 / (pan_step_size + pan_P[2] * pan_P[3]);
   21030:	010000b4 	movhi	r4,2
   21034:	211f0f04 	addi	r4,r4,31804
   21038:	20800417 	ldw	r2,16(r4)
   2103c:	20c00517 	ldw	r3,20(r4)
   21040:	018000b4 	movhi	r6,2
   21044:	319f0f04 	addi	r6,r6,31804
   21048:	31000617 	ldw	r4,24(r6)
   2104c:	31400717 	ldw	r5,28(r6)
   21050:	200d883a 	mov	r6,r4
   21054:	280f883a 	mov	r7,r5
   21058:	1009883a 	mov	r4,r2
   2105c:	180b883a 	mov	r5,r3
   21060:	00238c00 	call	238c0 <__muldf3>
   21064:	1009883a 	mov	r4,r2
   21068:	180b883a 	mov	r5,r3
   2106c:	2011883a 	mov	r8,r4
   21070:	2813883a 	mov	r9,r5
   21074:	d0a00317 	ldw	r2,-32756(gp)
   21078:	d0e00417 	ldw	r3,-32752(gp)
   2107c:	100d883a 	mov	r6,r2
   21080:	180f883a 	mov	r7,r3
   21084:	4009883a 	mov	r4,r8
   21088:	480b883a 	mov	r5,r9
   2108c:	002255c0 	call	2255c <__adddf3>
   21090:	1009883a 	mov	r4,r2
   21094:	180b883a 	mov	r5,r3
   21098:	2005883a 	mov	r2,r4
   2109c:	2807883a 	mov	r3,r5
   210a0:	100d883a 	mov	r6,r2
   210a4:	180f883a 	mov	r7,r3
   210a8:	0009883a 	mov	r4,zero
   210ac:	014ffc34 	movhi	r5,16368
   210b0:	0022e080 	call	22e08 <__divdf3>
   210b4:	100b883a 	mov	r5,r2
   210b8:	180d883a 	mov	r6,r3
   210bc:	2807883a 	mov	r3,r5
   210c0:	3009883a 	mov	r4,r6
   210c4:	008000b4 	movhi	r2,2
   210c8:	109f2304 	addi	r2,r2,31884
   210cc:	10c00415 	stw	r3,16(r2)
   210d0:	11000515 	stw	r4,20(r2)

	/* PlusMinus1\plus1 = in; */
	pan_V[3] = pan_V[7];
   210d4:	010000b4 	movhi	r4,2
   210d8:	211f2304 	addi	r4,r4,31884
   210dc:	20800e17 	ldw	r2,56(r4)
   210e0:	20c00f17 	ldw	r3,60(r4)
   210e4:	010000b4 	movhi	r4,2
   210e8:	211f2304 	addi	r4,r4,31884
   210ec:	20800615 	stw	r2,24(r4)
   210f0:	20c00715 	stw	r3,28(r4)

	/* Splitter1\input = position; */
	pan_V[5] = pan_V[8];
   210f4:	010000b4 	movhi	r4,2
   210f8:	211f2304 	addi	r4,r4,31884
   210fc:	20801017 	ldw	r2,64(r4)
   21100:	20c01117 	ldw	r3,68(r4)
   21104:	010000b4 	movhi	r4,2
   21108:	211f2304 	addi	r4,r4,31884
   2110c:	20800a15 	stw	r2,40(r4)
   21110:	20c00b15 	stw	r3,44(r4)

	/* corrGain\corr = corrGain\K * Splitter1\input; */
	pan_V[0] = pan_P[0] * pan_V[5];
   21114:	010000b4 	movhi	r4,2
   21118:	211f0f04 	addi	r4,r4,31804
   2111c:	20800017 	ldw	r2,0(r4)
   21120:	20c00117 	ldw	r3,4(r4)
   21124:	018000b4 	movhi	r6,2
   21128:	319f2304 	addi	r6,r6,31884
   2112c:	31000a17 	ldw	r4,40(r6)
   21130:	31400b17 	ldw	r5,44(r6)
   21134:	200d883a 	mov	r6,r4
   21138:	280f883a 	mov	r7,r5
   2113c:	1009883a 	mov	r4,r2
   21140:	180b883a 	mov	r5,r3
   21144:	00238c00 	call	238c0 <__muldf3>
   21148:	100b883a 	mov	r5,r2
   2114c:	180d883a 	mov	r6,r3
   21150:	2807883a 	mov	r3,r5
   21154:	3009883a 	mov	r4,r6
   21158:	008000b4 	movhi	r2,2
   2115c:	109f2304 	addi	r2,r2,31884
   21160:	10c00015 	stw	r3,0(r2)
   21164:	11000115 	stw	r4,4(r2)

	/* PID1\error = PlusMinus1\plus1 - Splitter1\input; */
	pan_R[1] = pan_V[3] - pan_V[5];
   21168:	010000b4 	movhi	r4,2
   2116c:	211f2304 	addi	r4,r4,31884
   21170:	20800617 	ldw	r2,24(r4)
   21174:	20c00717 	ldw	r3,28(r4)
   21178:	018000b4 	movhi	r6,2
   2117c:	319f2304 	addi	r6,r6,31884
   21180:	31000a17 	ldw	r4,40(r6)
   21184:	31400b17 	ldw	r5,44(r6)
   21188:	200d883a 	mov	r6,r4
   2118c:	280f883a 	mov	r7,r5
   21190:	1009883a 	mov	r4,r2
   21194:	180b883a 	mov	r5,r3
   21198:	0023fd80 	call	23fd8 <__subdf3>
   2119c:	100b883a 	mov	r5,r2
   211a0:	180d883a 	mov	r6,r3
   211a4:	2807883a 	mov	r3,r5
   211a8:	3009883a 	mov	r4,r6
   211ac:	008000b4 	movhi	r2,2
   211b0:	109f3704 	addi	r2,r2,31964
   211b4:	10c00215 	stw	r3,8(r2)
   211b8:	11000315 	stw	r4,12(r2)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	pan_R[0] = pan_V[2] * (((pan_P[2] * pan_s[0]) * pan_P[3] + (pan_P[2] * pan_P[1]) * (pan_R[1] - pan_s[1])) + (pan_step_size * pan_P[1]) * pan_R[1]);
   211bc:	008000b4 	movhi	r2,2
   211c0:	109f2304 	addi	r2,r2,31884
   211c4:	14000417 	ldw	r16,16(r2)
   211c8:	14400517 	ldw	r17,20(r2)
   211cc:	010000b4 	movhi	r4,2
   211d0:	211f0f04 	addi	r4,r4,31804
   211d4:	20800417 	ldw	r2,16(r4)
   211d8:	20c00517 	ldw	r3,20(r4)
   211dc:	018000b4 	movhi	r6,2
   211e0:	319f1d04 	addi	r6,r6,31860
   211e4:	31000017 	ldw	r4,0(r6)
   211e8:	31400117 	ldw	r5,4(r6)
   211ec:	200d883a 	mov	r6,r4
   211f0:	280f883a 	mov	r7,r5
   211f4:	1009883a 	mov	r4,r2
   211f8:	180b883a 	mov	r5,r3
   211fc:	00238c00 	call	238c0 <__muldf3>
   21200:	1009883a 	mov	r4,r2
   21204:	180b883a 	mov	r5,r3
   21208:	2011883a 	mov	r8,r4
   2120c:	2813883a 	mov	r9,r5
   21210:	010000b4 	movhi	r4,2
   21214:	211f0f04 	addi	r4,r4,31804
   21218:	20800617 	ldw	r2,24(r4)
   2121c:	20c00717 	ldw	r3,28(r4)
   21220:	100d883a 	mov	r6,r2
   21224:	180f883a 	mov	r7,r3
   21228:	4009883a 	mov	r4,r8
   2122c:	480b883a 	mov	r5,r9
   21230:	00238c00 	call	238c0 <__muldf3>
   21234:	1009883a 	mov	r4,r2
   21238:	180b883a 	mov	r5,r3
   2123c:	2025883a 	mov	r18,r4
   21240:	2827883a 	mov	r19,r5
   21244:	010000b4 	movhi	r4,2
   21248:	211f0f04 	addi	r4,r4,31804
   2124c:	20800417 	ldw	r2,16(r4)
   21250:	20c00517 	ldw	r3,20(r4)
   21254:	018000b4 	movhi	r6,2
   21258:	319f0f04 	addi	r6,r6,31804
   2125c:	31000217 	ldw	r4,8(r6)
   21260:	31400317 	ldw	r5,12(r6)
   21264:	200d883a 	mov	r6,r4
   21268:	280f883a 	mov	r7,r5
   2126c:	1009883a 	mov	r4,r2
   21270:	180b883a 	mov	r5,r3
   21274:	00238c00 	call	238c0 <__muldf3>
   21278:	1009883a 	mov	r4,r2
   2127c:	180b883a 	mov	r5,r3
   21280:	2029883a 	mov	r20,r4
   21284:	282b883a 	mov	r21,r5
   21288:	010000b4 	movhi	r4,2
   2128c:	211f3704 	addi	r4,r4,31964
   21290:	20800217 	ldw	r2,8(r4)
   21294:	20c00317 	ldw	r3,12(r4)
   21298:	018000b4 	movhi	r6,2
   2129c:	319f1d04 	addi	r6,r6,31860
   212a0:	31000217 	ldw	r4,8(r6)
   212a4:	31400317 	ldw	r5,12(r6)
   212a8:	200d883a 	mov	r6,r4
   212ac:	280f883a 	mov	r7,r5
   212b0:	1009883a 	mov	r4,r2
   212b4:	180b883a 	mov	r5,r3
   212b8:	0023fd80 	call	23fd8 <__subdf3>
   212bc:	1009883a 	mov	r4,r2
   212c0:	180b883a 	mov	r5,r3
   212c4:	2005883a 	mov	r2,r4
   212c8:	2807883a 	mov	r3,r5
   212cc:	100d883a 	mov	r6,r2
   212d0:	180f883a 	mov	r7,r3
   212d4:	a009883a 	mov	r4,r20
   212d8:	a80b883a 	mov	r5,r21
   212dc:	00238c00 	call	238c0 <__muldf3>
   212e0:	1009883a 	mov	r4,r2
   212e4:	180b883a 	mov	r5,r3
   212e8:	2005883a 	mov	r2,r4
   212ec:	2807883a 	mov	r3,r5
   212f0:	100d883a 	mov	r6,r2
   212f4:	180f883a 	mov	r7,r3
   212f8:	9009883a 	mov	r4,r18
   212fc:	980b883a 	mov	r5,r19
   21300:	002255c0 	call	2255c <__adddf3>
   21304:	1009883a 	mov	r4,r2
   21308:	180b883a 	mov	r5,r3
   2130c:	2025883a 	mov	r18,r4
   21310:	2827883a 	mov	r19,r5
   21314:	010000b4 	movhi	r4,2
   21318:	211f0f04 	addi	r4,r4,31804
   2131c:	20800217 	ldw	r2,8(r4)
   21320:	20c00317 	ldw	r3,12(r4)
   21324:	d1200317 	ldw	r4,-32756(gp)
   21328:	d1600417 	ldw	r5,-32752(gp)
   2132c:	200d883a 	mov	r6,r4
   21330:	280f883a 	mov	r7,r5
   21334:	1009883a 	mov	r4,r2
   21338:	180b883a 	mov	r5,r3
   2133c:	00238c00 	call	238c0 <__muldf3>
   21340:	1009883a 	mov	r4,r2
   21344:	180b883a 	mov	r5,r3
   21348:	2011883a 	mov	r8,r4
   2134c:	2813883a 	mov	r9,r5
   21350:	010000b4 	movhi	r4,2
   21354:	211f3704 	addi	r4,r4,31964
   21358:	20800217 	ldw	r2,8(r4)
   2135c:	20c00317 	ldw	r3,12(r4)
   21360:	100d883a 	mov	r6,r2
   21364:	180f883a 	mov	r7,r3
   21368:	4009883a 	mov	r4,r8
   2136c:	480b883a 	mov	r5,r9
   21370:	00238c00 	call	238c0 <__muldf3>
   21374:	1009883a 	mov	r4,r2
   21378:	180b883a 	mov	r5,r3
   2137c:	2005883a 	mov	r2,r4
   21380:	2807883a 	mov	r3,r5
   21384:	100d883a 	mov	r6,r2
   21388:	180f883a 	mov	r7,r3
   2138c:	9009883a 	mov	r4,r18
   21390:	980b883a 	mov	r5,r19
   21394:	002255c0 	call	2255c <__adddf3>
   21398:	1009883a 	mov	r4,r2
   2139c:	180b883a 	mov	r5,r3
   213a0:	2005883a 	mov	r2,r4
   213a4:	2807883a 	mov	r3,r5
   213a8:	100d883a 	mov	r6,r2
   213ac:	180f883a 	mov	r7,r3
   213b0:	8009883a 	mov	r4,r16
   213b4:	880b883a 	mov	r5,r17
   213b8:	00238c00 	call	238c0 <__muldf3>
   213bc:	100b883a 	mov	r5,r2
   213c0:	180d883a 	mov	r6,r3
   213c4:	2807883a 	mov	r3,r5
   213c8:	3009883a 	mov	r4,r6
   213cc:	008000b4 	movhi	r2,2
   213d0:	109f3704 	addi	r2,r2,31964
   213d4:	10c00015 	stw	r3,0(r2)
   213d8:	11000115 	stw	r4,4(r2)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	pan_R[2] = pan_s[2] + (pan_step_size * pan_R[0]) / pan_P[4];
   213dc:	008000b4 	movhi	r2,2
   213e0:	109f1d04 	addi	r2,r2,31860
   213e4:	14000417 	ldw	r16,16(r2)
   213e8:	14400517 	ldw	r17,20(r2)
   213ec:	010000b4 	movhi	r4,2
   213f0:	211f3704 	addi	r4,r4,31964
   213f4:	20800017 	ldw	r2,0(r4)
   213f8:	20c00117 	ldw	r3,4(r4)
   213fc:	d1200317 	ldw	r4,-32756(gp)
   21400:	d1600417 	ldw	r5,-32752(gp)
   21404:	200d883a 	mov	r6,r4
   21408:	280f883a 	mov	r7,r5
   2140c:	1009883a 	mov	r4,r2
   21410:	180b883a 	mov	r5,r3
   21414:	00238c00 	call	238c0 <__muldf3>
   21418:	1009883a 	mov	r4,r2
   2141c:	180b883a 	mov	r5,r3
   21420:	2011883a 	mov	r8,r4
   21424:	2813883a 	mov	r9,r5
   21428:	010000b4 	movhi	r4,2
   2142c:	211f0f04 	addi	r4,r4,31804
   21430:	20800817 	ldw	r2,32(r4)
   21434:	20c00917 	ldw	r3,36(r4)
   21438:	100d883a 	mov	r6,r2
   2143c:	180f883a 	mov	r7,r3
   21440:	4009883a 	mov	r4,r8
   21444:	480b883a 	mov	r5,r9
   21448:	0022e080 	call	22e08 <__divdf3>
   2144c:	1009883a 	mov	r4,r2
   21450:	180b883a 	mov	r5,r3
   21454:	2005883a 	mov	r2,r4
   21458:	2807883a 	mov	r3,r5
   2145c:	100d883a 	mov	r6,r2
   21460:	180f883a 	mov	r7,r3
   21464:	8009883a 	mov	r4,r16
   21468:	880b883a 	mov	r5,r17
   2146c:	002255c0 	call	2255c <__adddf3>
   21470:	100b883a 	mov	r5,r2
   21474:	180d883a 	mov	r6,r3
   21478:	2807883a 	mov	r3,r5
   2147c:	3009883a 	mov	r4,r6
   21480:	008000b4 	movhi	r2,2
   21484:	109f3704 	addi	r2,r2,31964
   21488:	10c00415 	stw	r3,16(r2)
   2148c:	11000515 	stw	r4,20(r2)

	/* PID1\output = PID1\uI + PID1\uD; */
	pan_V[1] = pan_R[2] + pan_R[0];
   21490:	010000b4 	movhi	r4,2
   21494:	211f3704 	addi	r4,r4,31964
   21498:	20800417 	ldw	r2,16(r4)
   2149c:	20c00517 	ldw	r3,20(r4)
   214a0:	018000b4 	movhi	r6,2
   214a4:	319f3704 	addi	r6,r6,31964
   214a8:	31000017 	ldw	r4,0(r6)
   214ac:	31400117 	ldw	r5,4(r6)
   214b0:	200d883a 	mov	r6,r4
   214b4:	280f883a 	mov	r7,r5
   214b8:	1009883a 	mov	r4,r2
   214bc:	180b883a 	mov	r5,r3
   214c0:	002255c0 	call	2255c <__adddf3>
   214c4:	100b883a 	mov	r5,r2
   214c8:	180d883a 	mov	r6,r3
   214cc:	2807883a 	mov	r3,r5
   214d0:	3009883a 	mov	r4,r6
   214d4:	008000b4 	movhi	r2,2
   214d8:	109f2304 	addi	r2,r2,31884
   214dc:	10c00215 	stw	r3,8(r2)
   214e0:	11000315 	stw	r4,12(r2)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
   214e4:	010000b4 	movhi	r4,2
   214e8:	211f2304 	addi	r4,r4,31884
   214ec:	20800217 	ldw	r2,8(r4)
   214f0:	20c00317 	ldw	r3,12(r4)
   214f4:	018000b4 	movhi	r6,2
   214f8:	319f0f04 	addi	r6,r6,31804
   214fc:	31000a17 	ldw	r4,40(r6)
   21500:	31400b17 	ldw	r5,44(r6)
		/* SignalLimiter2\minimum */
		pan_P[5]
	:
   21504:	200d883a 	mov	r6,r4
   21508:	280f883a 	mov	r7,r5
   2150c:	1009883a 	mov	r4,r2
   21510:	180b883a 	mov	r5,r3
   21514:	00237cc0 	call	237cc <__ledf2>
   21518:	1000050e 	bge	r2,zero,21530 <pan_CalculateDynamic+0x528>
   2151c:	010000b4 	movhi	r4,2
   21520:	211f0f04 	addi	r4,r4,31804
   21524:	20800a17 	ldw	r2,40(r4)
   21528:	20c00b17 	ldw	r3,44(r4)
   2152c:	00001706 	br	2158c <pan_CalculateDynamic+0x584>
		/* (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) */
		((pan_V[1] > pan_P[6]) ? 
   21530:	010000b4 	movhi	r4,2
   21534:	211f2304 	addi	r4,r4,31884
   21538:	20800217 	ldw	r2,8(r4)
   2153c:	20c00317 	ldw	r3,12(r4)
   21540:	018000b4 	movhi	r6,2
   21544:	319f0f04 	addi	r6,r6,31804
   21548:	31000c17 	ldw	r4,48(r6)
   2154c:	31400d17 	ldw	r5,52(r6)
			/* SignalLimiter2\maximum */
			pan_P[6]
		:
   21550:	200d883a 	mov	r6,r4
   21554:	280f883a 	mov	r7,r5
   21558:	1009883a 	mov	r4,r2
   2155c:	180b883a 	mov	r5,r3
   21560:	00236f00 	call	236f0 <__gedf2>
   21564:	0080050e 	bge	zero,r2,2157c <pan_CalculateDynamic+0x574>
   21568:	010000b4 	movhi	r4,2
   2156c:	211f0f04 	addi	r4,r4,31804
   21570:	20800c17 	ldw	r2,48(r4)
   21574:	20c00d17 	ldw	r3,52(r4)
   21578:	00000406 	br	2158c <pan_CalculateDynamic+0x584>
   2157c:	010000b4 	movhi	r4,2
   21580:	211f2304 	addi	r4,r4,31884
   21584:	20800217 	ldw	r2,8(r4)
   21588:	20c00317 	ldw	r3,12(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	pan_V[1] = pan_R[2] + pan_R[0];

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
   2158c:	010000b4 	movhi	r4,2
   21590:	211f2304 	addi	r4,r4,31884
   21594:	20800815 	stw	r2,32(r4)
   21598:	20c00915 	stw	r3,36(r4)
		)
	);


	/* increment the step counter */
	pan_steps++;
   2159c:	d0a0f217 	ldw	r2,-31800(gp)
   215a0:	10800044 	addi	r2,r2,1
   215a4:	d0a0f215 	stw	r2,-31800(gp)
}
   215a8:	0001883a 	nop
   215ac:	e6fffa04 	addi	sp,fp,-24
   215b0:	dfc00717 	ldw	ra,28(sp)
   215b4:	df000617 	ldw	fp,24(sp)
   215b8:	dd400517 	ldw	r21,20(sp)
   215bc:	dd000417 	ldw	r20,16(sp)
   215c0:	dcc00317 	ldw	r19,12(sp)
   215c4:	dc800217 	ldw	r18,8(sp)
   215c8:	dc400117 	ldw	r17,4(sp)
   215cc:	dc000017 	ldw	r16,0(sp)
   215d0:	dec00804 	addi	sp,sp,32
   215d4:	f800283a 	ret

000215d8 <pan_CalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void pan_CalculateOutput (void)
{
   215d8:	deffff04 	addi	sp,sp,-4
   215dc:	df000015 	stw	fp,0(sp)
   215e0:	d839883a 	mov	fp,sp
	/* corr = corrGain\corr; */
	pan_V[6] = pan_V[0];
   215e4:	010000b4 	movhi	r4,2
   215e8:	211f2304 	addi	r4,r4,31884
   215ec:	20800017 	ldw	r2,0(r4)
   215f0:	20c00117 	ldw	r3,4(r4)
   215f4:	010000b4 	movhi	r4,2
   215f8:	211f2304 	addi	r4,r4,31884
   215fc:	20800c15 	stw	r2,48(r4)
   21600:	20c00d15 	stw	r3,52(r4)

	/* out = SignalLimiter2\output; */
	pan_V[9] = pan_V[4];
   21604:	010000b4 	movhi	r4,2
   21608:	211f2304 	addi	r4,r4,31884
   2160c:	20800817 	ldw	r2,32(r4)
   21610:	20c00917 	ldw	r3,36(r4)
   21614:	010000b4 	movhi	r4,2
   21618:	211f2304 	addi	r4,r4,31884
   2161c:	20801215 	stw	r2,72(r4)
   21620:	20c01315 	stw	r3,76(r4)

}
   21624:	0001883a 	nop
   21628:	e037883a 	mov	sp,fp
   2162c:	df000017 	ldw	fp,0(sp)
   21630:	dec00104 	addi	sp,sp,4
   21634:	f800283a 	ret

00021638 <pan_CopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void pan_CopyInputsToVariables (double *u)
{
   21638:	defffe04 	addi	sp,sp,-8
   2163c:	df000115 	stw	fp,4(sp)
   21640:	df000104 	addi	fp,sp,4
   21644:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	pan_V[7] = u[0];		/* in */
   21648:	e13fff17 	ldw	r4,-4(fp)
   2164c:	20800017 	ldw	r2,0(r4)
   21650:	20c00117 	ldw	r3,4(r4)
   21654:	010000b4 	movhi	r4,2
   21658:	211f2304 	addi	r4,r4,31884
   2165c:	20800e15 	stw	r2,56(r4)
   21660:	20c00f15 	stw	r3,60(r4)
	pan_V[8] = u[1];		/* position */
   21664:	e13fff17 	ldw	r4,-4(fp)
   21668:	20800217 	ldw	r2,8(r4)
   2166c:	20c00317 	ldw	r3,12(r4)
   21670:	010000b4 	movhi	r4,2
   21674:	211f2304 	addi	r4,r4,31884
   21678:	20801015 	stw	r2,64(r4)
   2167c:	20c01115 	stw	r3,68(r4)

}
   21680:	0001883a 	nop
   21684:	e037883a 	mov	sp,fp
   21688:	df000017 	ldw	fp,0(sp)
   2168c:	dec00104 	addi	sp,sp,4
   21690:	f800283a 	ret

00021694 <pan_CopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void pan_CopyVariablesToOutputs (double *y)
{
   21694:	defffe04 	addi	sp,sp,-8
   21698:	df000115 	stw	fp,4(sp)
   2169c:	df000104 	addi	fp,sp,4
   216a0:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	pan_V[6];		/* corr */
   216a4:	010000b4 	movhi	r4,2
   216a8:	211f2304 	addi	r4,r4,31884
   216ac:	20800c17 	ldw	r2,48(r4)
   216b0:	20c00d17 	ldw	r3,52(r4)
   216b4:	e13fff17 	ldw	r4,-4(fp)
   216b8:	20800015 	stw	r2,0(r4)
   216bc:	20c00115 	stw	r3,4(r4)
	y[1] = 	pan_V[9];		/* out */
   216c0:	e0bfff17 	ldw	r2,-4(fp)
   216c4:	11400204 	addi	r5,r2,8
   216c8:	010000b4 	movhi	r4,2
   216cc:	211f2304 	addi	r4,r4,31884
   216d0:	20801217 	ldw	r2,72(r4)
   216d4:	20c01317 	ldw	r3,76(r4)
   216d8:	28800015 	stw	r2,0(r5)
   216dc:	28c00115 	stw	r3,4(r5)

}
   216e0:	0001883a 	nop
   216e4:	e037883a 	mov	sp,fp
   216e8:	df000017 	ldw	fp,0(sp)
   216ec:	dec00104 	addi	sp,sp,4
   216f0:	f800283a 	ret

000216f4 <pan_InitializeSubmodel>:

/* The initialization function for submodel */
void pan_InitializeSubmodel (double *u, double *y, double t)
{
   216f4:	defffa04 	addi	sp,sp,-24
   216f8:	dfc00515 	stw	ra,20(sp)
   216fc:	df000415 	stw	fp,16(sp)
   21700:	df000404 	addi	fp,sp,16
   21704:	e13ffc15 	stw	r4,-16(fp)
   21708:	e17ffd15 	stw	r5,-12(fp)
   2170c:	e1bffe15 	stw	r6,-8(fp)
   21710:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	pan_initialize = 1;
   21714:	00800044 	movi	r2,1
   21718:	d0a00505 	stb	r2,-32748(gp)
	pan_steps = 0;
   2171c:	d020f215 	stw	zero,-31800(gp)
	pan_ModelInitialize ();
   21720:	0020fd00 	call	20fd0 <pan_ModelInitialize>
	pan_DiscreteInitialize ();
   21724:	0020cf00 	call	20cf0 <pan_DiscreteInitialize>

	/* Copy the inputs */
	pan_time = t;
   21728:	e0bffe17 	ldw	r2,-8(fp)
   2172c:	d0a0f015 	stw	r2,-31808(gp)
   21730:	e0bfff17 	ldw	r2,-4(fp)
   21734:	d0a0f115 	stw	r2,-31804(gp)
	pan_CopyInputsToVariables (u);
   21738:	e13ffc17 	ldw	r4,-16(fp)
   2173c:	00216380 	call	21638 <pan_CopyInputsToVariables>

	/* Calculate the model for the first time */
	pan_CalculateDynamic ();
   21740:	00210080 	call	21008 <pan_CalculateDynamic>
	pan_CalculateOutput ();
   21744:	00215d80 	call	215d8 <pan_CalculateOutput>

	/* Set the outputs */
	pan_CopyVariablesToOutputs (y);
   21748:	e13ffd17 	ldw	r4,-12(fp)
   2174c:	00216940 	call	21694 <pan_CopyVariablesToOutputs>

	/* End of initialization phase */
	pan_initialize = 0;
   21750:	d0200505 	stb	zero,-32748(gp)
}
   21754:	0001883a 	nop
   21758:	e037883a 	mov	sp,fp
   2175c:	dfc00117 	ldw	ra,4(sp)
   21760:	df000017 	ldw	fp,0(sp)
   21764:	dec00204 	addi	sp,sp,8
   21768:	f800283a 	ret

0002176c <pan_CalculateSubmodel>:

/* The function that calculates the submodel */
void pan_CalculateSubmodel (double *u, double *y, double t)
{
   2176c:	defffa04 	addi	sp,sp,-24
   21770:	dfc00515 	stw	ra,20(sp)
   21774:	df000415 	stw	fp,16(sp)
   21778:	df000404 	addi	fp,sp,16
   2177c:	e13ffc15 	stw	r4,-16(fp)
   21780:	e17ffd15 	stw	r5,-12(fp)
   21784:	e1bffe15 	stw	r6,-8(fp)
   21788:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	pan_time = t;
   2178c:	e0bffe17 	ldw	r2,-8(fp)
   21790:	d0a0f015 	stw	r2,-31808(gp)
   21794:	e0bfff17 	ldw	r2,-4(fp)
   21798:	d0a0f115 	stw	r2,-31804(gp)
	pan_CopyInputsToVariables (u);
   2179c:	e13ffc17 	ldw	r4,-16(fp)
   217a0:	00216380 	call	21638 <pan_CopyInputsToVariables>

	/* Calculate the model */
	pan_DiscreteStep ();
   217a4:	0020d180 	call	20d18 <pan_DiscreteStep>
	pan_CalculateOutput ();
   217a8:	00215d80 	call	215d8 <pan_CalculateOutput>

	/* Copy the outputs */
	pan_CopyVariablesToOutputs (y);
   217ac:	e13ffd17 	ldw	r4,-12(fp)
   217b0:	00216940 	call	21694 <pan_CopyVariablesToOutputs>
}
   217b4:	0001883a 	nop
   217b8:	e037883a 	mov	sp,fp
   217bc:	dfc00117 	ldw	ra,4(sp)
   217c0:	df000017 	ldw	fp,0(sp)
   217c4:	dec00204 	addi	sp,sp,8
   217c8:	f800283a 	ret

000217cc <pan_TerminateSubmodel>:

/* The termination function for submodel */
void pan_TerminateSubmodel (double *u, double *y, double t)
{
   217cc:	defffa04 	addi	sp,sp,-24
   217d0:	dfc00515 	stw	ra,20(sp)
   217d4:	df000415 	stw	fp,16(sp)
   217d8:	df000404 	addi	fp,sp,16
   217dc:	e13ffc15 	stw	r4,-16(fp)
   217e0:	e17ffd15 	stw	r5,-12(fp)
   217e4:	e1bffe15 	stw	r6,-8(fp)
   217e8:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	pan_time = t;
   217ec:	e0bffe17 	ldw	r2,-8(fp)
   217f0:	d0a0f015 	stw	r2,-31808(gp)
   217f4:	e0bfff17 	ldw	r2,-4(fp)
   217f8:	d0a0f115 	stw	r2,-31804(gp)
	pan_CopyInputsToVariables (u);
   217fc:	e13ffc17 	ldw	r4,-16(fp)
   21800:	00216380 	call	21638 <pan_CopyInputsToVariables>

	/* Set the outputs */
	pan_CopyVariablesToOutputs (y);
   21804:	e13ffd17 	ldw	r4,-12(fp)
   21808:	00216940 	call	21694 <pan_CopyVariablesToOutputs>

}
   2180c:	0001883a 	nop
   21810:	e037883a 	mov	sp,fp
   21814:	dfc00117 	ldw	ra,4(sp)
   21818:	df000017 	ldw	fp,0(sp)
   2181c:	dec00204 	addi	sp,sp,8
   21820:	f800283a 	ret

00021824 <tilt_DiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void tilt_DiscreteInitialize (void)
{
   21824:	deffff04 	addi	sp,sp,-4
   21828:	df000015 	stw	fp,0(sp)
   2182c:	d839883a 	mov	fp,sp
	/* nothing to be done */
	tilt_major = 1;
   21830:	00800044 	movi	r2,1
   21834:	d0a00c45 	stb	r2,-32719(gp)
}
   21838:	0001883a 	nop
   2183c:	e037883a 	mov	sp,fp
   21840:	df000017 	ldw	fp,0(sp)
   21844:	dec00104 	addi	sp,sp,4
   21848:	f800283a 	ret

0002184c <tilt_DiscreteStep>:

/* the Discrete integration method itself */
void tilt_DiscreteStep (void)
{
   2184c:	defffd04 	addi	sp,sp,-12
   21850:	dfc00215 	stw	ra,8(sp)
   21854:	df000115 	stw	fp,4(sp)
   21858:	df000104 	addi	fp,sp,4
	int index;

	/* for each of the supplied states */
	for (index = 0; index < tilt_STATE_SIZE; index++)
   2185c:	e03fff15 	stw	zero,-4(fp)
   21860:	00001106 	br	218a8 <tilt_DiscreteStep+0x5c>
	{
		/* just a move of the new state */
		tilt_s [index] = tilt_R [index];
   21864:	008000b4 	movhi	r2,2
   21868:	109f4304 	addi	r2,r2,32012
   2186c:	e0ffff17 	ldw	r3,-4(fp)
   21870:	180690fa 	slli	r3,r3,3
   21874:	10c9883a 	add	r4,r2,r3
   21878:	20800017 	ldw	r2,0(r4)
   2187c:	20c00117 	ldw	r3,4(r4)
   21880:	010000b4 	movhi	r4,2
   21884:	211f6f04 	addi	r4,r4,32188
   21888:	e17fff17 	ldw	r5,-4(fp)
   2188c:	280a90fa 	slli	r5,r5,3
   21890:	2149883a 	add	r4,r4,r5
   21894:	20800015 	stw	r2,0(r4)
   21898:	20c00115 	stw	r3,4(r4)
void tilt_DiscreteStep (void)
{
	int index;

	/* for each of the supplied states */
	for (index = 0; index < tilt_STATE_SIZE; index++)
   2189c:	e0bfff17 	ldw	r2,-4(fp)
   218a0:	10800044 	addi	r2,r2,1
   218a4:	e0bfff15 	stw	r2,-4(fp)
   218a8:	e0bfff17 	ldw	r2,-4(fp)
   218ac:	108000d0 	cmplti	r2,r2,3
   218b0:	103fec1e 	bne	r2,zero,21864 <__alt_data_end+0xfffe91c4>
	{
		/* just a move of the new state */
		tilt_s [index] = tilt_R [index];
	}
	/* increment the simulation time */
	tilt_time += tilt_step_size;
   218b4:	d0a0f617 	ldw	r2,-31784(gp)
   218b8:	d0e0f717 	ldw	r3,-31780(gp)
   218bc:	d1200a17 	ldw	r4,-32728(gp)
   218c0:	d1600b17 	ldw	r5,-32724(gp)
   218c4:	200d883a 	mov	r6,r4
   218c8:	280f883a 	mov	r7,r5
   218cc:	1009883a 	mov	r4,r2
   218d0:	180b883a 	mov	r5,r3
   218d4:	002255c0 	call	2255c <__adddf3>
   218d8:	1009883a 	mov	r4,r2
   218dc:	180b883a 	mov	r5,r3
   218e0:	2005883a 	mov	r2,r4
   218e4:	2807883a 	mov	r3,r5
   218e8:	d0a0f615 	stw	r2,-31784(gp)
   218ec:	d0e0f715 	stw	r3,-31780(gp)

	tilt_major = 1;
   218f0:	00800044 	movi	r2,1
   218f4:	d0a00c45 	stb	r2,-32719(gp)

	/* evaluate the dynamic part to calculate the new rates */
	tilt_CalculateDynamic ();
   218f8:	0021b3c0 	call	21b3c <tilt_CalculateDynamic>
}
   218fc:	0001883a 	nop
   21900:	e037883a 	mov	sp,fp
   21904:	dfc00117 	ldw	ra,4(sp)
   21908:	df000017 	ldw	fp,0(sp)
   2190c:	dec00204 	addi	sp,sp,8
   21910:	f800283a 	ret

00021914 <tilt_ModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void tilt_ModelInitialize_parameters(void)
{
   21914:	deffff04 	addi	sp,sp,-4
   21918:	df000015 	stw	fp,0(sp)
   2191c:	d839883a 	mov	fp,sp
	/* set the parameters */
	tilt_P[0] = 0.0;		/* corrGain\K */
   21920:	008000b4 	movhi	r2,2
   21924:	109f6104 	addi	r2,r2,32132
   21928:	10000015 	stw	zero,0(r2)
   2192c:	10000115 	stw	zero,4(r2)
	tilt_P[1] = 1.6;		/* PID1\kp */
   21930:	008000b4 	movhi	r2,2
   21934:	109f6104 	addi	r2,r2,32132
   21938:	00e666b4 	movhi	r3,39322
   2193c:	18e66684 	addi	r3,r3,-26214
   21940:	10c00215 	stw	r3,8(r2)
   21944:	00cffeb4 	movhi	r3,16378
   21948:	18e66644 	addi	r3,r3,-26215
   2194c:	10c00315 	stw	r3,12(r2)
	tilt_P[2] = 0.05;		/* PID1\tauD */
   21950:	008000b4 	movhi	r2,2
   21954:	109f6104 	addi	r2,r2,32132
   21958:	00e666b4 	movhi	r3,39322
   2195c:	18e66684 	addi	r3,r3,-26214
   21960:	10c00415 	stw	r3,16(r2)
   21964:	00cfeab4 	movhi	r3,16298
   21968:	18e66644 	addi	r3,r3,-26215
   2196c:	10c00515 	stw	r3,20(r2)
	tilt_P[3] = 0.001;		/* PID1\beta */
   21970:	008000b4 	movhi	r2,2
   21974:	109f6104 	addi	r2,r2,32132
   21978:	00f4bcb4 	movhi	r3,54002
   2197c:	18ea7f04 	addi	r3,r3,-22020
   21980:	10c00615 	stw	r3,24(r2)
   21984:	00cfd434 	movhi	r3,16208
   21988:	18d89344 	addi	r3,r3,25165
   2198c:	10c00715 	stw	r3,28(r2)
	tilt_P[4] = 10.5;		/* PID1\tauI */
   21990:	008000b4 	movhi	r2,2
   21994:	109f6104 	addi	r2,r2,32132
   21998:	10000815 	stw	zero,32(r2)
   2199c:	00d00974 	movhi	r3,16421
   219a0:	10c00915 	stw	r3,36(r2)
	tilt_P[5] = -0.99;		/* SignalLimiter2\minimum */
   219a4:	008000b4 	movhi	r2,2
   219a8:	109f6104 	addi	r2,r2,32132
   219ac:	00deb874 	movhi	r3,31457
   219b0:	18d1eb84 	addi	r3,r3,18350
   219b4:	10c00a15 	stw	r3,40(r2)
   219b8:	00effc34 	movhi	r3,49136
   219bc:	18eb8504 	addi	r3,r3,-20972
   219c0:	10c00b15 	stw	r3,44(r2)
	tilt_P[6] = 0.99;		/* SignalLimiter2\maximum */
   219c4:	008000b4 	movhi	r2,2
   219c8:	109f6104 	addi	r2,r2,32132
   219cc:	00deb874 	movhi	r3,31457
   219d0:	18d1eb84 	addi	r3,r3,18350
   219d4:	10c00c15 	stw	r3,48(r2)
   219d8:	00cffc34 	movhi	r3,16368
   219dc:	18eb8504 	addi	r3,r3,-20972
   219e0:	10c00d15 	stw	r3,52(r2)

}
   219e4:	0001883a 	nop
   219e8:	e037883a 	mov	sp,fp
   219ec:	df000017 	ldw	fp,0(sp)
   219f0:	dec00104 	addi	sp,sp,4
   219f4:	f800283a 	ret

000219f8 <tilt_ModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void tilt_ModelInitialize_initialvalues(void)
{
   219f8:	deffff04 	addi	sp,sp,-4
   219fc:	df000015 	stw	fp,0(sp)
   21a00:	d839883a 	mov	fp,sp
	/* set the initial values */
	tilt_I[0] = 0.0;		/* PID1\uD_previous_initial */
   21a04:	008000b4 	movhi	r2,2
   21a08:	109f3d04 	addi	r2,r2,31988
   21a0c:	10000015 	stw	zero,0(r2)
   21a10:	10000115 	stw	zero,4(r2)
	tilt_I[1] = 0.0;		/* PID1\error_previous_initial */
   21a14:	008000b4 	movhi	r2,2
   21a18:	109f3d04 	addi	r2,r2,31988
   21a1c:	10000215 	stw	zero,8(r2)
   21a20:	10000315 	stw	zero,12(r2)
	tilt_I[2] = 0.0;		/* PID1\uI_previous_initial */
   21a24:	008000b4 	movhi	r2,2
   21a28:	109f3d04 	addi	r2,r2,31988
   21a2c:	10000415 	stw	zero,16(r2)
   21a30:	10000515 	stw	zero,20(r2)

}
   21a34:	0001883a 	nop
   21a38:	e037883a 	mov	sp,fp
   21a3c:	df000017 	ldw	fp,0(sp)
   21a40:	dec00104 	addi	sp,sp,4
   21a44:	f800283a 	ret

00021a48 <tilt_ModelInitialize_states>:

void tilt_ModelInitialize_states(void)
{
   21a48:	deffff04 	addi	sp,sp,-4
   21a4c:	df000015 	stw	fp,0(sp)
   21a50:	d839883a 	mov	fp,sp
	/* set the states */
	tilt_s[0] = tilt_I[0];		/* PID1\uD_previous */
   21a54:	010000b4 	movhi	r4,2
   21a58:	211f3d04 	addi	r4,r4,31988
   21a5c:	20800017 	ldw	r2,0(r4)
   21a60:	20c00117 	ldw	r3,4(r4)
   21a64:	010000b4 	movhi	r4,2
   21a68:	211f6f04 	addi	r4,r4,32188
   21a6c:	20800015 	stw	r2,0(r4)
   21a70:	20c00115 	stw	r3,4(r4)
	tilt_s[1] = tilt_I[1];		/* PID1\error_previous */
   21a74:	010000b4 	movhi	r4,2
   21a78:	211f3d04 	addi	r4,r4,31988
   21a7c:	20800217 	ldw	r2,8(r4)
   21a80:	20c00317 	ldw	r3,12(r4)
   21a84:	010000b4 	movhi	r4,2
   21a88:	211f6f04 	addi	r4,r4,32188
   21a8c:	20800215 	stw	r2,8(r4)
   21a90:	20c00315 	stw	r3,12(r4)
	tilt_s[2] = tilt_I[2];		/* PID1\uI_previous */
   21a94:	010000b4 	movhi	r4,2
   21a98:	211f3d04 	addi	r4,r4,31988
   21a9c:	20800417 	ldw	r2,16(r4)
   21aa0:	20c00517 	ldw	r3,20(r4)
   21aa4:	010000b4 	movhi	r4,2
   21aa8:	211f6f04 	addi	r4,r4,32188
   21aac:	20800415 	stw	r2,16(r4)
   21ab0:	20c00515 	stw	r3,20(r4)

}
   21ab4:	0001883a 	nop
   21ab8:	e037883a 	mov	sp,fp
   21abc:	df000017 	ldw	fp,0(sp)
   21ac0:	dec00104 	addi	sp,sp,4
   21ac4:	f800283a 	ret

00021ac8 <tilt_ModelInitialize_variables>:

void tilt_ModelInitialize_variables(void)
{
   21ac8:	defffe04 	addi	sp,sp,-8
   21acc:	dfc00115 	stw	ra,4(sp)
   21ad0:	df000015 	stw	fp,0(sp)
   21ad4:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(tilt_V, 0, tilt_variables_size * sizeof(double));
   21ad8:	01801804 	movi	r6,96
   21adc:	000b883a 	mov	r5,zero
   21ae0:	010000b4 	movhi	r4,2
   21ae4:	211f4904 	addi	r4,r4,32036
   21ae8:	0024a940 	call	24a94 <memset>
}
   21aec:	0001883a 	nop
   21af0:	e037883a 	mov	sp,fp
   21af4:	dfc00117 	ldw	ra,4(sp)
   21af8:	df000017 	ldw	fp,0(sp)
   21afc:	dec00204 	addi	sp,sp,8
   21b00:	f800283a 	ret

00021b04 <tilt_ModelInitialize>:

/* this method is called before calculation is possible */
void tilt_ModelInitialize (void)
{
   21b04:	defffe04 	addi	sp,sp,-8
   21b08:	dfc00115 	stw	ra,4(sp)
   21b0c:	df000015 	stw	fp,0(sp)
   21b10:	d839883a 	mov	fp,sp
	tilt_ModelInitialize_parameters();
   21b14:	00219140 	call	21914 <tilt_ModelInitialize_parameters>
	tilt_ModelInitialize_variables();
   21b18:	0021ac80 	call	21ac8 <tilt_ModelInitialize_variables>
	tilt_ModelInitialize_initialvalues();
   21b1c:	00219f80 	call	219f8 <tilt_ModelInitialize_initialvalues>
	tilt_ModelInitialize_states();
   21b20:	0021a480 	call	21a48 <tilt_ModelInitialize_states>
}
   21b24:	0001883a 	nop
   21b28:	e037883a 	mov	sp,fp
   21b2c:	dfc00117 	ldw	ra,4(sp)
   21b30:	df000017 	ldw	fp,0(sp)
   21b34:	dec00204 	addi	sp,sp,8
   21b38:	f800283a 	ret

00021b3c <tilt_CalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void tilt_CalculateDynamic (void)
{
   21b3c:	defff804 	addi	sp,sp,-32
   21b40:	dfc00715 	stw	ra,28(sp)
   21b44:	df000615 	stw	fp,24(sp)
   21b48:	dd400515 	stw	r21,20(sp)
   21b4c:	dd000415 	stw	r20,16(sp)
   21b50:	dcc00315 	stw	r19,12(sp)
   21b54:	dc800215 	stw	r18,8(sp)
   21b58:	dc400115 	stw	r17,4(sp)
   21b5c:	dc000015 	stw	r16,0(sp)
   21b60:	df000604 	addi	fp,sp,24
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	tilt_V[3] = 1.0 / (tilt_step_size + tilt_P[2] * tilt_P[3]);
   21b64:	010000b4 	movhi	r4,2
   21b68:	211f6104 	addi	r4,r4,32132
   21b6c:	20800417 	ldw	r2,16(r4)
   21b70:	20c00517 	ldw	r3,20(r4)
   21b74:	018000b4 	movhi	r6,2
   21b78:	319f6104 	addi	r6,r6,32132
   21b7c:	31000617 	ldw	r4,24(r6)
   21b80:	31400717 	ldw	r5,28(r6)
   21b84:	200d883a 	mov	r6,r4
   21b88:	280f883a 	mov	r7,r5
   21b8c:	1009883a 	mov	r4,r2
   21b90:	180b883a 	mov	r5,r3
   21b94:	00238c00 	call	238c0 <__muldf3>
   21b98:	1009883a 	mov	r4,r2
   21b9c:	180b883a 	mov	r5,r3
   21ba0:	2011883a 	mov	r8,r4
   21ba4:	2813883a 	mov	r9,r5
   21ba8:	d0a00a17 	ldw	r2,-32728(gp)
   21bac:	d0e00b17 	ldw	r3,-32724(gp)
   21bb0:	100d883a 	mov	r6,r2
   21bb4:	180f883a 	mov	r7,r3
   21bb8:	4009883a 	mov	r4,r8
   21bbc:	480b883a 	mov	r5,r9
   21bc0:	002255c0 	call	2255c <__adddf3>
   21bc4:	1009883a 	mov	r4,r2
   21bc8:	180b883a 	mov	r5,r3
   21bcc:	2005883a 	mov	r2,r4
   21bd0:	2807883a 	mov	r3,r5
   21bd4:	100d883a 	mov	r6,r2
   21bd8:	180f883a 	mov	r7,r3
   21bdc:	0009883a 	mov	r4,zero
   21be0:	014ffc34 	movhi	r5,16368
   21be4:	0022e080 	call	22e08 <__divdf3>
   21be8:	100b883a 	mov	r5,r2
   21bec:	180d883a 	mov	r6,r3
   21bf0:	2807883a 	mov	r3,r5
   21bf4:	3009883a 	mov	r4,r6
   21bf8:	008000b4 	movhi	r2,2
   21bfc:	109f4904 	addi	r2,r2,32036
   21c00:	10c00615 	stw	r3,24(r2)
   21c04:	11000715 	stw	r4,28(r2)

	/* corrGain\input = corr; */
	tilt_V[0] = tilt_V[8];
   21c08:	010000b4 	movhi	r4,2
   21c0c:	211f4904 	addi	r4,r4,32036
   21c10:	20801017 	ldw	r2,64(r4)
   21c14:	20c01117 	ldw	r3,68(r4)
   21c18:	010000b4 	movhi	r4,2
   21c1c:	211f4904 	addi	r4,r4,32036
   21c20:	20800015 	stw	r2,0(r4)
   21c24:	20c00115 	stw	r3,4(r4)

	/* PlusMinus2\plus1 = in; */
	tilt_V[5] = tilt_V[9];
   21c28:	010000b4 	movhi	r4,2
   21c2c:	211f4904 	addi	r4,r4,32036
   21c30:	20801217 	ldw	r2,72(r4)
   21c34:	20c01317 	ldw	r3,76(r4)
   21c38:	010000b4 	movhi	r4,2
   21c3c:	211f4904 	addi	r4,r4,32036
   21c40:	20800a15 	stw	r2,40(r4)
   21c44:	20c00b15 	stw	r3,44(r4)

	/* PlusMinus2\minus1 = position; */
	tilt_V[6] = tilt_V[10];
   21c48:	010000b4 	movhi	r4,2
   21c4c:	211f4904 	addi	r4,r4,32036
   21c50:	20801417 	ldw	r2,80(r4)
   21c54:	20c01517 	ldw	r3,84(r4)
   21c58:	010000b4 	movhi	r4,2
   21c5c:	211f4904 	addi	r4,r4,32036
   21c60:	20800c15 	stw	r2,48(r4)
   21c64:	20c00d15 	stw	r3,52(r4)

	/* corrGain\output = corrGain\K * corrGain\input; */
	tilt_V[1] = tilt_P[0] * tilt_V[0];
   21c68:	010000b4 	movhi	r4,2
   21c6c:	211f6104 	addi	r4,r4,32132
   21c70:	20800017 	ldw	r2,0(r4)
   21c74:	20c00117 	ldw	r3,4(r4)
   21c78:	018000b4 	movhi	r6,2
   21c7c:	319f4904 	addi	r6,r6,32036
   21c80:	31000017 	ldw	r4,0(r6)
   21c84:	31400117 	ldw	r5,4(r6)
   21c88:	200d883a 	mov	r6,r4
   21c8c:	280f883a 	mov	r7,r5
   21c90:	1009883a 	mov	r4,r2
   21c94:	180b883a 	mov	r5,r3
   21c98:	00238c00 	call	238c0 <__muldf3>
   21c9c:	100b883a 	mov	r5,r2
   21ca0:	180d883a 	mov	r6,r3
   21ca4:	2807883a 	mov	r3,r5
   21ca8:	3009883a 	mov	r4,r6
   21cac:	008000b4 	movhi	r2,2
   21cb0:	109f4904 	addi	r2,r2,32036
   21cb4:	10c00215 	stw	r3,8(r2)
   21cb8:	11000315 	stw	r4,12(r2)

	/* PID1\error = PlusMinus2\plus1 - PlusMinus2\minus1; */
	tilt_R[1] = tilt_V[5] - tilt_V[6];
   21cbc:	010000b4 	movhi	r4,2
   21cc0:	211f4904 	addi	r4,r4,32036
   21cc4:	20800a17 	ldw	r2,40(r4)
   21cc8:	20c00b17 	ldw	r3,44(r4)
   21ccc:	018000b4 	movhi	r6,2
   21cd0:	319f4904 	addi	r6,r6,32036
   21cd4:	31000c17 	ldw	r4,48(r6)
   21cd8:	31400d17 	ldw	r5,52(r6)
   21cdc:	200d883a 	mov	r6,r4
   21ce0:	280f883a 	mov	r7,r5
   21ce4:	1009883a 	mov	r4,r2
   21ce8:	180b883a 	mov	r5,r3
   21cec:	0023fd80 	call	23fd8 <__subdf3>
   21cf0:	100b883a 	mov	r5,r2
   21cf4:	180d883a 	mov	r6,r3
   21cf8:	2807883a 	mov	r3,r5
   21cfc:	3009883a 	mov	r4,r6
   21d00:	008000b4 	movhi	r2,2
   21d04:	109f4304 	addi	r2,r2,32012
   21d08:	10c00215 	stw	r3,8(r2)
   21d0c:	11000315 	stw	r4,12(r2)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	tilt_R[0] = tilt_V[3] * (((tilt_P[2] * tilt_s[0]) * tilt_P[3] + (tilt_P[2] * tilt_P[1]) * (tilt_R[1] - tilt_s[1])) + (tilt_step_size * tilt_P[1]) * tilt_R[1]);
   21d10:	008000b4 	movhi	r2,2
   21d14:	109f4904 	addi	r2,r2,32036
   21d18:	14000617 	ldw	r16,24(r2)
   21d1c:	14400717 	ldw	r17,28(r2)
   21d20:	010000b4 	movhi	r4,2
   21d24:	211f6104 	addi	r4,r4,32132
   21d28:	20800417 	ldw	r2,16(r4)
   21d2c:	20c00517 	ldw	r3,20(r4)
   21d30:	018000b4 	movhi	r6,2
   21d34:	319f6f04 	addi	r6,r6,32188
   21d38:	31000017 	ldw	r4,0(r6)
   21d3c:	31400117 	ldw	r5,4(r6)
   21d40:	200d883a 	mov	r6,r4
   21d44:	280f883a 	mov	r7,r5
   21d48:	1009883a 	mov	r4,r2
   21d4c:	180b883a 	mov	r5,r3
   21d50:	00238c00 	call	238c0 <__muldf3>
   21d54:	1009883a 	mov	r4,r2
   21d58:	180b883a 	mov	r5,r3
   21d5c:	2011883a 	mov	r8,r4
   21d60:	2813883a 	mov	r9,r5
   21d64:	010000b4 	movhi	r4,2
   21d68:	211f6104 	addi	r4,r4,32132
   21d6c:	20800617 	ldw	r2,24(r4)
   21d70:	20c00717 	ldw	r3,28(r4)
   21d74:	100d883a 	mov	r6,r2
   21d78:	180f883a 	mov	r7,r3
   21d7c:	4009883a 	mov	r4,r8
   21d80:	480b883a 	mov	r5,r9
   21d84:	00238c00 	call	238c0 <__muldf3>
   21d88:	1009883a 	mov	r4,r2
   21d8c:	180b883a 	mov	r5,r3
   21d90:	2025883a 	mov	r18,r4
   21d94:	2827883a 	mov	r19,r5
   21d98:	010000b4 	movhi	r4,2
   21d9c:	211f6104 	addi	r4,r4,32132
   21da0:	20800417 	ldw	r2,16(r4)
   21da4:	20c00517 	ldw	r3,20(r4)
   21da8:	018000b4 	movhi	r6,2
   21dac:	319f6104 	addi	r6,r6,32132
   21db0:	31000217 	ldw	r4,8(r6)
   21db4:	31400317 	ldw	r5,12(r6)
   21db8:	200d883a 	mov	r6,r4
   21dbc:	280f883a 	mov	r7,r5
   21dc0:	1009883a 	mov	r4,r2
   21dc4:	180b883a 	mov	r5,r3
   21dc8:	00238c00 	call	238c0 <__muldf3>
   21dcc:	1009883a 	mov	r4,r2
   21dd0:	180b883a 	mov	r5,r3
   21dd4:	2029883a 	mov	r20,r4
   21dd8:	282b883a 	mov	r21,r5
   21ddc:	010000b4 	movhi	r4,2
   21de0:	211f4304 	addi	r4,r4,32012
   21de4:	20800217 	ldw	r2,8(r4)
   21de8:	20c00317 	ldw	r3,12(r4)
   21dec:	018000b4 	movhi	r6,2
   21df0:	319f6f04 	addi	r6,r6,32188
   21df4:	31000217 	ldw	r4,8(r6)
   21df8:	31400317 	ldw	r5,12(r6)
   21dfc:	200d883a 	mov	r6,r4
   21e00:	280f883a 	mov	r7,r5
   21e04:	1009883a 	mov	r4,r2
   21e08:	180b883a 	mov	r5,r3
   21e0c:	0023fd80 	call	23fd8 <__subdf3>
   21e10:	1009883a 	mov	r4,r2
   21e14:	180b883a 	mov	r5,r3
   21e18:	2005883a 	mov	r2,r4
   21e1c:	2807883a 	mov	r3,r5
   21e20:	100d883a 	mov	r6,r2
   21e24:	180f883a 	mov	r7,r3
   21e28:	a009883a 	mov	r4,r20
   21e2c:	a80b883a 	mov	r5,r21
   21e30:	00238c00 	call	238c0 <__muldf3>
   21e34:	1009883a 	mov	r4,r2
   21e38:	180b883a 	mov	r5,r3
   21e3c:	2005883a 	mov	r2,r4
   21e40:	2807883a 	mov	r3,r5
   21e44:	100d883a 	mov	r6,r2
   21e48:	180f883a 	mov	r7,r3
   21e4c:	9009883a 	mov	r4,r18
   21e50:	980b883a 	mov	r5,r19
   21e54:	002255c0 	call	2255c <__adddf3>
   21e58:	1009883a 	mov	r4,r2
   21e5c:	180b883a 	mov	r5,r3
   21e60:	2025883a 	mov	r18,r4
   21e64:	2827883a 	mov	r19,r5
   21e68:	010000b4 	movhi	r4,2
   21e6c:	211f6104 	addi	r4,r4,32132
   21e70:	20800217 	ldw	r2,8(r4)
   21e74:	20c00317 	ldw	r3,12(r4)
   21e78:	d1200a17 	ldw	r4,-32728(gp)
   21e7c:	d1600b17 	ldw	r5,-32724(gp)
   21e80:	200d883a 	mov	r6,r4
   21e84:	280f883a 	mov	r7,r5
   21e88:	1009883a 	mov	r4,r2
   21e8c:	180b883a 	mov	r5,r3
   21e90:	00238c00 	call	238c0 <__muldf3>
   21e94:	1009883a 	mov	r4,r2
   21e98:	180b883a 	mov	r5,r3
   21e9c:	2011883a 	mov	r8,r4
   21ea0:	2813883a 	mov	r9,r5
   21ea4:	010000b4 	movhi	r4,2
   21ea8:	211f4304 	addi	r4,r4,32012
   21eac:	20800217 	ldw	r2,8(r4)
   21eb0:	20c00317 	ldw	r3,12(r4)
   21eb4:	100d883a 	mov	r6,r2
   21eb8:	180f883a 	mov	r7,r3
   21ebc:	4009883a 	mov	r4,r8
   21ec0:	480b883a 	mov	r5,r9
   21ec4:	00238c00 	call	238c0 <__muldf3>
   21ec8:	1009883a 	mov	r4,r2
   21ecc:	180b883a 	mov	r5,r3
   21ed0:	2005883a 	mov	r2,r4
   21ed4:	2807883a 	mov	r3,r5
   21ed8:	100d883a 	mov	r6,r2
   21edc:	180f883a 	mov	r7,r3
   21ee0:	9009883a 	mov	r4,r18
   21ee4:	980b883a 	mov	r5,r19
   21ee8:	002255c0 	call	2255c <__adddf3>
   21eec:	1009883a 	mov	r4,r2
   21ef0:	180b883a 	mov	r5,r3
   21ef4:	2005883a 	mov	r2,r4
   21ef8:	2807883a 	mov	r3,r5
   21efc:	100d883a 	mov	r6,r2
   21f00:	180f883a 	mov	r7,r3
   21f04:	8009883a 	mov	r4,r16
   21f08:	880b883a 	mov	r5,r17
   21f0c:	00238c00 	call	238c0 <__muldf3>
   21f10:	100b883a 	mov	r5,r2
   21f14:	180d883a 	mov	r6,r3
   21f18:	2807883a 	mov	r3,r5
   21f1c:	3009883a 	mov	r4,r6
   21f20:	008000b4 	movhi	r2,2
   21f24:	109f4304 	addi	r2,r2,32012
   21f28:	10c00015 	stw	r3,0(r2)
   21f2c:	11000115 	stw	r4,4(r2)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	tilt_R[2] = tilt_s[2] + (tilt_step_size * tilt_R[0]) / tilt_P[4];
   21f30:	008000b4 	movhi	r2,2
   21f34:	109f6f04 	addi	r2,r2,32188
   21f38:	14000417 	ldw	r16,16(r2)
   21f3c:	14400517 	ldw	r17,20(r2)
   21f40:	010000b4 	movhi	r4,2
   21f44:	211f4304 	addi	r4,r4,32012
   21f48:	20800017 	ldw	r2,0(r4)
   21f4c:	20c00117 	ldw	r3,4(r4)
   21f50:	d1200a17 	ldw	r4,-32728(gp)
   21f54:	d1600b17 	ldw	r5,-32724(gp)
   21f58:	200d883a 	mov	r6,r4
   21f5c:	280f883a 	mov	r7,r5
   21f60:	1009883a 	mov	r4,r2
   21f64:	180b883a 	mov	r5,r3
   21f68:	00238c00 	call	238c0 <__muldf3>
   21f6c:	1009883a 	mov	r4,r2
   21f70:	180b883a 	mov	r5,r3
   21f74:	2011883a 	mov	r8,r4
   21f78:	2813883a 	mov	r9,r5
   21f7c:	010000b4 	movhi	r4,2
   21f80:	211f6104 	addi	r4,r4,32132
   21f84:	20800817 	ldw	r2,32(r4)
   21f88:	20c00917 	ldw	r3,36(r4)
   21f8c:	100d883a 	mov	r6,r2
   21f90:	180f883a 	mov	r7,r3
   21f94:	4009883a 	mov	r4,r8
   21f98:	480b883a 	mov	r5,r9
   21f9c:	0022e080 	call	22e08 <__divdf3>
   21fa0:	1009883a 	mov	r4,r2
   21fa4:	180b883a 	mov	r5,r3
   21fa8:	2005883a 	mov	r2,r4
   21fac:	2807883a 	mov	r3,r5
   21fb0:	100d883a 	mov	r6,r2
   21fb4:	180f883a 	mov	r7,r3
   21fb8:	8009883a 	mov	r4,r16
   21fbc:	880b883a 	mov	r5,r17
   21fc0:	002255c0 	call	2255c <__adddf3>
   21fc4:	100b883a 	mov	r5,r2
   21fc8:	180d883a 	mov	r6,r3
   21fcc:	2807883a 	mov	r3,r5
   21fd0:	3009883a 	mov	r4,r6
   21fd4:	008000b4 	movhi	r2,2
   21fd8:	109f4304 	addi	r2,r2,32012
   21fdc:	10c00415 	stw	r3,16(r2)
   21fe0:	11000515 	stw	r4,20(r2)

	/* PID1\output = PID1\uI + PID1\uD; */
	tilt_V[2] = tilt_R[2] + tilt_R[0];
   21fe4:	010000b4 	movhi	r4,2
   21fe8:	211f4304 	addi	r4,r4,32012
   21fec:	20800417 	ldw	r2,16(r4)
   21ff0:	20c00517 	ldw	r3,20(r4)
   21ff4:	018000b4 	movhi	r6,2
   21ff8:	319f4304 	addi	r6,r6,32012
   21ffc:	31000017 	ldw	r4,0(r6)
   22000:	31400117 	ldw	r5,4(r6)
   22004:	200d883a 	mov	r6,r4
   22008:	280f883a 	mov	r7,r5
   2200c:	1009883a 	mov	r4,r2
   22010:	180b883a 	mov	r5,r3
   22014:	002255c0 	call	2255c <__adddf3>
   22018:	100b883a 	mov	r5,r2
   2201c:	180d883a 	mov	r6,r3
   22020:	2807883a 	mov	r3,r5
   22024:	3009883a 	mov	r4,r6
   22028:	008000b4 	movhi	r2,2
   2202c:	109f4904 	addi	r2,r2,32036
   22030:	10c00415 	stw	r3,16(r2)
   22034:	11000515 	stw	r4,20(r2)

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	tilt_V[4] = tilt_V[1] + tilt_V[2];
   22038:	010000b4 	movhi	r4,2
   2203c:	211f4904 	addi	r4,r4,32036
   22040:	20800217 	ldw	r2,8(r4)
   22044:	20c00317 	ldw	r3,12(r4)
   22048:	018000b4 	movhi	r6,2
   2204c:	319f4904 	addi	r6,r6,32036
   22050:	31000417 	ldw	r4,16(r6)
   22054:	31400517 	ldw	r5,20(r6)
   22058:	200d883a 	mov	r6,r4
   2205c:	280f883a 	mov	r7,r5
   22060:	1009883a 	mov	r4,r2
   22064:	180b883a 	mov	r5,r3
   22068:	002255c0 	call	2255c <__adddf3>
   2206c:	100b883a 	mov	r5,r2
   22070:	180d883a 	mov	r6,r3
   22074:	2807883a 	mov	r3,r5
   22078:	3009883a 	mov	r4,r6
   2207c:	008000b4 	movhi	r2,2
   22080:	109f4904 	addi	r2,r2,32036
   22084:	10c00815 	stw	r3,32(r2)
   22088:	11000915 	stw	r4,36(r2)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	tilt_V[7] = ((tilt_V[4] < tilt_P[5]) ? 
   2208c:	010000b4 	movhi	r4,2
   22090:	211f4904 	addi	r4,r4,32036
   22094:	20800817 	ldw	r2,32(r4)
   22098:	20c00917 	ldw	r3,36(r4)
   2209c:	018000b4 	movhi	r6,2
   220a0:	319f6104 	addi	r6,r6,32132
   220a4:	31000a17 	ldw	r4,40(r6)
   220a8:	31400b17 	ldw	r5,44(r6)
		/* SignalLimiter2\minimum */
		tilt_P[5]
	:
   220ac:	200d883a 	mov	r6,r4
   220b0:	280f883a 	mov	r7,r5
   220b4:	1009883a 	mov	r4,r2
   220b8:	180b883a 	mov	r5,r3
   220bc:	00237cc0 	call	237cc <__ledf2>
   220c0:	1000050e 	bge	r2,zero,220d8 <tilt_CalculateDynamic+0x59c>
   220c4:	010000b4 	movhi	r4,2
   220c8:	211f6104 	addi	r4,r4,32132
   220cc:	20800a17 	ldw	r2,40(r4)
   220d0:	20c00b17 	ldw	r3,44(r4)
   220d4:	00001706 	br	22134 <tilt_CalculateDynamic+0x5f8>
		/* (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) */
		((tilt_V[4] > tilt_P[6]) ? 
   220d8:	010000b4 	movhi	r4,2
   220dc:	211f4904 	addi	r4,r4,32036
   220e0:	20800817 	ldw	r2,32(r4)
   220e4:	20c00917 	ldw	r3,36(r4)
   220e8:	018000b4 	movhi	r6,2
   220ec:	319f6104 	addi	r6,r6,32132
   220f0:	31000c17 	ldw	r4,48(r6)
   220f4:	31400d17 	ldw	r5,52(r6)
			/* SignalLimiter2\maximum */
			tilt_P[6]
		:
   220f8:	200d883a 	mov	r6,r4
   220fc:	280f883a 	mov	r7,r5
   22100:	1009883a 	mov	r4,r2
   22104:	180b883a 	mov	r5,r3
   22108:	00236f00 	call	236f0 <__gedf2>
   2210c:	0080050e 	bge	zero,r2,22124 <tilt_CalculateDynamic+0x5e8>
   22110:	010000b4 	movhi	r4,2
   22114:	211f6104 	addi	r4,r4,32132
   22118:	20800c17 	ldw	r2,48(r4)
   2211c:	20c00d17 	ldw	r3,52(r4)
   22120:	00000406 	br	22134 <tilt_CalculateDynamic+0x5f8>
   22124:	010000b4 	movhi	r4,2
   22128:	211f4904 	addi	r4,r4,32036
   2212c:	20800817 	ldw	r2,32(r4)
   22130:	20c00917 	ldw	r3,36(r4)

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	tilt_V[4] = tilt_V[1] + tilt_V[2];

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	tilt_V[7] = ((tilt_V[4] < tilt_P[5]) ? 
   22134:	010000b4 	movhi	r4,2
   22138:	211f4904 	addi	r4,r4,32036
   2213c:	20800e15 	stw	r2,56(r4)
   22140:	20c00f15 	stw	r3,60(r4)
		)
	);


	/* increment the step counter */
	tilt_steps++;
   22144:	d0a0f817 	ldw	r2,-31776(gp)
   22148:	10800044 	addi	r2,r2,1
   2214c:	d0a0f815 	stw	r2,-31776(gp)
}
   22150:	0001883a 	nop
   22154:	e6fffa04 	addi	sp,fp,-24
   22158:	dfc00717 	ldw	ra,28(sp)
   2215c:	df000617 	ldw	fp,24(sp)
   22160:	dd400517 	ldw	r21,20(sp)
   22164:	dd000417 	ldw	r20,16(sp)
   22168:	dcc00317 	ldw	r19,12(sp)
   2216c:	dc800217 	ldw	r18,8(sp)
   22170:	dc400117 	ldw	r17,4(sp)
   22174:	dc000017 	ldw	r16,0(sp)
   22178:	dec00804 	addi	sp,sp,32
   2217c:	f800283a 	ret

00022180 <tilt_CalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void tilt_CalculateOutput (void)
{
   22180:	deffff04 	addi	sp,sp,-4
   22184:	df000015 	stw	fp,0(sp)
   22188:	d839883a 	mov	fp,sp
	/* out = SignalLimiter2\output; */
	tilt_V[11] = tilt_V[7];
   2218c:	010000b4 	movhi	r4,2
   22190:	211f4904 	addi	r4,r4,32036
   22194:	20800e17 	ldw	r2,56(r4)
   22198:	20c00f17 	ldw	r3,60(r4)
   2219c:	010000b4 	movhi	r4,2
   221a0:	211f4904 	addi	r4,r4,32036
   221a4:	20801615 	stw	r2,88(r4)
   221a8:	20c01715 	stw	r3,92(r4)

}
   221ac:	0001883a 	nop
   221b0:	e037883a 	mov	sp,fp
   221b4:	df000017 	ldw	fp,0(sp)
   221b8:	dec00104 	addi	sp,sp,4
   221bc:	f800283a 	ret

000221c0 <tilt_CopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void tilt_CopyInputsToVariables (double *u)
{
   221c0:	defffe04 	addi	sp,sp,-8
   221c4:	df000115 	stw	fp,4(sp)
   221c8:	df000104 	addi	fp,sp,4
   221cc:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	tilt_V[8] = u[0];		/* corr */
   221d0:	e13fff17 	ldw	r4,-4(fp)
   221d4:	20800017 	ldw	r2,0(r4)
   221d8:	20c00117 	ldw	r3,4(r4)
   221dc:	010000b4 	movhi	r4,2
   221e0:	211f4904 	addi	r4,r4,32036
   221e4:	20801015 	stw	r2,64(r4)
   221e8:	20c01115 	stw	r3,68(r4)
	tilt_V[9] = u[1];		/* in */
   221ec:	e13fff17 	ldw	r4,-4(fp)
   221f0:	20800217 	ldw	r2,8(r4)
   221f4:	20c00317 	ldw	r3,12(r4)
   221f8:	010000b4 	movhi	r4,2
   221fc:	211f4904 	addi	r4,r4,32036
   22200:	20801215 	stw	r2,72(r4)
   22204:	20c01315 	stw	r3,76(r4)
	tilt_V[10] = u[2];		/* position */
   22208:	e13fff17 	ldw	r4,-4(fp)
   2220c:	20800417 	ldw	r2,16(r4)
   22210:	20c00517 	ldw	r3,20(r4)
   22214:	010000b4 	movhi	r4,2
   22218:	211f4904 	addi	r4,r4,32036
   2221c:	20801415 	stw	r2,80(r4)
   22220:	20c01515 	stw	r3,84(r4)

}
   22224:	0001883a 	nop
   22228:	e037883a 	mov	sp,fp
   2222c:	df000017 	ldw	fp,0(sp)
   22230:	dec00104 	addi	sp,sp,4
   22234:	f800283a 	ret

00022238 <tilt_CopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void tilt_CopyVariablesToOutputs (double *y)
{
   22238:	defffe04 	addi	sp,sp,-8
   2223c:	df000115 	stw	fp,4(sp)
   22240:	df000104 	addi	fp,sp,4
   22244:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	tilt_V[11];		/* out */
   22248:	010000b4 	movhi	r4,2
   2224c:	211f4904 	addi	r4,r4,32036
   22250:	20801617 	ldw	r2,88(r4)
   22254:	20c01717 	ldw	r3,92(r4)
   22258:	e13fff17 	ldw	r4,-4(fp)
   2225c:	20800015 	stw	r2,0(r4)
   22260:	20c00115 	stw	r3,4(r4)

}
   22264:	0001883a 	nop
   22268:	e037883a 	mov	sp,fp
   2226c:	df000017 	ldw	fp,0(sp)
   22270:	dec00104 	addi	sp,sp,4
   22274:	f800283a 	ret

00022278 <tilt_InitializeSubmodel>:

/* The initialization function for submodel */
void tilt_InitializeSubmodel (double *u, double *y, double t)
{
   22278:	defffa04 	addi	sp,sp,-24
   2227c:	dfc00515 	stw	ra,20(sp)
   22280:	df000415 	stw	fp,16(sp)
   22284:	df000404 	addi	fp,sp,16
   22288:	e13ffc15 	stw	r4,-16(fp)
   2228c:	e17ffd15 	stw	r5,-12(fp)
   22290:	e1bffe15 	stw	r6,-8(fp)
   22294:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	tilt_initialize = 1;
   22298:	00800044 	movi	r2,1
   2229c:	d0a00c05 	stb	r2,-32720(gp)
	tilt_steps = 0;
   222a0:	d020f815 	stw	zero,-31776(gp)
	tilt_ModelInitialize ();
   222a4:	0021b040 	call	21b04 <tilt_ModelInitialize>
	tilt_DiscreteInitialize ();
   222a8:	00218240 	call	21824 <tilt_DiscreteInitialize>

	/* Copy the inputs */
	tilt_time = t;
   222ac:	e0bffe17 	ldw	r2,-8(fp)
   222b0:	d0a0f615 	stw	r2,-31784(gp)
   222b4:	e0bfff17 	ldw	r2,-4(fp)
   222b8:	d0a0f715 	stw	r2,-31780(gp)
	tilt_CopyInputsToVariables (u);
   222bc:	e13ffc17 	ldw	r4,-16(fp)
   222c0:	00221c00 	call	221c0 <tilt_CopyInputsToVariables>

	/* Calculate the model for the first time */
	tilt_CalculateDynamic ();
   222c4:	0021b3c0 	call	21b3c <tilt_CalculateDynamic>
	tilt_CalculateOutput ();
   222c8:	00221800 	call	22180 <tilt_CalculateOutput>

	/* Set the outputs */
	tilt_CopyVariablesToOutputs (y);
   222cc:	e13ffd17 	ldw	r4,-12(fp)
   222d0:	00222380 	call	22238 <tilt_CopyVariablesToOutputs>

	/* End of initialization phase */
	tilt_initialize = 0;
   222d4:	d0200c05 	stb	zero,-32720(gp)
}
   222d8:	0001883a 	nop
   222dc:	e037883a 	mov	sp,fp
   222e0:	dfc00117 	ldw	ra,4(sp)
   222e4:	df000017 	ldw	fp,0(sp)
   222e8:	dec00204 	addi	sp,sp,8
   222ec:	f800283a 	ret

000222f0 <tilt_CalculateSubmodel>:

/* The function that calculates the submodel */
void tilt_CalculateSubmodel (double *u, double *y, double t)
{
   222f0:	defffa04 	addi	sp,sp,-24
   222f4:	dfc00515 	stw	ra,20(sp)
   222f8:	df000415 	stw	fp,16(sp)
   222fc:	df000404 	addi	fp,sp,16
   22300:	e13ffc15 	stw	r4,-16(fp)
   22304:	e17ffd15 	stw	r5,-12(fp)
   22308:	e1bffe15 	stw	r6,-8(fp)
   2230c:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	tilt_time = t;
   22310:	e0bffe17 	ldw	r2,-8(fp)
   22314:	d0a0f615 	stw	r2,-31784(gp)
   22318:	e0bfff17 	ldw	r2,-4(fp)
   2231c:	d0a0f715 	stw	r2,-31780(gp)
	tilt_CopyInputsToVariables (u);
   22320:	e13ffc17 	ldw	r4,-16(fp)
   22324:	00221c00 	call	221c0 <tilt_CopyInputsToVariables>

	/* Calculate the model */
	tilt_DiscreteStep ();
   22328:	002184c0 	call	2184c <tilt_DiscreteStep>
	tilt_CalculateOutput ();
   2232c:	00221800 	call	22180 <tilt_CalculateOutput>

	/* Copy the outputs */
	tilt_CopyVariablesToOutputs (y);
   22330:	e13ffd17 	ldw	r4,-12(fp)
   22334:	00222380 	call	22238 <tilt_CopyVariablesToOutputs>
}
   22338:	0001883a 	nop
   2233c:	e037883a 	mov	sp,fp
   22340:	dfc00117 	ldw	ra,4(sp)
   22344:	df000017 	ldw	fp,0(sp)
   22348:	dec00204 	addi	sp,sp,8
   2234c:	f800283a 	ret

00022350 <tilt_TerminateSubmodel>:

/* The termination function for submodel */
void tilt_TerminateSubmodel (double *u, double *y, double t)
{
   22350:	defffa04 	addi	sp,sp,-24
   22354:	dfc00515 	stw	ra,20(sp)
   22358:	df000415 	stw	fp,16(sp)
   2235c:	df000404 	addi	fp,sp,16
   22360:	e13ffc15 	stw	r4,-16(fp)
   22364:	e17ffd15 	stw	r5,-12(fp)
   22368:	e1bffe15 	stw	r6,-8(fp)
   2236c:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	tilt_time = t;
   22370:	e0bffe17 	ldw	r2,-8(fp)
   22374:	d0a0f615 	stw	r2,-31784(gp)
   22378:	e0bfff17 	ldw	r2,-4(fp)
   2237c:	d0a0f715 	stw	r2,-31780(gp)
	tilt_CopyInputsToVariables (u);
   22380:	e13ffc17 	ldw	r4,-16(fp)
   22384:	00221c00 	call	221c0 <tilt_CopyInputsToVariables>

	/* Set the outputs */
	tilt_CopyVariablesToOutputs (y);
   22388:	e13ffd17 	ldw	r4,-12(fp)
   2238c:	00222380 	call	22238 <tilt_CopyVariablesToOutputs>
}
   22390:	0001883a 	nop
   22394:	e037883a 	mov	sp,fp
   22398:	dfc00117 	ldw	ra,4(sp)
   2239c:	df000017 	ldw	fp,0(sp)
   223a0:	dec00204 	addi	sp,sp,8
   223a4:	f800283a 	ret

000223a8 <__divsi3>:
   223a8:	20001b16 	blt	r4,zero,22418 <__divsi3+0x70>
   223ac:	000f883a 	mov	r7,zero
   223b0:	28001616 	blt	r5,zero,2240c <__divsi3+0x64>
   223b4:	200d883a 	mov	r6,r4
   223b8:	29001a2e 	bgeu	r5,r4,22424 <__divsi3+0x7c>
   223bc:	00800804 	movi	r2,32
   223c0:	00c00044 	movi	r3,1
   223c4:	00000106 	br	223cc <__divsi3+0x24>
   223c8:	10000d26 	beq	r2,zero,22400 <__divsi3+0x58>
   223cc:	294b883a 	add	r5,r5,r5
   223d0:	10bfffc4 	addi	r2,r2,-1
   223d4:	18c7883a 	add	r3,r3,r3
   223d8:	293ffb36 	bltu	r5,r4,223c8 <__alt_data_end+0xfffe9d28>
   223dc:	0005883a 	mov	r2,zero
   223e0:	18000726 	beq	r3,zero,22400 <__divsi3+0x58>
   223e4:	0005883a 	mov	r2,zero
   223e8:	31400236 	bltu	r6,r5,223f4 <__divsi3+0x4c>
   223ec:	314dc83a 	sub	r6,r6,r5
   223f0:	10c4b03a 	or	r2,r2,r3
   223f4:	1806d07a 	srli	r3,r3,1
   223f8:	280ad07a 	srli	r5,r5,1
   223fc:	183ffa1e 	bne	r3,zero,223e8 <__alt_data_end+0xfffe9d48>
   22400:	38000126 	beq	r7,zero,22408 <__divsi3+0x60>
   22404:	0085c83a 	sub	r2,zero,r2
   22408:	f800283a 	ret
   2240c:	014bc83a 	sub	r5,zero,r5
   22410:	39c0005c 	xori	r7,r7,1
   22414:	003fe706 	br	223b4 <__alt_data_end+0xfffe9d14>
   22418:	0109c83a 	sub	r4,zero,r4
   2241c:	01c00044 	movi	r7,1
   22420:	003fe306 	br	223b0 <__alt_data_end+0xfffe9d10>
   22424:	00c00044 	movi	r3,1
   22428:	003fee06 	br	223e4 <__alt_data_end+0xfffe9d44>

0002242c <__modsi3>:
   2242c:	20001716 	blt	r4,zero,2248c <__modsi3+0x60>
   22430:	000f883a 	mov	r7,zero
   22434:	2005883a 	mov	r2,r4
   22438:	28001216 	blt	r5,zero,22484 <__modsi3+0x58>
   2243c:	2900162e 	bgeu	r5,r4,22498 <__modsi3+0x6c>
   22440:	01800804 	movi	r6,32
   22444:	00c00044 	movi	r3,1
   22448:	00000106 	br	22450 <__modsi3+0x24>
   2244c:	30000a26 	beq	r6,zero,22478 <__modsi3+0x4c>
   22450:	294b883a 	add	r5,r5,r5
   22454:	31bfffc4 	addi	r6,r6,-1
   22458:	18c7883a 	add	r3,r3,r3
   2245c:	293ffb36 	bltu	r5,r4,2244c <__alt_data_end+0xfffe9dac>
   22460:	18000526 	beq	r3,zero,22478 <__modsi3+0x4c>
   22464:	1806d07a 	srli	r3,r3,1
   22468:	11400136 	bltu	r2,r5,22470 <__modsi3+0x44>
   2246c:	1145c83a 	sub	r2,r2,r5
   22470:	280ad07a 	srli	r5,r5,1
   22474:	183ffb1e 	bne	r3,zero,22464 <__alt_data_end+0xfffe9dc4>
   22478:	38000126 	beq	r7,zero,22480 <__modsi3+0x54>
   2247c:	0085c83a 	sub	r2,zero,r2
   22480:	f800283a 	ret
   22484:	014bc83a 	sub	r5,zero,r5
   22488:	003fec06 	br	2243c <__alt_data_end+0xfffe9d9c>
   2248c:	0109c83a 	sub	r4,zero,r4
   22490:	01c00044 	movi	r7,1
   22494:	003fe706 	br	22434 <__alt_data_end+0xfffe9d94>
   22498:	00c00044 	movi	r3,1
   2249c:	003ff106 	br	22464 <__alt_data_end+0xfffe9dc4>

000224a0 <__udivsi3>:
   224a0:	200d883a 	mov	r6,r4
   224a4:	2900152e 	bgeu	r5,r4,224fc <__udivsi3+0x5c>
   224a8:	28001416 	blt	r5,zero,224fc <__udivsi3+0x5c>
   224ac:	00800804 	movi	r2,32
   224b0:	00c00044 	movi	r3,1
   224b4:	00000206 	br	224c0 <__udivsi3+0x20>
   224b8:	10000e26 	beq	r2,zero,224f4 <__udivsi3+0x54>
   224bc:	28000516 	blt	r5,zero,224d4 <__udivsi3+0x34>
   224c0:	294b883a 	add	r5,r5,r5
   224c4:	10bfffc4 	addi	r2,r2,-1
   224c8:	18c7883a 	add	r3,r3,r3
   224cc:	293ffa36 	bltu	r5,r4,224b8 <__alt_data_end+0xfffe9e18>
   224d0:	18000826 	beq	r3,zero,224f4 <__udivsi3+0x54>
   224d4:	0005883a 	mov	r2,zero
   224d8:	31400236 	bltu	r6,r5,224e4 <__udivsi3+0x44>
   224dc:	314dc83a 	sub	r6,r6,r5
   224e0:	10c4b03a 	or	r2,r2,r3
   224e4:	1806d07a 	srli	r3,r3,1
   224e8:	280ad07a 	srli	r5,r5,1
   224ec:	183ffa1e 	bne	r3,zero,224d8 <__alt_data_end+0xfffe9e38>
   224f0:	f800283a 	ret
   224f4:	0005883a 	mov	r2,zero
   224f8:	f800283a 	ret
   224fc:	00c00044 	movi	r3,1
   22500:	003ff406 	br	224d4 <__alt_data_end+0xfffe9e34>

00022504 <__umodsi3>:
   22504:	2005883a 	mov	r2,r4
   22508:	2900122e 	bgeu	r5,r4,22554 <__umodsi3+0x50>
   2250c:	28001116 	blt	r5,zero,22554 <__umodsi3+0x50>
   22510:	01800804 	movi	r6,32
   22514:	00c00044 	movi	r3,1
   22518:	00000206 	br	22524 <__umodsi3+0x20>
   2251c:	30000c26 	beq	r6,zero,22550 <__umodsi3+0x4c>
   22520:	28000516 	blt	r5,zero,22538 <__umodsi3+0x34>
   22524:	294b883a 	add	r5,r5,r5
   22528:	31bfffc4 	addi	r6,r6,-1
   2252c:	18c7883a 	add	r3,r3,r3
   22530:	293ffa36 	bltu	r5,r4,2251c <__alt_data_end+0xfffe9e7c>
   22534:	18000626 	beq	r3,zero,22550 <__umodsi3+0x4c>
   22538:	1806d07a 	srli	r3,r3,1
   2253c:	11400136 	bltu	r2,r5,22544 <__umodsi3+0x40>
   22540:	1145c83a 	sub	r2,r2,r5
   22544:	280ad07a 	srli	r5,r5,1
   22548:	183ffb1e 	bne	r3,zero,22538 <__alt_data_end+0xfffe9e98>
   2254c:	f800283a 	ret
   22550:	f800283a 	ret
   22554:	00c00044 	movi	r3,1
   22558:	003ff706 	br	22538 <__alt_data_end+0xfffe9e98>

0002255c <__adddf3>:
   2255c:	02c00434 	movhi	r11,16
   22560:	5affffc4 	addi	r11,r11,-1
   22564:	2806d7fa 	srli	r3,r5,31
   22568:	2ad4703a 	and	r10,r5,r11
   2256c:	3ad2703a 	and	r9,r7,r11
   22570:	3804d53a 	srli	r2,r7,20
   22574:	3018d77a 	srli	r12,r6,29
   22578:	280ad53a 	srli	r5,r5,20
   2257c:	501490fa 	slli	r10,r10,3
   22580:	2010d77a 	srli	r8,r4,29
   22584:	481290fa 	slli	r9,r9,3
   22588:	380ed7fa 	srli	r7,r7,31
   2258c:	defffb04 	addi	sp,sp,-20
   22590:	dc800215 	stw	r18,8(sp)
   22594:	dc400115 	stw	r17,4(sp)
   22598:	dc000015 	stw	r16,0(sp)
   2259c:	dfc00415 	stw	ra,16(sp)
   225a0:	dcc00315 	stw	r19,12(sp)
   225a4:	1c803fcc 	andi	r18,r3,255
   225a8:	2c01ffcc 	andi	r16,r5,2047
   225ac:	5210b03a 	or	r8,r10,r8
   225b0:	202290fa 	slli	r17,r4,3
   225b4:	1081ffcc 	andi	r2,r2,2047
   225b8:	4b12b03a 	or	r9,r9,r12
   225bc:	300c90fa 	slli	r6,r6,3
   225c0:	91c07526 	beq	r18,r7,22798 <__adddf3+0x23c>
   225c4:	8087c83a 	sub	r3,r16,r2
   225c8:	00c0ab0e 	bge	zero,r3,22878 <__adddf3+0x31c>
   225cc:	10002a1e 	bne	r2,zero,22678 <__adddf3+0x11c>
   225d0:	4984b03a 	or	r2,r9,r6
   225d4:	1000961e 	bne	r2,zero,22830 <__adddf3+0x2d4>
   225d8:	888001cc 	andi	r2,r17,7
   225dc:	10000726 	beq	r2,zero,225fc <__adddf3+0xa0>
   225e0:	888003cc 	andi	r2,r17,15
   225e4:	00c00104 	movi	r3,4
   225e8:	10c00426 	beq	r2,r3,225fc <__adddf3+0xa0>
   225ec:	88c7883a 	add	r3,r17,r3
   225f0:	1c63803a 	cmpltu	r17,r3,r17
   225f4:	4451883a 	add	r8,r8,r17
   225f8:	1823883a 	mov	r17,r3
   225fc:	4080202c 	andhi	r2,r8,128
   22600:	10005926 	beq	r2,zero,22768 <__adddf3+0x20c>
   22604:	84000044 	addi	r16,r16,1
   22608:	0081ffc4 	movi	r2,2047
   2260c:	8080ba26 	beq	r16,r2,228f8 <__adddf3+0x39c>
   22610:	00bfe034 	movhi	r2,65408
   22614:	10bfffc4 	addi	r2,r2,-1
   22618:	4090703a 	and	r8,r8,r2
   2261c:	4004977a 	slli	r2,r8,29
   22620:	4010927a 	slli	r8,r8,9
   22624:	8822d0fa 	srli	r17,r17,3
   22628:	8401ffcc 	andi	r16,r16,2047
   2262c:	4010d33a 	srli	r8,r8,12
   22630:	9007883a 	mov	r3,r18
   22634:	1444b03a 	or	r2,r2,r17
   22638:	8401ffcc 	andi	r16,r16,2047
   2263c:	8020953a 	slli	r16,r16,20
   22640:	18c03fcc 	andi	r3,r3,255
   22644:	01000434 	movhi	r4,16
   22648:	213fffc4 	addi	r4,r4,-1
   2264c:	180697fa 	slli	r3,r3,31
   22650:	4110703a 	and	r8,r8,r4
   22654:	4410b03a 	or	r8,r8,r16
   22658:	40c6b03a 	or	r3,r8,r3
   2265c:	dfc00417 	ldw	ra,16(sp)
   22660:	dcc00317 	ldw	r19,12(sp)
   22664:	dc800217 	ldw	r18,8(sp)
   22668:	dc400117 	ldw	r17,4(sp)
   2266c:	dc000017 	ldw	r16,0(sp)
   22670:	dec00504 	addi	sp,sp,20
   22674:	f800283a 	ret
   22678:	0081ffc4 	movi	r2,2047
   2267c:	80bfd626 	beq	r16,r2,225d8 <__alt_data_end+0xfffe9f38>
   22680:	4a402034 	orhi	r9,r9,128
   22684:	00800e04 	movi	r2,56
   22688:	10c09f16 	blt	r2,r3,22908 <__adddf3+0x3ac>
   2268c:	008007c4 	movi	r2,31
   22690:	10c0c216 	blt	r2,r3,2299c <__adddf3+0x440>
   22694:	00800804 	movi	r2,32
   22698:	10c5c83a 	sub	r2,r2,r3
   2269c:	488a983a 	sll	r5,r9,r2
   226a0:	30c8d83a 	srl	r4,r6,r3
   226a4:	3084983a 	sll	r2,r6,r2
   226a8:	48c6d83a 	srl	r3,r9,r3
   226ac:	290cb03a 	or	r6,r5,r4
   226b0:	1004c03a 	cmpne	r2,r2,zero
   226b4:	308cb03a 	or	r6,r6,r2
   226b8:	898dc83a 	sub	r6,r17,r6
   226bc:	89a3803a 	cmpltu	r17,r17,r6
   226c0:	40d1c83a 	sub	r8,r8,r3
   226c4:	4451c83a 	sub	r8,r8,r17
   226c8:	3023883a 	mov	r17,r6
   226cc:	4080202c 	andhi	r2,r8,128
   226d0:	10002326 	beq	r2,zero,22760 <__adddf3+0x204>
   226d4:	04c02034 	movhi	r19,128
   226d8:	9cffffc4 	addi	r19,r19,-1
   226dc:	44e6703a 	and	r19,r8,r19
   226e0:	98007626 	beq	r19,zero,228bc <__adddf3+0x360>
   226e4:	9809883a 	mov	r4,r19
   226e8:	0024a300 	call	24a30 <__clzsi2>
   226ec:	10fffe04 	addi	r3,r2,-8
   226f0:	010007c4 	movi	r4,31
   226f4:	20c07716 	blt	r4,r3,228d4 <__adddf3+0x378>
   226f8:	00800804 	movi	r2,32
   226fc:	10c5c83a 	sub	r2,r2,r3
   22700:	8884d83a 	srl	r2,r17,r2
   22704:	98d0983a 	sll	r8,r19,r3
   22708:	88e2983a 	sll	r17,r17,r3
   2270c:	1204b03a 	or	r2,r2,r8
   22710:	1c007416 	blt	r3,r16,228e4 <__adddf3+0x388>
   22714:	1c21c83a 	sub	r16,r3,r16
   22718:	82000044 	addi	r8,r16,1
   2271c:	00c007c4 	movi	r3,31
   22720:	1a009116 	blt	r3,r8,22968 <__adddf3+0x40c>
   22724:	00c00804 	movi	r3,32
   22728:	1a07c83a 	sub	r3,r3,r8
   2272c:	8a08d83a 	srl	r4,r17,r8
   22730:	88e2983a 	sll	r17,r17,r3
   22734:	10c6983a 	sll	r3,r2,r3
   22738:	1210d83a 	srl	r8,r2,r8
   2273c:	8804c03a 	cmpne	r2,r17,zero
   22740:	1906b03a 	or	r3,r3,r4
   22744:	18a2b03a 	or	r17,r3,r2
   22748:	0021883a 	mov	r16,zero
   2274c:	003fa206 	br	225d8 <__alt_data_end+0xfffe9f38>
   22750:	1890b03a 	or	r8,r3,r2
   22754:	40017d26 	beq	r8,zero,22d4c <__adddf3+0x7f0>
   22758:	1011883a 	mov	r8,r2
   2275c:	1823883a 	mov	r17,r3
   22760:	888001cc 	andi	r2,r17,7
   22764:	103f9e1e 	bne	r2,zero,225e0 <__alt_data_end+0xfffe9f40>
   22768:	4004977a 	slli	r2,r8,29
   2276c:	8822d0fa 	srli	r17,r17,3
   22770:	4010d0fa 	srli	r8,r8,3
   22774:	9007883a 	mov	r3,r18
   22778:	1444b03a 	or	r2,r2,r17
   2277c:	0101ffc4 	movi	r4,2047
   22780:	81002426 	beq	r16,r4,22814 <__adddf3+0x2b8>
   22784:	8120703a 	and	r16,r16,r4
   22788:	01000434 	movhi	r4,16
   2278c:	213fffc4 	addi	r4,r4,-1
   22790:	4110703a 	and	r8,r8,r4
   22794:	003fa806 	br	22638 <__alt_data_end+0xfffe9f98>
   22798:	8089c83a 	sub	r4,r16,r2
   2279c:	01005e0e 	bge	zero,r4,22918 <__adddf3+0x3bc>
   227a0:	10002b26 	beq	r2,zero,22850 <__adddf3+0x2f4>
   227a4:	0081ffc4 	movi	r2,2047
   227a8:	80bf8b26 	beq	r16,r2,225d8 <__alt_data_end+0xfffe9f38>
   227ac:	4a402034 	orhi	r9,r9,128
   227b0:	00800e04 	movi	r2,56
   227b4:	1100a40e 	bge	r2,r4,22a48 <__adddf3+0x4ec>
   227b8:	498cb03a 	or	r6,r9,r6
   227bc:	300ac03a 	cmpne	r5,r6,zero
   227c0:	0013883a 	mov	r9,zero
   227c4:	2c4b883a 	add	r5,r5,r17
   227c8:	2c63803a 	cmpltu	r17,r5,r17
   227cc:	4a11883a 	add	r8,r9,r8
   227d0:	8a11883a 	add	r8,r17,r8
   227d4:	2823883a 	mov	r17,r5
   227d8:	4080202c 	andhi	r2,r8,128
   227dc:	103fe026 	beq	r2,zero,22760 <__alt_data_end+0xfffea0c0>
   227e0:	84000044 	addi	r16,r16,1
   227e4:	0081ffc4 	movi	r2,2047
   227e8:	8080d226 	beq	r16,r2,22b34 <__adddf3+0x5d8>
   227ec:	00bfe034 	movhi	r2,65408
   227f0:	10bfffc4 	addi	r2,r2,-1
   227f4:	4090703a 	and	r8,r8,r2
   227f8:	880ad07a 	srli	r5,r17,1
   227fc:	400897fa 	slli	r4,r8,31
   22800:	88c0004c 	andi	r3,r17,1
   22804:	28e2b03a 	or	r17,r5,r3
   22808:	4010d07a 	srli	r8,r8,1
   2280c:	2462b03a 	or	r17,r4,r17
   22810:	003f7106 	br	225d8 <__alt_data_end+0xfffe9f38>
   22814:	4088b03a 	or	r4,r8,r2
   22818:	20014526 	beq	r4,zero,22d30 <__adddf3+0x7d4>
   2281c:	01000434 	movhi	r4,16
   22820:	42000234 	orhi	r8,r8,8
   22824:	213fffc4 	addi	r4,r4,-1
   22828:	4110703a 	and	r8,r8,r4
   2282c:	003f8206 	br	22638 <__alt_data_end+0xfffe9f98>
   22830:	18ffffc4 	addi	r3,r3,-1
   22834:	1800491e 	bne	r3,zero,2295c <__adddf3+0x400>
   22838:	898bc83a 	sub	r5,r17,r6
   2283c:	8963803a 	cmpltu	r17,r17,r5
   22840:	4251c83a 	sub	r8,r8,r9
   22844:	4451c83a 	sub	r8,r8,r17
   22848:	2823883a 	mov	r17,r5
   2284c:	003f9f06 	br	226cc <__alt_data_end+0xfffea02c>
   22850:	4984b03a 	or	r2,r9,r6
   22854:	103f6026 	beq	r2,zero,225d8 <__alt_data_end+0xfffe9f38>
   22858:	213fffc4 	addi	r4,r4,-1
   2285c:	2000931e 	bne	r4,zero,22aac <__adddf3+0x550>
   22860:	898d883a 	add	r6,r17,r6
   22864:	3463803a 	cmpltu	r17,r6,r17
   22868:	4251883a 	add	r8,r8,r9
   2286c:	8a11883a 	add	r8,r17,r8
   22870:	3023883a 	mov	r17,r6
   22874:	003fd806 	br	227d8 <__alt_data_end+0xfffea138>
   22878:	1800541e 	bne	r3,zero,229cc <__adddf3+0x470>
   2287c:	80800044 	addi	r2,r16,1
   22880:	1081ffcc 	andi	r2,r2,2047
   22884:	00c00044 	movi	r3,1
   22888:	1880a00e 	bge	r3,r2,22b0c <__adddf3+0x5b0>
   2288c:	8989c83a 	sub	r4,r17,r6
   22890:	8905803a 	cmpltu	r2,r17,r4
   22894:	4267c83a 	sub	r19,r8,r9
   22898:	98a7c83a 	sub	r19,r19,r2
   2289c:	9880202c 	andhi	r2,r19,128
   228a0:	10006326 	beq	r2,zero,22a30 <__adddf3+0x4d4>
   228a4:	3463c83a 	sub	r17,r6,r17
   228a8:	4a07c83a 	sub	r3,r9,r8
   228ac:	344d803a 	cmpltu	r6,r6,r17
   228b0:	19a7c83a 	sub	r19,r3,r6
   228b4:	3825883a 	mov	r18,r7
   228b8:	983f8a1e 	bne	r19,zero,226e4 <__alt_data_end+0xfffea044>
   228bc:	8809883a 	mov	r4,r17
   228c0:	0024a300 	call	24a30 <__clzsi2>
   228c4:	10800804 	addi	r2,r2,32
   228c8:	10fffe04 	addi	r3,r2,-8
   228cc:	010007c4 	movi	r4,31
   228d0:	20ff890e 	bge	r4,r3,226f8 <__alt_data_end+0xfffea058>
   228d4:	10bff604 	addi	r2,r2,-40
   228d8:	8884983a 	sll	r2,r17,r2
   228dc:	0023883a 	mov	r17,zero
   228e0:	1c3f8c0e 	bge	r3,r16,22714 <__alt_data_end+0xfffea074>
   228e4:	023fe034 	movhi	r8,65408
   228e8:	423fffc4 	addi	r8,r8,-1
   228ec:	80e1c83a 	sub	r16,r16,r3
   228f0:	1210703a 	and	r8,r2,r8
   228f4:	003f3806 	br	225d8 <__alt_data_end+0xfffe9f38>
   228f8:	9007883a 	mov	r3,r18
   228fc:	0011883a 	mov	r8,zero
   22900:	0005883a 	mov	r2,zero
   22904:	003f4c06 	br	22638 <__alt_data_end+0xfffe9f98>
   22908:	498cb03a 	or	r6,r9,r6
   2290c:	300cc03a 	cmpne	r6,r6,zero
   22910:	0007883a 	mov	r3,zero
   22914:	003f6806 	br	226b8 <__alt_data_end+0xfffea018>
   22918:	20009c1e 	bne	r4,zero,22b8c <__adddf3+0x630>
   2291c:	80800044 	addi	r2,r16,1
   22920:	1141ffcc 	andi	r5,r2,2047
   22924:	01000044 	movi	r4,1
   22928:	2140670e 	bge	r4,r5,22ac8 <__adddf3+0x56c>
   2292c:	0101ffc4 	movi	r4,2047
   22930:	11007f26 	beq	r2,r4,22b30 <__adddf3+0x5d4>
   22934:	898d883a 	add	r6,r17,r6
   22938:	4247883a 	add	r3,r8,r9
   2293c:	3451803a 	cmpltu	r8,r6,r17
   22940:	40d1883a 	add	r8,r8,r3
   22944:	402297fa 	slli	r17,r8,31
   22948:	300cd07a 	srli	r6,r6,1
   2294c:	4010d07a 	srli	r8,r8,1
   22950:	1021883a 	mov	r16,r2
   22954:	89a2b03a 	or	r17,r17,r6
   22958:	003f1f06 	br	225d8 <__alt_data_end+0xfffe9f38>
   2295c:	0081ffc4 	movi	r2,2047
   22960:	80bf481e 	bne	r16,r2,22684 <__alt_data_end+0xfffe9fe4>
   22964:	003f1c06 	br	225d8 <__alt_data_end+0xfffe9f38>
   22968:	843ff844 	addi	r16,r16,-31
   2296c:	01000804 	movi	r4,32
   22970:	1406d83a 	srl	r3,r2,r16
   22974:	41005026 	beq	r8,r4,22ab8 <__adddf3+0x55c>
   22978:	01001004 	movi	r4,64
   2297c:	2211c83a 	sub	r8,r4,r8
   22980:	1204983a 	sll	r2,r2,r8
   22984:	88a2b03a 	or	r17,r17,r2
   22988:	8822c03a 	cmpne	r17,r17,zero
   2298c:	1c62b03a 	or	r17,r3,r17
   22990:	0011883a 	mov	r8,zero
   22994:	0021883a 	mov	r16,zero
   22998:	003f7106 	br	22760 <__alt_data_end+0xfffea0c0>
   2299c:	193ff804 	addi	r4,r3,-32
   229a0:	00800804 	movi	r2,32
   229a4:	4908d83a 	srl	r4,r9,r4
   229a8:	18804526 	beq	r3,r2,22ac0 <__adddf3+0x564>
   229ac:	00801004 	movi	r2,64
   229b0:	10c5c83a 	sub	r2,r2,r3
   229b4:	4886983a 	sll	r3,r9,r2
   229b8:	198cb03a 	or	r6,r3,r6
   229bc:	300cc03a 	cmpne	r6,r6,zero
   229c0:	218cb03a 	or	r6,r4,r6
   229c4:	0007883a 	mov	r3,zero
   229c8:	003f3b06 	br	226b8 <__alt_data_end+0xfffea018>
   229cc:	80002a26 	beq	r16,zero,22a78 <__adddf3+0x51c>
   229d0:	0101ffc4 	movi	r4,2047
   229d4:	11006826 	beq	r2,r4,22b78 <__adddf3+0x61c>
   229d8:	00c7c83a 	sub	r3,zero,r3
   229dc:	42002034 	orhi	r8,r8,128
   229e0:	01000e04 	movi	r4,56
   229e4:	20c07c16 	blt	r4,r3,22bd8 <__adddf3+0x67c>
   229e8:	010007c4 	movi	r4,31
   229ec:	20c0da16 	blt	r4,r3,22d58 <__adddf3+0x7fc>
   229f0:	01000804 	movi	r4,32
   229f4:	20c9c83a 	sub	r4,r4,r3
   229f8:	4114983a 	sll	r10,r8,r4
   229fc:	88cad83a 	srl	r5,r17,r3
   22a00:	8908983a 	sll	r4,r17,r4
   22a04:	40c6d83a 	srl	r3,r8,r3
   22a08:	5162b03a 	or	r17,r10,r5
   22a0c:	2008c03a 	cmpne	r4,r4,zero
   22a10:	8922b03a 	or	r17,r17,r4
   22a14:	3463c83a 	sub	r17,r6,r17
   22a18:	48c7c83a 	sub	r3,r9,r3
   22a1c:	344d803a 	cmpltu	r6,r6,r17
   22a20:	1991c83a 	sub	r8,r3,r6
   22a24:	1021883a 	mov	r16,r2
   22a28:	3825883a 	mov	r18,r7
   22a2c:	003f2706 	br	226cc <__alt_data_end+0xfffea02c>
   22a30:	24d0b03a 	or	r8,r4,r19
   22a34:	40001b1e 	bne	r8,zero,22aa4 <__adddf3+0x548>
   22a38:	0005883a 	mov	r2,zero
   22a3c:	0007883a 	mov	r3,zero
   22a40:	0021883a 	mov	r16,zero
   22a44:	003f4d06 	br	2277c <__alt_data_end+0xfffea0dc>
   22a48:	008007c4 	movi	r2,31
   22a4c:	11003c16 	blt	r2,r4,22b40 <__adddf3+0x5e4>
   22a50:	00800804 	movi	r2,32
   22a54:	1105c83a 	sub	r2,r2,r4
   22a58:	488e983a 	sll	r7,r9,r2
   22a5c:	310ad83a 	srl	r5,r6,r4
   22a60:	3084983a 	sll	r2,r6,r2
   22a64:	4912d83a 	srl	r9,r9,r4
   22a68:	394ab03a 	or	r5,r7,r5
   22a6c:	1004c03a 	cmpne	r2,r2,zero
   22a70:	288ab03a 	or	r5,r5,r2
   22a74:	003f5306 	br	227c4 <__alt_data_end+0xfffea124>
   22a78:	4448b03a 	or	r4,r8,r17
   22a7c:	20003e26 	beq	r4,zero,22b78 <__adddf3+0x61c>
   22a80:	00c6303a 	nor	r3,zero,r3
   22a84:	18003a1e 	bne	r3,zero,22b70 <__adddf3+0x614>
   22a88:	3463c83a 	sub	r17,r6,r17
   22a8c:	4a07c83a 	sub	r3,r9,r8
   22a90:	344d803a 	cmpltu	r6,r6,r17
   22a94:	1991c83a 	sub	r8,r3,r6
   22a98:	1021883a 	mov	r16,r2
   22a9c:	3825883a 	mov	r18,r7
   22aa0:	003f0a06 	br	226cc <__alt_data_end+0xfffea02c>
   22aa4:	2023883a 	mov	r17,r4
   22aa8:	003f0d06 	br	226e0 <__alt_data_end+0xfffea040>
   22aac:	0081ffc4 	movi	r2,2047
   22ab0:	80bf3f1e 	bne	r16,r2,227b0 <__alt_data_end+0xfffea110>
   22ab4:	003ec806 	br	225d8 <__alt_data_end+0xfffe9f38>
   22ab8:	0005883a 	mov	r2,zero
   22abc:	003fb106 	br	22984 <__alt_data_end+0xfffea2e4>
   22ac0:	0007883a 	mov	r3,zero
   22ac4:	003fbc06 	br	229b8 <__alt_data_end+0xfffea318>
   22ac8:	4444b03a 	or	r2,r8,r17
   22acc:	8000871e 	bne	r16,zero,22cec <__adddf3+0x790>
   22ad0:	1000ba26 	beq	r2,zero,22dbc <__adddf3+0x860>
   22ad4:	4984b03a 	or	r2,r9,r6
   22ad8:	103ebf26 	beq	r2,zero,225d8 <__alt_data_end+0xfffe9f38>
   22adc:	8985883a 	add	r2,r17,r6
   22ae0:	4247883a 	add	r3,r8,r9
   22ae4:	1451803a 	cmpltu	r8,r2,r17
   22ae8:	40d1883a 	add	r8,r8,r3
   22aec:	40c0202c 	andhi	r3,r8,128
   22af0:	1023883a 	mov	r17,r2
   22af4:	183f1a26 	beq	r3,zero,22760 <__alt_data_end+0xfffea0c0>
   22af8:	00bfe034 	movhi	r2,65408
   22afc:	10bfffc4 	addi	r2,r2,-1
   22b00:	2021883a 	mov	r16,r4
   22b04:	4090703a 	and	r8,r8,r2
   22b08:	003eb306 	br	225d8 <__alt_data_end+0xfffe9f38>
   22b0c:	4444b03a 	or	r2,r8,r17
   22b10:	8000291e 	bne	r16,zero,22bb8 <__adddf3+0x65c>
   22b14:	10004b1e 	bne	r2,zero,22c44 <__adddf3+0x6e8>
   22b18:	4990b03a 	or	r8,r9,r6
   22b1c:	40008b26 	beq	r8,zero,22d4c <__adddf3+0x7f0>
   22b20:	4811883a 	mov	r8,r9
   22b24:	3023883a 	mov	r17,r6
   22b28:	3825883a 	mov	r18,r7
   22b2c:	003eaa06 	br	225d8 <__alt_data_end+0xfffe9f38>
   22b30:	1021883a 	mov	r16,r2
   22b34:	0011883a 	mov	r8,zero
   22b38:	0005883a 	mov	r2,zero
   22b3c:	003f0f06 	br	2277c <__alt_data_end+0xfffea0dc>
   22b40:	217ff804 	addi	r5,r4,-32
   22b44:	00800804 	movi	r2,32
   22b48:	494ad83a 	srl	r5,r9,r5
   22b4c:	20807d26 	beq	r4,r2,22d44 <__adddf3+0x7e8>
   22b50:	00801004 	movi	r2,64
   22b54:	1109c83a 	sub	r4,r2,r4
   22b58:	4912983a 	sll	r9,r9,r4
   22b5c:	498cb03a 	or	r6,r9,r6
   22b60:	300cc03a 	cmpne	r6,r6,zero
   22b64:	298ab03a 	or	r5,r5,r6
   22b68:	0013883a 	mov	r9,zero
   22b6c:	003f1506 	br	227c4 <__alt_data_end+0xfffea124>
   22b70:	0101ffc4 	movi	r4,2047
   22b74:	113f9a1e 	bne	r2,r4,229e0 <__alt_data_end+0xfffea340>
   22b78:	4811883a 	mov	r8,r9
   22b7c:	3023883a 	mov	r17,r6
   22b80:	1021883a 	mov	r16,r2
   22b84:	3825883a 	mov	r18,r7
   22b88:	003e9306 	br	225d8 <__alt_data_end+0xfffe9f38>
   22b8c:	8000161e 	bne	r16,zero,22be8 <__adddf3+0x68c>
   22b90:	444ab03a 	or	r5,r8,r17
   22b94:	28005126 	beq	r5,zero,22cdc <__adddf3+0x780>
   22b98:	0108303a 	nor	r4,zero,r4
   22b9c:	20004d1e 	bne	r4,zero,22cd4 <__adddf3+0x778>
   22ba0:	89a3883a 	add	r17,r17,r6
   22ba4:	4253883a 	add	r9,r8,r9
   22ba8:	898d803a 	cmpltu	r6,r17,r6
   22bac:	3251883a 	add	r8,r6,r9
   22bb0:	1021883a 	mov	r16,r2
   22bb4:	003f0806 	br	227d8 <__alt_data_end+0xfffea138>
   22bb8:	1000301e 	bne	r2,zero,22c7c <__adddf3+0x720>
   22bbc:	4984b03a 	or	r2,r9,r6
   22bc0:	10007126 	beq	r2,zero,22d88 <__adddf3+0x82c>
   22bc4:	4811883a 	mov	r8,r9
   22bc8:	3023883a 	mov	r17,r6
   22bcc:	3825883a 	mov	r18,r7
   22bd0:	0401ffc4 	movi	r16,2047
   22bd4:	003e8006 	br	225d8 <__alt_data_end+0xfffe9f38>
   22bd8:	4462b03a 	or	r17,r8,r17
   22bdc:	8822c03a 	cmpne	r17,r17,zero
   22be0:	0007883a 	mov	r3,zero
   22be4:	003f8b06 	br	22a14 <__alt_data_end+0xfffea374>
   22be8:	0141ffc4 	movi	r5,2047
   22bec:	11403b26 	beq	r2,r5,22cdc <__adddf3+0x780>
   22bf0:	0109c83a 	sub	r4,zero,r4
   22bf4:	42002034 	orhi	r8,r8,128
   22bf8:	01400e04 	movi	r5,56
   22bfc:	29006716 	blt	r5,r4,22d9c <__adddf3+0x840>
   22c00:	014007c4 	movi	r5,31
   22c04:	29007016 	blt	r5,r4,22dc8 <__adddf3+0x86c>
   22c08:	01400804 	movi	r5,32
   22c0c:	290bc83a 	sub	r5,r5,r4
   22c10:	4154983a 	sll	r10,r8,r5
   22c14:	890ed83a 	srl	r7,r17,r4
   22c18:	894a983a 	sll	r5,r17,r5
   22c1c:	4108d83a 	srl	r4,r8,r4
   22c20:	51e2b03a 	or	r17,r10,r7
   22c24:	280ac03a 	cmpne	r5,r5,zero
   22c28:	8962b03a 	or	r17,r17,r5
   22c2c:	89a3883a 	add	r17,r17,r6
   22c30:	2253883a 	add	r9,r4,r9
   22c34:	898d803a 	cmpltu	r6,r17,r6
   22c38:	3251883a 	add	r8,r6,r9
   22c3c:	1021883a 	mov	r16,r2
   22c40:	003ee506 	br	227d8 <__alt_data_end+0xfffea138>
   22c44:	4984b03a 	or	r2,r9,r6
   22c48:	103e6326 	beq	r2,zero,225d8 <__alt_data_end+0xfffe9f38>
   22c4c:	8987c83a 	sub	r3,r17,r6
   22c50:	88c9803a 	cmpltu	r4,r17,r3
   22c54:	4245c83a 	sub	r2,r8,r9
   22c58:	1105c83a 	sub	r2,r2,r4
   22c5c:	1100202c 	andhi	r4,r2,128
   22c60:	203ebb26 	beq	r4,zero,22750 <__alt_data_end+0xfffea0b0>
   22c64:	3463c83a 	sub	r17,r6,r17
   22c68:	4a07c83a 	sub	r3,r9,r8
   22c6c:	344d803a 	cmpltu	r6,r6,r17
   22c70:	1991c83a 	sub	r8,r3,r6
   22c74:	3825883a 	mov	r18,r7
   22c78:	003e5706 	br	225d8 <__alt_data_end+0xfffe9f38>
   22c7c:	4984b03a 	or	r2,r9,r6
   22c80:	10002e26 	beq	r2,zero,22d3c <__adddf3+0x7e0>
   22c84:	4004d0fa 	srli	r2,r8,3
   22c88:	8822d0fa 	srli	r17,r17,3
   22c8c:	4010977a 	slli	r8,r8,29
   22c90:	10c0022c 	andhi	r3,r2,8
   22c94:	4462b03a 	or	r17,r8,r17
   22c98:	18000826 	beq	r3,zero,22cbc <__adddf3+0x760>
   22c9c:	4808d0fa 	srli	r4,r9,3
   22ca0:	20c0022c 	andhi	r3,r4,8
   22ca4:	1800051e 	bne	r3,zero,22cbc <__adddf3+0x760>
   22ca8:	300cd0fa 	srli	r6,r6,3
   22cac:	4806977a 	slli	r3,r9,29
   22cb0:	2005883a 	mov	r2,r4
   22cb4:	3825883a 	mov	r18,r7
   22cb8:	19a2b03a 	or	r17,r3,r6
   22cbc:	8810d77a 	srli	r8,r17,29
   22cc0:	100490fa 	slli	r2,r2,3
   22cc4:	882290fa 	slli	r17,r17,3
   22cc8:	0401ffc4 	movi	r16,2047
   22ccc:	4090b03a 	or	r8,r8,r2
   22cd0:	003e4106 	br	225d8 <__alt_data_end+0xfffe9f38>
   22cd4:	0141ffc4 	movi	r5,2047
   22cd8:	117fc71e 	bne	r2,r5,22bf8 <__alt_data_end+0xfffea558>
   22cdc:	4811883a 	mov	r8,r9
   22ce0:	3023883a 	mov	r17,r6
   22ce4:	1021883a 	mov	r16,r2
   22ce8:	003e3b06 	br	225d8 <__alt_data_end+0xfffe9f38>
   22cec:	10002f26 	beq	r2,zero,22dac <__adddf3+0x850>
   22cf0:	4984b03a 	or	r2,r9,r6
   22cf4:	10001126 	beq	r2,zero,22d3c <__adddf3+0x7e0>
   22cf8:	4004d0fa 	srli	r2,r8,3
   22cfc:	8822d0fa 	srli	r17,r17,3
   22d00:	4010977a 	slli	r8,r8,29
   22d04:	10c0022c 	andhi	r3,r2,8
   22d08:	4462b03a 	or	r17,r8,r17
   22d0c:	183feb26 	beq	r3,zero,22cbc <__alt_data_end+0xfffea61c>
   22d10:	4808d0fa 	srli	r4,r9,3
   22d14:	20c0022c 	andhi	r3,r4,8
   22d18:	183fe81e 	bne	r3,zero,22cbc <__alt_data_end+0xfffea61c>
   22d1c:	300cd0fa 	srli	r6,r6,3
   22d20:	4806977a 	slli	r3,r9,29
   22d24:	2005883a 	mov	r2,r4
   22d28:	19a2b03a 	or	r17,r3,r6
   22d2c:	003fe306 	br	22cbc <__alt_data_end+0xfffea61c>
   22d30:	0011883a 	mov	r8,zero
   22d34:	0005883a 	mov	r2,zero
   22d38:	003e3f06 	br	22638 <__alt_data_end+0xfffe9f98>
   22d3c:	0401ffc4 	movi	r16,2047
   22d40:	003e2506 	br	225d8 <__alt_data_end+0xfffe9f38>
   22d44:	0013883a 	mov	r9,zero
   22d48:	003f8406 	br	22b5c <__alt_data_end+0xfffea4bc>
   22d4c:	0005883a 	mov	r2,zero
   22d50:	0007883a 	mov	r3,zero
   22d54:	003e8906 	br	2277c <__alt_data_end+0xfffea0dc>
   22d58:	197ff804 	addi	r5,r3,-32
   22d5c:	01000804 	movi	r4,32
   22d60:	414ad83a 	srl	r5,r8,r5
   22d64:	19002426 	beq	r3,r4,22df8 <__adddf3+0x89c>
   22d68:	01001004 	movi	r4,64
   22d6c:	20c7c83a 	sub	r3,r4,r3
   22d70:	40c6983a 	sll	r3,r8,r3
   22d74:	1c46b03a 	or	r3,r3,r17
   22d78:	1806c03a 	cmpne	r3,r3,zero
   22d7c:	28e2b03a 	or	r17,r5,r3
   22d80:	0007883a 	mov	r3,zero
   22d84:	003f2306 	br	22a14 <__alt_data_end+0xfffea374>
   22d88:	0007883a 	mov	r3,zero
   22d8c:	5811883a 	mov	r8,r11
   22d90:	00bfffc4 	movi	r2,-1
   22d94:	0401ffc4 	movi	r16,2047
   22d98:	003e7806 	br	2277c <__alt_data_end+0xfffea0dc>
   22d9c:	4462b03a 	or	r17,r8,r17
   22da0:	8822c03a 	cmpne	r17,r17,zero
   22da4:	0009883a 	mov	r4,zero
   22da8:	003fa006 	br	22c2c <__alt_data_end+0xfffea58c>
   22dac:	4811883a 	mov	r8,r9
   22db0:	3023883a 	mov	r17,r6
   22db4:	0401ffc4 	movi	r16,2047
   22db8:	003e0706 	br	225d8 <__alt_data_end+0xfffe9f38>
   22dbc:	4811883a 	mov	r8,r9
   22dc0:	3023883a 	mov	r17,r6
   22dc4:	003e0406 	br	225d8 <__alt_data_end+0xfffe9f38>
   22dc8:	21fff804 	addi	r7,r4,-32
   22dcc:	01400804 	movi	r5,32
   22dd0:	41ced83a 	srl	r7,r8,r7
   22dd4:	21400a26 	beq	r4,r5,22e00 <__adddf3+0x8a4>
   22dd8:	01401004 	movi	r5,64
   22ddc:	2909c83a 	sub	r4,r5,r4
   22de0:	4108983a 	sll	r4,r8,r4
   22de4:	2448b03a 	or	r4,r4,r17
   22de8:	2008c03a 	cmpne	r4,r4,zero
   22dec:	3922b03a 	or	r17,r7,r4
   22df0:	0009883a 	mov	r4,zero
   22df4:	003f8d06 	br	22c2c <__alt_data_end+0xfffea58c>
   22df8:	0007883a 	mov	r3,zero
   22dfc:	003fdd06 	br	22d74 <__alt_data_end+0xfffea6d4>
   22e00:	0009883a 	mov	r4,zero
   22e04:	003ff706 	br	22de4 <__alt_data_end+0xfffea744>

00022e08 <__divdf3>:
   22e08:	defff204 	addi	sp,sp,-56
   22e0c:	dd400915 	stw	r21,36(sp)
   22e10:	282ad53a 	srli	r21,r5,20
   22e14:	dd000815 	stw	r20,32(sp)
   22e18:	2828d7fa 	srli	r20,r5,31
   22e1c:	dc000415 	stw	r16,16(sp)
   22e20:	04000434 	movhi	r16,16
   22e24:	df000c15 	stw	fp,48(sp)
   22e28:	843fffc4 	addi	r16,r16,-1
   22e2c:	dfc00d15 	stw	ra,52(sp)
   22e30:	ddc00b15 	stw	r23,44(sp)
   22e34:	dd800a15 	stw	r22,40(sp)
   22e38:	dcc00715 	stw	r19,28(sp)
   22e3c:	dc800615 	stw	r18,24(sp)
   22e40:	dc400515 	stw	r17,20(sp)
   22e44:	ad41ffcc 	andi	r21,r21,2047
   22e48:	2c20703a 	and	r16,r5,r16
   22e4c:	a7003fcc 	andi	fp,r20,255
   22e50:	a8006126 	beq	r21,zero,22fd8 <__divdf3+0x1d0>
   22e54:	0081ffc4 	movi	r2,2047
   22e58:	2025883a 	mov	r18,r4
   22e5c:	a8803726 	beq	r21,r2,22f3c <__divdf3+0x134>
   22e60:	80800434 	orhi	r2,r16,16
   22e64:	100490fa 	slli	r2,r2,3
   22e68:	2020d77a 	srli	r16,r4,29
   22e6c:	202490fa 	slli	r18,r4,3
   22e70:	ad7f0044 	addi	r21,r21,-1023
   22e74:	80a0b03a 	or	r16,r16,r2
   22e78:	0027883a 	mov	r19,zero
   22e7c:	0013883a 	mov	r9,zero
   22e80:	3804d53a 	srli	r2,r7,20
   22e84:	382cd7fa 	srli	r22,r7,31
   22e88:	04400434 	movhi	r17,16
   22e8c:	8c7fffc4 	addi	r17,r17,-1
   22e90:	1081ffcc 	andi	r2,r2,2047
   22e94:	3011883a 	mov	r8,r6
   22e98:	3c62703a 	and	r17,r7,r17
   22e9c:	b5c03fcc 	andi	r23,r22,255
   22ea0:	10006c26 	beq	r2,zero,23054 <__divdf3+0x24c>
   22ea4:	00c1ffc4 	movi	r3,2047
   22ea8:	10c06426 	beq	r2,r3,2303c <__divdf3+0x234>
   22eac:	88c00434 	orhi	r3,r17,16
   22eb0:	180690fa 	slli	r3,r3,3
   22eb4:	3022d77a 	srli	r17,r6,29
   22eb8:	301090fa 	slli	r8,r6,3
   22ebc:	10bf0044 	addi	r2,r2,-1023
   22ec0:	88e2b03a 	or	r17,r17,r3
   22ec4:	000f883a 	mov	r7,zero
   22ec8:	a58cf03a 	xor	r6,r20,r22
   22ecc:	3cc8b03a 	or	r4,r7,r19
   22ed0:	a8abc83a 	sub	r21,r21,r2
   22ed4:	008003c4 	movi	r2,15
   22ed8:	3007883a 	mov	r3,r6
   22edc:	34c03fcc 	andi	r19,r6,255
   22ee0:	11009036 	bltu	r2,r4,23124 <__divdf3+0x31c>
   22ee4:	200890ba 	slli	r4,r4,2
   22ee8:	008000b4 	movhi	r2,2
   22eec:	108bbf04 	addi	r2,r2,12028
   22ef0:	2089883a 	add	r4,r4,r2
   22ef4:	20800017 	ldw	r2,0(r4)
   22ef8:	1000683a 	jmp	r2
   22efc:	00023124 	muli	zero,zero,2244
   22f00:	00022f74 	movhi	zero,2237
   22f04:	00023114 	movui	zero,2244
   22f08:	00022f68 	cmpgeui	zero,zero,2237
   22f0c:	00023114 	movui	zero,2244
   22f10:	000230e8 	cmpgeui	zero,zero,2243
   22f14:	00023114 	movui	zero,2244
   22f18:	00022f68 	cmpgeui	zero,zero,2237
   22f1c:	00022f74 	movhi	zero,2237
   22f20:	00022f74 	movhi	zero,2237
   22f24:	000230e8 	cmpgeui	zero,zero,2243
   22f28:	00022f68 	cmpgeui	zero,zero,2237
   22f2c:	00022f58 	cmpnei	zero,zero,2237
   22f30:	00022f58 	cmpnei	zero,zero,2237
   22f34:	00022f58 	cmpnei	zero,zero,2237
   22f38:	00023408 	cmpgei	zero,zero,2256
   22f3c:	2404b03a 	or	r2,r4,r16
   22f40:	1000661e 	bne	r2,zero,230dc <__divdf3+0x2d4>
   22f44:	04c00204 	movi	r19,8
   22f48:	0021883a 	mov	r16,zero
   22f4c:	0025883a 	mov	r18,zero
   22f50:	02400084 	movi	r9,2
   22f54:	003fca06 	br	22e80 <__alt_data_end+0xfffea7e0>
   22f58:	8023883a 	mov	r17,r16
   22f5c:	9011883a 	mov	r8,r18
   22f60:	e02f883a 	mov	r23,fp
   22f64:	480f883a 	mov	r7,r9
   22f68:	00800084 	movi	r2,2
   22f6c:	3881311e 	bne	r7,r2,23434 <__divdf3+0x62c>
   22f70:	b827883a 	mov	r19,r23
   22f74:	98c0004c 	andi	r3,r19,1
   22f78:	0081ffc4 	movi	r2,2047
   22f7c:	000b883a 	mov	r5,zero
   22f80:	0025883a 	mov	r18,zero
   22f84:	1004953a 	slli	r2,r2,20
   22f88:	18c03fcc 	andi	r3,r3,255
   22f8c:	04400434 	movhi	r17,16
   22f90:	8c7fffc4 	addi	r17,r17,-1
   22f94:	180697fa 	slli	r3,r3,31
   22f98:	2c4a703a 	and	r5,r5,r17
   22f9c:	288ab03a 	or	r5,r5,r2
   22fa0:	28c6b03a 	or	r3,r5,r3
   22fa4:	9005883a 	mov	r2,r18
   22fa8:	dfc00d17 	ldw	ra,52(sp)
   22fac:	df000c17 	ldw	fp,48(sp)
   22fb0:	ddc00b17 	ldw	r23,44(sp)
   22fb4:	dd800a17 	ldw	r22,40(sp)
   22fb8:	dd400917 	ldw	r21,36(sp)
   22fbc:	dd000817 	ldw	r20,32(sp)
   22fc0:	dcc00717 	ldw	r19,28(sp)
   22fc4:	dc800617 	ldw	r18,24(sp)
   22fc8:	dc400517 	ldw	r17,20(sp)
   22fcc:	dc000417 	ldw	r16,16(sp)
   22fd0:	dec00e04 	addi	sp,sp,56
   22fd4:	f800283a 	ret
   22fd8:	2404b03a 	or	r2,r4,r16
   22fdc:	2027883a 	mov	r19,r4
   22fe0:	10003926 	beq	r2,zero,230c8 <__divdf3+0x2c0>
   22fe4:	80012e26 	beq	r16,zero,234a0 <__divdf3+0x698>
   22fe8:	8009883a 	mov	r4,r16
   22fec:	d9800315 	stw	r6,12(sp)
   22ff0:	d9c00215 	stw	r7,8(sp)
   22ff4:	0024a300 	call	24a30 <__clzsi2>
   22ff8:	d9800317 	ldw	r6,12(sp)
   22ffc:	d9c00217 	ldw	r7,8(sp)
   23000:	113ffd44 	addi	r4,r2,-11
   23004:	00c00704 	movi	r3,28
   23008:	19012116 	blt	r3,r4,23490 <__divdf3+0x688>
   2300c:	00c00744 	movi	r3,29
   23010:	147ffe04 	addi	r17,r2,-8
   23014:	1907c83a 	sub	r3,r3,r4
   23018:	8460983a 	sll	r16,r16,r17
   2301c:	98c6d83a 	srl	r3,r19,r3
   23020:	9c64983a 	sll	r18,r19,r17
   23024:	1c20b03a 	or	r16,r3,r16
   23028:	1080fcc4 	addi	r2,r2,1011
   2302c:	00abc83a 	sub	r21,zero,r2
   23030:	0027883a 	mov	r19,zero
   23034:	0013883a 	mov	r9,zero
   23038:	003f9106 	br	22e80 <__alt_data_end+0xfffea7e0>
   2303c:	3446b03a 	or	r3,r6,r17
   23040:	18001f1e 	bne	r3,zero,230c0 <__divdf3+0x2b8>
   23044:	0023883a 	mov	r17,zero
   23048:	0011883a 	mov	r8,zero
   2304c:	01c00084 	movi	r7,2
   23050:	003f9d06 	br	22ec8 <__alt_data_end+0xfffea828>
   23054:	3446b03a 	or	r3,r6,r17
   23058:	18001526 	beq	r3,zero,230b0 <__divdf3+0x2a8>
   2305c:	88011b26 	beq	r17,zero,234cc <__divdf3+0x6c4>
   23060:	8809883a 	mov	r4,r17
   23064:	d9800315 	stw	r6,12(sp)
   23068:	da400115 	stw	r9,4(sp)
   2306c:	0024a300 	call	24a30 <__clzsi2>
   23070:	d9800317 	ldw	r6,12(sp)
   23074:	da400117 	ldw	r9,4(sp)
   23078:	113ffd44 	addi	r4,r2,-11
   2307c:	00c00704 	movi	r3,28
   23080:	19010e16 	blt	r3,r4,234bc <__divdf3+0x6b4>
   23084:	00c00744 	movi	r3,29
   23088:	123ffe04 	addi	r8,r2,-8
   2308c:	1907c83a 	sub	r3,r3,r4
   23090:	8a22983a 	sll	r17,r17,r8
   23094:	30c6d83a 	srl	r3,r6,r3
   23098:	3210983a 	sll	r8,r6,r8
   2309c:	1c62b03a 	or	r17,r3,r17
   230a0:	1080fcc4 	addi	r2,r2,1011
   230a4:	0085c83a 	sub	r2,zero,r2
   230a8:	000f883a 	mov	r7,zero
   230ac:	003f8606 	br	22ec8 <__alt_data_end+0xfffea828>
   230b0:	0023883a 	mov	r17,zero
   230b4:	0011883a 	mov	r8,zero
   230b8:	01c00044 	movi	r7,1
   230bc:	003f8206 	br	22ec8 <__alt_data_end+0xfffea828>
   230c0:	01c000c4 	movi	r7,3
   230c4:	003f8006 	br	22ec8 <__alt_data_end+0xfffea828>
   230c8:	04c00104 	movi	r19,4
   230cc:	0021883a 	mov	r16,zero
   230d0:	0025883a 	mov	r18,zero
   230d4:	02400044 	movi	r9,1
   230d8:	003f6906 	br	22e80 <__alt_data_end+0xfffea7e0>
   230dc:	04c00304 	movi	r19,12
   230e0:	024000c4 	movi	r9,3
   230e4:	003f6606 	br	22e80 <__alt_data_end+0xfffea7e0>
   230e8:	01400434 	movhi	r5,16
   230ec:	0007883a 	mov	r3,zero
   230f0:	297fffc4 	addi	r5,r5,-1
   230f4:	04bfffc4 	movi	r18,-1
   230f8:	0081ffc4 	movi	r2,2047
   230fc:	003fa106 	br	22f84 <__alt_data_end+0xfffea8e4>
   23100:	00c00044 	movi	r3,1
   23104:	1887c83a 	sub	r3,r3,r2
   23108:	01000e04 	movi	r4,56
   2310c:	20c1210e 	bge	r4,r3,23594 <__divdf3+0x78c>
   23110:	98c0004c 	andi	r3,r19,1
   23114:	0005883a 	mov	r2,zero
   23118:	000b883a 	mov	r5,zero
   2311c:	0025883a 	mov	r18,zero
   23120:	003f9806 	br	22f84 <__alt_data_end+0xfffea8e4>
   23124:	8c00fd36 	bltu	r17,r16,2351c <__divdf3+0x714>
   23128:	8440fb26 	beq	r16,r17,23518 <__divdf3+0x710>
   2312c:	8007883a 	mov	r3,r16
   23130:	ad7fffc4 	addi	r21,r21,-1
   23134:	0021883a 	mov	r16,zero
   23138:	4004d63a 	srli	r2,r8,24
   2313c:	8822923a 	slli	r17,r17,8
   23140:	1809883a 	mov	r4,r3
   23144:	402c923a 	slli	r22,r8,8
   23148:	88b8b03a 	or	fp,r17,r2
   2314c:	e028d43a 	srli	r20,fp,16
   23150:	d8c00015 	stw	r3,0(sp)
   23154:	e5ffffcc 	andi	r23,fp,65535
   23158:	a00b883a 	mov	r5,r20
   2315c:	00224a00 	call	224a0 <__udivsi3>
   23160:	d8c00017 	ldw	r3,0(sp)
   23164:	a00b883a 	mov	r5,r20
   23168:	d8800315 	stw	r2,12(sp)
   2316c:	1809883a 	mov	r4,r3
   23170:	00225040 	call	22504 <__umodsi3>
   23174:	d9800317 	ldw	r6,12(sp)
   23178:	1006943a 	slli	r3,r2,16
   2317c:	9004d43a 	srli	r2,r18,16
   23180:	b9a3383a 	mul	r17,r23,r6
   23184:	10c4b03a 	or	r2,r2,r3
   23188:	1440062e 	bgeu	r2,r17,231a4 <__divdf3+0x39c>
   2318c:	1705883a 	add	r2,r2,fp
   23190:	30ffffc4 	addi	r3,r6,-1
   23194:	1700ee36 	bltu	r2,fp,23550 <__divdf3+0x748>
   23198:	1440ed2e 	bgeu	r2,r17,23550 <__divdf3+0x748>
   2319c:	31bfff84 	addi	r6,r6,-2
   231a0:	1705883a 	add	r2,r2,fp
   231a4:	1463c83a 	sub	r17,r2,r17
   231a8:	a00b883a 	mov	r5,r20
   231ac:	8809883a 	mov	r4,r17
   231b0:	d9800315 	stw	r6,12(sp)
   231b4:	00224a00 	call	224a0 <__udivsi3>
   231b8:	a00b883a 	mov	r5,r20
   231bc:	8809883a 	mov	r4,r17
   231c0:	d8800215 	stw	r2,8(sp)
   231c4:	00225040 	call	22504 <__umodsi3>
   231c8:	d9c00217 	ldw	r7,8(sp)
   231cc:	1004943a 	slli	r2,r2,16
   231d0:	94bfffcc 	andi	r18,r18,65535
   231d4:	b9d1383a 	mul	r8,r23,r7
   231d8:	90a4b03a 	or	r18,r18,r2
   231dc:	d9800317 	ldw	r6,12(sp)
   231e0:	9200062e 	bgeu	r18,r8,231fc <__divdf3+0x3f4>
   231e4:	9725883a 	add	r18,r18,fp
   231e8:	38bfffc4 	addi	r2,r7,-1
   231ec:	9700d636 	bltu	r18,fp,23548 <__divdf3+0x740>
   231f0:	9200d52e 	bgeu	r18,r8,23548 <__divdf3+0x740>
   231f4:	39ffff84 	addi	r7,r7,-2
   231f8:	9725883a 	add	r18,r18,fp
   231fc:	3004943a 	slli	r2,r6,16
   23200:	b012d43a 	srli	r9,r22,16
   23204:	b1bfffcc 	andi	r6,r22,65535
   23208:	11e2b03a 	or	r17,r2,r7
   2320c:	8806d43a 	srli	r3,r17,16
   23210:	893fffcc 	andi	r4,r17,65535
   23214:	218b383a 	mul	r5,r4,r6
   23218:	30c5383a 	mul	r2,r6,r3
   2321c:	2249383a 	mul	r4,r4,r9
   23220:	280ed43a 	srli	r7,r5,16
   23224:	9225c83a 	sub	r18,r18,r8
   23228:	2089883a 	add	r4,r4,r2
   2322c:	3909883a 	add	r4,r7,r4
   23230:	1a47383a 	mul	r3,r3,r9
   23234:	2080022e 	bgeu	r4,r2,23240 <__divdf3+0x438>
   23238:	00800074 	movhi	r2,1
   2323c:	1887883a 	add	r3,r3,r2
   23240:	2004d43a 	srli	r2,r4,16
   23244:	2008943a 	slli	r4,r4,16
   23248:	297fffcc 	andi	r5,r5,65535
   2324c:	10c7883a 	add	r3,r2,r3
   23250:	2149883a 	add	r4,r4,r5
   23254:	90c0a536 	bltu	r18,r3,234ec <__divdf3+0x6e4>
   23258:	90c0bf26 	beq	r18,r3,23558 <__divdf3+0x750>
   2325c:	90c7c83a 	sub	r3,r18,r3
   23260:	810fc83a 	sub	r7,r16,r4
   23264:	81e5803a 	cmpltu	r18,r16,r7
   23268:	1ca5c83a 	sub	r18,r3,r18
   2326c:	e480c126 	beq	fp,r18,23574 <__divdf3+0x76c>
   23270:	a00b883a 	mov	r5,r20
   23274:	9009883a 	mov	r4,r18
   23278:	d9800315 	stw	r6,12(sp)
   2327c:	d9c00215 	stw	r7,8(sp)
   23280:	da400115 	stw	r9,4(sp)
   23284:	00224a00 	call	224a0 <__udivsi3>
   23288:	a00b883a 	mov	r5,r20
   2328c:	9009883a 	mov	r4,r18
   23290:	d8800015 	stw	r2,0(sp)
   23294:	00225040 	call	22504 <__umodsi3>
   23298:	d9c00217 	ldw	r7,8(sp)
   2329c:	da000017 	ldw	r8,0(sp)
   232a0:	1006943a 	slli	r3,r2,16
   232a4:	3804d43a 	srli	r2,r7,16
   232a8:	ba21383a 	mul	r16,r23,r8
   232ac:	d9800317 	ldw	r6,12(sp)
   232b0:	10c4b03a 	or	r2,r2,r3
   232b4:	da400117 	ldw	r9,4(sp)
   232b8:	1400062e 	bgeu	r2,r16,232d4 <__divdf3+0x4cc>
   232bc:	1705883a 	add	r2,r2,fp
   232c0:	40ffffc4 	addi	r3,r8,-1
   232c4:	1700ad36 	bltu	r2,fp,2357c <__divdf3+0x774>
   232c8:	1400ac2e 	bgeu	r2,r16,2357c <__divdf3+0x774>
   232cc:	423fff84 	addi	r8,r8,-2
   232d0:	1705883a 	add	r2,r2,fp
   232d4:	1421c83a 	sub	r16,r2,r16
   232d8:	a00b883a 	mov	r5,r20
   232dc:	8009883a 	mov	r4,r16
   232e0:	d9800315 	stw	r6,12(sp)
   232e4:	d9c00215 	stw	r7,8(sp)
   232e8:	da000015 	stw	r8,0(sp)
   232ec:	da400115 	stw	r9,4(sp)
   232f0:	00224a00 	call	224a0 <__udivsi3>
   232f4:	8009883a 	mov	r4,r16
   232f8:	a00b883a 	mov	r5,r20
   232fc:	1025883a 	mov	r18,r2
   23300:	00225040 	call	22504 <__umodsi3>
   23304:	d9c00217 	ldw	r7,8(sp)
   23308:	1004943a 	slli	r2,r2,16
   2330c:	bcaf383a 	mul	r23,r23,r18
   23310:	393fffcc 	andi	r4,r7,65535
   23314:	2088b03a 	or	r4,r4,r2
   23318:	d9800317 	ldw	r6,12(sp)
   2331c:	da000017 	ldw	r8,0(sp)
   23320:	da400117 	ldw	r9,4(sp)
   23324:	25c0062e 	bgeu	r4,r23,23340 <__divdf3+0x538>
   23328:	2709883a 	add	r4,r4,fp
   2332c:	90bfffc4 	addi	r2,r18,-1
   23330:	27009436 	bltu	r4,fp,23584 <__divdf3+0x77c>
   23334:	25c0932e 	bgeu	r4,r23,23584 <__divdf3+0x77c>
   23338:	94bfff84 	addi	r18,r18,-2
   2333c:	2709883a 	add	r4,r4,fp
   23340:	4004943a 	slli	r2,r8,16
   23344:	25efc83a 	sub	r23,r4,r23
   23348:	1490b03a 	or	r8,r2,r18
   2334c:	4008d43a 	srli	r4,r8,16
   23350:	40ffffcc 	andi	r3,r8,65535
   23354:	30c5383a 	mul	r2,r6,r3
   23358:	1a47383a 	mul	r3,r3,r9
   2335c:	310d383a 	mul	r6,r6,r4
   23360:	100ad43a 	srli	r5,r2,16
   23364:	4913383a 	mul	r9,r9,r4
   23368:	1987883a 	add	r3,r3,r6
   2336c:	28c7883a 	add	r3,r5,r3
   23370:	1980022e 	bgeu	r3,r6,2337c <__divdf3+0x574>
   23374:	01000074 	movhi	r4,1
   23378:	4913883a 	add	r9,r9,r4
   2337c:	1808d43a 	srli	r4,r3,16
   23380:	1806943a 	slli	r3,r3,16
   23384:	10bfffcc 	andi	r2,r2,65535
   23388:	2253883a 	add	r9,r4,r9
   2338c:	1887883a 	add	r3,r3,r2
   23390:	ba403836 	bltu	r23,r9,23474 <__divdf3+0x66c>
   23394:	ba403626 	beq	r23,r9,23470 <__divdf3+0x668>
   23398:	42000054 	ori	r8,r8,1
   2339c:	a880ffc4 	addi	r2,r21,1023
   233a0:	00bf570e 	bge	zero,r2,23100 <__alt_data_end+0xfffeaa60>
   233a4:	40c001cc 	andi	r3,r8,7
   233a8:	18000726 	beq	r3,zero,233c8 <__divdf3+0x5c0>
   233ac:	40c003cc 	andi	r3,r8,15
   233b0:	01000104 	movi	r4,4
   233b4:	19000426 	beq	r3,r4,233c8 <__divdf3+0x5c0>
   233b8:	4107883a 	add	r3,r8,r4
   233bc:	1a11803a 	cmpltu	r8,r3,r8
   233c0:	8a23883a 	add	r17,r17,r8
   233c4:	1811883a 	mov	r8,r3
   233c8:	88c0402c 	andhi	r3,r17,256
   233cc:	18000426 	beq	r3,zero,233e0 <__divdf3+0x5d8>
   233d0:	00ffc034 	movhi	r3,65280
   233d4:	18ffffc4 	addi	r3,r3,-1
   233d8:	a8810004 	addi	r2,r21,1024
   233dc:	88e2703a 	and	r17,r17,r3
   233e0:	00c1ff84 	movi	r3,2046
   233e4:	18bee316 	blt	r3,r2,22f74 <__alt_data_end+0xfffea8d4>
   233e8:	8824977a 	slli	r18,r17,29
   233ec:	4010d0fa 	srli	r8,r8,3
   233f0:	8822927a 	slli	r17,r17,9
   233f4:	1081ffcc 	andi	r2,r2,2047
   233f8:	9224b03a 	or	r18,r18,r8
   233fc:	880ad33a 	srli	r5,r17,12
   23400:	98c0004c 	andi	r3,r19,1
   23404:	003edf06 	br	22f84 <__alt_data_end+0xfffea8e4>
   23408:	8080022c 	andhi	r2,r16,8
   2340c:	10001226 	beq	r2,zero,23458 <__divdf3+0x650>
   23410:	8880022c 	andhi	r2,r17,8
   23414:	1000101e 	bne	r2,zero,23458 <__divdf3+0x650>
   23418:	00800434 	movhi	r2,16
   2341c:	89400234 	orhi	r5,r17,8
   23420:	10bfffc4 	addi	r2,r2,-1
   23424:	b007883a 	mov	r3,r22
   23428:	288a703a 	and	r5,r5,r2
   2342c:	4025883a 	mov	r18,r8
   23430:	003f3106 	br	230f8 <__alt_data_end+0xfffeaa58>
   23434:	008000c4 	movi	r2,3
   23438:	3880a626 	beq	r7,r2,236d4 <__divdf3+0x8cc>
   2343c:	00800044 	movi	r2,1
   23440:	3880521e 	bne	r7,r2,2358c <__divdf3+0x784>
   23444:	b807883a 	mov	r3,r23
   23448:	0005883a 	mov	r2,zero
   2344c:	000b883a 	mov	r5,zero
   23450:	0025883a 	mov	r18,zero
   23454:	003ecb06 	br	22f84 <__alt_data_end+0xfffea8e4>
   23458:	00800434 	movhi	r2,16
   2345c:	81400234 	orhi	r5,r16,8
   23460:	10bfffc4 	addi	r2,r2,-1
   23464:	a007883a 	mov	r3,r20
   23468:	288a703a 	and	r5,r5,r2
   2346c:	003f2206 	br	230f8 <__alt_data_end+0xfffeaa58>
   23470:	183fca26 	beq	r3,zero,2339c <__alt_data_end+0xfffeacfc>
   23474:	e5ef883a 	add	r23,fp,r23
   23478:	40bfffc4 	addi	r2,r8,-1
   2347c:	bf00392e 	bgeu	r23,fp,23564 <__divdf3+0x75c>
   23480:	1011883a 	mov	r8,r2
   23484:	ba7fc41e 	bne	r23,r9,23398 <__alt_data_end+0xfffeacf8>
   23488:	b0ffc31e 	bne	r22,r3,23398 <__alt_data_end+0xfffeacf8>
   2348c:	003fc306 	br	2339c <__alt_data_end+0xfffeacfc>
   23490:	143ff604 	addi	r16,r2,-40
   23494:	9c20983a 	sll	r16,r19,r16
   23498:	0025883a 	mov	r18,zero
   2349c:	003ee206 	br	23028 <__alt_data_end+0xfffea988>
   234a0:	d9800315 	stw	r6,12(sp)
   234a4:	d9c00215 	stw	r7,8(sp)
   234a8:	0024a300 	call	24a30 <__clzsi2>
   234ac:	10800804 	addi	r2,r2,32
   234b0:	d9c00217 	ldw	r7,8(sp)
   234b4:	d9800317 	ldw	r6,12(sp)
   234b8:	003ed106 	br	23000 <__alt_data_end+0xfffea960>
   234bc:	147ff604 	addi	r17,r2,-40
   234c0:	3462983a 	sll	r17,r6,r17
   234c4:	0011883a 	mov	r8,zero
   234c8:	003ef506 	br	230a0 <__alt_data_end+0xfffeaa00>
   234cc:	3009883a 	mov	r4,r6
   234d0:	d9800315 	stw	r6,12(sp)
   234d4:	da400115 	stw	r9,4(sp)
   234d8:	0024a300 	call	24a30 <__clzsi2>
   234dc:	10800804 	addi	r2,r2,32
   234e0:	da400117 	ldw	r9,4(sp)
   234e4:	d9800317 	ldw	r6,12(sp)
   234e8:	003ee306 	br	23078 <__alt_data_end+0xfffea9d8>
   234ec:	85a1883a 	add	r16,r16,r22
   234f0:	8585803a 	cmpltu	r2,r16,r22
   234f4:	1705883a 	add	r2,r2,fp
   234f8:	14a5883a 	add	r18,r2,r18
   234fc:	88bfffc4 	addi	r2,r17,-1
   23500:	e4800c2e 	bgeu	fp,r18,23534 <__divdf3+0x72c>
   23504:	90c03e36 	bltu	r18,r3,23600 <__divdf3+0x7f8>
   23508:	1c806926 	beq	r3,r18,236b0 <__divdf3+0x8a8>
   2350c:	90c7c83a 	sub	r3,r18,r3
   23510:	1023883a 	mov	r17,r2
   23514:	003f5206 	br	23260 <__alt_data_end+0xfffeabc0>
   23518:	923f0436 	bltu	r18,r8,2312c <__alt_data_end+0xfffeaa8c>
   2351c:	800897fa 	slli	r4,r16,31
   23520:	9004d07a 	srli	r2,r18,1
   23524:	8006d07a 	srli	r3,r16,1
   23528:	902097fa 	slli	r16,r18,31
   2352c:	20a4b03a 	or	r18,r4,r2
   23530:	003f0106 	br	23138 <__alt_data_end+0xfffeaa98>
   23534:	e4bff51e 	bne	fp,r18,2350c <__alt_data_end+0xfffeae6c>
   23538:	85bff22e 	bgeu	r16,r22,23504 <__alt_data_end+0xfffeae64>
   2353c:	e0c7c83a 	sub	r3,fp,r3
   23540:	1023883a 	mov	r17,r2
   23544:	003f4606 	br	23260 <__alt_data_end+0xfffeabc0>
   23548:	100f883a 	mov	r7,r2
   2354c:	003f2b06 	br	231fc <__alt_data_end+0xfffeab5c>
   23550:	180d883a 	mov	r6,r3
   23554:	003f1306 	br	231a4 <__alt_data_end+0xfffeab04>
   23558:	813fe436 	bltu	r16,r4,234ec <__alt_data_end+0xfffeae4c>
   2355c:	0007883a 	mov	r3,zero
   23560:	003f3f06 	br	23260 <__alt_data_end+0xfffeabc0>
   23564:	ba402c36 	bltu	r23,r9,23618 <__divdf3+0x810>
   23568:	4dc05426 	beq	r9,r23,236bc <__divdf3+0x8b4>
   2356c:	1011883a 	mov	r8,r2
   23570:	003f8906 	br	23398 <__alt_data_end+0xfffeacf8>
   23574:	023fffc4 	movi	r8,-1
   23578:	003f8806 	br	2339c <__alt_data_end+0xfffeacfc>
   2357c:	1811883a 	mov	r8,r3
   23580:	003f5406 	br	232d4 <__alt_data_end+0xfffeac34>
   23584:	1025883a 	mov	r18,r2
   23588:	003f6d06 	br	23340 <__alt_data_end+0xfffeaca0>
   2358c:	b827883a 	mov	r19,r23
   23590:	003f8206 	br	2339c <__alt_data_end+0xfffeacfc>
   23594:	010007c4 	movi	r4,31
   23598:	20c02616 	blt	r4,r3,23634 <__divdf3+0x82c>
   2359c:	00800804 	movi	r2,32
   235a0:	10c5c83a 	sub	r2,r2,r3
   235a4:	888a983a 	sll	r5,r17,r2
   235a8:	40c8d83a 	srl	r4,r8,r3
   235ac:	4084983a 	sll	r2,r8,r2
   235b0:	88e2d83a 	srl	r17,r17,r3
   235b4:	2906b03a 	or	r3,r5,r4
   235b8:	1004c03a 	cmpne	r2,r2,zero
   235bc:	1886b03a 	or	r3,r3,r2
   235c0:	188001cc 	andi	r2,r3,7
   235c4:	10000726 	beq	r2,zero,235e4 <__divdf3+0x7dc>
   235c8:	188003cc 	andi	r2,r3,15
   235cc:	01000104 	movi	r4,4
   235d0:	11000426 	beq	r2,r4,235e4 <__divdf3+0x7dc>
   235d4:	1805883a 	mov	r2,r3
   235d8:	10c00104 	addi	r3,r2,4
   235dc:	1885803a 	cmpltu	r2,r3,r2
   235e0:	88a3883a 	add	r17,r17,r2
   235e4:	8880202c 	andhi	r2,r17,128
   235e8:	10002726 	beq	r2,zero,23688 <__divdf3+0x880>
   235ec:	98c0004c 	andi	r3,r19,1
   235f0:	00800044 	movi	r2,1
   235f4:	000b883a 	mov	r5,zero
   235f8:	0025883a 	mov	r18,zero
   235fc:	003e6106 	br	22f84 <__alt_data_end+0xfffea8e4>
   23600:	85a1883a 	add	r16,r16,r22
   23604:	8585803a 	cmpltu	r2,r16,r22
   23608:	1705883a 	add	r2,r2,fp
   2360c:	14a5883a 	add	r18,r2,r18
   23610:	8c7fff84 	addi	r17,r17,-2
   23614:	003f1106 	br	2325c <__alt_data_end+0xfffeabbc>
   23618:	b589883a 	add	r4,r22,r22
   2361c:	25ad803a 	cmpltu	r22,r4,r22
   23620:	b739883a 	add	fp,r22,fp
   23624:	40bfff84 	addi	r2,r8,-2
   23628:	bf2f883a 	add	r23,r23,fp
   2362c:	202d883a 	mov	r22,r4
   23630:	003f9306 	br	23480 <__alt_data_end+0xfffeade0>
   23634:	013ff844 	movi	r4,-31
   23638:	2085c83a 	sub	r2,r4,r2
   2363c:	8888d83a 	srl	r4,r17,r2
   23640:	00800804 	movi	r2,32
   23644:	18802126 	beq	r3,r2,236cc <__divdf3+0x8c4>
   23648:	00801004 	movi	r2,64
   2364c:	10c5c83a 	sub	r2,r2,r3
   23650:	8884983a 	sll	r2,r17,r2
   23654:	1204b03a 	or	r2,r2,r8
   23658:	1004c03a 	cmpne	r2,r2,zero
   2365c:	2084b03a 	or	r2,r4,r2
   23660:	144001cc 	andi	r17,r2,7
   23664:	88000d1e 	bne	r17,zero,2369c <__divdf3+0x894>
   23668:	000b883a 	mov	r5,zero
   2366c:	1024d0fa 	srli	r18,r2,3
   23670:	98c0004c 	andi	r3,r19,1
   23674:	0005883a 	mov	r2,zero
   23678:	9464b03a 	or	r18,r18,r17
   2367c:	003e4106 	br	22f84 <__alt_data_end+0xfffea8e4>
   23680:	1007883a 	mov	r3,r2
   23684:	0023883a 	mov	r17,zero
   23688:	880a927a 	slli	r5,r17,9
   2368c:	1805883a 	mov	r2,r3
   23690:	8822977a 	slli	r17,r17,29
   23694:	280ad33a 	srli	r5,r5,12
   23698:	003ff406 	br	2366c <__alt_data_end+0xfffeafcc>
   2369c:	10c003cc 	andi	r3,r2,15
   236a0:	01000104 	movi	r4,4
   236a4:	193ff626 	beq	r3,r4,23680 <__alt_data_end+0xfffeafe0>
   236a8:	0023883a 	mov	r17,zero
   236ac:	003fca06 	br	235d8 <__alt_data_end+0xfffeaf38>
   236b0:	813fd336 	bltu	r16,r4,23600 <__alt_data_end+0xfffeaf60>
   236b4:	1023883a 	mov	r17,r2
   236b8:	003fa806 	br	2355c <__alt_data_end+0xfffeaebc>
   236bc:	b0ffd636 	bltu	r22,r3,23618 <__alt_data_end+0xfffeaf78>
   236c0:	1011883a 	mov	r8,r2
   236c4:	b0ff341e 	bne	r22,r3,23398 <__alt_data_end+0xfffeacf8>
   236c8:	003f3406 	br	2339c <__alt_data_end+0xfffeacfc>
   236cc:	0005883a 	mov	r2,zero
   236d0:	003fe006 	br	23654 <__alt_data_end+0xfffeafb4>
   236d4:	00800434 	movhi	r2,16
   236d8:	89400234 	orhi	r5,r17,8
   236dc:	10bfffc4 	addi	r2,r2,-1
   236e0:	b807883a 	mov	r3,r23
   236e4:	288a703a 	and	r5,r5,r2
   236e8:	4025883a 	mov	r18,r8
   236ec:	003e8206 	br	230f8 <__alt_data_end+0xfffeaa58>

000236f0 <__gedf2>:
   236f0:	2804d53a 	srli	r2,r5,20
   236f4:	3806d53a 	srli	r3,r7,20
   236f8:	02000434 	movhi	r8,16
   236fc:	423fffc4 	addi	r8,r8,-1
   23700:	1081ffcc 	andi	r2,r2,2047
   23704:	0241ffc4 	movi	r9,2047
   23708:	2a14703a 	and	r10,r5,r8
   2370c:	18c1ffcc 	andi	r3,r3,2047
   23710:	3a10703a 	and	r8,r7,r8
   23714:	280ad7fa 	srli	r5,r5,31
   23718:	380ed7fa 	srli	r7,r7,31
   2371c:	12401d26 	beq	r2,r9,23794 <__gedf2+0xa4>
   23720:	0241ffc4 	movi	r9,2047
   23724:	1a401226 	beq	r3,r9,23770 <__gedf2+0x80>
   23728:	1000081e 	bne	r2,zero,2374c <__gedf2+0x5c>
   2372c:	2296b03a 	or	r11,r4,r10
   23730:	5813003a 	cmpeq	r9,r11,zero
   23734:	1800091e 	bne	r3,zero,2375c <__gedf2+0x6c>
   23738:	3218b03a 	or	r12,r6,r8
   2373c:	6000071e 	bne	r12,zero,2375c <__gedf2+0x6c>
   23740:	0005883a 	mov	r2,zero
   23744:	5800101e 	bne	r11,zero,23788 <__gedf2+0x98>
   23748:	f800283a 	ret
   2374c:	18000c1e 	bne	r3,zero,23780 <__gedf2+0x90>
   23750:	3212b03a 	or	r9,r6,r8
   23754:	48000c26 	beq	r9,zero,23788 <__gedf2+0x98>
   23758:	0013883a 	mov	r9,zero
   2375c:	39c03fcc 	andi	r7,r7,255
   23760:	48000826 	beq	r9,zero,23784 <__gedf2+0x94>
   23764:	38000926 	beq	r7,zero,2378c <__gedf2+0x9c>
   23768:	00800044 	movi	r2,1
   2376c:	f800283a 	ret
   23770:	3212b03a 	or	r9,r6,r8
   23774:	483fec26 	beq	r9,zero,23728 <__alt_data_end+0xfffeb088>
   23778:	00bfff84 	movi	r2,-2
   2377c:	f800283a 	ret
   23780:	39c03fcc 	andi	r7,r7,255
   23784:	29c00626 	beq	r5,r7,237a0 <__gedf2+0xb0>
   23788:	283ff726 	beq	r5,zero,23768 <__alt_data_end+0xfffeb0c8>
   2378c:	00bfffc4 	movi	r2,-1
   23790:	f800283a 	ret
   23794:	2292b03a 	or	r9,r4,r10
   23798:	483fe126 	beq	r9,zero,23720 <__alt_data_end+0xfffeb080>
   2379c:	003ff606 	br	23778 <__alt_data_end+0xfffeb0d8>
   237a0:	18bff916 	blt	r3,r2,23788 <__alt_data_end+0xfffeb0e8>
   237a4:	10c00316 	blt	r2,r3,237b4 <__gedf2+0xc4>
   237a8:	42bff736 	bltu	r8,r10,23788 <__alt_data_end+0xfffeb0e8>
   237ac:	52000326 	beq	r10,r8,237bc <__gedf2+0xcc>
   237b0:	5200042e 	bgeu	r10,r8,237c4 <__gedf2+0xd4>
   237b4:	283fec1e 	bne	r5,zero,23768 <__alt_data_end+0xfffeb0c8>
   237b8:	003ff406 	br	2378c <__alt_data_end+0xfffeb0ec>
   237bc:	313ff236 	bltu	r6,r4,23788 <__alt_data_end+0xfffeb0e8>
   237c0:	21bffc36 	bltu	r4,r6,237b4 <__alt_data_end+0xfffeb114>
   237c4:	0005883a 	mov	r2,zero
   237c8:	f800283a 	ret

000237cc <__ledf2>:
   237cc:	2804d53a 	srli	r2,r5,20
   237d0:	3810d53a 	srli	r8,r7,20
   237d4:	00c00434 	movhi	r3,16
   237d8:	18ffffc4 	addi	r3,r3,-1
   237dc:	1081ffcc 	andi	r2,r2,2047
   237e0:	0241ffc4 	movi	r9,2047
   237e4:	28d4703a 	and	r10,r5,r3
   237e8:	4201ffcc 	andi	r8,r8,2047
   237ec:	38c6703a 	and	r3,r7,r3
   237f0:	280ad7fa 	srli	r5,r5,31
   237f4:	380ed7fa 	srli	r7,r7,31
   237f8:	12401f26 	beq	r2,r9,23878 <__ledf2+0xac>
   237fc:	0241ffc4 	movi	r9,2047
   23800:	42401426 	beq	r8,r9,23854 <__ledf2+0x88>
   23804:	1000091e 	bne	r2,zero,2382c <__ledf2+0x60>
   23808:	2296b03a 	or	r11,r4,r10
   2380c:	5813003a 	cmpeq	r9,r11,zero
   23810:	29403fcc 	andi	r5,r5,255
   23814:	40000a1e 	bne	r8,zero,23840 <__ledf2+0x74>
   23818:	30d8b03a 	or	r12,r6,r3
   2381c:	6000081e 	bne	r12,zero,23840 <__ledf2+0x74>
   23820:	0005883a 	mov	r2,zero
   23824:	5800111e 	bne	r11,zero,2386c <__ledf2+0xa0>
   23828:	f800283a 	ret
   2382c:	29403fcc 	andi	r5,r5,255
   23830:	40000c1e 	bne	r8,zero,23864 <__ledf2+0x98>
   23834:	30d2b03a 	or	r9,r6,r3
   23838:	48000c26 	beq	r9,zero,2386c <__ledf2+0xa0>
   2383c:	0013883a 	mov	r9,zero
   23840:	39c03fcc 	andi	r7,r7,255
   23844:	48000826 	beq	r9,zero,23868 <__ledf2+0x9c>
   23848:	38001126 	beq	r7,zero,23890 <__ledf2+0xc4>
   2384c:	00800044 	movi	r2,1
   23850:	f800283a 	ret
   23854:	30d2b03a 	or	r9,r6,r3
   23858:	483fea26 	beq	r9,zero,23804 <__alt_data_end+0xfffeb164>
   2385c:	00800084 	movi	r2,2
   23860:	f800283a 	ret
   23864:	39c03fcc 	andi	r7,r7,255
   23868:	39400726 	beq	r7,r5,23888 <__ledf2+0xbc>
   2386c:	2800081e 	bne	r5,zero,23890 <__ledf2+0xc4>
   23870:	00800044 	movi	r2,1
   23874:	f800283a 	ret
   23878:	2292b03a 	or	r9,r4,r10
   2387c:	483fdf26 	beq	r9,zero,237fc <__alt_data_end+0xfffeb15c>
   23880:	00800084 	movi	r2,2
   23884:	f800283a 	ret
   23888:	4080030e 	bge	r8,r2,23898 <__ledf2+0xcc>
   2388c:	383fef26 	beq	r7,zero,2384c <__alt_data_end+0xfffeb1ac>
   23890:	00bfffc4 	movi	r2,-1
   23894:	f800283a 	ret
   23898:	123feb16 	blt	r2,r8,23848 <__alt_data_end+0xfffeb1a8>
   2389c:	1abff336 	bltu	r3,r10,2386c <__alt_data_end+0xfffeb1cc>
   238a0:	50c00326 	beq	r10,r3,238b0 <__ledf2+0xe4>
   238a4:	50c0042e 	bgeu	r10,r3,238b8 <__ledf2+0xec>
   238a8:	283fe81e 	bne	r5,zero,2384c <__alt_data_end+0xfffeb1ac>
   238ac:	003ff806 	br	23890 <__alt_data_end+0xfffeb1f0>
   238b0:	313fee36 	bltu	r6,r4,2386c <__alt_data_end+0xfffeb1cc>
   238b4:	21bffc36 	bltu	r4,r6,238a8 <__alt_data_end+0xfffeb208>
   238b8:	0005883a 	mov	r2,zero
   238bc:	f800283a 	ret

000238c0 <__muldf3>:
   238c0:	defff304 	addi	sp,sp,-52
   238c4:	2804d53a 	srli	r2,r5,20
   238c8:	dd800915 	stw	r22,36(sp)
   238cc:	282cd7fa 	srli	r22,r5,31
   238d0:	dc000315 	stw	r16,12(sp)
   238d4:	04000434 	movhi	r16,16
   238d8:	dd400815 	stw	r21,32(sp)
   238dc:	dc800515 	stw	r18,20(sp)
   238e0:	843fffc4 	addi	r16,r16,-1
   238e4:	dfc00c15 	stw	ra,48(sp)
   238e8:	df000b15 	stw	fp,44(sp)
   238ec:	ddc00a15 	stw	r23,40(sp)
   238f0:	dd000715 	stw	r20,28(sp)
   238f4:	dcc00615 	stw	r19,24(sp)
   238f8:	dc400415 	stw	r17,16(sp)
   238fc:	1481ffcc 	andi	r18,r2,2047
   23900:	2c20703a 	and	r16,r5,r16
   23904:	b02b883a 	mov	r21,r22
   23908:	b2403fcc 	andi	r9,r22,255
   2390c:	90006026 	beq	r18,zero,23a90 <__muldf3+0x1d0>
   23910:	0081ffc4 	movi	r2,2047
   23914:	2029883a 	mov	r20,r4
   23918:	90803626 	beq	r18,r2,239f4 <__muldf3+0x134>
   2391c:	80800434 	orhi	r2,r16,16
   23920:	100490fa 	slli	r2,r2,3
   23924:	2020d77a 	srli	r16,r4,29
   23928:	202890fa 	slli	r20,r4,3
   2392c:	94bf0044 	addi	r18,r18,-1023
   23930:	80a0b03a 	or	r16,r16,r2
   23934:	0027883a 	mov	r19,zero
   23938:	0039883a 	mov	fp,zero
   2393c:	3804d53a 	srli	r2,r7,20
   23940:	382ed7fa 	srli	r23,r7,31
   23944:	04400434 	movhi	r17,16
   23948:	8c7fffc4 	addi	r17,r17,-1
   2394c:	1081ffcc 	andi	r2,r2,2047
   23950:	3011883a 	mov	r8,r6
   23954:	3c62703a 	and	r17,r7,r17
   23958:	ba803fcc 	andi	r10,r23,255
   2395c:	10006d26 	beq	r2,zero,23b14 <__muldf3+0x254>
   23960:	00c1ffc4 	movi	r3,2047
   23964:	10c06526 	beq	r2,r3,23afc <__muldf3+0x23c>
   23968:	88c00434 	orhi	r3,r17,16
   2396c:	180690fa 	slli	r3,r3,3
   23970:	3022d77a 	srli	r17,r6,29
   23974:	301090fa 	slli	r8,r6,3
   23978:	10bf0044 	addi	r2,r2,-1023
   2397c:	88e2b03a 	or	r17,r17,r3
   23980:	000b883a 	mov	r5,zero
   23984:	9085883a 	add	r2,r18,r2
   23988:	2cc8b03a 	or	r4,r5,r19
   2398c:	00c003c4 	movi	r3,15
   23990:	bdacf03a 	xor	r22,r23,r22
   23994:	12c00044 	addi	r11,r2,1
   23998:	19009936 	bltu	r3,r4,23c00 <__muldf3+0x340>
   2399c:	200890ba 	slli	r4,r4,2
   239a0:	00c000b4 	movhi	r3,2
   239a4:	18ce6d04 	addi	r3,r3,14772
   239a8:	20c9883a 	add	r4,r4,r3
   239ac:	20c00017 	ldw	r3,0(r4)
   239b0:	1800683a 	jmp	r3
   239b4:	00023c00 	call	23c0 <__reset-0x1dc40>
   239b8:	00023a14 	movui	zero,2280
   239bc:	00023a14 	movui	zero,2280
   239c0:	00023a10 	cmplti	zero,zero,2280
   239c4:	00023bdc 	xori	zero,zero,2287
   239c8:	00023bdc 	xori	zero,zero,2287
   239cc:	00023bc4 	movi	zero,2287
   239d0:	00023a10 	cmplti	zero,zero,2280
   239d4:	00023bdc 	xori	zero,zero,2287
   239d8:	00023bc4 	movi	zero,2287
   239dc:	00023bdc 	xori	zero,zero,2287
   239e0:	00023a10 	cmplti	zero,zero,2280
   239e4:	00023bec 	andhi	zero,zero,2287
   239e8:	00023bec 	andhi	zero,zero,2287
   239ec:	00023bec 	andhi	zero,zero,2287
   239f0:	00023e08 	cmpgei	zero,zero,2296
   239f4:	2404b03a 	or	r2,r4,r16
   239f8:	10006f1e 	bne	r2,zero,23bb8 <__muldf3+0x2f8>
   239fc:	04c00204 	movi	r19,8
   23a00:	0021883a 	mov	r16,zero
   23a04:	0029883a 	mov	r20,zero
   23a08:	07000084 	movi	fp,2
   23a0c:	003fcb06 	br	2393c <__alt_data_end+0xfffeb29c>
   23a10:	502d883a 	mov	r22,r10
   23a14:	00800084 	movi	r2,2
   23a18:	28805726 	beq	r5,r2,23b78 <__muldf3+0x2b8>
   23a1c:	008000c4 	movi	r2,3
   23a20:	28816626 	beq	r5,r2,23fbc <__muldf3+0x6fc>
   23a24:	00800044 	movi	r2,1
   23a28:	2881411e 	bne	r5,r2,23f30 <__muldf3+0x670>
   23a2c:	b02b883a 	mov	r21,r22
   23a30:	0005883a 	mov	r2,zero
   23a34:	000b883a 	mov	r5,zero
   23a38:	0029883a 	mov	r20,zero
   23a3c:	1004953a 	slli	r2,r2,20
   23a40:	a8c03fcc 	andi	r3,r21,255
   23a44:	04400434 	movhi	r17,16
   23a48:	8c7fffc4 	addi	r17,r17,-1
   23a4c:	180697fa 	slli	r3,r3,31
   23a50:	2c4a703a 	and	r5,r5,r17
   23a54:	288ab03a 	or	r5,r5,r2
   23a58:	28c6b03a 	or	r3,r5,r3
   23a5c:	a005883a 	mov	r2,r20
   23a60:	dfc00c17 	ldw	ra,48(sp)
   23a64:	df000b17 	ldw	fp,44(sp)
   23a68:	ddc00a17 	ldw	r23,40(sp)
   23a6c:	dd800917 	ldw	r22,36(sp)
   23a70:	dd400817 	ldw	r21,32(sp)
   23a74:	dd000717 	ldw	r20,28(sp)
   23a78:	dcc00617 	ldw	r19,24(sp)
   23a7c:	dc800517 	ldw	r18,20(sp)
   23a80:	dc400417 	ldw	r17,16(sp)
   23a84:	dc000317 	ldw	r16,12(sp)
   23a88:	dec00d04 	addi	sp,sp,52
   23a8c:	f800283a 	ret
   23a90:	2404b03a 	or	r2,r4,r16
   23a94:	2027883a 	mov	r19,r4
   23a98:	10004226 	beq	r2,zero,23ba4 <__muldf3+0x2e4>
   23a9c:	8000fc26 	beq	r16,zero,23e90 <__muldf3+0x5d0>
   23aa0:	8009883a 	mov	r4,r16
   23aa4:	d9800215 	stw	r6,8(sp)
   23aa8:	d9c00015 	stw	r7,0(sp)
   23aac:	da400115 	stw	r9,4(sp)
   23ab0:	0024a300 	call	24a30 <__clzsi2>
   23ab4:	d9800217 	ldw	r6,8(sp)
   23ab8:	d9c00017 	ldw	r7,0(sp)
   23abc:	da400117 	ldw	r9,4(sp)
   23ac0:	113ffd44 	addi	r4,r2,-11
   23ac4:	00c00704 	movi	r3,28
   23ac8:	1900ed16 	blt	r3,r4,23e80 <__muldf3+0x5c0>
   23acc:	00c00744 	movi	r3,29
   23ad0:	147ffe04 	addi	r17,r2,-8
   23ad4:	1907c83a 	sub	r3,r3,r4
   23ad8:	8460983a 	sll	r16,r16,r17
   23adc:	98c6d83a 	srl	r3,r19,r3
   23ae0:	9c68983a 	sll	r20,r19,r17
   23ae4:	1c20b03a 	or	r16,r3,r16
   23ae8:	1080fcc4 	addi	r2,r2,1011
   23aec:	00a5c83a 	sub	r18,zero,r2
   23af0:	0027883a 	mov	r19,zero
   23af4:	0039883a 	mov	fp,zero
   23af8:	003f9006 	br	2393c <__alt_data_end+0xfffeb29c>
   23afc:	3446b03a 	or	r3,r6,r17
   23b00:	1800261e 	bne	r3,zero,23b9c <__muldf3+0x2dc>
   23b04:	0023883a 	mov	r17,zero
   23b08:	0011883a 	mov	r8,zero
   23b0c:	01400084 	movi	r5,2
   23b10:	003f9c06 	br	23984 <__alt_data_end+0xfffeb2e4>
   23b14:	3446b03a 	or	r3,r6,r17
   23b18:	18001c26 	beq	r3,zero,23b8c <__muldf3+0x2cc>
   23b1c:	8800ce26 	beq	r17,zero,23e58 <__muldf3+0x598>
   23b20:	8809883a 	mov	r4,r17
   23b24:	d9800215 	stw	r6,8(sp)
   23b28:	da400115 	stw	r9,4(sp)
   23b2c:	da800015 	stw	r10,0(sp)
   23b30:	0024a300 	call	24a30 <__clzsi2>
   23b34:	d9800217 	ldw	r6,8(sp)
   23b38:	da400117 	ldw	r9,4(sp)
   23b3c:	da800017 	ldw	r10,0(sp)
   23b40:	113ffd44 	addi	r4,r2,-11
   23b44:	00c00704 	movi	r3,28
   23b48:	1900bf16 	blt	r3,r4,23e48 <__muldf3+0x588>
   23b4c:	00c00744 	movi	r3,29
   23b50:	123ffe04 	addi	r8,r2,-8
   23b54:	1907c83a 	sub	r3,r3,r4
   23b58:	8a22983a 	sll	r17,r17,r8
   23b5c:	30c6d83a 	srl	r3,r6,r3
   23b60:	3210983a 	sll	r8,r6,r8
   23b64:	1c62b03a 	or	r17,r3,r17
   23b68:	1080fcc4 	addi	r2,r2,1011
   23b6c:	0085c83a 	sub	r2,zero,r2
   23b70:	000b883a 	mov	r5,zero
   23b74:	003f8306 	br	23984 <__alt_data_end+0xfffeb2e4>
   23b78:	b02b883a 	mov	r21,r22
   23b7c:	0081ffc4 	movi	r2,2047
   23b80:	000b883a 	mov	r5,zero
   23b84:	0029883a 	mov	r20,zero
   23b88:	003fac06 	br	23a3c <__alt_data_end+0xfffeb39c>
   23b8c:	0023883a 	mov	r17,zero
   23b90:	0011883a 	mov	r8,zero
   23b94:	01400044 	movi	r5,1
   23b98:	003f7a06 	br	23984 <__alt_data_end+0xfffeb2e4>
   23b9c:	014000c4 	movi	r5,3
   23ba0:	003f7806 	br	23984 <__alt_data_end+0xfffeb2e4>
   23ba4:	04c00104 	movi	r19,4
   23ba8:	0021883a 	mov	r16,zero
   23bac:	0029883a 	mov	r20,zero
   23bb0:	07000044 	movi	fp,1
   23bb4:	003f6106 	br	2393c <__alt_data_end+0xfffeb29c>
   23bb8:	04c00304 	movi	r19,12
   23bbc:	070000c4 	movi	fp,3
   23bc0:	003f5e06 	br	2393c <__alt_data_end+0xfffeb29c>
   23bc4:	01400434 	movhi	r5,16
   23bc8:	002b883a 	mov	r21,zero
   23bcc:	297fffc4 	addi	r5,r5,-1
   23bd0:	053fffc4 	movi	r20,-1
   23bd4:	0081ffc4 	movi	r2,2047
   23bd8:	003f9806 	br	23a3c <__alt_data_end+0xfffeb39c>
   23bdc:	8023883a 	mov	r17,r16
   23be0:	a011883a 	mov	r8,r20
   23be4:	e00b883a 	mov	r5,fp
   23be8:	003f8a06 	br	23a14 <__alt_data_end+0xfffeb374>
   23bec:	8023883a 	mov	r17,r16
   23bf0:	a011883a 	mov	r8,r20
   23bf4:	482d883a 	mov	r22,r9
   23bf8:	e00b883a 	mov	r5,fp
   23bfc:	003f8506 	br	23a14 <__alt_data_end+0xfffeb374>
   23c00:	a00ad43a 	srli	r5,r20,16
   23c04:	401ad43a 	srli	r13,r8,16
   23c08:	a53fffcc 	andi	r20,r20,65535
   23c0c:	423fffcc 	andi	r8,r8,65535
   23c10:	4519383a 	mul	r12,r8,r20
   23c14:	4147383a 	mul	r3,r8,r5
   23c18:	6d09383a 	mul	r4,r13,r20
   23c1c:	600cd43a 	srli	r6,r12,16
   23c20:	2b5d383a 	mul	r14,r5,r13
   23c24:	20c9883a 	add	r4,r4,r3
   23c28:	310d883a 	add	r6,r6,r4
   23c2c:	30c0022e 	bgeu	r6,r3,23c38 <__muldf3+0x378>
   23c30:	00c00074 	movhi	r3,1
   23c34:	70dd883a 	add	r14,r14,r3
   23c38:	8826d43a 	srli	r19,r17,16
   23c3c:	8bffffcc 	andi	r15,r17,65535
   23c40:	7d23383a 	mul	r17,r15,r20
   23c44:	7949383a 	mul	r4,r15,r5
   23c48:	9d29383a 	mul	r20,r19,r20
   23c4c:	8814d43a 	srli	r10,r17,16
   23c50:	3012943a 	slli	r9,r6,16
   23c54:	a129883a 	add	r20,r20,r4
   23c58:	633fffcc 	andi	r12,r12,65535
   23c5c:	5515883a 	add	r10,r10,r20
   23c60:	3006d43a 	srli	r3,r6,16
   23c64:	4b13883a 	add	r9,r9,r12
   23c68:	2ccb383a 	mul	r5,r5,r19
   23c6c:	5100022e 	bgeu	r10,r4,23c78 <__muldf3+0x3b8>
   23c70:	01000074 	movhi	r4,1
   23c74:	290b883a 	add	r5,r5,r4
   23c78:	802ad43a 	srli	r21,r16,16
   23c7c:	843fffcc 	andi	r16,r16,65535
   23c80:	440d383a 	mul	r6,r8,r16
   23c84:	4565383a 	mul	r18,r8,r21
   23c88:	8349383a 	mul	r4,r16,r13
   23c8c:	500e943a 	slli	r7,r10,16
   23c90:	3010d43a 	srli	r8,r6,16
   23c94:	5028d43a 	srli	r20,r10,16
   23c98:	2489883a 	add	r4,r4,r18
   23c9c:	8abfffcc 	andi	r10,r17,65535
   23ca0:	3a95883a 	add	r10,r7,r10
   23ca4:	4119883a 	add	r12,r8,r4
   23ca8:	a169883a 	add	r20,r20,r5
   23cac:	1a87883a 	add	r3,r3,r10
   23cb0:	6d5b383a 	mul	r13,r13,r21
   23cb4:	6480022e 	bgeu	r12,r18,23cc0 <__muldf3+0x400>
   23cb8:	01000074 	movhi	r4,1
   23cbc:	691b883a 	add	r13,r13,r4
   23cc0:	7c25383a 	mul	r18,r15,r16
   23cc4:	7d4b383a 	mul	r5,r15,r21
   23cc8:	84cf383a 	mul	r7,r16,r19
   23ccc:	901ed43a 	srli	r15,r18,16
   23cd0:	6008d43a 	srli	r4,r12,16
   23cd4:	6010943a 	slli	r8,r12,16
   23cd8:	394f883a 	add	r7,r7,r5
   23cdc:	333fffcc 	andi	r12,r6,65535
   23ce0:	79df883a 	add	r15,r15,r7
   23ce4:	235b883a 	add	r13,r4,r13
   23ce8:	9d63383a 	mul	r17,r19,r21
   23cec:	4309883a 	add	r4,r8,r12
   23cf0:	7940022e 	bgeu	r15,r5,23cfc <__muldf3+0x43c>
   23cf4:	01400074 	movhi	r5,1
   23cf8:	8963883a 	add	r17,r17,r5
   23cfc:	780a943a 	slli	r5,r15,16
   23d00:	91bfffcc 	andi	r6,r18,65535
   23d04:	70c7883a 	add	r3,r14,r3
   23d08:	298d883a 	add	r6,r5,r6
   23d0c:	1a8f803a 	cmpltu	r7,r3,r10
   23d10:	350b883a 	add	r5,r6,r20
   23d14:	20c7883a 	add	r3,r4,r3
   23d18:	3955883a 	add	r10,r7,r5
   23d1c:	1909803a 	cmpltu	r4,r3,r4
   23d20:	6a91883a 	add	r8,r13,r10
   23d24:	780cd43a 	srli	r6,r15,16
   23d28:	2219883a 	add	r12,r4,r8
   23d2c:	2d0b803a 	cmpltu	r5,r5,r20
   23d30:	51cf803a 	cmpltu	r7,r10,r7
   23d34:	29ceb03a 	or	r7,r5,r7
   23d38:	4351803a 	cmpltu	r8,r8,r13
   23d3c:	610b803a 	cmpltu	r5,r12,r4
   23d40:	4148b03a 	or	r4,r8,r5
   23d44:	398f883a 	add	r7,r7,r6
   23d48:	3909883a 	add	r4,r7,r4
   23d4c:	1810927a 	slli	r8,r3,9
   23d50:	2449883a 	add	r4,r4,r17
   23d54:	2008927a 	slli	r4,r4,9
   23d58:	6022d5fa 	srli	r17,r12,23
   23d5c:	1806d5fa 	srli	r3,r3,23
   23d60:	4252b03a 	or	r9,r8,r9
   23d64:	600a927a 	slli	r5,r12,9
   23d68:	4810c03a 	cmpne	r8,r9,zero
   23d6c:	2462b03a 	or	r17,r4,r17
   23d70:	40c6b03a 	or	r3,r8,r3
   23d74:	8900402c 	andhi	r4,r17,256
   23d78:	1950b03a 	or	r8,r3,r5
   23d7c:	20000726 	beq	r4,zero,23d9c <__muldf3+0x4dc>
   23d80:	4006d07a 	srli	r3,r8,1
   23d84:	880497fa 	slli	r2,r17,31
   23d88:	4200004c 	andi	r8,r8,1
   23d8c:	8822d07a 	srli	r17,r17,1
   23d90:	1a10b03a 	or	r8,r3,r8
   23d94:	1210b03a 	or	r8,r2,r8
   23d98:	5805883a 	mov	r2,r11
   23d9c:	1140ffc4 	addi	r5,r2,1023
   23da0:	0140440e 	bge	zero,r5,23eb4 <__muldf3+0x5f4>
   23da4:	40c001cc 	andi	r3,r8,7
   23da8:	18000726 	beq	r3,zero,23dc8 <__muldf3+0x508>
   23dac:	40c003cc 	andi	r3,r8,15
   23db0:	01000104 	movi	r4,4
   23db4:	19000426 	beq	r3,r4,23dc8 <__muldf3+0x508>
   23db8:	4107883a 	add	r3,r8,r4
   23dbc:	1a11803a 	cmpltu	r8,r3,r8
   23dc0:	8a23883a 	add	r17,r17,r8
   23dc4:	1811883a 	mov	r8,r3
   23dc8:	88c0402c 	andhi	r3,r17,256
   23dcc:	18000426 	beq	r3,zero,23de0 <__muldf3+0x520>
   23dd0:	11410004 	addi	r5,r2,1024
   23dd4:	00bfc034 	movhi	r2,65280
   23dd8:	10bfffc4 	addi	r2,r2,-1
   23ddc:	88a2703a 	and	r17,r17,r2
   23de0:	0081ff84 	movi	r2,2046
   23de4:	117f6416 	blt	r2,r5,23b78 <__alt_data_end+0xfffeb4d8>
   23de8:	8828977a 	slli	r20,r17,29
   23dec:	4010d0fa 	srli	r8,r8,3
   23df0:	8822927a 	slli	r17,r17,9
   23df4:	2881ffcc 	andi	r2,r5,2047
   23df8:	a228b03a 	or	r20,r20,r8
   23dfc:	880ad33a 	srli	r5,r17,12
   23e00:	b02b883a 	mov	r21,r22
   23e04:	003f0d06 	br	23a3c <__alt_data_end+0xfffeb39c>
   23e08:	8080022c 	andhi	r2,r16,8
   23e0c:	10000926 	beq	r2,zero,23e34 <__muldf3+0x574>
   23e10:	8880022c 	andhi	r2,r17,8
   23e14:	1000071e 	bne	r2,zero,23e34 <__muldf3+0x574>
   23e18:	00800434 	movhi	r2,16
   23e1c:	89400234 	orhi	r5,r17,8
   23e20:	10bfffc4 	addi	r2,r2,-1
   23e24:	b82b883a 	mov	r21,r23
   23e28:	288a703a 	and	r5,r5,r2
   23e2c:	4029883a 	mov	r20,r8
   23e30:	003f6806 	br	23bd4 <__alt_data_end+0xfffeb534>
   23e34:	00800434 	movhi	r2,16
   23e38:	81400234 	orhi	r5,r16,8
   23e3c:	10bfffc4 	addi	r2,r2,-1
   23e40:	288a703a 	and	r5,r5,r2
   23e44:	003f6306 	br	23bd4 <__alt_data_end+0xfffeb534>
   23e48:	147ff604 	addi	r17,r2,-40
   23e4c:	3462983a 	sll	r17,r6,r17
   23e50:	0011883a 	mov	r8,zero
   23e54:	003f4406 	br	23b68 <__alt_data_end+0xfffeb4c8>
   23e58:	3009883a 	mov	r4,r6
   23e5c:	d9800215 	stw	r6,8(sp)
   23e60:	da400115 	stw	r9,4(sp)
   23e64:	da800015 	stw	r10,0(sp)
   23e68:	0024a300 	call	24a30 <__clzsi2>
   23e6c:	10800804 	addi	r2,r2,32
   23e70:	da800017 	ldw	r10,0(sp)
   23e74:	da400117 	ldw	r9,4(sp)
   23e78:	d9800217 	ldw	r6,8(sp)
   23e7c:	003f3006 	br	23b40 <__alt_data_end+0xfffeb4a0>
   23e80:	143ff604 	addi	r16,r2,-40
   23e84:	9c20983a 	sll	r16,r19,r16
   23e88:	0029883a 	mov	r20,zero
   23e8c:	003f1606 	br	23ae8 <__alt_data_end+0xfffeb448>
   23e90:	d9800215 	stw	r6,8(sp)
   23e94:	d9c00015 	stw	r7,0(sp)
   23e98:	da400115 	stw	r9,4(sp)
   23e9c:	0024a300 	call	24a30 <__clzsi2>
   23ea0:	10800804 	addi	r2,r2,32
   23ea4:	da400117 	ldw	r9,4(sp)
   23ea8:	d9c00017 	ldw	r7,0(sp)
   23eac:	d9800217 	ldw	r6,8(sp)
   23eb0:	003f0306 	br	23ac0 <__alt_data_end+0xfffeb420>
   23eb4:	00c00044 	movi	r3,1
   23eb8:	1947c83a 	sub	r3,r3,r5
   23ebc:	00800e04 	movi	r2,56
   23ec0:	10feda16 	blt	r2,r3,23a2c <__alt_data_end+0xfffeb38c>
   23ec4:	008007c4 	movi	r2,31
   23ec8:	10c01b16 	blt	r2,r3,23f38 <__muldf3+0x678>
   23ecc:	00800804 	movi	r2,32
   23ed0:	10c5c83a 	sub	r2,r2,r3
   23ed4:	888a983a 	sll	r5,r17,r2
   23ed8:	40c8d83a 	srl	r4,r8,r3
   23edc:	4084983a 	sll	r2,r8,r2
   23ee0:	88e2d83a 	srl	r17,r17,r3
   23ee4:	2906b03a 	or	r3,r5,r4
   23ee8:	1004c03a 	cmpne	r2,r2,zero
   23eec:	1886b03a 	or	r3,r3,r2
   23ef0:	188001cc 	andi	r2,r3,7
   23ef4:	10000726 	beq	r2,zero,23f14 <__muldf3+0x654>
   23ef8:	188003cc 	andi	r2,r3,15
   23efc:	01000104 	movi	r4,4
   23f00:	11000426 	beq	r2,r4,23f14 <__muldf3+0x654>
   23f04:	1805883a 	mov	r2,r3
   23f08:	10c00104 	addi	r3,r2,4
   23f0c:	1885803a 	cmpltu	r2,r3,r2
   23f10:	88a3883a 	add	r17,r17,r2
   23f14:	8880202c 	andhi	r2,r17,128
   23f18:	10001c26 	beq	r2,zero,23f8c <__muldf3+0x6cc>
   23f1c:	b02b883a 	mov	r21,r22
   23f20:	00800044 	movi	r2,1
   23f24:	000b883a 	mov	r5,zero
   23f28:	0029883a 	mov	r20,zero
   23f2c:	003ec306 	br	23a3c <__alt_data_end+0xfffeb39c>
   23f30:	5805883a 	mov	r2,r11
   23f34:	003f9906 	br	23d9c <__alt_data_end+0xfffeb6fc>
   23f38:	00bff844 	movi	r2,-31
   23f3c:	1145c83a 	sub	r2,r2,r5
   23f40:	8888d83a 	srl	r4,r17,r2
   23f44:	00800804 	movi	r2,32
   23f48:	18801a26 	beq	r3,r2,23fb4 <__muldf3+0x6f4>
   23f4c:	00801004 	movi	r2,64
   23f50:	10c5c83a 	sub	r2,r2,r3
   23f54:	8884983a 	sll	r2,r17,r2
   23f58:	1204b03a 	or	r2,r2,r8
   23f5c:	1004c03a 	cmpne	r2,r2,zero
   23f60:	2084b03a 	or	r2,r4,r2
   23f64:	144001cc 	andi	r17,r2,7
   23f68:	88000d1e 	bne	r17,zero,23fa0 <__muldf3+0x6e0>
   23f6c:	000b883a 	mov	r5,zero
   23f70:	1028d0fa 	srli	r20,r2,3
   23f74:	b02b883a 	mov	r21,r22
   23f78:	0005883a 	mov	r2,zero
   23f7c:	a468b03a 	or	r20,r20,r17
   23f80:	003eae06 	br	23a3c <__alt_data_end+0xfffeb39c>
   23f84:	1007883a 	mov	r3,r2
   23f88:	0023883a 	mov	r17,zero
   23f8c:	880a927a 	slli	r5,r17,9
   23f90:	1805883a 	mov	r2,r3
   23f94:	8822977a 	slli	r17,r17,29
   23f98:	280ad33a 	srli	r5,r5,12
   23f9c:	003ff406 	br	23f70 <__alt_data_end+0xfffeb8d0>
   23fa0:	10c003cc 	andi	r3,r2,15
   23fa4:	01000104 	movi	r4,4
   23fa8:	193ff626 	beq	r3,r4,23f84 <__alt_data_end+0xfffeb8e4>
   23fac:	0023883a 	mov	r17,zero
   23fb0:	003fd506 	br	23f08 <__alt_data_end+0xfffeb868>
   23fb4:	0005883a 	mov	r2,zero
   23fb8:	003fe706 	br	23f58 <__alt_data_end+0xfffeb8b8>
   23fbc:	00800434 	movhi	r2,16
   23fc0:	89400234 	orhi	r5,r17,8
   23fc4:	10bfffc4 	addi	r2,r2,-1
   23fc8:	b02b883a 	mov	r21,r22
   23fcc:	288a703a 	and	r5,r5,r2
   23fd0:	4029883a 	mov	r20,r8
   23fd4:	003eff06 	br	23bd4 <__alt_data_end+0xfffeb534>

00023fd8 <__subdf3>:
   23fd8:	02000434 	movhi	r8,16
   23fdc:	423fffc4 	addi	r8,r8,-1
   23fe0:	defffb04 	addi	sp,sp,-20
   23fe4:	2a14703a 	and	r10,r5,r8
   23fe8:	3812d53a 	srli	r9,r7,20
   23fec:	3a10703a 	and	r8,r7,r8
   23ff0:	2006d77a 	srli	r3,r4,29
   23ff4:	3004d77a 	srli	r2,r6,29
   23ff8:	dc000015 	stw	r16,0(sp)
   23ffc:	501490fa 	slli	r10,r10,3
   24000:	2820d53a 	srli	r16,r5,20
   24004:	401090fa 	slli	r8,r8,3
   24008:	dc800215 	stw	r18,8(sp)
   2400c:	dc400115 	stw	r17,4(sp)
   24010:	dfc00415 	stw	ra,16(sp)
   24014:	202290fa 	slli	r17,r4,3
   24018:	dcc00315 	stw	r19,12(sp)
   2401c:	4a41ffcc 	andi	r9,r9,2047
   24020:	0101ffc4 	movi	r4,2047
   24024:	2824d7fa 	srli	r18,r5,31
   24028:	8401ffcc 	andi	r16,r16,2047
   2402c:	50c6b03a 	or	r3,r10,r3
   24030:	380ed7fa 	srli	r7,r7,31
   24034:	408ab03a 	or	r5,r8,r2
   24038:	300c90fa 	slli	r6,r6,3
   2403c:	49009626 	beq	r9,r4,24298 <__subdf3+0x2c0>
   24040:	39c0005c 	xori	r7,r7,1
   24044:	8245c83a 	sub	r2,r16,r9
   24048:	3c807426 	beq	r7,r18,2421c <__subdf3+0x244>
   2404c:	0080af0e 	bge	zero,r2,2430c <__subdf3+0x334>
   24050:	48002a1e 	bne	r9,zero,240fc <__subdf3+0x124>
   24054:	2988b03a 	or	r4,r5,r6
   24058:	20009a1e 	bne	r4,zero,242c4 <__subdf3+0x2ec>
   2405c:	888001cc 	andi	r2,r17,7
   24060:	10000726 	beq	r2,zero,24080 <__subdf3+0xa8>
   24064:	888003cc 	andi	r2,r17,15
   24068:	01000104 	movi	r4,4
   2406c:	11000426 	beq	r2,r4,24080 <__subdf3+0xa8>
   24070:	890b883a 	add	r5,r17,r4
   24074:	2c63803a 	cmpltu	r17,r5,r17
   24078:	1c47883a 	add	r3,r3,r17
   2407c:	2823883a 	mov	r17,r5
   24080:	1880202c 	andhi	r2,r3,128
   24084:	10005926 	beq	r2,zero,241ec <__subdf3+0x214>
   24088:	84000044 	addi	r16,r16,1
   2408c:	0081ffc4 	movi	r2,2047
   24090:	8080be26 	beq	r16,r2,2438c <__subdf3+0x3b4>
   24094:	017fe034 	movhi	r5,65408
   24098:	297fffc4 	addi	r5,r5,-1
   2409c:	1946703a 	and	r3,r3,r5
   240a0:	1804977a 	slli	r2,r3,29
   240a4:	1806927a 	slli	r3,r3,9
   240a8:	8822d0fa 	srli	r17,r17,3
   240ac:	8401ffcc 	andi	r16,r16,2047
   240b0:	180ad33a 	srli	r5,r3,12
   240b4:	9100004c 	andi	r4,r18,1
   240b8:	1444b03a 	or	r2,r2,r17
   240bc:	80c1ffcc 	andi	r3,r16,2047
   240c0:	1820953a 	slli	r16,r3,20
   240c4:	20c03fcc 	andi	r3,r4,255
   240c8:	180897fa 	slli	r4,r3,31
   240cc:	00c00434 	movhi	r3,16
   240d0:	18ffffc4 	addi	r3,r3,-1
   240d4:	28c6703a 	and	r3,r5,r3
   240d8:	1c06b03a 	or	r3,r3,r16
   240dc:	1906b03a 	or	r3,r3,r4
   240e0:	dfc00417 	ldw	ra,16(sp)
   240e4:	dcc00317 	ldw	r19,12(sp)
   240e8:	dc800217 	ldw	r18,8(sp)
   240ec:	dc400117 	ldw	r17,4(sp)
   240f0:	dc000017 	ldw	r16,0(sp)
   240f4:	dec00504 	addi	sp,sp,20
   240f8:	f800283a 	ret
   240fc:	0101ffc4 	movi	r4,2047
   24100:	813fd626 	beq	r16,r4,2405c <__alt_data_end+0xfffeb9bc>
   24104:	29402034 	orhi	r5,r5,128
   24108:	01000e04 	movi	r4,56
   2410c:	2080a316 	blt	r4,r2,2439c <__subdf3+0x3c4>
   24110:	010007c4 	movi	r4,31
   24114:	2080c616 	blt	r4,r2,24430 <__subdf3+0x458>
   24118:	01000804 	movi	r4,32
   2411c:	2089c83a 	sub	r4,r4,r2
   24120:	2910983a 	sll	r8,r5,r4
   24124:	308ed83a 	srl	r7,r6,r2
   24128:	3108983a 	sll	r4,r6,r4
   2412c:	2884d83a 	srl	r2,r5,r2
   24130:	41ccb03a 	or	r6,r8,r7
   24134:	2008c03a 	cmpne	r4,r4,zero
   24138:	310cb03a 	or	r6,r6,r4
   2413c:	898dc83a 	sub	r6,r17,r6
   24140:	89a3803a 	cmpltu	r17,r17,r6
   24144:	1887c83a 	sub	r3,r3,r2
   24148:	1c47c83a 	sub	r3,r3,r17
   2414c:	3023883a 	mov	r17,r6
   24150:	1880202c 	andhi	r2,r3,128
   24154:	10002326 	beq	r2,zero,241e4 <__subdf3+0x20c>
   24158:	04c02034 	movhi	r19,128
   2415c:	9cffffc4 	addi	r19,r19,-1
   24160:	1ce6703a 	and	r19,r3,r19
   24164:	98007a26 	beq	r19,zero,24350 <__subdf3+0x378>
   24168:	9809883a 	mov	r4,r19
   2416c:	0024a300 	call	24a30 <__clzsi2>
   24170:	113ffe04 	addi	r4,r2,-8
   24174:	00c007c4 	movi	r3,31
   24178:	19007b16 	blt	r3,r4,24368 <__subdf3+0x390>
   2417c:	00800804 	movi	r2,32
   24180:	1105c83a 	sub	r2,r2,r4
   24184:	8884d83a 	srl	r2,r17,r2
   24188:	9906983a 	sll	r3,r19,r4
   2418c:	8922983a 	sll	r17,r17,r4
   24190:	10c4b03a 	or	r2,r2,r3
   24194:	24007816 	blt	r4,r16,24378 <__subdf3+0x3a0>
   24198:	2421c83a 	sub	r16,r4,r16
   2419c:	80c00044 	addi	r3,r16,1
   241a0:	010007c4 	movi	r4,31
   241a4:	20c09516 	blt	r4,r3,243fc <__subdf3+0x424>
   241a8:	01400804 	movi	r5,32
   241ac:	28cbc83a 	sub	r5,r5,r3
   241b0:	88c8d83a 	srl	r4,r17,r3
   241b4:	8962983a 	sll	r17,r17,r5
   241b8:	114a983a 	sll	r5,r2,r5
   241bc:	10c6d83a 	srl	r3,r2,r3
   241c0:	8804c03a 	cmpne	r2,r17,zero
   241c4:	290ab03a 	or	r5,r5,r4
   241c8:	28a2b03a 	or	r17,r5,r2
   241cc:	0021883a 	mov	r16,zero
   241d0:	003fa206 	br	2405c <__alt_data_end+0xfffeb9bc>
   241d4:	2090b03a 	or	r8,r4,r2
   241d8:	40018e26 	beq	r8,zero,24814 <__subdf3+0x83c>
   241dc:	1007883a 	mov	r3,r2
   241e0:	2023883a 	mov	r17,r4
   241e4:	888001cc 	andi	r2,r17,7
   241e8:	103f9e1e 	bne	r2,zero,24064 <__alt_data_end+0xfffeb9c4>
   241ec:	1804977a 	slli	r2,r3,29
   241f0:	8822d0fa 	srli	r17,r17,3
   241f4:	1810d0fa 	srli	r8,r3,3
   241f8:	9100004c 	andi	r4,r18,1
   241fc:	1444b03a 	or	r2,r2,r17
   24200:	00c1ffc4 	movi	r3,2047
   24204:	80c02826 	beq	r16,r3,242a8 <__subdf3+0x2d0>
   24208:	01400434 	movhi	r5,16
   2420c:	297fffc4 	addi	r5,r5,-1
   24210:	80e0703a 	and	r16,r16,r3
   24214:	414a703a 	and	r5,r8,r5
   24218:	003fa806 	br	240bc <__alt_data_end+0xfffeba1c>
   2421c:	0080630e 	bge	zero,r2,243ac <__subdf3+0x3d4>
   24220:	48003026 	beq	r9,zero,242e4 <__subdf3+0x30c>
   24224:	0101ffc4 	movi	r4,2047
   24228:	813f8c26 	beq	r16,r4,2405c <__alt_data_end+0xfffeb9bc>
   2422c:	29402034 	orhi	r5,r5,128
   24230:	01000e04 	movi	r4,56
   24234:	2080a90e 	bge	r4,r2,244dc <__subdf3+0x504>
   24238:	298cb03a 	or	r6,r5,r6
   2423c:	3012c03a 	cmpne	r9,r6,zero
   24240:	0005883a 	mov	r2,zero
   24244:	4c53883a 	add	r9,r9,r17
   24248:	4c63803a 	cmpltu	r17,r9,r17
   2424c:	10c7883a 	add	r3,r2,r3
   24250:	88c7883a 	add	r3,r17,r3
   24254:	4823883a 	mov	r17,r9
   24258:	1880202c 	andhi	r2,r3,128
   2425c:	1000d026 	beq	r2,zero,245a0 <__subdf3+0x5c8>
   24260:	84000044 	addi	r16,r16,1
   24264:	0081ffc4 	movi	r2,2047
   24268:	8080fe26 	beq	r16,r2,24664 <__subdf3+0x68c>
   2426c:	00bfe034 	movhi	r2,65408
   24270:	10bfffc4 	addi	r2,r2,-1
   24274:	1886703a 	and	r3,r3,r2
   24278:	880ad07a 	srli	r5,r17,1
   2427c:	180497fa 	slli	r2,r3,31
   24280:	8900004c 	andi	r4,r17,1
   24284:	2922b03a 	or	r17,r5,r4
   24288:	1806d07a 	srli	r3,r3,1
   2428c:	1462b03a 	or	r17,r2,r17
   24290:	3825883a 	mov	r18,r7
   24294:	003f7106 	br	2405c <__alt_data_end+0xfffeb9bc>
   24298:	2984b03a 	or	r2,r5,r6
   2429c:	103f6826 	beq	r2,zero,24040 <__alt_data_end+0xfffeb9a0>
   242a0:	39c03fcc 	andi	r7,r7,255
   242a4:	003f6706 	br	24044 <__alt_data_end+0xfffeb9a4>
   242a8:	4086b03a 	or	r3,r8,r2
   242ac:	18015226 	beq	r3,zero,247f8 <__subdf3+0x820>
   242b0:	00c00434 	movhi	r3,16
   242b4:	41400234 	orhi	r5,r8,8
   242b8:	18ffffc4 	addi	r3,r3,-1
   242bc:	28ca703a 	and	r5,r5,r3
   242c0:	003f7e06 	br	240bc <__alt_data_end+0xfffeba1c>
   242c4:	10bfffc4 	addi	r2,r2,-1
   242c8:	1000491e 	bne	r2,zero,243f0 <__subdf3+0x418>
   242cc:	898fc83a 	sub	r7,r17,r6
   242d0:	89e3803a 	cmpltu	r17,r17,r7
   242d4:	1947c83a 	sub	r3,r3,r5
   242d8:	1c47c83a 	sub	r3,r3,r17
   242dc:	3823883a 	mov	r17,r7
   242e0:	003f9b06 	br	24150 <__alt_data_end+0xfffebab0>
   242e4:	2988b03a 	or	r4,r5,r6
   242e8:	203f5c26 	beq	r4,zero,2405c <__alt_data_end+0xfffeb9bc>
   242ec:	10bfffc4 	addi	r2,r2,-1
   242f0:	1000931e 	bne	r2,zero,24540 <__subdf3+0x568>
   242f4:	898d883a 	add	r6,r17,r6
   242f8:	3463803a 	cmpltu	r17,r6,r17
   242fc:	1947883a 	add	r3,r3,r5
   24300:	88c7883a 	add	r3,r17,r3
   24304:	3023883a 	mov	r17,r6
   24308:	003fd306 	br	24258 <__alt_data_end+0xfffebbb8>
   2430c:	1000541e 	bne	r2,zero,24460 <__subdf3+0x488>
   24310:	80800044 	addi	r2,r16,1
   24314:	1081ffcc 	andi	r2,r2,2047
   24318:	01000044 	movi	r4,1
   2431c:	2080a20e 	bge	r4,r2,245a8 <__subdf3+0x5d0>
   24320:	8989c83a 	sub	r4,r17,r6
   24324:	8905803a 	cmpltu	r2,r17,r4
   24328:	1967c83a 	sub	r19,r3,r5
   2432c:	98a7c83a 	sub	r19,r19,r2
   24330:	9880202c 	andhi	r2,r19,128
   24334:	10006326 	beq	r2,zero,244c4 <__subdf3+0x4ec>
   24338:	3463c83a 	sub	r17,r6,r17
   2433c:	28c7c83a 	sub	r3,r5,r3
   24340:	344d803a 	cmpltu	r6,r6,r17
   24344:	19a7c83a 	sub	r19,r3,r6
   24348:	3825883a 	mov	r18,r7
   2434c:	983f861e 	bne	r19,zero,24168 <__alt_data_end+0xfffebac8>
   24350:	8809883a 	mov	r4,r17
   24354:	0024a300 	call	24a30 <__clzsi2>
   24358:	10800804 	addi	r2,r2,32
   2435c:	113ffe04 	addi	r4,r2,-8
   24360:	00c007c4 	movi	r3,31
   24364:	193f850e 	bge	r3,r4,2417c <__alt_data_end+0xfffebadc>
   24368:	10bff604 	addi	r2,r2,-40
   2436c:	8884983a 	sll	r2,r17,r2
   24370:	0023883a 	mov	r17,zero
   24374:	243f880e 	bge	r4,r16,24198 <__alt_data_end+0xfffebaf8>
   24378:	00ffe034 	movhi	r3,65408
   2437c:	18ffffc4 	addi	r3,r3,-1
   24380:	8121c83a 	sub	r16,r16,r4
   24384:	10c6703a 	and	r3,r2,r3
   24388:	003f3406 	br	2405c <__alt_data_end+0xfffeb9bc>
   2438c:	9100004c 	andi	r4,r18,1
   24390:	000b883a 	mov	r5,zero
   24394:	0005883a 	mov	r2,zero
   24398:	003f4806 	br	240bc <__alt_data_end+0xfffeba1c>
   2439c:	298cb03a 	or	r6,r5,r6
   243a0:	300cc03a 	cmpne	r6,r6,zero
   243a4:	0005883a 	mov	r2,zero
   243a8:	003f6406 	br	2413c <__alt_data_end+0xfffeba9c>
   243ac:	10009a1e 	bne	r2,zero,24618 <__subdf3+0x640>
   243b0:	82400044 	addi	r9,r16,1
   243b4:	4881ffcc 	andi	r2,r9,2047
   243b8:	02800044 	movi	r10,1
   243bc:	5080670e 	bge	r10,r2,2455c <__subdf3+0x584>
   243c0:	0081ffc4 	movi	r2,2047
   243c4:	4880af26 	beq	r9,r2,24684 <__subdf3+0x6ac>
   243c8:	898d883a 	add	r6,r17,r6
   243cc:	1945883a 	add	r2,r3,r5
   243d0:	3447803a 	cmpltu	r3,r6,r17
   243d4:	1887883a 	add	r3,r3,r2
   243d8:	182297fa 	slli	r17,r3,31
   243dc:	300cd07a 	srli	r6,r6,1
   243e0:	1806d07a 	srli	r3,r3,1
   243e4:	4821883a 	mov	r16,r9
   243e8:	89a2b03a 	or	r17,r17,r6
   243ec:	003f1b06 	br	2405c <__alt_data_end+0xfffeb9bc>
   243f0:	0101ffc4 	movi	r4,2047
   243f4:	813f441e 	bne	r16,r4,24108 <__alt_data_end+0xfffeba68>
   243f8:	003f1806 	br	2405c <__alt_data_end+0xfffeb9bc>
   243fc:	843ff844 	addi	r16,r16,-31
   24400:	01400804 	movi	r5,32
   24404:	1408d83a 	srl	r4,r2,r16
   24408:	19405026 	beq	r3,r5,2454c <__subdf3+0x574>
   2440c:	01401004 	movi	r5,64
   24410:	28c7c83a 	sub	r3,r5,r3
   24414:	10c4983a 	sll	r2,r2,r3
   24418:	88a2b03a 	or	r17,r17,r2
   2441c:	8822c03a 	cmpne	r17,r17,zero
   24420:	2462b03a 	or	r17,r4,r17
   24424:	0007883a 	mov	r3,zero
   24428:	0021883a 	mov	r16,zero
   2442c:	003f6d06 	br	241e4 <__alt_data_end+0xfffebb44>
   24430:	11fff804 	addi	r7,r2,-32
   24434:	01000804 	movi	r4,32
   24438:	29ced83a 	srl	r7,r5,r7
   2443c:	11004526 	beq	r2,r4,24554 <__subdf3+0x57c>
   24440:	01001004 	movi	r4,64
   24444:	2089c83a 	sub	r4,r4,r2
   24448:	2904983a 	sll	r2,r5,r4
   2444c:	118cb03a 	or	r6,r2,r6
   24450:	300cc03a 	cmpne	r6,r6,zero
   24454:	398cb03a 	or	r6,r7,r6
   24458:	0005883a 	mov	r2,zero
   2445c:	003f3706 	br	2413c <__alt_data_end+0xfffeba9c>
   24460:	80002a26 	beq	r16,zero,2450c <__subdf3+0x534>
   24464:	0101ffc4 	movi	r4,2047
   24468:	49006626 	beq	r9,r4,24604 <__subdf3+0x62c>
   2446c:	0085c83a 	sub	r2,zero,r2
   24470:	18c02034 	orhi	r3,r3,128
   24474:	01000e04 	movi	r4,56
   24478:	20807e16 	blt	r4,r2,24674 <__subdf3+0x69c>
   2447c:	010007c4 	movi	r4,31
   24480:	2080e716 	blt	r4,r2,24820 <__subdf3+0x848>
   24484:	01000804 	movi	r4,32
   24488:	2089c83a 	sub	r4,r4,r2
   2448c:	1914983a 	sll	r10,r3,r4
   24490:	8890d83a 	srl	r8,r17,r2
   24494:	8908983a 	sll	r4,r17,r4
   24498:	1884d83a 	srl	r2,r3,r2
   2449c:	5222b03a 	or	r17,r10,r8
   244a0:	2006c03a 	cmpne	r3,r4,zero
   244a4:	88e2b03a 	or	r17,r17,r3
   244a8:	3463c83a 	sub	r17,r6,r17
   244ac:	2885c83a 	sub	r2,r5,r2
   244b0:	344d803a 	cmpltu	r6,r6,r17
   244b4:	1187c83a 	sub	r3,r2,r6
   244b8:	4821883a 	mov	r16,r9
   244bc:	3825883a 	mov	r18,r7
   244c0:	003f2306 	br	24150 <__alt_data_end+0xfffebab0>
   244c4:	24d0b03a 	or	r8,r4,r19
   244c8:	40001b1e 	bne	r8,zero,24538 <__subdf3+0x560>
   244cc:	0005883a 	mov	r2,zero
   244d0:	0009883a 	mov	r4,zero
   244d4:	0021883a 	mov	r16,zero
   244d8:	003f4906 	br	24200 <__alt_data_end+0xfffebb60>
   244dc:	010007c4 	movi	r4,31
   244e0:	20803a16 	blt	r4,r2,245cc <__subdf3+0x5f4>
   244e4:	01000804 	movi	r4,32
   244e8:	2089c83a 	sub	r4,r4,r2
   244ec:	2912983a 	sll	r9,r5,r4
   244f0:	3090d83a 	srl	r8,r6,r2
   244f4:	3108983a 	sll	r4,r6,r4
   244f8:	2884d83a 	srl	r2,r5,r2
   244fc:	4a12b03a 	or	r9,r9,r8
   24500:	2008c03a 	cmpne	r4,r4,zero
   24504:	4912b03a 	or	r9,r9,r4
   24508:	003f4e06 	br	24244 <__alt_data_end+0xfffebba4>
   2450c:	1c48b03a 	or	r4,r3,r17
   24510:	20003c26 	beq	r4,zero,24604 <__subdf3+0x62c>
   24514:	0084303a 	nor	r2,zero,r2
   24518:	1000381e 	bne	r2,zero,245fc <__subdf3+0x624>
   2451c:	3463c83a 	sub	r17,r6,r17
   24520:	28c5c83a 	sub	r2,r5,r3
   24524:	344d803a 	cmpltu	r6,r6,r17
   24528:	1187c83a 	sub	r3,r2,r6
   2452c:	4821883a 	mov	r16,r9
   24530:	3825883a 	mov	r18,r7
   24534:	003f0606 	br	24150 <__alt_data_end+0xfffebab0>
   24538:	2023883a 	mov	r17,r4
   2453c:	003f0906 	br	24164 <__alt_data_end+0xfffebac4>
   24540:	0101ffc4 	movi	r4,2047
   24544:	813f3a1e 	bne	r16,r4,24230 <__alt_data_end+0xfffebb90>
   24548:	003ec406 	br	2405c <__alt_data_end+0xfffeb9bc>
   2454c:	0005883a 	mov	r2,zero
   24550:	003fb106 	br	24418 <__alt_data_end+0xfffebd78>
   24554:	0005883a 	mov	r2,zero
   24558:	003fbc06 	br	2444c <__alt_data_end+0xfffebdac>
   2455c:	1c44b03a 	or	r2,r3,r17
   24560:	80008e1e 	bne	r16,zero,2479c <__subdf3+0x7c4>
   24564:	1000c826 	beq	r2,zero,24888 <__subdf3+0x8b0>
   24568:	2984b03a 	or	r2,r5,r6
   2456c:	103ebb26 	beq	r2,zero,2405c <__alt_data_end+0xfffeb9bc>
   24570:	8989883a 	add	r4,r17,r6
   24574:	1945883a 	add	r2,r3,r5
   24578:	2447803a 	cmpltu	r3,r4,r17
   2457c:	1887883a 	add	r3,r3,r2
   24580:	1880202c 	andhi	r2,r3,128
   24584:	2023883a 	mov	r17,r4
   24588:	103f1626 	beq	r2,zero,241e4 <__alt_data_end+0xfffebb44>
   2458c:	00bfe034 	movhi	r2,65408
   24590:	10bfffc4 	addi	r2,r2,-1
   24594:	5021883a 	mov	r16,r10
   24598:	1886703a 	and	r3,r3,r2
   2459c:	003eaf06 	br	2405c <__alt_data_end+0xfffeb9bc>
   245a0:	3825883a 	mov	r18,r7
   245a4:	003f0f06 	br	241e4 <__alt_data_end+0xfffebb44>
   245a8:	1c44b03a 	or	r2,r3,r17
   245ac:	8000251e 	bne	r16,zero,24644 <__subdf3+0x66c>
   245b0:	1000661e 	bne	r2,zero,2474c <__subdf3+0x774>
   245b4:	2990b03a 	or	r8,r5,r6
   245b8:	40009626 	beq	r8,zero,24814 <__subdf3+0x83c>
   245bc:	2807883a 	mov	r3,r5
   245c0:	3023883a 	mov	r17,r6
   245c4:	3825883a 	mov	r18,r7
   245c8:	003ea406 	br	2405c <__alt_data_end+0xfffeb9bc>
   245cc:	127ff804 	addi	r9,r2,-32
   245d0:	01000804 	movi	r4,32
   245d4:	2a52d83a 	srl	r9,r5,r9
   245d8:	11008c26 	beq	r2,r4,2480c <__subdf3+0x834>
   245dc:	01001004 	movi	r4,64
   245e0:	2085c83a 	sub	r2,r4,r2
   245e4:	2884983a 	sll	r2,r5,r2
   245e8:	118cb03a 	or	r6,r2,r6
   245ec:	300cc03a 	cmpne	r6,r6,zero
   245f0:	4992b03a 	or	r9,r9,r6
   245f4:	0005883a 	mov	r2,zero
   245f8:	003f1206 	br	24244 <__alt_data_end+0xfffebba4>
   245fc:	0101ffc4 	movi	r4,2047
   24600:	493f9c1e 	bne	r9,r4,24474 <__alt_data_end+0xfffebdd4>
   24604:	2807883a 	mov	r3,r5
   24608:	3023883a 	mov	r17,r6
   2460c:	4821883a 	mov	r16,r9
   24610:	3825883a 	mov	r18,r7
   24614:	003e9106 	br	2405c <__alt_data_end+0xfffeb9bc>
   24618:	80001f1e 	bne	r16,zero,24698 <__subdf3+0x6c0>
   2461c:	1c48b03a 	or	r4,r3,r17
   24620:	20005a26 	beq	r4,zero,2478c <__subdf3+0x7b4>
   24624:	0084303a 	nor	r2,zero,r2
   24628:	1000561e 	bne	r2,zero,24784 <__subdf3+0x7ac>
   2462c:	89a3883a 	add	r17,r17,r6
   24630:	1945883a 	add	r2,r3,r5
   24634:	898d803a 	cmpltu	r6,r17,r6
   24638:	3087883a 	add	r3,r6,r2
   2463c:	4821883a 	mov	r16,r9
   24640:	003f0506 	br	24258 <__alt_data_end+0xfffebbb8>
   24644:	10002b1e 	bne	r2,zero,246f4 <__subdf3+0x71c>
   24648:	2984b03a 	or	r2,r5,r6
   2464c:	10008026 	beq	r2,zero,24850 <__subdf3+0x878>
   24650:	2807883a 	mov	r3,r5
   24654:	3023883a 	mov	r17,r6
   24658:	3825883a 	mov	r18,r7
   2465c:	0401ffc4 	movi	r16,2047
   24660:	003e7e06 	br	2405c <__alt_data_end+0xfffeb9bc>
   24664:	3809883a 	mov	r4,r7
   24668:	0011883a 	mov	r8,zero
   2466c:	0005883a 	mov	r2,zero
   24670:	003ee306 	br	24200 <__alt_data_end+0xfffebb60>
   24674:	1c62b03a 	or	r17,r3,r17
   24678:	8822c03a 	cmpne	r17,r17,zero
   2467c:	0005883a 	mov	r2,zero
   24680:	003f8906 	br	244a8 <__alt_data_end+0xfffebe08>
   24684:	3809883a 	mov	r4,r7
   24688:	4821883a 	mov	r16,r9
   2468c:	0011883a 	mov	r8,zero
   24690:	0005883a 	mov	r2,zero
   24694:	003eda06 	br	24200 <__alt_data_end+0xfffebb60>
   24698:	0101ffc4 	movi	r4,2047
   2469c:	49003b26 	beq	r9,r4,2478c <__subdf3+0x7b4>
   246a0:	0085c83a 	sub	r2,zero,r2
   246a4:	18c02034 	orhi	r3,r3,128
   246a8:	01000e04 	movi	r4,56
   246ac:	20806e16 	blt	r4,r2,24868 <__subdf3+0x890>
   246b0:	010007c4 	movi	r4,31
   246b4:	20807716 	blt	r4,r2,24894 <__subdf3+0x8bc>
   246b8:	01000804 	movi	r4,32
   246bc:	2089c83a 	sub	r4,r4,r2
   246c0:	1914983a 	sll	r10,r3,r4
   246c4:	8890d83a 	srl	r8,r17,r2
   246c8:	8908983a 	sll	r4,r17,r4
   246cc:	1884d83a 	srl	r2,r3,r2
   246d0:	5222b03a 	or	r17,r10,r8
   246d4:	2006c03a 	cmpne	r3,r4,zero
   246d8:	88e2b03a 	or	r17,r17,r3
   246dc:	89a3883a 	add	r17,r17,r6
   246e0:	1145883a 	add	r2,r2,r5
   246e4:	898d803a 	cmpltu	r6,r17,r6
   246e8:	3087883a 	add	r3,r6,r2
   246ec:	4821883a 	mov	r16,r9
   246f0:	003ed906 	br	24258 <__alt_data_end+0xfffebbb8>
   246f4:	2984b03a 	or	r2,r5,r6
   246f8:	10004226 	beq	r2,zero,24804 <__subdf3+0x82c>
   246fc:	1808d0fa 	srli	r4,r3,3
   24700:	8822d0fa 	srli	r17,r17,3
   24704:	1806977a 	slli	r3,r3,29
   24708:	2080022c 	andhi	r2,r4,8
   2470c:	1c62b03a 	or	r17,r3,r17
   24710:	10000826 	beq	r2,zero,24734 <__subdf3+0x75c>
   24714:	2812d0fa 	srli	r9,r5,3
   24718:	4880022c 	andhi	r2,r9,8
   2471c:	1000051e 	bne	r2,zero,24734 <__subdf3+0x75c>
   24720:	300cd0fa 	srli	r6,r6,3
   24724:	2804977a 	slli	r2,r5,29
   24728:	4809883a 	mov	r4,r9
   2472c:	3825883a 	mov	r18,r7
   24730:	11a2b03a 	or	r17,r2,r6
   24734:	8806d77a 	srli	r3,r17,29
   24738:	200890fa 	slli	r4,r4,3
   2473c:	882290fa 	slli	r17,r17,3
   24740:	0401ffc4 	movi	r16,2047
   24744:	1906b03a 	or	r3,r3,r4
   24748:	003e4406 	br	2405c <__alt_data_end+0xfffeb9bc>
   2474c:	2984b03a 	or	r2,r5,r6
   24750:	103e4226 	beq	r2,zero,2405c <__alt_data_end+0xfffeb9bc>
   24754:	8989c83a 	sub	r4,r17,r6
   24758:	8911803a 	cmpltu	r8,r17,r4
   2475c:	1945c83a 	sub	r2,r3,r5
   24760:	1205c83a 	sub	r2,r2,r8
   24764:	1200202c 	andhi	r8,r2,128
   24768:	403e9a26 	beq	r8,zero,241d4 <__alt_data_end+0xfffebb34>
   2476c:	3463c83a 	sub	r17,r6,r17
   24770:	28c5c83a 	sub	r2,r5,r3
   24774:	344d803a 	cmpltu	r6,r6,r17
   24778:	1187c83a 	sub	r3,r2,r6
   2477c:	3825883a 	mov	r18,r7
   24780:	003e3606 	br	2405c <__alt_data_end+0xfffeb9bc>
   24784:	0101ffc4 	movi	r4,2047
   24788:	493fc71e 	bne	r9,r4,246a8 <__alt_data_end+0xfffec008>
   2478c:	2807883a 	mov	r3,r5
   24790:	3023883a 	mov	r17,r6
   24794:	4821883a 	mov	r16,r9
   24798:	003e3006 	br	2405c <__alt_data_end+0xfffeb9bc>
   2479c:	10003626 	beq	r2,zero,24878 <__subdf3+0x8a0>
   247a0:	2984b03a 	or	r2,r5,r6
   247a4:	10001726 	beq	r2,zero,24804 <__subdf3+0x82c>
   247a8:	1808d0fa 	srli	r4,r3,3
   247ac:	8822d0fa 	srli	r17,r17,3
   247b0:	1806977a 	slli	r3,r3,29
   247b4:	2080022c 	andhi	r2,r4,8
   247b8:	1c62b03a 	or	r17,r3,r17
   247bc:	10000726 	beq	r2,zero,247dc <__subdf3+0x804>
   247c0:	2812d0fa 	srli	r9,r5,3
   247c4:	4880022c 	andhi	r2,r9,8
   247c8:	1000041e 	bne	r2,zero,247dc <__subdf3+0x804>
   247cc:	300cd0fa 	srli	r6,r6,3
   247d0:	2804977a 	slli	r2,r5,29
   247d4:	4809883a 	mov	r4,r9
   247d8:	11a2b03a 	or	r17,r2,r6
   247dc:	8806d77a 	srli	r3,r17,29
   247e0:	200890fa 	slli	r4,r4,3
   247e4:	882290fa 	slli	r17,r17,3
   247e8:	3825883a 	mov	r18,r7
   247ec:	1906b03a 	or	r3,r3,r4
   247f0:	0401ffc4 	movi	r16,2047
   247f4:	003e1906 	br	2405c <__alt_data_end+0xfffeb9bc>
   247f8:	000b883a 	mov	r5,zero
   247fc:	0005883a 	mov	r2,zero
   24800:	003e2e06 	br	240bc <__alt_data_end+0xfffeba1c>
   24804:	0401ffc4 	movi	r16,2047
   24808:	003e1406 	br	2405c <__alt_data_end+0xfffeb9bc>
   2480c:	0005883a 	mov	r2,zero
   24810:	003f7506 	br	245e8 <__alt_data_end+0xfffebf48>
   24814:	0005883a 	mov	r2,zero
   24818:	0009883a 	mov	r4,zero
   2481c:	003e7806 	br	24200 <__alt_data_end+0xfffebb60>
   24820:	123ff804 	addi	r8,r2,-32
   24824:	01000804 	movi	r4,32
   24828:	1a10d83a 	srl	r8,r3,r8
   2482c:	11002526 	beq	r2,r4,248c4 <__subdf3+0x8ec>
   24830:	01001004 	movi	r4,64
   24834:	2085c83a 	sub	r2,r4,r2
   24838:	1884983a 	sll	r2,r3,r2
   2483c:	1444b03a 	or	r2,r2,r17
   24840:	1004c03a 	cmpne	r2,r2,zero
   24844:	40a2b03a 	or	r17,r8,r2
   24848:	0005883a 	mov	r2,zero
   2484c:	003f1606 	br	244a8 <__alt_data_end+0xfffebe08>
   24850:	02000434 	movhi	r8,16
   24854:	0009883a 	mov	r4,zero
   24858:	423fffc4 	addi	r8,r8,-1
   2485c:	00bfffc4 	movi	r2,-1
   24860:	0401ffc4 	movi	r16,2047
   24864:	003e6606 	br	24200 <__alt_data_end+0xfffebb60>
   24868:	1c62b03a 	or	r17,r3,r17
   2486c:	8822c03a 	cmpne	r17,r17,zero
   24870:	0005883a 	mov	r2,zero
   24874:	003f9906 	br	246dc <__alt_data_end+0xfffec03c>
   24878:	2807883a 	mov	r3,r5
   2487c:	3023883a 	mov	r17,r6
   24880:	0401ffc4 	movi	r16,2047
   24884:	003df506 	br	2405c <__alt_data_end+0xfffeb9bc>
   24888:	2807883a 	mov	r3,r5
   2488c:	3023883a 	mov	r17,r6
   24890:	003df206 	br	2405c <__alt_data_end+0xfffeb9bc>
   24894:	123ff804 	addi	r8,r2,-32
   24898:	01000804 	movi	r4,32
   2489c:	1a10d83a 	srl	r8,r3,r8
   248a0:	11000a26 	beq	r2,r4,248cc <__subdf3+0x8f4>
   248a4:	01001004 	movi	r4,64
   248a8:	2085c83a 	sub	r2,r4,r2
   248ac:	1884983a 	sll	r2,r3,r2
   248b0:	1444b03a 	or	r2,r2,r17
   248b4:	1004c03a 	cmpne	r2,r2,zero
   248b8:	40a2b03a 	or	r17,r8,r2
   248bc:	0005883a 	mov	r2,zero
   248c0:	003f8606 	br	246dc <__alt_data_end+0xfffec03c>
   248c4:	0005883a 	mov	r2,zero
   248c8:	003fdc06 	br	2483c <__alt_data_end+0xfffec19c>
   248cc:	0005883a 	mov	r2,zero
   248d0:	003ff706 	br	248b0 <__alt_data_end+0xfffec210>

000248d4 <__fixdfsi>:
   248d4:	280cd53a 	srli	r6,r5,20
   248d8:	00c00434 	movhi	r3,16
   248dc:	18ffffc4 	addi	r3,r3,-1
   248e0:	3181ffcc 	andi	r6,r6,2047
   248e4:	01c0ff84 	movi	r7,1022
   248e8:	28c6703a 	and	r3,r5,r3
   248ec:	280ad7fa 	srli	r5,r5,31
   248f0:	3980120e 	bge	r7,r6,2493c <__fixdfsi+0x68>
   248f4:	00810744 	movi	r2,1053
   248f8:	11800c16 	blt	r2,r6,2492c <__fixdfsi+0x58>
   248fc:	00810cc4 	movi	r2,1075
   24900:	1185c83a 	sub	r2,r2,r6
   24904:	01c007c4 	movi	r7,31
   24908:	18c00434 	orhi	r3,r3,16
   2490c:	38800d16 	blt	r7,r2,24944 <__fixdfsi+0x70>
   24910:	31befb44 	addi	r6,r6,-1043
   24914:	2084d83a 	srl	r2,r4,r2
   24918:	1986983a 	sll	r3,r3,r6
   2491c:	1884b03a 	or	r2,r3,r2
   24920:	28000726 	beq	r5,zero,24940 <__fixdfsi+0x6c>
   24924:	0085c83a 	sub	r2,zero,r2
   24928:	f800283a 	ret
   2492c:	00a00034 	movhi	r2,32768
   24930:	10bfffc4 	addi	r2,r2,-1
   24934:	2885883a 	add	r2,r5,r2
   24938:	f800283a 	ret
   2493c:	0005883a 	mov	r2,zero
   24940:	f800283a 	ret
   24944:	008104c4 	movi	r2,1043
   24948:	1185c83a 	sub	r2,r2,r6
   2494c:	1884d83a 	srl	r2,r3,r2
   24950:	003ff306 	br	24920 <__alt_data_end+0xfffec280>

00024954 <__floatsidf>:
   24954:	defffd04 	addi	sp,sp,-12
   24958:	dfc00215 	stw	ra,8(sp)
   2495c:	dc400115 	stw	r17,4(sp)
   24960:	dc000015 	stw	r16,0(sp)
   24964:	20002b26 	beq	r4,zero,24a14 <__floatsidf+0xc0>
   24968:	2023883a 	mov	r17,r4
   2496c:	2020d7fa 	srli	r16,r4,31
   24970:	20002d16 	blt	r4,zero,24a28 <__floatsidf+0xd4>
   24974:	8809883a 	mov	r4,r17
   24978:	0024a300 	call	24a30 <__clzsi2>
   2497c:	01410784 	movi	r5,1054
   24980:	288bc83a 	sub	r5,r5,r2
   24984:	01010cc4 	movi	r4,1075
   24988:	2149c83a 	sub	r4,r4,r5
   2498c:	00c007c4 	movi	r3,31
   24990:	1900160e 	bge	r3,r4,249ec <__floatsidf+0x98>
   24994:	00c104c4 	movi	r3,1043
   24998:	1947c83a 	sub	r3,r3,r5
   2499c:	88c6983a 	sll	r3,r17,r3
   249a0:	00800434 	movhi	r2,16
   249a4:	10bfffc4 	addi	r2,r2,-1
   249a8:	1886703a 	and	r3,r3,r2
   249ac:	2941ffcc 	andi	r5,r5,2047
   249b0:	800d883a 	mov	r6,r16
   249b4:	0005883a 	mov	r2,zero
   249b8:	280a953a 	slli	r5,r5,20
   249bc:	31803fcc 	andi	r6,r6,255
   249c0:	01000434 	movhi	r4,16
   249c4:	300c97fa 	slli	r6,r6,31
   249c8:	213fffc4 	addi	r4,r4,-1
   249cc:	1906703a 	and	r3,r3,r4
   249d0:	1946b03a 	or	r3,r3,r5
   249d4:	1986b03a 	or	r3,r3,r6
   249d8:	dfc00217 	ldw	ra,8(sp)
   249dc:	dc400117 	ldw	r17,4(sp)
   249e0:	dc000017 	ldw	r16,0(sp)
   249e4:	dec00304 	addi	sp,sp,12
   249e8:	f800283a 	ret
   249ec:	00c002c4 	movi	r3,11
   249f0:	1887c83a 	sub	r3,r3,r2
   249f4:	88c6d83a 	srl	r3,r17,r3
   249f8:	8904983a 	sll	r2,r17,r4
   249fc:	01000434 	movhi	r4,16
   24a00:	213fffc4 	addi	r4,r4,-1
   24a04:	2941ffcc 	andi	r5,r5,2047
   24a08:	1906703a 	and	r3,r3,r4
   24a0c:	800d883a 	mov	r6,r16
   24a10:	003fe906 	br	249b8 <__alt_data_end+0xfffec318>
   24a14:	000d883a 	mov	r6,zero
   24a18:	000b883a 	mov	r5,zero
   24a1c:	0007883a 	mov	r3,zero
   24a20:	0005883a 	mov	r2,zero
   24a24:	003fe406 	br	249b8 <__alt_data_end+0xfffec318>
   24a28:	0123c83a 	sub	r17,zero,r4
   24a2c:	003fd106 	br	24974 <__alt_data_end+0xfffec2d4>

00024a30 <__clzsi2>:
   24a30:	00bfffd4 	movui	r2,65535
   24a34:	11000536 	bltu	r2,r4,24a4c <__clzsi2+0x1c>
   24a38:	00803fc4 	movi	r2,255
   24a3c:	11000f36 	bltu	r2,r4,24a7c <__clzsi2+0x4c>
   24a40:	00800804 	movi	r2,32
   24a44:	0007883a 	mov	r3,zero
   24a48:	00000506 	br	24a60 <__clzsi2+0x30>
   24a4c:	00804034 	movhi	r2,256
   24a50:	10bfffc4 	addi	r2,r2,-1
   24a54:	11000c2e 	bgeu	r2,r4,24a88 <__clzsi2+0x58>
   24a58:	00800204 	movi	r2,8
   24a5c:	00c00604 	movi	r3,24
   24a60:	20c8d83a 	srl	r4,r4,r3
   24a64:	00c000b4 	movhi	r3,2
   24a68:	18daff84 	addi	r3,r3,27646
   24a6c:	1909883a 	add	r4,r3,r4
   24a70:	20c00003 	ldbu	r3,0(r4)
   24a74:	10c5c83a 	sub	r2,r2,r3
   24a78:	f800283a 	ret
   24a7c:	00800604 	movi	r2,24
   24a80:	00c00204 	movi	r3,8
   24a84:	003ff606 	br	24a60 <__alt_data_end+0xfffec3c0>
   24a88:	00800404 	movi	r2,16
   24a8c:	1007883a 	mov	r3,r2
   24a90:	003ff306 	br	24a60 <__alt_data_end+0xfffec3c0>

00024a94 <memset>:
   24a94:	2005883a 	mov	r2,r4
   24a98:	2007883a 	mov	r3,r4
   24a9c:	218d883a 	add	r6,r4,r6
   24aa0:	19800326 	beq	r3,r6,24ab0 <memset+0x1c>
   24aa4:	19400005 	stb	r5,0(r3)
   24aa8:	18c00044 	addi	r3,r3,1
   24aac:	003ffc06 	br	24aa0 <__alt_data_end+0xfffec400>
   24ab0:	f800283a 	ret

00024ab4 <_printf_r>:
   24ab4:	defffd04 	addi	sp,sp,-12
   24ab8:	dfc00015 	stw	ra,0(sp)
   24abc:	d9800115 	stw	r6,4(sp)
   24ac0:	d9c00215 	stw	r7,8(sp)
   24ac4:	20c00217 	ldw	r3,8(r4)
   24ac8:	018000b4 	movhi	r6,2
   24acc:	31946604 	addi	r6,r6,20888
   24ad0:	19800115 	stw	r6,4(r3)
   24ad4:	280d883a 	mov	r6,r5
   24ad8:	21400217 	ldw	r5,8(r4)
   24adc:	d9c00104 	addi	r7,sp,4
   24ae0:	0024c580 	call	24c58 <___vfprintf_internal_r>
   24ae4:	dfc00017 	ldw	ra,0(sp)
   24ae8:	dec00304 	addi	sp,sp,12
   24aec:	f800283a 	ret

00024af0 <printf>:
   24af0:	defffc04 	addi	sp,sp,-16
   24af4:	dfc00015 	stw	ra,0(sp)
   24af8:	d9400115 	stw	r5,4(sp)
   24afc:	d9800215 	stw	r6,8(sp)
   24b00:	d9c00315 	stw	r7,12(sp)
   24b04:	008000b4 	movhi	r2,2
   24b08:	109c1704 	addi	r2,r2,28764
   24b0c:	10800017 	ldw	r2,0(r2)
   24b10:	014000b4 	movhi	r5,2
   24b14:	29546604 	addi	r5,r5,20888
   24b18:	10c00217 	ldw	r3,8(r2)
   24b1c:	d9800104 	addi	r6,sp,4
   24b20:	19400115 	stw	r5,4(r3)
   24b24:	200b883a 	mov	r5,r4
   24b28:	11000217 	ldw	r4,8(r2)
   24b2c:	002517c0 	call	2517c <__vfprintf_internal>
   24b30:	dfc00017 	ldw	ra,0(sp)
   24b34:	dec00404 	addi	sp,sp,16
   24b38:	f800283a 	ret

00024b3c <_puts_r>:
   24b3c:	defffd04 	addi	sp,sp,-12
   24b40:	dc000015 	stw	r16,0(sp)
   24b44:	2021883a 	mov	r16,r4
   24b48:	2809883a 	mov	r4,r5
   24b4c:	dfc00215 	stw	ra,8(sp)
   24b50:	dc400115 	stw	r17,4(sp)
   24b54:	2823883a 	mov	r17,r5
   24b58:	0024bd00 	call	24bd0 <strlen>
   24b5c:	81400217 	ldw	r5,8(r16)
   24b60:	010000b4 	movhi	r4,2
   24b64:	21146604 	addi	r4,r4,20888
   24b68:	29000115 	stw	r4,4(r5)
   24b6c:	100f883a 	mov	r7,r2
   24b70:	880d883a 	mov	r6,r17
   24b74:	8009883a 	mov	r4,r16
   24b78:	00251980 	call	25198 <__sfvwrite_small_dev>
   24b7c:	00ffffc4 	movi	r3,-1
   24b80:	10c00926 	beq	r2,r3,24ba8 <_puts_r+0x6c>
   24b84:	81400217 	ldw	r5,8(r16)
   24b88:	018000b4 	movhi	r6,2
   24b8c:	01c00044 	movi	r7,1
   24b90:	28800117 	ldw	r2,4(r5)
   24b94:	319b4004 	addi	r6,r6,27904
   24b98:	8009883a 	mov	r4,r16
   24b9c:	103ee83a 	callr	r2
   24ba0:	10bfffe0 	cmpeqi	r2,r2,-1
   24ba4:	0085c83a 	sub	r2,zero,r2
   24ba8:	dfc00217 	ldw	ra,8(sp)
   24bac:	dc400117 	ldw	r17,4(sp)
   24bb0:	dc000017 	ldw	r16,0(sp)
   24bb4:	dec00304 	addi	sp,sp,12
   24bb8:	f800283a 	ret

00024bbc <puts>:
   24bbc:	008000b4 	movhi	r2,2
   24bc0:	109c1704 	addi	r2,r2,28764
   24bc4:	200b883a 	mov	r5,r4
   24bc8:	11000017 	ldw	r4,0(r2)
   24bcc:	0024b3c1 	jmpi	24b3c <_puts_r>

00024bd0 <strlen>:
   24bd0:	2005883a 	mov	r2,r4
   24bd4:	10c00007 	ldb	r3,0(r2)
   24bd8:	18000226 	beq	r3,zero,24be4 <strlen+0x14>
   24bdc:	10800044 	addi	r2,r2,1
   24be0:	003ffc06 	br	24bd4 <__alt_data_end+0xfffec534>
   24be4:	1105c83a 	sub	r2,r2,r4
   24be8:	f800283a 	ret

00024bec <print_repeat>:
   24bec:	defffb04 	addi	sp,sp,-20
   24bf0:	dc800315 	stw	r18,12(sp)
   24bf4:	dc400215 	stw	r17,8(sp)
   24bf8:	dc000115 	stw	r16,4(sp)
   24bfc:	dfc00415 	stw	ra,16(sp)
   24c00:	2025883a 	mov	r18,r4
   24c04:	2823883a 	mov	r17,r5
   24c08:	d9800005 	stb	r6,0(sp)
   24c0c:	3821883a 	mov	r16,r7
   24c10:	04000a0e 	bge	zero,r16,24c3c <print_repeat+0x50>
   24c14:	88800117 	ldw	r2,4(r17)
   24c18:	01c00044 	movi	r7,1
   24c1c:	d80d883a 	mov	r6,sp
   24c20:	880b883a 	mov	r5,r17
   24c24:	9009883a 	mov	r4,r18
   24c28:	103ee83a 	callr	r2
   24c2c:	843fffc4 	addi	r16,r16,-1
   24c30:	103ff726 	beq	r2,zero,24c10 <__alt_data_end+0xfffec570>
   24c34:	00bfffc4 	movi	r2,-1
   24c38:	00000106 	br	24c40 <print_repeat+0x54>
   24c3c:	0005883a 	mov	r2,zero
   24c40:	dfc00417 	ldw	ra,16(sp)
   24c44:	dc800317 	ldw	r18,12(sp)
   24c48:	dc400217 	ldw	r17,8(sp)
   24c4c:	dc000117 	ldw	r16,4(sp)
   24c50:	dec00504 	addi	sp,sp,20
   24c54:	f800283a 	ret

00024c58 <___vfprintf_internal_r>:
   24c58:	deffe504 	addi	sp,sp,-108
   24c5c:	d8c00804 	addi	r3,sp,32
   24c60:	df001915 	stw	fp,100(sp)
   24c64:	ddc01815 	stw	r23,96(sp)
   24c68:	dd801715 	stw	r22,92(sp)
   24c6c:	dd401615 	stw	r21,88(sp)
   24c70:	dd001515 	stw	r20,84(sp)
   24c74:	dcc01415 	stw	r19,80(sp)
   24c78:	dc801315 	stw	r18,76(sp)
   24c7c:	dc401215 	stw	r17,72(sp)
   24c80:	dc001115 	stw	r16,68(sp)
   24c84:	dfc01a15 	stw	ra,104(sp)
   24c88:	2027883a 	mov	r19,r4
   24c8c:	2839883a 	mov	fp,r5
   24c90:	382d883a 	mov	r22,r7
   24c94:	d9800f15 	stw	r6,60(sp)
   24c98:	0021883a 	mov	r16,zero
   24c9c:	d8000e15 	stw	zero,56(sp)
   24ca0:	002f883a 	mov	r23,zero
   24ca4:	002b883a 	mov	r21,zero
   24ca8:	0025883a 	mov	r18,zero
   24cac:	0023883a 	mov	r17,zero
   24cb0:	d8000c15 	stw	zero,48(sp)
   24cb4:	d8000b15 	stw	zero,44(sp)
   24cb8:	0029883a 	mov	r20,zero
   24cbc:	d8c00915 	stw	r3,36(sp)
   24cc0:	d8c00f17 	ldw	r3,60(sp)
   24cc4:	19000003 	ldbu	r4,0(r3)
   24cc8:	20803fcc 	andi	r2,r4,255
   24ccc:	1080201c 	xori	r2,r2,128
   24cd0:	10bfe004 	addi	r2,r2,-128
   24cd4:	10011c26 	beq	r2,zero,25148 <___vfprintf_internal_r+0x4f0>
   24cd8:	00c00044 	movi	r3,1
   24cdc:	a0c01426 	beq	r20,r3,24d30 <___vfprintf_internal_r+0xd8>
   24ce0:	1d000216 	blt	r3,r20,24cec <___vfprintf_internal_r+0x94>
   24ce4:	a0000626 	beq	r20,zero,24d00 <___vfprintf_internal_r+0xa8>
   24ce8:	00011306 	br	25138 <___vfprintf_internal_r+0x4e0>
   24cec:	01400084 	movi	r5,2
   24cf0:	a1401d26 	beq	r20,r5,24d68 <___vfprintf_internal_r+0x110>
   24cf4:	014000c4 	movi	r5,3
   24cf8:	a1402926 	beq	r20,r5,24da0 <___vfprintf_internal_r+0x148>
   24cfc:	00010e06 	br	25138 <___vfprintf_internal_r+0x4e0>
   24d00:	01400944 	movi	r5,37
   24d04:	1140fb26 	beq	r2,r5,250f4 <___vfprintf_internal_r+0x49c>
   24d08:	e0800117 	ldw	r2,4(fp)
   24d0c:	d9000005 	stb	r4,0(sp)
   24d10:	01c00044 	movi	r7,1
   24d14:	d80d883a 	mov	r6,sp
   24d18:	e00b883a 	mov	r5,fp
   24d1c:	9809883a 	mov	r4,r19
   24d20:	103ee83a 	callr	r2
   24d24:	1000d61e 	bne	r2,zero,25080 <___vfprintf_internal_r+0x428>
   24d28:	84000044 	addi	r16,r16,1
   24d2c:	00010206 	br	25138 <___vfprintf_internal_r+0x4e0>
   24d30:	01400c04 	movi	r5,48
   24d34:	1140f826 	beq	r2,r5,25118 <___vfprintf_internal_r+0x4c0>
   24d38:	01400944 	movi	r5,37
   24d3c:	11400a1e 	bne	r2,r5,24d68 <___vfprintf_internal_r+0x110>
   24d40:	d8800005 	stb	r2,0(sp)
   24d44:	e0800117 	ldw	r2,4(fp)
   24d48:	a00f883a 	mov	r7,r20
   24d4c:	d80d883a 	mov	r6,sp
   24d50:	e00b883a 	mov	r5,fp
   24d54:	9809883a 	mov	r4,r19
   24d58:	103ee83a 	callr	r2
   24d5c:	1000c81e 	bne	r2,zero,25080 <___vfprintf_internal_r+0x428>
   24d60:	84000044 	addi	r16,r16,1
   24d64:	0000f306 	br	25134 <___vfprintf_internal_r+0x4dc>
   24d68:	217ff404 	addi	r5,r4,-48
   24d6c:	29403fcc 	andi	r5,r5,255
   24d70:	00c00244 	movi	r3,9
   24d74:	19400736 	bltu	r3,r5,24d94 <___vfprintf_internal_r+0x13c>
   24d78:	00bfffc4 	movi	r2,-1
   24d7c:	88800226 	beq	r17,r2,24d88 <___vfprintf_internal_r+0x130>
   24d80:	8c4002a4 	muli	r17,r17,10
   24d84:	00000106 	br	24d8c <___vfprintf_internal_r+0x134>
   24d88:	0023883a 	mov	r17,zero
   24d8c:	2c63883a 	add	r17,r5,r17
   24d90:	0000e206 	br	2511c <___vfprintf_internal_r+0x4c4>
   24d94:	01400b84 	movi	r5,46
   24d98:	1140e426 	beq	r2,r5,2512c <___vfprintf_internal_r+0x4d4>
   24d9c:	05000084 	movi	r20,2
   24da0:	213ff404 	addi	r4,r4,-48
   24da4:	21003fcc 	andi	r4,r4,255
   24da8:	00c00244 	movi	r3,9
   24dac:	19000736 	bltu	r3,r4,24dcc <___vfprintf_internal_r+0x174>
   24db0:	00bfffc4 	movi	r2,-1
   24db4:	90800226 	beq	r18,r2,24dc0 <___vfprintf_internal_r+0x168>
   24db8:	948002a4 	muli	r18,r18,10
   24dbc:	00000106 	br	24dc4 <___vfprintf_internal_r+0x16c>
   24dc0:	0025883a 	mov	r18,zero
   24dc4:	24a5883a 	add	r18,r4,r18
   24dc8:	0000db06 	br	25138 <___vfprintf_internal_r+0x4e0>
   24dcc:	00c01b04 	movi	r3,108
   24dd0:	10c0d426 	beq	r2,r3,25124 <___vfprintf_internal_r+0x4cc>
   24dd4:	013fffc4 	movi	r4,-1
   24dd8:	91000226 	beq	r18,r4,24de4 <___vfprintf_internal_r+0x18c>
   24ddc:	d8000b15 	stw	zero,44(sp)
   24de0:	00000106 	br	24de8 <___vfprintf_internal_r+0x190>
   24de4:	04800044 	movi	r18,1
   24de8:	01001a44 	movi	r4,105
   24dec:	11001626 	beq	r2,r4,24e48 <___vfprintf_internal_r+0x1f0>
   24df0:	20800916 	blt	r4,r2,24e18 <___vfprintf_internal_r+0x1c0>
   24df4:	010018c4 	movi	r4,99
   24df8:	11008a26 	beq	r2,r4,25024 <___vfprintf_internal_r+0x3cc>
   24dfc:	01001904 	movi	r4,100
   24e00:	11001126 	beq	r2,r4,24e48 <___vfprintf_internal_r+0x1f0>
   24e04:	01001604 	movi	r4,88
   24e08:	1100ca1e 	bne	r2,r4,25134 <___vfprintf_internal_r+0x4dc>
   24e0c:	00c00044 	movi	r3,1
   24e10:	d8c00e15 	stw	r3,56(sp)
   24e14:	00001406 	br	24e68 <___vfprintf_internal_r+0x210>
   24e18:	01001cc4 	movi	r4,115
   24e1c:	11009a26 	beq	r2,r4,25088 <___vfprintf_internal_r+0x430>
   24e20:	20800416 	blt	r4,r2,24e34 <___vfprintf_internal_r+0x1dc>
   24e24:	01001bc4 	movi	r4,111
   24e28:	1100c21e 	bne	r2,r4,25134 <___vfprintf_internal_r+0x4dc>
   24e2c:	05400204 	movi	r21,8
   24e30:	00000e06 	br	24e6c <___vfprintf_internal_r+0x214>
   24e34:	01001d44 	movi	r4,117
   24e38:	11000c26 	beq	r2,r4,24e6c <___vfprintf_internal_r+0x214>
   24e3c:	01001e04 	movi	r4,120
   24e40:	11000926 	beq	r2,r4,24e68 <___vfprintf_internal_r+0x210>
   24e44:	0000bb06 	br	25134 <___vfprintf_internal_r+0x4dc>
   24e48:	b5000104 	addi	r20,r22,4
   24e4c:	b8000726 	beq	r23,zero,24e6c <___vfprintf_internal_r+0x214>
   24e50:	dd000d15 	stw	r20,52(sp)
   24e54:	b5800017 	ldw	r22,0(r22)
   24e58:	b000080e 	bge	r22,zero,24e7c <___vfprintf_internal_r+0x224>
   24e5c:	05adc83a 	sub	r22,zero,r22
   24e60:	02800044 	movi	r10,1
   24e64:	00000606 	br	24e80 <___vfprintf_internal_r+0x228>
   24e68:	05400404 	movi	r21,16
   24e6c:	b0c00104 	addi	r3,r22,4
   24e70:	d8c00d15 	stw	r3,52(sp)
   24e74:	b5800017 	ldw	r22,0(r22)
   24e78:	002f883a 	mov	r23,zero
   24e7c:	0015883a 	mov	r10,zero
   24e80:	d829883a 	mov	r20,sp
   24e84:	b0001426 	beq	r22,zero,24ed8 <___vfprintf_internal_r+0x280>
   24e88:	b009883a 	mov	r4,r22
   24e8c:	a80b883a 	mov	r5,r21
   24e90:	da801015 	stw	r10,64(sp)
   24e94:	00224a00 	call	224a0 <__udivsi3>
   24e98:	1549383a 	mul	r4,r2,r21
   24e9c:	00c00244 	movi	r3,9
   24ea0:	da801017 	ldw	r10,64(sp)
   24ea4:	b12dc83a 	sub	r22,r22,r4
   24ea8:	1d800216 	blt	r3,r22,24eb4 <___vfprintf_internal_r+0x25c>
   24eac:	b5800c04 	addi	r22,r22,48
   24eb0:	00000506 	br	24ec8 <___vfprintf_internal_r+0x270>
   24eb4:	d8c00e17 	ldw	r3,56(sp)
   24eb8:	18000226 	beq	r3,zero,24ec4 <___vfprintf_internal_r+0x26c>
   24ebc:	b5800dc4 	addi	r22,r22,55
   24ec0:	00000106 	br	24ec8 <___vfprintf_internal_r+0x270>
   24ec4:	b58015c4 	addi	r22,r22,87
   24ec8:	a5800005 	stb	r22,0(r20)
   24ecc:	a5000044 	addi	r20,r20,1
   24ed0:	102d883a 	mov	r22,r2
   24ed4:	003feb06 	br	24e84 <__alt_data_end+0xfffec7e4>
   24ed8:	a6c7c83a 	sub	r3,r20,sp
   24edc:	d8c00a15 	stw	r3,40(sp)
   24ee0:	90c5c83a 	sub	r2,r18,r3
   24ee4:	00800a0e 	bge	zero,r2,24f10 <___vfprintf_internal_r+0x2b8>
   24ee8:	a085883a 	add	r2,r20,r2
   24eec:	01400c04 	movi	r5,48
   24ef0:	d8c00917 	ldw	r3,36(sp)
   24ef4:	a009883a 	mov	r4,r20
   24ef8:	a0c0032e 	bgeu	r20,r3,24f08 <___vfprintf_internal_r+0x2b0>
   24efc:	a5000044 	addi	r20,r20,1
   24f00:	21400005 	stb	r5,0(r4)
   24f04:	a0bffa1e 	bne	r20,r2,24ef0 <__alt_data_end+0xfffec850>
   24f08:	a6c7c83a 	sub	r3,r20,sp
   24f0c:	d8c00a15 	stw	r3,40(sp)
   24f10:	d8c00a17 	ldw	r3,40(sp)
   24f14:	50d3883a 	add	r9,r10,r3
   24f18:	d8c00b17 	ldw	r3,44(sp)
   24f1c:	8a6dc83a 	sub	r22,r17,r9
   24f20:	18001726 	beq	r3,zero,24f80 <___vfprintf_internal_r+0x328>
   24f24:	50000a26 	beq	r10,zero,24f50 <___vfprintf_internal_r+0x2f8>
   24f28:	00800b44 	movi	r2,45
   24f2c:	d8800805 	stb	r2,32(sp)
   24f30:	e0800117 	ldw	r2,4(fp)
   24f34:	01c00044 	movi	r7,1
   24f38:	d9800804 	addi	r6,sp,32
   24f3c:	e00b883a 	mov	r5,fp
   24f40:	9809883a 	mov	r4,r19
   24f44:	103ee83a 	callr	r2
   24f48:	10004d1e 	bne	r2,zero,25080 <___vfprintf_internal_r+0x428>
   24f4c:	84000044 	addi	r16,r16,1
   24f50:	0580070e 	bge	zero,r22,24f70 <___vfprintf_internal_r+0x318>
   24f54:	b00f883a 	mov	r7,r22
   24f58:	01800c04 	movi	r6,48
   24f5c:	e00b883a 	mov	r5,fp
   24f60:	9809883a 	mov	r4,r19
   24f64:	0024bec0 	call	24bec <print_repeat>
   24f68:	1000451e 	bne	r2,zero,25080 <___vfprintf_internal_r+0x428>
   24f6c:	85a1883a 	add	r16,r16,r22
   24f70:	d8c00a17 	ldw	r3,40(sp)
   24f74:	a013883a 	mov	r9,r20
   24f78:	1d2dc83a 	sub	r22,r3,r20
   24f7c:	00002206 	br	25008 <___vfprintf_internal_r+0x3b0>
   24f80:	0580090e 	bge	zero,r22,24fa8 <___vfprintf_internal_r+0x350>
   24f84:	b00f883a 	mov	r7,r22
   24f88:	01800804 	movi	r6,32
   24f8c:	e00b883a 	mov	r5,fp
   24f90:	9809883a 	mov	r4,r19
   24f94:	da801015 	stw	r10,64(sp)
   24f98:	0024bec0 	call	24bec <print_repeat>
   24f9c:	da801017 	ldw	r10,64(sp)
   24fa0:	1000371e 	bne	r2,zero,25080 <___vfprintf_internal_r+0x428>
   24fa4:	85a1883a 	add	r16,r16,r22
   24fa8:	503ff126 	beq	r10,zero,24f70 <__alt_data_end+0xfffec8d0>
   24fac:	00800b44 	movi	r2,45
   24fb0:	d8800805 	stb	r2,32(sp)
   24fb4:	e0800117 	ldw	r2,4(fp)
   24fb8:	01c00044 	movi	r7,1
   24fbc:	d9800804 	addi	r6,sp,32
   24fc0:	e00b883a 	mov	r5,fp
   24fc4:	9809883a 	mov	r4,r19
   24fc8:	103ee83a 	callr	r2
   24fcc:	10002c1e 	bne	r2,zero,25080 <___vfprintf_internal_r+0x428>
   24fd0:	84000044 	addi	r16,r16,1
   24fd4:	003fe606 	br	24f70 <__alt_data_end+0xfffec8d0>
   24fd8:	4a7fffc4 	addi	r9,r9,-1
   24fdc:	48800003 	ldbu	r2,0(r9)
   24fe0:	01c00044 	movi	r7,1
   24fe4:	d9800804 	addi	r6,sp,32
   24fe8:	d8800805 	stb	r2,32(sp)
   24fec:	e0800117 	ldw	r2,4(fp)
   24ff0:	e00b883a 	mov	r5,fp
   24ff4:	da401015 	stw	r9,64(sp)
   24ff8:	9809883a 	mov	r4,r19
   24ffc:	103ee83a 	callr	r2
   25000:	da401017 	ldw	r9,64(sp)
   25004:	10001e1e 	bne	r2,zero,25080 <___vfprintf_internal_r+0x428>
   25008:	8245c83a 	sub	r2,r16,r9
   2500c:	4d89883a 	add	r4,r9,r22
   25010:	a085883a 	add	r2,r20,r2
   25014:	013ff016 	blt	zero,r4,24fd8 <__alt_data_end+0xfffec938>
   25018:	1021883a 	mov	r16,r2
   2501c:	dd800d17 	ldw	r22,52(sp)
   25020:	00004406 	br	25134 <___vfprintf_internal_r+0x4dc>
   25024:	00800044 	movi	r2,1
   25028:	1440080e 	bge	r2,r17,2504c <___vfprintf_internal_r+0x3f4>
   2502c:	8d3fffc4 	addi	r20,r17,-1
   25030:	a00f883a 	mov	r7,r20
   25034:	01800804 	movi	r6,32
   25038:	e00b883a 	mov	r5,fp
   2503c:	9809883a 	mov	r4,r19
   25040:	0024bec0 	call	24bec <print_repeat>
   25044:	10000e1e 	bne	r2,zero,25080 <___vfprintf_internal_r+0x428>
   25048:	8521883a 	add	r16,r16,r20
   2504c:	b0800017 	ldw	r2,0(r22)
   25050:	01c00044 	movi	r7,1
   25054:	d80d883a 	mov	r6,sp
   25058:	d8800005 	stb	r2,0(sp)
   2505c:	e0800117 	ldw	r2,4(fp)
   25060:	e00b883a 	mov	r5,fp
   25064:	9809883a 	mov	r4,r19
   25068:	b5000104 	addi	r20,r22,4
   2506c:	103ee83a 	callr	r2
   25070:	1000031e 	bne	r2,zero,25080 <___vfprintf_internal_r+0x428>
   25074:	84000044 	addi	r16,r16,1
   25078:	a02d883a 	mov	r22,r20
   2507c:	00002d06 	br	25134 <___vfprintf_internal_r+0x4dc>
   25080:	00bfffc4 	movi	r2,-1
   25084:	00003106 	br	2514c <___vfprintf_internal_r+0x4f4>
   25088:	b5000017 	ldw	r20,0(r22)
   2508c:	b0c00104 	addi	r3,r22,4
   25090:	d8c00a15 	stw	r3,40(sp)
   25094:	a009883a 	mov	r4,r20
   25098:	0024bd00 	call	24bd0 <strlen>
   2509c:	8893c83a 	sub	r9,r17,r2
   250a0:	102d883a 	mov	r22,r2
   250a4:	0240090e 	bge	zero,r9,250cc <___vfprintf_internal_r+0x474>
   250a8:	480f883a 	mov	r7,r9
   250ac:	01800804 	movi	r6,32
   250b0:	e00b883a 	mov	r5,fp
   250b4:	9809883a 	mov	r4,r19
   250b8:	da401015 	stw	r9,64(sp)
   250bc:	0024bec0 	call	24bec <print_repeat>
   250c0:	da401017 	ldw	r9,64(sp)
   250c4:	103fee1e 	bne	r2,zero,25080 <__alt_data_end+0xfffec9e0>
   250c8:	8261883a 	add	r16,r16,r9
   250cc:	e0800117 	ldw	r2,4(fp)
   250d0:	b00f883a 	mov	r7,r22
   250d4:	a00d883a 	mov	r6,r20
   250d8:	e00b883a 	mov	r5,fp
   250dc:	9809883a 	mov	r4,r19
   250e0:	103ee83a 	callr	r2
   250e4:	103fe61e 	bne	r2,zero,25080 <__alt_data_end+0xfffec9e0>
   250e8:	85a1883a 	add	r16,r16,r22
   250ec:	dd800a17 	ldw	r22,40(sp)
   250f0:	00001006 	br	25134 <___vfprintf_internal_r+0x4dc>
   250f4:	05c00044 	movi	r23,1
   250f8:	04bfffc4 	movi	r18,-1
   250fc:	d8000e15 	stw	zero,56(sp)
   25100:	05400284 	movi	r21,10
   25104:	9023883a 	mov	r17,r18
   25108:	d8000c15 	stw	zero,48(sp)
   2510c:	d8000b15 	stw	zero,44(sp)
   25110:	b829883a 	mov	r20,r23
   25114:	00000806 	br	25138 <___vfprintf_internal_r+0x4e0>
   25118:	dd000b15 	stw	r20,44(sp)
   2511c:	05000084 	movi	r20,2
   25120:	00000506 	br	25138 <___vfprintf_internal_r+0x4e0>
   25124:	00c00044 	movi	r3,1
   25128:	d8c00c15 	stw	r3,48(sp)
   2512c:	050000c4 	movi	r20,3
   25130:	00000106 	br	25138 <___vfprintf_internal_r+0x4e0>
   25134:	0029883a 	mov	r20,zero
   25138:	d8c00f17 	ldw	r3,60(sp)
   2513c:	18c00044 	addi	r3,r3,1
   25140:	d8c00f15 	stw	r3,60(sp)
   25144:	003ede06 	br	24cc0 <__alt_data_end+0xfffec620>
   25148:	8005883a 	mov	r2,r16
   2514c:	dfc01a17 	ldw	ra,104(sp)
   25150:	df001917 	ldw	fp,100(sp)
   25154:	ddc01817 	ldw	r23,96(sp)
   25158:	dd801717 	ldw	r22,92(sp)
   2515c:	dd401617 	ldw	r21,88(sp)
   25160:	dd001517 	ldw	r20,84(sp)
   25164:	dcc01417 	ldw	r19,80(sp)
   25168:	dc801317 	ldw	r18,76(sp)
   2516c:	dc401217 	ldw	r17,72(sp)
   25170:	dc001117 	ldw	r16,68(sp)
   25174:	dec01b04 	addi	sp,sp,108
   25178:	f800283a 	ret

0002517c <__vfprintf_internal>:
   2517c:	008000b4 	movhi	r2,2
   25180:	109c1704 	addi	r2,r2,28764
   25184:	300f883a 	mov	r7,r6
   25188:	280d883a 	mov	r6,r5
   2518c:	200b883a 	mov	r5,r4
   25190:	11000017 	ldw	r4,0(r2)
   25194:	0024c581 	jmpi	24c58 <___vfprintf_internal_r>

00025198 <__sfvwrite_small_dev>:
   25198:	2880000b 	ldhu	r2,0(r5)
   2519c:	1080020c 	andi	r2,r2,8
   251a0:	10002126 	beq	r2,zero,25228 <__sfvwrite_small_dev+0x90>
   251a4:	2880008f 	ldh	r2,2(r5)
   251a8:	defffa04 	addi	sp,sp,-24
   251ac:	dc000015 	stw	r16,0(sp)
   251b0:	dfc00515 	stw	ra,20(sp)
   251b4:	dd000415 	stw	r20,16(sp)
   251b8:	dcc00315 	stw	r19,12(sp)
   251bc:	dc800215 	stw	r18,8(sp)
   251c0:	dc400115 	stw	r17,4(sp)
   251c4:	2821883a 	mov	r16,r5
   251c8:	10001216 	blt	r2,zero,25214 <__sfvwrite_small_dev+0x7c>
   251cc:	2027883a 	mov	r19,r4
   251d0:	3025883a 	mov	r18,r6
   251d4:	3823883a 	mov	r17,r7
   251d8:	05010004 	movi	r20,1024
   251dc:	04400b0e 	bge	zero,r17,2520c <__sfvwrite_small_dev+0x74>
   251e0:	880f883a 	mov	r7,r17
   251e4:	a440010e 	bge	r20,r17,251ec <__sfvwrite_small_dev+0x54>
   251e8:	01c10004 	movi	r7,1024
   251ec:	8140008f 	ldh	r5,2(r16)
   251f0:	900d883a 	mov	r6,r18
   251f4:	9809883a 	mov	r4,r19
   251f8:	00252500 	call	25250 <_write_r>
   251fc:	0080050e 	bge	zero,r2,25214 <__sfvwrite_small_dev+0x7c>
   25200:	88a3c83a 	sub	r17,r17,r2
   25204:	90a5883a 	add	r18,r18,r2
   25208:	003ff406 	br	251dc <__alt_data_end+0xfffecb3c>
   2520c:	0005883a 	mov	r2,zero
   25210:	00000706 	br	25230 <__sfvwrite_small_dev+0x98>
   25214:	8080000b 	ldhu	r2,0(r16)
   25218:	10801014 	ori	r2,r2,64
   2521c:	8080000d 	sth	r2,0(r16)
   25220:	00bfffc4 	movi	r2,-1
   25224:	00000206 	br	25230 <__sfvwrite_small_dev+0x98>
   25228:	00bfffc4 	movi	r2,-1
   2522c:	f800283a 	ret
   25230:	dfc00517 	ldw	ra,20(sp)
   25234:	dd000417 	ldw	r20,16(sp)
   25238:	dcc00317 	ldw	r19,12(sp)
   2523c:	dc800217 	ldw	r18,8(sp)
   25240:	dc400117 	ldw	r17,4(sp)
   25244:	dc000017 	ldw	r16,0(sp)
   25248:	dec00604 	addi	sp,sp,24
   2524c:	f800283a 	ret

00025250 <_write_r>:
   25250:	defffd04 	addi	sp,sp,-12
   25254:	dc000015 	stw	r16,0(sp)
   25258:	040000b4 	movhi	r16,2
   2525c:	dc400115 	stw	r17,4(sp)
   25260:	841d0104 	addi	r16,r16,29700
   25264:	2023883a 	mov	r17,r4
   25268:	2809883a 	mov	r4,r5
   2526c:	300b883a 	mov	r5,r6
   25270:	380d883a 	mov	r6,r7
   25274:	dfc00215 	stw	ra,8(sp)
   25278:	80000015 	stw	zero,0(r16)
   2527c:	00255bc0 	call	255bc <write>
   25280:	00ffffc4 	movi	r3,-1
   25284:	10c0031e 	bne	r2,r3,25294 <_write_r+0x44>
   25288:	80c00017 	ldw	r3,0(r16)
   2528c:	18000126 	beq	r3,zero,25294 <_write_r+0x44>
   25290:	88c00015 	stw	r3,0(r17)
   25294:	dfc00217 	ldw	ra,8(sp)
   25298:	dc400117 	ldw	r17,4(sp)
   2529c:	dc000017 	ldw	r16,0(sp)
   252a0:	dec00304 	addi	sp,sp,12
   252a4:	f800283a 	ret

000252a8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   252a8:	defff004 	addi	sp,sp,-64
   252ac:	df000f15 	stw	fp,60(sp)
   252b0:	df000f04 	addi	fp,sp,60
   252b4:	e13ffd15 	stw	r4,-12(fp)
   252b8:	e17ffe15 	stw	r5,-8(fp)
   252bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   252c0:	00bffa84 	movi	r2,-22
   252c4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   252c8:	e0bffd17 	ldw	r2,-12(fp)
   252cc:	10800828 	cmpgeui	r2,r2,32
   252d0:	1000501e 	bne	r2,zero,25414 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   252d4:	0005303a 	rdctl	r2,status
   252d8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   252dc:	e0fff617 	ldw	r3,-40(fp)
   252e0:	00bfff84 	movi	r2,-2
   252e4:	1884703a 	and	r2,r3,r2
   252e8:	1001703a 	wrctl	status,r2
  
  return context;
   252ec:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   252f0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   252f4:	008000b4 	movhi	r2,2
   252f8:	109f7504 	addi	r2,r2,32212
   252fc:	e0fffd17 	ldw	r3,-12(fp)
   25300:	180690fa 	slli	r3,r3,3
   25304:	10c5883a 	add	r2,r2,r3
   25308:	e0ffff17 	ldw	r3,-4(fp)
   2530c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   25310:	008000b4 	movhi	r2,2
   25314:	109f7504 	addi	r2,r2,32212
   25318:	e0fffd17 	ldw	r3,-12(fp)
   2531c:	180690fa 	slli	r3,r3,3
   25320:	10c5883a 	add	r2,r2,r3
   25324:	10800104 	addi	r2,r2,4
   25328:	e0fffe17 	ldw	r3,-8(fp)
   2532c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   25330:	e0bfff17 	ldw	r2,-4(fp)
   25334:	10001926 	beq	r2,zero,2539c <alt_irq_register+0xf4>
   25338:	e0bffd17 	ldw	r2,-12(fp)
   2533c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25340:	0005303a 	rdctl	r2,status
   25344:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25348:	e0fff717 	ldw	r3,-36(fp)
   2534c:	00bfff84 	movi	r2,-2
   25350:	1884703a 	and	r2,r3,r2
   25354:	1001703a 	wrctl	status,r2
  
  return context;
   25358:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2535c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   25360:	00c00044 	movi	r3,1
   25364:	e0bff217 	ldw	r2,-56(fp)
   25368:	1884983a 	sll	r2,r3,r2
   2536c:	1007883a 	mov	r3,r2
   25370:	d0a0fb17 	ldw	r2,-31764(gp)
   25374:	1884b03a 	or	r2,r3,r2
   25378:	d0a0fb15 	stw	r2,-31764(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2537c:	d0a0fb17 	ldw	r2,-31764(gp)
   25380:	100170fa 	wrctl	ienable,r2
   25384:	e0bff817 	ldw	r2,-32(fp)
   25388:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2538c:	e0bff917 	ldw	r2,-28(fp)
   25390:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25394:	0005883a 	mov	r2,zero
   25398:	00001906 	br	25400 <alt_irq_register+0x158>
   2539c:	e0bffd17 	ldw	r2,-12(fp)
   253a0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   253a4:	0005303a 	rdctl	r2,status
   253a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   253ac:	e0fffa17 	ldw	r3,-24(fp)
   253b0:	00bfff84 	movi	r2,-2
   253b4:	1884703a 	and	r2,r3,r2
   253b8:	1001703a 	wrctl	status,r2
  
  return context;
   253bc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   253c0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   253c4:	00c00044 	movi	r3,1
   253c8:	e0bff417 	ldw	r2,-48(fp)
   253cc:	1884983a 	sll	r2,r3,r2
   253d0:	0084303a 	nor	r2,zero,r2
   253d4:	1007883a 	mov	r3,r2
   253d8:	d0a0fb17 	ldw	r2,-31764(gp)
   253dc:	1884703a 	and	r2,r3,r2
   253e0:	d0a0fb15 	stw	r2,-31764(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   253e4:	d0a0fb17 	ldw	r2,-31764(gp)
   253e8:	100170fa 	wrctl	ienable,r2
   253ec:	e0bffb17 	ldw	r2,-20(fp)
   253f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   253f4:	e0bffc17 	ldw	r2,-16(fp)
   253f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   253fc:	0005883a 	mov	r2,zero
   25400:	e0bff115 	stw	r2,-60(fp)
   25404:	e0bff317 	ldw	r2,-52(fp)
   25408:	e0bff515 	stw	r2,-44(fp)
   2540c:	e0bff517 	ldw	r2,-44(fp)
   25410:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   25414:	e0bff117 	ldw	r2,-60(fp)
}
   25418:	e037883a 	mov	sp,fp
   2541c:	df000017 	ldw	fp,0(sp)
   25420:	dec00104 	addi	sp,sp,4
   25424:	f800283a 	ret

00025428 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   25428:	defffc04 	addi	sp,sp,-16
   2542c:	df000315 	stw	fp,12(sp)
   25430:	df000304 	addi	fp,sp,12
   25434:	e13ffd15 	stw	r4,-12(fp)
   25438:	e17ffe15 	stw	r5,-8(fp)
   2543c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   25440:	e0fffe17 	ldw	r3,-8(fp)
   25444:	e0bffd17 	ldw	r2,-12(fp)
   25448:	18800c26 	beq	r3,r2,2547c <alt_load_section+0x54>
  {
    while( to != end )
   2544c:	00000806 	br	25470 <alt_load_section+0x48>
    {
      *to++ = *from++;
   25450:	e0bffe17 	ldw	r2,-8(fp)
   25454:	10c00104 	addi	r3,r2,4
   25458:	e0fffe15 	stw	r3,-8(fp)
   2545c:	e0fffd17 	ldw	r3,-12(fp)
   25460:	19000104 	addi	r4,r3,4
   25464:	e13ffd15 	stw	r4,-12(fp)
   25468:	18c00017 	ldw	r3,0(r3)
   2546c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   25470:	e0fffe17 	ldw	r3,-8(fp)
   25474:	e0bfff17 	ldw	r2,-4(fp)
   25478:	18bff51e 	bne	r3,r2,25450 <__alt_data_end+0xfffecdb0>
    {
      *to++ = *from++;
    }
  }
}
   2547c:	0001883a 	nop
   25480:	e037883a 	mov	sp,fp
   25484:	df000017 	ldw	fp,0(sp)
   25488:	dec00104 	addi	sp,sp,4
   2548c:	f800283a 	ret

00025490 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   25490:	defffe04 	addi	sp,sp,-8
   25494:	dfc00115 	stw	ra,4(sp)
   25498:	df000015 	stw	fp,0(sp)
   2549c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   254a0:	018000b4 	movhi	r6,2
   254a4:	319c2104 	addi	r6,r6,28804
   254a8:	014000b4 	movhi	r5,2
   254ac:	295b4f04 	addi	r5,r5,27964
   254b0:	010000b4 	movhi	r4,2
   254b4:	211c2104 	addi	r4,r4,28804
   254b8:	00254280 	call	25428 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   254bc:	018000b4 	movhi	r6,2
   254c0:	31809204 	addi	r6,r6,584
   254c4:	014000b4 	movhi	r5,2
   254c8:	29400804 	addi	r5,r5,32
   254cc:	010000b4 	movhi	r4,2
   254d0:	21000804 	addi	r4,r4,32
   254d4:	00254280 	call	25428 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   254d8:	018000b4 	movhi	r6,2
   254dc:	319b4f04 	addi	r6,r6,27964
   254e0:	014000b4 	movhi	r5,2
   254e4:	295acc04 	addi	r5,r5,27440
   254e8:	010000b4 	movhi	r4,2
   254ec:	211acc04 	addi	r4,r4,27440
   254f0:	00254280 	call	25428 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   254f4:	0025e940 	call	25e94 <alt_dcache_flush_all>
  alt_icache_flush_all();
   254f8:	0025fc00 	call	25fc0 <alt_icache_flush_all>
}
   254fc:	0001883a 	nop
   25500:	e037883a 	mov	sp,fp
   25504:	dfc00117 	ldw	ra,4(sp)
   25508:	df000017 	ldw	fp,0(sp)
   2550c:	dec00204 	addi	sp,sp,8
   25510:	f800283a 	ret

00025514 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   25514:	defffd04 	addi	sp,sp,-12
   25518:	dfc00215 	stw	ra,8(sp)
   2551c:	df000115 	stw	fp,4(sp)
   25520:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   25524:	0009883a 	mov	r4,zero
   25528:	00256e80 	call	256e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2552c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   25530:	00257200 	call	25720 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   25534:	018000b4 	movhi	r6,2
   25538:	319b4104 	addi	r6,r6,27908
   2553c:	014000b4 	movhi	r5,2
   25540:	295b4104 	addi	r5,r5,27908
   25544:	010000b4 	movhi	r4,2
   25548:	211b4104 	addi	r4,r4,27908
   2554c:	00260b80 	call	260b8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   25550:	d0a0fc17 	ldw	r2,-31760(gp)
   25554:	d0e0fd17 	ldw	r3,-31756(gp)
   25558:	d120fe17 	ldw	r4,-31752(gp)
   2555c:	200d883a 	mov	r6,r4
   25560:	180b883a 	mov	r5,r3
   25564:	1009883a 	mov	r4,r2
   25568:	002085c0 	call	2085c <main>
   2556c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   25570:	01000044 	movi	r4,1
   25574:	0025dc40 	call	25dc4 <close>
  exit (result);
   25578:	e13fff17 	ldw	r4,-4(fp)
   2557c:	002691c0 	call	2691c <exit>

00025580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25580:	defffe04 	addi	sp,sp,-8
   25584:	dfc00115 	stw	ra,4(sp)
   25588:	df000015 	stw	fp,0(sp)
   2558c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25590:	d0a01717 	ldw	r2,-32676(gp)
   25594:	10000326 	beq	r2,zero,255a4 <alt_get_errno+0x24>
   25598:	d0a01717 	ldw	r2,-32676(gp)
   2559c:	103ee83a 	callr	r2
   255a0:	00000106 	br	255a8 <alt_get_errno+0x28>
   255a4:	d0a0fa04 	addi	r2,gp,-31768
}
   255a8:	e037883a 	mov	sp,fp
   255ac:	dfc00117 	ldw	ra,4(sp)
   255b0:	df000017 	ldw	fp,0(sp)
   255b4:	dec00204 	addi	sp,sp,8
   255b8:	f800283a 	ret

000255bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   255bc:	defff904 	addi	sp,sp,-28
   255c0:	dfc00615 	stw	ra,24(sp)
   255c4:	df000515 	stw	fp,20(sp)
   255c8:	df000504 	addi	fp,sp,20
   255cc:	e13ffd15 	stw	r4,-12(fp)
   255d0:	e17ffe15 	stw	r5,-8(fp)
   255d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   255d8:	e0bffd17 	ldw	r2,-12(fp)
   255dc:	10000616 	blt	r2,zero,255f8 <write+0x3c>
   255e0:	e0bffd17 	ldw	r2,-12(fp)
   255e4:	10c00324 	muli	r3,r2,12
   255e8:	008000b4 	movhi	r2,2
   255ec:	109ba704 	addi	r2,r2,28316
   255f0:	1885883a 	add	r2,r3,r2
   255f4:	00000106 	br	255fc <write+0x40>
   255f8:	0005883a 	mov	r2,zero
   255fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   25600:	e0bffb17 	ldw	r2,-20(fp)
   25604:	10002126 	beq	r2,zero,2568c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   25608:	e0bffb17 	ldw	r2,-20(fp)
   2560c:	10800217 	ldw	r2,8(r2)
   25610:	108000cc 	andi	r2,r2,3
   25614:	10001826 	beq	r2,zero,25678 <write+0xbc>
   25618:	e0bffb17 	ldw	r2,-20(fp)
   2561c:	10800017 	ldw	r2,0(r2)
   25620:	10800617 	ldw	r2,24(r2)
   25624:	10001426 	beq	r2,zero,25678 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   25628:	e0bffb17 	ldw	r2,-20(fp)
   2562c:	10800017 	ldw	r2,0(r2)
   25630:	10800617 	ldw	r2,24(r2)
   25634:	e0ffff17 	ldw	r3,-4(fp)
   25638:	180d883a 	mov	r6,r3
   2563c:	e17ffe17 	ldw	r5,-8(fp)
   25640:	e13ffb17 	ldw	r4,-20(fp)
   25644:	103ee83a 	callr	r2
   25648:	e0bffc15 	stw	r2,-16(fp)
   2564c:	e0bffc17 	ldw	r2,-16(fp)
   25650:	1000070e 	bge	r2,zero,25670 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   25654:	00255800 	call	25580 <alt_get_errno>
   25658:	1007883a 	mov	r3,r2
   2565c:	e0bffc17 	ldw	r2,-16(fp)
   25660:	0085c83a 	sub	r2,zero,r2
   25664:	18800015 	stw	r2,0(r3)
        return -1;
   25668:	00bfffc4 	movi	r2,-1
   2566c:	00000c06 	br	256a0 <write+0xe4>
      }
      return rval;
   25670:	e0bffc17 	ldw	r2,-16(fp)
   25674:	00000a06 	br	256a0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   25678:	00255800 	call	25580 <alt_get_errno>
   2567c:	1007883a 	mov	r3,r2
   25680:	00800344 	movi	r2,13
   25684:	18800015 	stw	r2,0(r3)
   25688:	00000406 	br	2569c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2568c:	00255800 	call	25580 <alt_get_errno>
   25690:	1007883a 	mov	r3,r2
   25694:	00801444 	movi	r2,81
   25698:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2569c:	00bfffc4 	movi	r2,-1
}
   256a0:	e037883a 	mov	sp,fp
   256a4:	dfc00117 	ldw	ra,4(sp)
   256a8:	df000017 	ldw	fp,0(sp)
   256ac:	dec00204 	addi	sp,sp,8
   256b0:	f800283a 	ret

000256b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   256b4:	defffd04 	addi	sp,sp,-12
   256b8:	dfc00215 	stw	ra,8(sp)
   256bc:	df000115 	stw	fp,4(sp)
   256c0:	df000104 	addi	fp,sp,4
   256c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   256c8:	d1601404 	addi	r5,gp,-32688
   256cc:	e13fff17 	ldw	r4,-4(fp)
   256d0:	0025f1c0 	call	25f1c <alt_dev_llist_insert>
}
   256d4:	e037883a 	mov	sp,fp
   256d8:	dfc00117 	ldw	ra,4(sp)
   256dc:	df000017 	ldw	fp,0(sp)
   256e0:	dec00204 	addi	sp,sp,8
   256e4:	f800283a 	ret

000256e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   256e8:	defffd04 	addi	sp,sp,-12
   256ec:	dfc00215 	stw	ra,8(sp)
   256f0:	df000115 	stw	fp,4(sp)
   256f4:	df000104 	addi	fp,sp,4
   256f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   256fc:	00265900 	call	26590 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   25700:	00800044 	movi	r2,1
   25704:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   25708:	0001883a 	nop
   2570c:	e037883a 	mov	sp,fp
   25710:	dfc00117 	ldw	ra,4(sp)
   25714:	df000017 	ldw	fp,0(sp)
   25718:	dec00204 	addi	sp,sp,8
   2571c:	f800283a 	ret

00025720 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   25720:	defffe04 	addi	sp,sp,-8
   25724:	dfc00115 	stw	ra,4(sp)
   25728:	df000015 	stw	fp,0(sp)
   2572c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLOCK_TIMER, sys_clock_timer);
   25730:	01c0fa04 	movi	r7,1000
   25734:	01800044 	movi	r6,1
   25738:	000b883a 	mov	r5,zero
   2573c:	01000134 	movhi	r4,4
   25740:	21050804 	addi	r4,r4,5152
   25744:	0025a380 	call	25a38 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   25748:	010000b4 	movhi	r4,2
   2574c:	211b8704 	addi	r4,r4,28188
   25750:	00256b40 	call	256b4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   25754:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   25758:	010000b4 	movhi	r4,2
   2575c:	211b9204 	addi	r4,r4,28232
   25760:	00256b40 	call	256b4 <alt_dev_reg>
}
   25764:	0001883a 	nop
   25768:	e037883a 	mov	sp,fp
   2576c:	dfc00117 	ldw	ra,4(sp)
   25770:	df000017 	ldw	fp,0(sp)
   25774:	dec00204 	addi	sp,sp,8
   25778:	f800283a 	ret

0002577c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2577c:	defffa04 	addi	sp,sp,-24
   25780:	dfc00515 	stw	ra,20(sp)
   25784:	df000415 	stw	fp,16(sp)
   25788:	df000404 	addi	fp,sp,16
   2578c:	e13ffd15 	stw	r4,-12(fp)
   25790:	e17ffe15 	stw	r5,-8(fp)
   25794:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   25798:	e0bffd17 	ldw	r2,-12(fp)
   2579c:	10800017 	ldw	r2,0(r2)
   257a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   257a4:	e0bffc17 	ldw	r2,-16(fp)
   257a8:	10c00a04 	addi	r3,r2,40
   257ac:	e0bffd17 	ldw	r2,-12(fp)
   257b0:	10800217 	ldw	r2,8(r2)
   257b4:	100f883a 	mov	r7,r2
   257b8:	e1bfff17 	ldw	r6,-4(fp)
   257bc:	e17ffe17 	ldw	r5,-8(fp)
   257c0:	1809883a 	mov	r4,r3
   257c4:	002583c0 	call	2583c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   257c8:	e037883a 	mov	sp,fp
   257cc:	dfc00117 	ldw	ra,4(sp)
   257d0:	df000017 	ldw	fp,0(sp)
   257d4:	dec00204 	addi	sp,sp,8
   257d8:	f800283a 	ret

000257dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   257dc:	defffa04 	addi	sp,sp,-24
   257e0:	dfc00515 	stw	ra,20(sp)
   257e4:	df000415 	stw	fp,16(sp)
   257e8:	df000404 	addi	fp,sp,16
   257ec:	e13ffd15 	stw	r4,-12(fp)
   257f0:	e17ffe15 	stw	r5,-8(fp)
   257f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   257f8:	e0bffd17 	ldw	r2,-12(fp)
   257fc:	10800017 	ldw	r2,0(r2)
   25800:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   25804:	e0bffc17 	ldw	r2,-16(fp)
   25808:	10c00a04 	addi	r3,r2,40
   2580c:	e0bffd17 	ldw	r2,-12(fp)
   25810:	10800217 	ldw	r2,8(r2)
   25814:	100f883a 	mov	r7,r2
   25818:	e1bfff17 	ldw	r6,-4(fp)
   2581c:	e17ffe17 	ldw	r5,-8(fp)
   25820:	1809883a 	mov	r4,r3
   25824:	00259280 	call	25928 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   25828:	e037883a 	mov	sp,fp
   2582c:	dfc00117 	ldw	ra,4(sp)
   25830:	df000017 	ldw	fp,0(sp)
   25834:	dec00204 	addi	sp,sp,8
   25838:	f800283a 	ret

0002583c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   2583c:	defff704 	addi	sp,sp,-36
   25840:	df000815 	stw	fp,32(sp)
   25844:	df000804 	addi	fp,sp,32
   25848:	e13ffc15 	stw	r4,-16(fp)
   2584c:	e17ffd15 	stw	r5,-12(fp)
   25850:	e1bffe15 	stw	r6,-8(fp)
   25854:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   25858:	e0bffc17 	ldw	r2,-16(fp)
   2585c:	10800017 	ldw	r2,0(r2)
   25860:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   25864:	e0bffd17 	ldw	r2,-12(fp)
   25868:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   2586c:	e0bffe17 	ldw	r2,-8(fp)
   25870:	e0fffd17 	ldw	r3,-12(fp)
   25874:	1885883a 	add	r2,r3,r2
   25878:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   2587c:	00001206 	br	258c8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   25880:	e0bff917 	ldw	r2,-28(fp)
   25884:	10800037 	ldwio	r2,0(r2)
   25888:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   2588c:	e0bffb17 	ldw	r2,-20(fp)
   25890:	10a0000c 	andi	r2,r2,32768
   25894:	10000626 	beq	r2,zero,258b0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   25898:	e0bff817 	ldw	r2,-32(fp)
   2589c:	10c00044 	addi	r3,r2,1
   258a0:	e0fff815 	stw	r3,-32(fp)
   258a4:	e0fffb17 	ldw	r3,-20(fp)
   258a8:	10c00005 	stb	r3,0(r2)
   258ac:	00000606 	br	258c8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   258b0:	e0fff817 	ldw	r3,-32(fp)
   258b4:	e0bffd17 	ldw	r2,-12(fp)
   258b8:	1880071e 	bne	r3,r2,258d8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   258bc:	e0bfff17 	ldw	r2,-4(fp)
   258c0:	1090000c 	andi	r2,r2,16384
   258c4:	1000061e 	bne	r2,zero,258e0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   258c8:	e0fff817 	ldw	r3,-32(fp)
   258cc:	e0bffa17 	ldw	r2,-24(fp)
   258d0:	18bfeb36 	bltu	r3,r2,25880 <__alt_data_end+0xfffed1e0>
   258d4:	00000306 	br	258e4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   258d8:	0001883a 	nop
   258dc:	00000106 	br	258e4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   258e0:	0001883a 	nop
    
  }

  if (ptr != buffer)
   258e4:	e0fff817 	ldw	r3,-32(fp)
   258e8:	e0bffd17 	ldw	r2,-12(fp)
   258ec:	18800426 	beq	r3,r2,25900 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   258f0:	e0fff817 	ldw	r3,-32(fp)
   258f4:	e0bffd17 	ldw	r2,-12(fp)
   258f8:	1885c83a 	sub	r2,r3,r2
   258fc:	00000606 	br	25918 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   25900:	e0bfff17 	ldw	r2,-4(fp)
   25904:	1090000c 	andi	r2,r2,16384
   25908:	10000226 	beq	r2,zero,25914 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   2590c:	00bffd44 	movi	r2,-11
   25910:	00000106 	br	25918 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   25914:	00bffec4 	movi	r2,-5
}
   25918:	e037883a 	mov	sp,fp
   2591c:	df000017 	ldw	fp,0(sp)
   25920:	dec00104 	addi	sp,sp,4
   25924:	f800283a 	ret

00025928 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   25928:	defff904 	addi	sp,sp,-28
   2592c:	df000615 	stw	fp,24(sp)
   25930:	df000604 	addi	fp,sp,24
   25934:	e13ffc15 	stw	r4,-16(fp)
   25938:	e17ffd15 	stw	r5,-12(fp)
   2593c:	e1bffe15 	stw	r6,-8(fp)
   25940:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   25944:	e0bffc17 	ldw	r2,-16(fp)
   25948:	10800017 	ldw	r2,0(r2)
   2594c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   25950:	e0bffe17 	ldw	r2,-8(fp)
   25954:	e0fffd17 	ldw	r3,-12(fp)
   25958:	1885883a 	add	r2,r3,r2
   2595c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   25960:	00000e06 	br	2599c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   25964:	e0bffa17 	ldw	r2,-24(fp)
   25968:	10800104 	addi	r2,r2,4
   2596c:	10800037 	ldwio	r2,0(r2)
   25970:	10bfffec 	andhi	r2,r2,65535
   25974:	10000926 	beq	r2,zero,2599c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   25978:	e0fffa17 	ldw	r3,-24(fp)
   2597c:	e0bffd17 	ldw	r2,-12(fp)
   25980:	11000044 	addi	r4,r2,1
   25984:	e13ffd15 	stw	r4,-12(fp)
   25988:	10800003 	ldbu	r2,0(r2)
   2598c:	10803fcc 	andi	r2,r2,255
   25990:	1080201c 	xori	r2,r2,128
   25994:	10bfe004 	addi	r2,r2,-128
   25998:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   2599c:	e0fffd17 	ldw	r3,-12(fp)
   259a0:	e0bffb17 	ldw	r2,-20(fp)
   259a4:	18bfef36 	bltu	r3,r2,25964 <__alt_data_end+0xfffed2c4>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   259a8:	e0bffe17 	ldw	r2,-8(fp)
}
   259ac:	e037883a 	mov	sp,fp
   259b0:	df000017 	ldw	fp,0(sp)
   259b4:	dec00104 	addi	sp,sp,4
   259b8:	f800283a 	ret

000259bc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   259bc:	defff904 	addi	sp,sp,-28
   259c0:	dfc00615 	stw	ra,24(sp)
   259c4:	df000515 	stw	fp,20(sp)
   259c8:	df000504 	addi	fp,sp,20
   259cc:	e13ffe15 	stw	r4,-8(fp)
   259d0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   259d4:	0007883a 	mov	r3,zero
   259d8:	e0bffe17 	ldw	r2,-8(fp)
   259dc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   259e0:	e0bffe17 	ldw	r2,-8(fp)
   259e4:	10800104 	addi	r2,r2,4
   259e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   259ec:	0005303a 	rdctl	r2,status
   259f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   259f4:	e0fffc17 	ldw	r3,-16(fp)
   259f8:	00bfff84 	movi	r2,-2
   259fc:	1884703a 	and	r2,r3,r2
   25a00:	1001703a 	wrctl	status,r2
  
  return context;
   25a04:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   25a08:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   25a0c:	00264880 	call	26488 <alt_tick>
   25a10:	e0bffb17 	ldw	r2,-20(fp)
   25a14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25a18:	e0bffd17 	ldw	r2,-12(fp)
   25a1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   25a20:	0001883a 	nop
   25a24:	e037883a 	mov	sp,fp
   25a28:	dfc00117 	ldw	ra,4(sp)
   25a2c:	df000017 	ldw	fp,0(sp)
   25a30:	dec00204 	addi	sp,sp,8
   25a34:	f800283a 	ret

00025a38 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   25a38:	defff904 	addi	sp,sp,-28
   25a3c:	dfc00615 	stw	ra,24(sp)
   25a40:	df000515 	stw	fp,20(sp)
   25a44:	df000504 	addi	fp,sp,20
   25a48:	e13ffc15 	stw	r4,-16(fp)
   25a4c:	e17ffd15 	stw	r5,-12(fp)
   25a50:	e1bffe15 	stw	r6,-8(fp)
   25a54:	e1ffff15 	stw	r7,-4(fp)
   25a58:	e0bfff17 	ldw	r2,-4(fp)
   25a5c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   25a60:	d0a0ff17 	ldw	r2,-31748(gp)
   25a64:	1000021e 	bne	r2,zero,25a70 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   25a68:	e0bffb17 	ldw	r2,-20(fp)
   25a6c:	d0a0ff15 	stw	r2,-31748(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   25a70:	e0bffc17 	ldw	r2,-16(fp)
   25a74:	10800104 	addi	r2,r2,4
   25a78:	00c001c4 	movi	r3,7
   25a7c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   25a80:	018000b4 	movhi	r6,2
   25a84:	31966f04 	addi	r6,r6,22972
   25a88:	e17ffc17 	ldw	r5,-16(fp)
   25a8c:	e13ffe17 	ldw	r4,-8(fp)
   25a90:	00252a80 	call	252a8 <alt_irq_register>
#endif  
}
   25a94:	0001883a 	nop
   25a98:	e037883a 	mov	sp,fp
   25a9c:	dfc00117 	ldw	ra,4(sp)
   25aa0:	df000017 	ldw	fp,0(sp)
   25aa4:	dec00204 	addi	sp,sp,8
   25aa8:	f800283a 	ret

00025aac <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   25aac:	defffa04 	addi	sp,sp,-24
   25ab0:	dfc00515 	stw	ra,20(sp)
   25ab4:	df000415 	stw	fp,16(sp)
   25ab8:	df000404 	addi	fp,sp,16
   25abc:	e13ffd15 	stw	r4,-12(fp)
   25ac0:	e17ffe15 	stw	r5,-8(fp)
   25ac4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   25ac8:	e0bffd17 	ldw	r2,-12(fp)
   25acc:	10800017 	ldw	r2,0(r2)
   25ad0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   25ad4:	e0bffc17 	ldw	r2,-16(fp)
   25ad8:	10c00a04 	addi	r3,r2,40
   25adc:	e0bffd17 	ldw	r2,-12(fp)
   25ae0:	10800217 	ldw	r2,8(r2)
   25ae4:	100f883a 	mov	r7,r2
   25ae8:	e1bfff17 	ldw	r6,-4(fp)
   25aec:	e17ffe17 	ldw	r5,-8(fp)
   25af0:	1809883a 	mov	r4,r3
   25af4:	0025ba80 	call	25ba8 <altera_avalon_uart_read>
      fd->fd_flags);
}
   25af8:	e037883a 	mov	sp,fp
   25afc:	dfc00117 	ldw	ra,4(sp)
   25b00:	df000017 	ldw	fp,0(sp)
   25b04:	dec00204 	addi	sp,sp,8
   25b08:	f800283a 	ret

00025b0c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   25b0c:	defffa04 	addi	sp,sp,-24
   25b10:	dfc00515 	stw	ra,20(sp)
   25b14:	df000415 	stw	fp,16(sp)
   25b18:	df000404 	addi	fp,sp,16
   25b1c:	e13ffd15 	stw	r4,-12(fp)
   25b20:	e17ffe15 	stw	r5,-8(fp)
   25b24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   25b28:	e0bffd17 	ldw	r2,-12(fp)
   25b2c:	10800017 	ldw	r2,0(r2)
   25b30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   25b34:	e0bffc17 	ldw	r2,-16(fp)
   25b38:	10c00a04 	addi	r3,r2,40
   25b3c:	e0bffd17 	ldw	r2,-12(fp)
   25b40:	10800217 	ldw	r2,8(r2)
   25b44:	100f883a 	mov	r7,r2
   25b48:	e1bfff17 	ldw	r6,-4(fp)
   25b4c:	e17ffe17 	ldw	r5,-8(fp)
   25b50:	1809883a 	mov	r4,r3
   25b54:	0025ca80 	call	25ca8 <altera_avalon_uart_write>
      fd->fd_flags);
}
   25b58:	e037883a 	mov	sp,fp
   25b5c:	dfc00117 	ldw	ra,4(sp)
   25b60:	df000017 	ldw	fp,0(sp)
   25b64:	dec00204 	addi	sp,sp,8
   25b68:	f800283a 	ret

00025b6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25b6c:	defffe04 	addi	sp,sp,-8
   25b70:	dfc00115 	stw	ra,4(sp)
   25b74:	df000015 	stw	fp,0(sp)
   25b78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25b7c:	d0a01717 	ldw	r2,-32676(gp)
   25b80:	10000326 	beq	r2,zero,25b90 <alt_get_errno+0x24>
   25b84:	d0a01717 	ldw	r2,-32676(gp)
   25b88:	103ee83a 	callr	r2
   25b8c:	00000106 	br	25b94 <alt_get_errno+0x28>
   25b90:	d0a0fa04 	addi	r2,gp,-31768
}
   25b94:	e037883a 	mov	sp,fp
   25b98:	dfc00117 	ldw	ra,4(sp)
   25b9c:	df000017 	ldw	fp,0(sp)
   25ba0:	dec00204 	addi	sp,sp,8
   25ba4:	f800283a 	ret

00025ba8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   25ba8:	defff804 	addi	sp,sp,-32
   25bac:	dfc00715 	stw	ra,28(sp)
   25bb0:	df000615 	stw	fp,24(sp)
   25bb4:	df000604 	addi	fp,sp,24
   25bb8:	e13ffc15 	stw	r4,-16(fp)
   25bbc:	e17ffd15 	stw	r5,-12(fp)
   25bc0:	e1bffe15 	stw	r6,-8(fp)
   25bc4:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   25bc8:	e0bfff17 	ldw	r2,-4(fp)
   25bcc:	1090000c 	andi	r2,r2,16384
   25bd0:	1005003a 	cmpeq	r2,r2,zero
   25bd4:	10803fcc 	andi	r2,r2,255
   25bd8:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   25bdc:	e0bffc17 	ldw	r2,-16(fp)
   25be0:	10800017 	ldw	r2,0(r2)
   25be4:	10800204 	addi	r2,r2,8
   25be8:	10800037 	ldwio	r2,0(r2)
   25bec:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   25bf0:	e0bffc17 	ldw	r2,-16(fp)
   25bf4:	10800017 	ldw	r2,0(r2)
   25bf8:	10800204 	addi	r2,r2,8
   25bfc:	0007883a 	mov	r3,zero
   25c00:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   25c04:	e0bffb17 	ldw	r2,-20(fp)
   25c08:	1080200c 	andi	r2,r2,128
   25c0c:	10000b26 	beq	r2,zero,25c3c <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   25c10:	e0bffc17 	ldw	r2,-16(fp)
   25c14:	10800017 	ldw	r2,0(r2)
   25c18:	10800037 	ldwio	r2,0(r2)
   25c1c:	1007883a 	mov	r3,r2
   25c20:	e0bffd17 	ldw	r2,-12(fp)
   25c24:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   25c28:	e0bffb17 	ldw	r2,-20(fp)
   25c2c:	108000cc 	andi	r2,r2,3
   25c30:	1000021e 	bne	r2,zero,25c3c <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   25c34:	00800044 	movi	r2,1
   25c38:	00000706 	br	25c58 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
   25c3c:	e0bffa17 	ldw	r2,-24(fp)
   25c40:	103fe61e 	bne	r2,zero,25bdc <__alt_data_end+0xfffed53c>

  ALT_ERRNO = EWOULDBLOCK;
   25c44:	0025b6c0 	call	25b6c <alt_get_errno>
   25c48:	1007883a 	mov	r3,r2
   25c4c:	008002c4 	movi	r2,11
   25c50:	18800015 	stw	r2,0(r3)
 
  return 0;
   25c54:	0005883a 	mov	r2,zero
}
   25c58:	e037883a 	mov	sp,fp
   25c5c:	dfc00117 	ldw	ra,4(sp)
   25c60:	df000017 	ldw	fp,0(sp)
   25c64:	dec00204 	addi	sp,sp,8
   25c68:	f800283a 	ret

00025c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25c6c:	defffe04 	addi	sp,sp,-8
   25c70:	dfc00115 	stw	ra,4(sp)
   25c74:	df000015 	stw	fp,0(sp)
   25c78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25c7c:	d0a01717 	ldw	r2,-32676(gp)
   25c80:	10000326 	beq	r2,zero,25c90 <alt_get_errno+0x24>
   25c84:	d0a01717 	ldw	r2,-32676(gp)
   25c88:	103ee83a 	callr	r2
   25c8c:	00000106 	br	25c94 <alt_get_errno+0x28>
   25c90:	d0a0fa04 	addi	r2,gp,-31768
}
   25c94:	e037883a 	mov	sp,fp
   25c98:	dfc00117 	ldw	ra,4(sp)
   25c9c:	df000017 	ldw	fp,0(sp)
   25ca0:	dec00204 	addi	sp,sp,8
   25ca4:	f800283a 	ret

00025ca8 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   25ca8:	defff704 	addi	sp,sp,-36
   25cac:	dfc00815 	stw	ra,32(sp)
   25cb0:	df000715 	stw	fp,28(sp)
   25cb4:	df000704 	addi	fp,sp,28
   25cb8:	e13ffc15 	stw	r4,-16(fp)
   25cbc:	e17ffd15 	stw	r5,-12(fp)
   25cc0:	e1bffe15 	stw	r6,-8(fp)
   25cc4:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   25cc8:	e0bfff17 	ldw	r2,-4(fp)
   25ccc:	1090000c 	andi	r2,r2,16384
   25cd0:	1005003a 	cmpeq	r2,r2,zero
   25cd4:	10803fcc 	andi	r2,r2,255
   25cd8:	e0bffa15 	stw	r2,-24(fp)
  count = len;
   25cdc:	e0bffe17 	ldw	r2,-8(fp)
   25ce0:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   25ce4:	e0bffc17 	ldw	r2,-16(fp)
   25ce8:	10800017 	ldw	r2,0(r2)
   25cec:	10800204 	addi	r2,r2,8
   25cf0:	10800037 	ldwio	r2,0(r2)
   25cf4:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   25cf8:	e0bffb17 	ldw	r2,-20(fp)
   25cfc:	1080100c 	andi	r2,r2,64
   25d00:	10000f26 	beq	r2,zero,25d40 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   25d04:	e0bffc17 	ldw	r2,-16(fp)
   25d08:	10800017 	ldw	r2,0(r2)
   25d0c:	10800104 	addi	r2,r2,4
   25d10:	1009883a 	mov	r4,r2
   25d14:	e0bffd17 	ldw	r2,-12(fp)
   25d18:	10c00044 	addi	r3,r2,1
   25d1c:	e0fffd15 	stw	r3,-12(fp)
   25d20:	10800003 	ldbu	r2,0(r2)
   25d24:	10803fcc 	andi	r2,r2,255
   25d28:	1080201c 	xori	r2,r2,128
   25d2c:	10bfe004 	addi	r2,r2,-128
   25d30:	20800035 	stwio	r2,0(r4)
      count--;
   25d34:	e0bff917 	ldw	r2,-28(fp)
   25d38:	10bfffc4 	addi	r2,r2,-1
   25d3c:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
   25d40:	e0bffa17 	ldw	r2,-24(fp)
   25d44:	10000226 	beq	r2,zero,25d50 <altera_avalon_uart_write+0xa8>
   25d48:	e0bff917 	ldw	r2,-28(fp)
   25d4c:	103fe51e 	bne	r2,zero,25ce4 <__alt_data_end+0xfffed644>

  if (count)
   25d50:	e0bff917 	ldw	r2,-28(fp)
   25d54:	10000426 	beq	r2,zero,25d68 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
   25d58:	0025c6c0 	call	25c6c <alt_get_errno>
   25d5c:	1007883a 	mov	r3,r2
   25d60:	008002c4 	movi	r2,11
   25d64:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
   25d68:	e0fffe17 	ldw	r3,-8(fp)
   25d6c:	e0bff917 	ldw	r2,-28(fp)
   25d70:	1885c83a 	sub	r2,r3,r2
}
   25d74:	e037883a 	mov	sp,fp
   25d78:	dfc00117 	ldw	ra,4(sp)
   25d7c:	df000017 	ldw	fp,0(sp)
   25d80:	dec00204 	addi	sp,sp,8
   25d84:	f800283a 	ret

00025d88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25d88:	defffe04 	addi	sp,sp,-8
   25d8c:	dfc00115 	stw	ra,4(sp)
   25d90:	df000015 	stw	fp,0(sp)
   25d94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25d98:	d0a01717 	ldw	r2,-32676(gp)
   25d9c:	10000326 	beq	r2,zero,25dac <alt_get_errno+0x24>
   25da0:	d0a01717 	ldw	r2,-32676(gp)
   25da4:	103ee83a 	callr	r2
   25da8:	00000106 	br	25db0 <alt_get_errno+0x28>
   25dac:	d0a0fa04 	addi	r2,gp,-31768
}
   25db0:	e037883a 	mov	sp,fp
   25db4:	dfc00117 	ldw	ra,4(sp)
   25db8:	df000017 	ldw	fp,0(sp)
   25dbc:	dec00204 	addi	sp,sp,8
   25dc0:	f800283a 	ret

00025dc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   25dc4:	defffb04 	addi	sp,sp,-20
   25dc8:	dfc00415 	stw	ra,16(sp)
   25dcc:	df000315 	stw	fp,12(sp)
   25dd0:	df000304 	addi	fp,sp,12
   25dd4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   25dd8:	e0bfff17 	ldw	r2,-4(fp)
   25ddc:	10000616 	blt	r2,zero,25df8 <close+0x34>
   25de0:	e0bfff17 	ldw	r2,-4(fp)
   25de4:	10c00324 	muli	r3,r2,12
   25de8:	008000b4 	movhi	r2,2
   25dec:	109ba704 	addi	r2,r2,28316
   25df0:	1885883a 	add	r2,r3,r2
   25df4:	00000106 	br	25dfc <close+0x38>
   25df8:	0005883a 	mov	r2,zero
   25dfc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   25e00:	e0bffd17 	ldw	r2,-12(fp)
   25e04:	10001926 	beq	r2,zero,25e6c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   25e08:	e0bffd17 	ldw	r2,-12(fp)
   25e0c:	10800017 	ldw	r2,0(r2)
   25e10:	10800417 	ldw	r2,16(r2)
   25e14:	10000626 	beq	r2,zero,25e30 <close+0x6c>
   25e18:	e0bffd17 	ldw	r2,-12(fp)
   25e1c:	10800017 	ldw	r2,0(r2)
   25e20:	10800417 	ldw	r2,16(r2)
   25e24:	e13ffd17 	ldw	r4,-12(fp)
   25e28:	103ee83a 	callr	r2
   25e2c:	00000106 	br	25e34 <close+0x70>
   25e30:	0005883a 	mov	r2,zero
   25e34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   25e38:	e13fff17 	ldw	r4,-4(fp)
   25e3c:	00263880 	call	26388 <alt_release_fd>
    if (rval < 0)
   25e40:	e0bffe17 	ldw	r2,-8(fp)
   25e44:	1000070e 	bge	r2,zero,25e64 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   25e48:	0025d880 	call	25d88 <alt_get_errno>
   25e4c:	1007883a 	mov	r3,r2
   25e50:	e0bffe17 	ldw	r2,-8(fp)
   25e54:	0085c83a 	sub	r2,zero,r2
   25e58:	18800015 	stw	r2,0(r3)
      return -1;
   25e5c:	00bfffc4 	movi	r2,-1
   25e60:	00000706 	br	25e80 <close+0xbc>
    }
    return 0;
   25e64:	0005883a 	mov	r2,zero
   25e68:	00000506 	br	25e80 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   25e6c:	0025d880 	call	25d88 <alt_get_errno>
   25e70:	1007883a 	mov	r3,r2
   25e74:	00801444 	movi	r2,81
   25e78:	18800015 	stw	r2,0(r3)
    return -1;
   25e7c:	00bfffc4 	movi	r2,-1
  }
}
   25e80:	e037883a 	mov	sp,fp
   25e84:	dfc00117 	ldw	ra,4(sp)
   25e88:	df000017 	ldw	fp,0(sp)
   25e8c:	dec00204 	addi	sp,sp,8
   25e90:	f800283a 	ret

00025e94 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   25e94:	deffff04 	addi	sp,sp,-4
   25e98:	df000015 	stw	fp,0(sp)
   25e9c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   25ea0:	0001883a 	nop
   25ea4:	e037883a 	mov	sp,fp
   25ea8:	df000017 	ldw	fp,0(sp)
   25eac:	dec00104 	addi	sp,sp,4
   25eb0:	f800283a 	ret

00025eb4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   25eb4:	defffc04 	addi	sp,sp,-16
   25eb8:	df000315 	stw	fp,12(sp)
   25ebc:	df000304 	addi	fp,sp,12
   25ec0:	e13ffd15 	stw	r4,-12(fp)
   25ec4:	e17ffe15 	stw	r5,-8(fp)
   25ec8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   25ecc:	e0bfff17 	ldw	r2,-4(fp)
}
   25ed0:	e037883a 	mov	sp,fp
   25ed4:	df000017 	ldw	fp,0(sp)
   25ed8:	dec00104 	addi	sp,sp,4
   25edc:	f800283a 	ret

00025ee0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25ee0:	defffe04 	addi	sp,sp,-8
   25ee4:	dfc00115 	stw	ra,4(sp)
   25ee8:	df000015 	stw	fp,0(sp)
   25eec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25ef0:	d0a01717 	ldw	r2,-32676(gp)
   25ef4:	10000326 	beq	r2,zero,25f04 <alt_get_errno+0x24>
   25ef8:	d0a01717 	ldw	r2,-32676(gp)
   25efc:	103ee83a 	callr	r2
   25f00:	00000106 	br	25f08 <alt_get_errno+0x28>
   25f04:	d0a0fa04 	addi	r2,gp,-31768
}
   25f08:	e037883a 	mov	sp,fp
   25f0c:	dfc00117 	ldw	ra,4(sp)
   25f10:	df000017 	ldw	fp,0(sp)
   25f14:	dec00204 	addi	sp,sp,8
   25f18:	f800283a 	ret

00025f1c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   25f1c:	defffa04 	addi	sp,sp,-24
   25f20:	dfc00515 	stw	ra,20(sp)
   25f24:	df000415 	stw	fp,16(sp)
   25f28:	df000404 	addi	fp,sp,16
   25f2c:	e13ffe15 	stw	r4,-8(fp)
   25f30:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   25f34:	e0bffe17 	ldw	r2,-8(fp)
   25f38:	10000326 	beq	r2,zero,25f48 <alt_dev_llist_insert+0x2c>
   25f3c:	e0bffe17 	ldw	r2,-8(fp)
   25f40:	10800217 	ldw	r2,8(r2)
   25f44:	1000061e 	bne	r2,zero,25f60 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   25f48:	0025ee00 	call	25ee0 <alt_get_errno>
   25f4c:	1007883a 	mov	r3,r2
   25f50:	00800584 	movi	r2,22
   25f54:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   25f58:	00bffa84 	movi	r2,-22
   25f5c:	00001306 	br	25fac <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   25f60:	e0bffe17 	ldw	r2,-8(fp)
   25f64:	e0ffff17 	ldw	r3,-4(fp)
   25f68:	e0fffc15 	stw	r3,-16(fp)
   25f6c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25f70:	e0bffd17 	ldw	r2,-12(fp)
   25f74:	e0fffc17 	ldw	r3,-16(fp)
   25f78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25f7c:	e0bffc17 	ldw	r2,-16(fp)
   25f80:	10c00017 	ldw	r3,0(r2)
   25f84:	e0bffd17 	ldw	r2,-12(fp)
   25f88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25f8c:	e0bffc17 	ldw	r2,-16(fp)
   25f90:	10800017 	ldw	r2,0(r2)
   25f94:	e0fffd17 	ldw	r3,-12(fp)
   25f98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25f9c:	e0bffc17 	ldw	r2,-16(fp)
   25fa0:	e0fffd17 	ldw	r3,-12(fp)
   25fa4:	10c00015 	stw	r3,0(r2)

  return 0;  
   25fa8:	0005883a 	mov	r2,zero
}
   25fac:	e037883a 	mov	sp,fp
   25fb0:	dfc00117 	ldw	ra,4(sp)
   25fb4:	df000017 	ldw	fp,0(sp)
   25fb8:	dec00204 	addi	sp,sp,8
   25fbc:	f800283a 	ret

00025fc0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   25fc0:	defffe04 	addi	sp,sp,-8
   25fc4:	dfc00115 	stw	ra,4(sp)
   25fc8:	df000015 	stw	fp,0(sp)
   25fcc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   25fd0:	01420004 	movi	r5,2048
   25fd4:	0009883a 	mov	r4,zero
   25fd8:	00267f00 	call	267f0 <alt_icache_flush>
#endif
}
   25fdc:	0001883a 	nop
   25fe0:	e037883a 	mov	sp,fp
   25fe4:	dfc00117 	ldw	ra,4(sp)
   25fe8:	df000017 	ldw	fp,0(sp)
   25fec:	dec00204 	addi	sp,sp,8
   25ff0:	f800283a 	ret

00025ff4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   25ff4:	defff904 	addi	sp,sp,-28
   25ff8:	dfc00615 	stw	ra,24(sp)
   25ffc:	df000515 	stw	fp,20(sp)
   26000:	df000504 	addi	fp,sp,20
   26004:	e13ffc15 	stw	r4,-16(fp)
   26008:	e17ffd15 	stw	r5,-12(fp)
   2600c:	e1bffe15 	stw	r6,-8(fp)
   26010:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   26014:	e1bfff17 	ldw	r6,-4(fp)
   26018:	e17ffe17 	ldw	r5,-8(fp)
   2601c:	e13ffd17 	ldw	r4,-12(fp)
   26020:	00262340 	call	26234 <open>
   26024:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   26028:	e0bffb17 	ldw	r2,-20(fp)
   2602c:	10001c16 	blt	r2,zero,260a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   26030:	008000b4 	movhi	r2,2
   26034:	109ba704 	addi	r2,r2,28316
   26038:	e0fffb17 	ldw	r3,-20(fp)
   2603c:	18c00324 	muli	r3,r3,12
   26040:	10c5883a 	add	r2,r2,r3
   26044:	10c00017 	ldw	r3,0(r2)
   26048:	e0bffc17 	ldw	r2,-16(fp)
   2604c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   26050:	008000b4 	movhi	r2,2
   26054:	109ba704 	addi	r2,r2,28316
   26058:	e0fffb17 	ldw	r3,-20(fp)
   2605c:	18c00324 	muli	r3,r3,12
   26060:	10c5883a 	add	r2,r2,r3
   26064:	10800104 	addi	r2,r2,4
   26068:	10c00017 	ldw	r3,0(r2)
   2606c:	e0bffc17 	ldw	r2,-16(fp)
   26070:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   26074:	008000b4 	movhi	r2,2
   26078:	109ba704 	addi	r2,r2,28316
   2607c:	e0fffb17 	ldw	r3,-20(fp)
   26080:	18c00324 	muli	r3,r3,12
   26084:	10c5883a 	add	r2,r2,r3
   26088:	10800204 	addi	r2,r2,8
   2608c:	10c00017 	ldw	r3,0(r2)
   26090:	e0bffc17 	ldw	r2,-16(fp)
   26094:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   26098:	e13ffb17 	ldw	r4,-20(fp)
   2609c:	00263880 	call	26388 <alt_release_fd>
  }
} 
   260a0:	0001883a 	nop
   260a4:	e037883a 	mov	sp,fp
   260a8:	dfc00117 	ldw	ra,4(sp)
   260ac:	df000017 	ldw	fp,0(sp)
   260b0:	dec00204 	addi	sp,sp,8
   260b4:	f800283a 	ret

000260b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   260b8:	defffb04 	addi	sp,sp,-20
   260bc:	dfc00415 	stw	ra,16(sp)
   260c0:	df000315 	stw	fp,12(sp)
   260c4:	df000304 	addi	fp,sp,12
   260c8:	e13ffd15 	stw	r4,-12(fp)
   260cc:	e17ffe15 	stw	r5,-8(fp)
   260d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   260d4:	01c07fc4 	movi	r7,511
   260d8:	01800044 	movi	r6,1
   260dc:	e17ffd17 	ldw	r5,-12(fp)
   260e0:	010000b4 	movhi	r4,2
   260e4:	211baa04 	addi	r4,r4,28328
   260e8:	0025ff40 	call	25ff4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   260ec:	01c07fc4 	movi	r7,511
   260f0:	000d883a 	mov	r6,zero
   260f4:	e17ffe17 	ldw	r5,-8(fp)
   260f8:	010000b4 	movhi	r4,2
   260fc:	211ba704 	addi	r4,r4,28316
   26100:	0025ff40 	call	25ff4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   26104:	01c07fc4 	movi	r7,511
   26108:	01800044 	movi	r6,1
   2610c:	e17fff17 	ldw	r5,-4(fp)
   26110:	010000b4 	movhi	r4,2
   26114:	211bad04 	addi	r4,r4,28340
   26118:	0025ff40 	call	25ff4 <alt_open_fd>
}  
   2611c:	0001883a 	nop
   26120:	e037883a 	mov	sp,fp
   26124:	dfc00117 	ldw	ra,4(sp)
   26128:	df000017 	ldw	fp,0(sp)
   2612c:	dec00204 	addi	sp,sp,8
   26130:	f800283a 	ret

00026134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26134:	defffe04 	addi	sp,sp,-8
   26138:	dfc00115 	stw	ra,4(sp)
   2613c:	df000015 	stw	fp,0(sp)
   26140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26144:	d0a01717 	ldw	r2,-32676(gp)
   26148:	10000326 	beq	r2,zero,26158 <alt_get_errno+0x24>
   2614c:	d0a01717 	ldw	r2,-32676(gp)
   26150:	103ee83a 	callr	r2
   26154:	00000106 	br	2615c <alt_get_errno+0x28>
   26158:	d0a0fa04 	addi	r2,gp,-31768
}
   2615c:	e037883a 	mov	sp,fp
   26160:	dfc00117 	ldw	ra,4(sp)
   26164:	df000017 	ldw	fp,0(sp)
   26168:	dec00204 	addi	sp,sp,8
   2616c:	f800283a 	ret

00026170 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   26170:	defffd04 	addi	sp,sp,-12
   26174:	df000215 	stw	fp,8(sp)
   26178:	df000204 	addi	fp,sp,8
   2617c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   26180:	e0bfff17 	ldw	r2,-4(fp)
   26184:	10800217 	ldw	r2,8(r2)
   26188:	10d00034 	orhi	r3,r2,16384
   2618c:	e0bfff17 	ldw	r2,-4(fp)
   26190:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   26194:	e03ffe15 	stw	zero,-8(fp)
   26198:	00001d06 	br	26210 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2619c:	008000b4 	movhi	r2,2
   261a0:	109ba704 	addi	r2,r2,28316
   261a4:	e0fffe17 	ldw	r3,-8(fp)
   261a8:	18c00324 	muli	r3,r3,12
   261ac:	10c5883a 	add	r2,r2,r3
   261b0:	10c00017 	ldw	r3,0(r2)
   261b4:	e0bfff17 	ldw	r2,-4(fp)
   261b8:	10800017 	ldw	r2,0(r2)
   261bc:	1880111e 	bne	r3,r2,26204 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   261c0:	008000b4 	movhi	r2,2
   261c4:	109ba704 	addi	r2,r2,28316
   261c8:	e0fffe17 	ldw	r3,-8(fp)
   261cc:	18c00324 	muli	r3,r3,12
   261d0:	10c5883a 	add	r2,r2,r3
   261d4:	10800204 	addi	r2,r2,8
   261d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   261dc:	1000090e 	bge	r2,zero,26204 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   261e0:	e0bffe17 	ldw	r2,-8(fp)
   261e4:	10c00324 	muli	r3,r2,12
   261e8:	008000b4 	movhi	r2,2
   261ec:	109ba704 	addi	r2,r2,28316
   261f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   261f4:	e0bfff17 	ldw	r2,-4(fp)
   261f8:	18800226 	beq	r3,r2,26204 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   261fc:	00bffcc4 	movi	r2,-13
   26200:	00000806 	br	26224 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   26204:	e0bffe17 	ldw	r2,-8(fp)
   26208:	10800044 	addi	r2,r2,1
   2620c:	e0bffe15 	stw	r2,-8(fp)
   26210:	d0a01617 	ldw	r2,-32680(gp)
   26214:	1007883a 	mov	r3,r2
   26218:	e0bffe17 	ldw	r2,-8(fp)
   2621c:	18bfdf2e 	bgeu	r3,r2,2619c <__alt_data_end+0xfffedafc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   26220:	0005883a 	mov	r2,zero
}
   26224:	e037883a 	mov	sp,fp
   26228:	df000017 	ldw	fp,0(sp)
   2622c:	dec00104 	addi	sp,sp,4
   26230:	f800283a 	ret

00026234 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   26234:	defff604 	addi	sp,sp,-40
   26238:	dfc00915 	stw	ra,36(sp)
   2623c:	df000815 	stw	fp,32(sp)
   26240:	df000804 	addi	fp,sp,32
   26244:	e13ffd15 	stw	r4,-12(fp)
   26248:	e17ffe15 	stw	r5,-8(fp)
   2624c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   26250:	00bfffc4 	movi	r2,-1
   26254:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   26258:	00bffb44 	movi	r2,-19
   2625c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   26260:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   26264:	d1601404 	addi	r5,gp,-32688
   26268:	e13ffd17 	ldw	r4,-12(fp)
   2626c:	00265b40 	call	265b4 <alt_find_dev>
   26270:	e0bff815 	stw	r2,-32(fp)
   26274:	e0bff817 	ldw	r2,-32(fp)
   26278:	1000051e 	bne	r2,zero,26290 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2627c:	e13ffd17 	ldw	r4,-12(fp)
   26280:	00266440 	call	26644 <alt_find_file>
   26284:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   26288:	00800044 	movi	r2,1
   2628c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   26290:	e0bff817 	ldw	r2,-32(fp)
   26294:	10002926 	beq	r2,zero,2633c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   26298:	e13ff817 	ldw	r4,-32(fp)
   2629c:	002674c0 	call	2674c <alt_get_fd>
   262a0:	e0bff915 	stw	r2,-28(fp)
   262a4:	e0bff917 	ldw	r2,-28(fp)
   262a8:	1000030e 	bge	r2,zero,262b8 <open+0x84>
    {
      status = index;
   262ac:	e0bff917 	ldw	r2,-28(fp)
   262b0:	e0bffa15 	stw	r2,-24(fp)
   262b4:	00002306 	br	26344 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   262b8:	e0bff917 	ldw	r2,-28(fp)
   262bc:	10c00324 	muli	r3,r2,12
   262c0:	008000b4 	movhi	r2,2
   262c4:	109ba704 	addi	r2,r2,28316
   262c8:	1885883a 	add	r2,r3,r2
   262cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   262d0:	e0fffe17 	ldw	r3,-8(fp)
   262d4:	00900034 	movhi	r2,16384
   262d8:	10bfffc4 	addi	r2,r2,-1
   262dc:	1886703a 	and	r3,r3,r2
   262e0:	e0bffc17 	ldw	r2,-16(fp)
   262e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   262e8:	e0bffb17 	ldw	r2,-20(fp)
   262ec:	1000051e 	bne	r2,zero,26304 <open+0xd0>
   262f0:	e13ffc17 	ldw	r4,-16(fp)
   262f4:	00261700 	call	26170 <alt_file_locked>
   262f8:	e0bffa15 	stw	r2,-24(fp)
   262fc:	e0bffa17 	ldw	r2,-24(fp)
   26300:	10001016 	blt	r2,zero,26344 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   26304:	e0bff817 	ldw	r2,-32(fp)
   26308:	10800317 	ldw	r2,12(r2)
   2630c:	10000826 	beq	r2,zero,26330 <open+0xfc>
   26310:	e0bff817 	ldw	r2,-32(fp)
   26314:	10800317 	ldw	r2,12(r2)
   26318:	e1ffff17 	ldw	r7,-4(fp)
   2631c:	e1bffe17 	ldw	r6,-8(fp)
   26320:	e17ffd17 	ldw	r5,-12(fp)
   26324:	e13ffc17 	ldw	r4,-16(fp)
   26328:	103ee83a 	callr	r2
   2632c:	00000106 	br	26334 <open+0x100>
   26330:	0005883a 	mov	r2,zero
   26334:	e0bffa15 	stw	r2,-24(fp)
   26338:	00000206 	br	26344 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2633c:	00bffb44 	movi	r2,-19
   26340:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   26344:	e0bffa17 	ldw	r2,-24(fp)
   26348:	1000090e 	bge	r2,zero,26370 <open+0x13c>
  {
    alt_release_fd (index);  
   2634c:	e13ff917 	ldw	r4,-28(fp)
   26350:	00263880 	call	26388 <alt_release_fd>
    ALT_ERRNO = -status;
   26354:	00261340 	call	26134 <alt_get_errno>
   26358:	1007883a 	mov	r3,r2
   2635c:	e0bffa17 	ldw	r2,-24(fp)
   26360:	0085c83a 	sub	r2,zero,r2
   26364:	18800015 	stw	r2,0(r3)
    return -1;
   26368:	00bfffc4 	movi	r2,-1
   2636c:	00000106 	br	26374 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   26370:	e0bff917 	ldw	r2,-28(fp)
}
   26374:	e037883a 	mov	sp,fp
   26378:	dfc00117 	ldw	ra,4(sp)
   2637c:	df000017 	ldw	fp,0(sp)
   26380:	dec00204 	addi	sp,sp,8
   26384:	f800283a 	ret

00026388 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   26388:	defffe04 	addi	sp,sp,-8
   2638c:	df000115 	stw	fp,4(sp)
   26390:	df000104 	addi	fp,sp,4
   26394:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   26398:	e0bfff17 	ldw	r2,-4(fp)
   2639c:	108000d0 	cmplti	r2,r2,3
   263a0:	10000d1e 	bne	r2,zero,263d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   263a4:	008000b4 	movhi	r2,2
   263a8:	109ba704 	addi	r2,r2,28316
   263ac:	e0ffff17 	ldw	r3,-4(fp)
   263b0:	18c00324 	muli	r3,r3,12
   263b4:	10c5883a 	add	r2,r2,r3
   263b8:	10800204 	addi	r2,r2,8
   263bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   263c0:	008000b4 	movhi	r2,2
   263c4:	109ba704 	addi	r2,r2,28316
   263c8:	e0ffff17 	ldw	r3,-4(fp)
   263cc:	18c00324 	muli	r3,r3,12
   263d0:	10c5883a 	add	r2,r2,r3
   263d4:	10000015 	stw	zero,0(r2)
  }
}
   263d8:	0001883a 	nop
   263dc:	e037883a 	mov	sp,fp
   263e0:	df000017 	ldw	fp,0(sp)
   263e4:	dec00104 	addi	sp,sp,4
   263e8:	f800283a 	ret

000263ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   263ec:	defffa04 	addi	sp,sp,-24
   263f0:	df000515 	stw	fp,20(sp)
   263f4:	df000504 	addi	fp,sp,20
   263f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   263fc:	0005303a 	rdctl	r2,status
   26400:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26404:	e0fffc17 	ldw	r3,-16(fp)
   26408:	00bfff84 	movi	r2,-2
   2640c:	1884703a 	and	r2,r3,r2
   26410:	1001703a 	wrctl	status,r2
  
  return context;
   26414:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   26418:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2641c:	e0bfff17 	ldw	r2,-4(fp)
   26420:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   26424:	e0bffd17 	ldw	r2,-12(fp)
   26428:	10800017 	ldw	r2,0(r2)
   2642c:	e0fffd17 	ldw	r3,-12(fp)
   26430:	18c00117 	ldw	r3,4(r3)
   26434:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   26438:	e0bffd17 	ldw	r2,-12(fp)
   2643c:	10800117 	ldw	r2,4(r2)
   26440:	e0fffd17 	ldw	r3,-12(fp)
   26444:	18c00017 	ldw	r3,0(r3)
   26448:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2644c:	e0bffd17 	ldw	r2,-12(fp)
   26450:	e0fffd17 	ldw	r3,-12(fp)
   26454:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   26458:	e0bffd17 	ldw	r2,-12(fp)
   2645c:	e0fffd17 	ldw	r3,-12(fp)
   26460:	10c00015 	stw	r3,0(r2)
   26464:	e0bffb17 	ldw	r2,-20(fp)
   26468:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2646c:	e0bffe17 	ldw	r2,-8(fp)
   26470:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   26474:	0001883a 	nop
   26478:	e037883a 	mov	sp,fp
   2647c:	df000017 	ldw	fp,0(sp)
   26480:	dec00104 	addi	sp,sp,4
   26484:	f800283a 	ret

00026488 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   26488:	defffb04 	addi	sp,sp,-20
   2648c:	dfc00415 	stw	ra,16(sp)
   26490:	df000315 	stw	fp,12(sp)
   26494:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   26498:	d0a01817 	ldw	r2,-32672(gp)
   2649c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   264a0:	d0a10017 	ldw	r2,-31744(gp)
   264a4:	10800044 	addi	r2,r2,1
   264a8:	d0a10015 	stw	r2,-31744(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   264ac:	00002e06 	br	26568 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   264b0:	e0bffd17 	ldw	r2,-12(fp)
   264b4:	10800017 	ldw	r2,0(r2)
   264b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   264bc:	e0bffd17 	ldw	r2,-12(fp)
   264c0:	10800403 	ldbu	r2,16(r2)
   264c4:	10803fcc 	andi	r2,r2,255
   264c8:	10000426 	beq	r2,zero,264dc <alt_tick+0x54>
   264cc:	d0a10017 	ldw	r2,-31744(gp)
   264d0:	1000021e 	bne	r2,zero,264dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   264d4:	e0bffd17 	ldw	r2,-12(fp)
   264d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   264dc:	e0bffd17 	ldw	r2,-12(fp)
   264e0:	10800217 	ldw	r2,8(r2)
   264e4:	d0e10017 	ldw	r3,-31744(gp)
   264e8:	18801d36 	bltu	r3,r2,26560 <alt_tick+0xd8>
   264ec:	e0bffd17 	ldw	r2,-12(fp)
   264f0:	10800403 	ldbu	r2,16(r2)
   264f4:	10803fcc 	andi	r2,r2,255
   264f8:	1000191e 	bne	r2,zero,26560 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   264fc:	e0bffd17 	ldw	r2,-12(fp)
   26500:	10800317 	ldw	r2,12(r2)
   26504:	e0fffd17 	ldw	r3,-12(fp)
   26508:	18c00517 	ldw	r3,20(r3)
   2650c:	1809883a 	mov	r4,r3
   26510:	103ee83a 	callr	r2
   26514:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   26518:	e0bfff17 	ldw	r2,-4(fp)
   2651c:	1000031e 	bne	r2,zero,2652c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   26520:	e13ffd17 	ldw	r4,-12(fp)
   26524:	00263ec0 	call	263ec <alt_alarm_stop>
   26528:	00000d06 	br	26560 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2652c:	e0bffd17 	ldw	r2,-12(fp)
   26530:	10c00217 	ldw	r3,8(r2)
   26534:	e0bfff17 	ldw	r2,-4(fp)
   26538:	1887883a 	add	r3,r3,r2
   2653c:	e0bffd17 	ldw	r2,-12(fp)
   26540:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   26544:	e0bffd17 	ldw	r2,-12(fp)
   26548:	10c00217 	ldw	r3,8(r2)
   2654c:	d0a10017 	ldw	r2,-31744(gp)
   26550:	1880032e 	bgeu	r3,r2,26560 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   26554:	e0bffd17 	ldw	r2,-12(fp)
   26558:	00c00044 	movi	r3,1
   2655c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   26560:	e0bffe17 	ldw	r2,-8(fp)
   26564:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   26568:	e0fffd17 	ldw	r3,-12(fp)
   2656c:	d0a01804 	addi	r2,gp,-32672
   26570:	18bfcf1e 	bne	r3,r2,264b0 <__alt_data_end+0xfffede10>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   26574:	0001883a 	nop
}
   26578:	0001883a 	nop
   2657c:	e037883a 	mov	sp,fp
   26580:	dfc00117 	ldw	ra,4(sp)
   26584:	df000017 	ldw	fp,0(sp)
   26588:	dec00204 	addi	sp,sp,8
   2658c:	f800283a 	ret

00026590 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   26590:	deffff04 	addi	sp,sp,-4
   26594:	df000015 	stw	fp,0(sp)
   26598:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2659c:	000170fa 	wrctl	ienable,zero
}
   265a0:	0001883a 	nop
   265a4:	e037883a 	mov	sp,fp
   265a8:	df000017 	ldw	fp,0(sp)
   265ac:	dec00104 	addi	sp,sp,4
   265b0:	f800283a 	ret

000265b4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   265b4:	defffa04 	addi	sp,sp,-24
   265b8:	dfc00515 	stw	ra,20(sp)
   265bc:	df000415 	stw	fp,16(sp)
   265c0:	df000404 	addi	fp,sp,16
   265c4:	e13ffe15 	stw	r4,-8(fp)
   265c8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   265cc:	e0bfff17 	ldw	r2,-4(fp)
   265d0:	10800017 	ldw	r2,0(r2)
   265d4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   265d8:	e13ffe17 	ldw	r4,-8(fp)
   265dc:	0024bd00 	call	24bd0 <strlen>
   265e0:	10800044 	addi	r2,r2,1
   265e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   265e8:	00000d06 	br	26620 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   265ec:	e0bffc17 	ldw	r2,-16(fp)
   265f0:	10800217 	ldw	r2,8(r2)
   265f4:	e0fffd17 	ldw	r3,-12(fp)
   265f8:	180d883a 	mov	r6,r3
   265fc:	e17ffe17 	ldw	r5,-8(fp)
   26600:	1009883a 	mov	r4,r2
   26604:	002693c0 	call	2693c <memcmp>
   26608:	1000021e 	bne	r2,zero,26614 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2660c:	e0bffc17 	ldw	r2,-16(fp)
   26610:	00000706 	br	26630 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   26614:	e0bffc17 	ldw	r2,-16(fp)
   26618:	10800017 	ldw	r2,0(r2)
   2661c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   26620:	e0fffc17 	ldw	r3,-16(fp)
   26624:	e0bfff17 	ldw	r2,-4(fp)
   26628:	18bff01e 	bne	r3,r2,265ec <__alt_data_end+0xfffedf4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2662c:	0005883a 	mov	r2,zero
}
   26630:	e037883a 	mov	sp,fp
   26634:	dfc00117 	ldw	ra,4(sp)
   26638:	df000017 	ldw	fp,0(sp)
   2663c:	dec00204 	addi	sp,sp,8
   26640:	f800283a 	ret

00026644 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   26644:	defffb04 	addi	sp,sp,-20
   26648:	dfc00415 	stw	ra,16(sp)
   2664c:	df000315 	stw	fp,12(sp)
   26650:	df000304 	addi	fp,sp,12
   26654:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   26658:	d0a01217 	ldw	r2,-32696(gp)
   2665c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26660:	00003106 	br	26728 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   26664:	e0bffd17 	ldw	r2,-12(fp)
   26668:	10800217 	ldw	r2,8(r2)
   2666c:	1009883a 	mov	r4,r2
   26670:	0024bd00 	call	24bd0 <strlen>
   26674:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   26678:	e0bffd17 	ldw	r2,-12(fp)
   2667c:	10c00217 	ldw	r3,8(r2)
   26680:	e0bffe17 	ldw	r2,-8(fp)
   26684:	10bfffc4 	addi	r2,r2,-1
   26688:	1885883a 	add	r2,r3,r2
   2668c:	10800003 	ldbu	r2,0(r2)
   26690:	10803fcc 	andi	r2,r2,255
   26694:	1080201c 	xori	r2,r2,128
   26698:	10bfe004 	addi	r2,r2,-128
   2669c:	10800bd8 	cmpnei	r2,r2,47
   266a0:	1000031e 	bne	r2,zero,266b0 <alt_find_file+0x6c>
    {
      len -= 1;
   266a4:	e0bffe17 	ldw	r2,-8(fp)
   266a8:	10bfffc4 	addi	r2,r2,-1
   266ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   266b0:	e0bffe17 	ldw	r2,-8(fp)
   266b4:	e0ffff17 	ldw	r3,-4(fp)
   266b8:	1885883a 	add	r2,r3,r2
   266bc:	10800003 	ldbu	r2,0(r2)
   266c0:	10803fcc 	andi	r2,r2,255
   266c4:	1080201c 	xori	r2,r2,128
   266c8:	10bfe004 	addi	r2,r2,-128
   266cc:	10800be0 	cmpeqi	r2,r2,47
   266d0:	1000081e 	bne	r2,zero,266f4 <alt_find_file+0xb0>
   266d4:	e0bffe17 	ldw	r2,-8(fp)
   266d8:	e0ffff17 	ldw	r3,-4(fp)
   266dc:	1885883a 	add	r2,r3,r2
   266e0:	10800003 	ldbu	r2,0(r2)
   266e4:	10803fcc 	andi	r2,r2,255
   266e8:	1080201c 	xori	r2,r2,128
   266ec:	10bfe004 	addi	r2,r2,-128
   266f0:	10000a1e 	bne	r2,zero,2671c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   266f4:	e0bffd17 	ldw	r2,-12(fp)
   266f8:	10800217 	ldw	r2,8(r2)
   266fc:	e0fffe17 	ldw	r3,-8(fp)
   26700:	180d883a 	mov	r6,r3
   26704:	e17fff17 	ldw	r5,-4(fp)
   26708:	1009883a 	mov	r4,r2
   2670c:	002693c0 	call	2693c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   26710:	1000021e 	bne	r2,zero,2671c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   26714:	e0bffd17 	ldw	r2,-12(fp)
   26718:	00000706 	br	26738 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2671c:	e0bffd17 	ldw	r2,-12(fp)
   26720:	10800017 	ldw	r2,0(r2)
   26724:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26728:	e0fffd17 	ldw	r3,-12(fp)
   2672c:	d0a01204 	addi	r2,gp,-32696
   26730:	18bfcc1e 	bne	r3,r2,26664 <__alt_data_end+0xfffedfc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   26734:	0005883a 	mov	r2,zero
}
   26738:	e037883a 	mov	sp,fp
   2673c:	dfc00117 	ldw	ra,4(sp)
   26740:	df000017 	ldw	fp,0(sp)
   26744:	dec00204 	addi	sp,sp,8
   26748:	f800283a 	ret

0002674c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2674c:	defffc04 	addi	sp,sp,-16
   26750:	df000315 	stw	fp,12(sp)
   26754:	df000304 	addi	fp,sp,12
   26758:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2675c:	00bffa04 	movi	r2,-24
   26760:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   26764:	e03ffd15 	stw	zero,-12(fp)
   26768:	00001906 	br	267d0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   2676c:	008000b4 	movhi	r2,2
   26770:	109ba704 	addi	r2,r2,28316
   26774:	e0fffd17 	ldw	r3,-12(fp)
   26778:	18c00324 	muli	r3,r3,12
   2677c:	10c5883a 	add	r2,r2,r3
   26780:	10800017 	ldw	r2,0(r2)
   26784:	10000f1e 	bne	r2,zero,267c4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   26788:	008000b4 	movhi	r2,2
   2678c:	109ba704 	addi	r2,r2,28316
   26790:	e0fffd17 	ldw	r3,-12(fp)
   26794:	18c00324 	muli	r3,r3,12
   26798:	10c5883a 	add	r2,r2,r3
   2679c:	e0ffff17 	ldw	r3,-4(fp)
   267a0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   267a4:	d0e01617 	ldw	r3,-32680(gp)
   267a8:	e0bffd17 	ldw	r2,-12(fp)
   267ac:	1880020e 	bge	r3,r2,267b8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   267b0:	e0bffd17 	ldw	r2,-12(fp)
   267b4:	d0a01615 	stw	r2,-32680(gp)
      }
      rc = i;
   267b8:	e0bffd17 	ldw	r2,-12(fp)
   267bc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   267c0:	00000606 	br	267dc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   267c4:	e0bffd17 	ldw	r2,-12(fp)
   267c8:	10800044 	addi	r2,r2,1
   267cc:	e0bffd15 	stw	r2,-12(fp)
   267d0:	e0bffd17 	ldw	r2,-12(fp)
   267d4:	10800810 	cmplti	r2,r2,32
   267d8:	103fe41e 	bne	r2,zero,2676c <__alt_data_end+0xfffee0cc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   267dc:	e0bffe17 	ldw	r2,-8(fp)
}
   267e0:	e037883a 	mov	sp,fp
   267e4:	df000017 	ldw	fp,0(sp)
   267e8:	dec00104 	addi	sp,sp,4
   267ec:	f800283a 	ret

000267f0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   267f0:	defffb04 	addi	sp,sp,-20
   267f4:	df000415 	stw	fp,16(sp)
   267f8:	df000404 	addi	fp,sp,16
   267fc:	e13ffe15 	stw	r4,-8(fp)
   26800:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   26804:	e0bfff17 	ldw	r2,-4(fp)
   26808:	10820070 	cmpltui	r2,r2,2049
   2680c:	1000021e 	bne	r2,zero,26818 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   26810:	00820004 	movi	r2,2048
   26814:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   26818:	e0fffe17 	ldw	r3,-8(fp)
   2681c:	e0bfff17 	ldw	r2,-4(fp)
   26820:	1885883a 	add	r2,r3,r2
   26824:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   26828:	e0bffe17 	ldw	r2,-8(fp)
   2682c:	e0bffc15 	stw	r2,-16(fp)
   26830:	00000506 	br	26848 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   26834:	e0bffc17 	ldw	r2,-16(fp)
   26838:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2683c:	e0bffc17 	ldw	r2,-16(fp)
   26840:	10800804 	addi	r2,r2,32
   26844:	e0bffc15 	stw	r2,-16(fp)
   26848:	e0fffc17 	ldw	r3,-16(fp)
   2684c:	e0bffd17 	ldw	r2,-12(fp)
   26850:	18bff836 	bltu	r3,r2,26834 <__alt_data_end+0xfffee194>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   26854:	e0bffe17 	ldw	r2,-8(fp)
   26858:	108007cc 	andi	r2,r2,31
   2685c:	10000226 	beq	r2,zero,26868 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   26860:	e0bffc17 	ldw	r2,-16(fp)
   26864:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   26868:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2686c:	0001883a 	nop
   26870:	e037883a 	mov	sp,fp
   26874:	df000017 	ldw	fp,0(sp)
   26878:	dec00104 	addi	sp,sp,4
   2687c:	f800283a 	ret

00026880 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   26880:	defffe04 	addi	sp,sp,-8
   26884:	df000115 	stw	fp,4(sp)
   26888:	df000104 	addi	fp,sp,4
   2688c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   26890:	e0bfff17 	ldw	r2,-4(fp)
   26894:	10bffe84 	addi	r2,r2,-6
   26898:	10c00428 	cmpgeui	r3,r2,16
   2689c:	18001a1e 	bne	r3,zero,26908 <alt_exception_cause_generated_bad_addr+0x88>
   268a0:	100690ba 	slli	r3,r2,2
   268a4:	008000b4 	movhi	r2,2
   268a8:	109a2e04 	addi	r2,r2,26808
   268ac:	1885883a 	add	r2,r3,r2
   268b0:	10800017 	ldw	r2,0(r2)
   268b4:	1000683a 	jmp	r2
   268b8:	000268f8 	rdprs	zero,zero,2467
   268bc:	000268f8 	rdprs	zero,zero,2467
   268c0:	00026908 	cmpgei	zero,zero,2468
   268c4:	00026908 	cmpgei	zero,zero,2468
   268c8:	00026908 	cmpgei	zero,zero,2468
   268cc:	000268f8 	rdprs	zero,zero,2467
   268d0:	00026900 	call	2690 <__reset-0x1d970>
   268d4:	00026908 	cmpgei	zero,zero,2468
   268d8:	000268f8 	rdprs	zero,zero,2467
   268dc:	000268f8 	rdprs	zero,zero,2467
   268e0:	00026908 	cmpgei	zero,zero,2468
   268e4:	000268f8 	rdprs	zero,zero,2467
   268e8:	00026900 	call	2690 <__reset-0x1d970>
   268ec:	00026908 	cmpgei	zero,zero,2468
   268f0:	00026908 	cmpgei	zero,zero,2468
   268f4:	000268f8 	rdprs	zero,zero,2467
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   268f8:	00800044 	movi	r2,1
   268fc:	00000306 	br	2690c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   26900:	0005883a 	mov	r2,zero
   26904:	00000106 	br	2690c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   26908:	0005883a 	mov	r2,zero
  }
}
   2690c:	e037883a 	mov	sp,fp
   26910:	df000017 	ldw	fp,0(sp)
   26914:	dec00104 	addi	sp,sp,4
   26918:	f800283a 	ret

0002691c <exit>:
   2691c:	defffe04 	addi	sp,sp,-8
   26920:	000b883a 	mov	r5,zero
   26924:	dc000015 	stw	r16,0(sp)
   26928:	dfc00115 	stw	ra,4(sp)
   2692c:	2021883a 	mov	r16,r4
   26930:	002696c0 	call	2696c <__call_exitprocs>
   26934:	8009883a 	mov	r4,r16
   26938:	0026afc0 	call	26afc <_exit>

0002693c <memcmp>:
   2693c:	218d883a 	add	r6,r4,r6
   26940:	21800826 	beq	r4,r6,26964 <memcmp+0x28>
   26944:	20800003 	ldbu	r2,0(r4)
   26948:	28c00003 	ldbu	r3,0(r5)
   2694c:	10c00226 	beq	r2,r3,26958 <memcmp+0x1c>
   26950:	10c5c83a 	sub	r2,r2,r3
   26954:	f800283a 	ret
   26958:	21000044 	addi	r4,r4,1
   2695c:	29400044 	addi	r5,r5,1
   26960:	003ff706 	br	26940 <__alt_data_end+0xfffee2a0>
   26964:	0005883a 	mov	r2,zero
   26968:	f800283a 	ret

0002696c <__call_exitprocs>:
   2696c:	defff504 	addi	sp,sp,-44
   26970:	dd000515 	stw	r20,20(sp)
   26974:	050000b4 	movhi	r20,2
   26978:	dc800315 	stw	r18,12(sp)
   2697c:	dfc00a15 	stw	ra,40(sp)
   26980:	df000915 	stw	fp,36(sp)
   26984:	ddc00815 	stw	r23,32(sp)
   26988:	dd800715 	stw	r22,28(sp)
   2698c:	dd400615 	stw	r21,24(sp)
   26990:	dcc00415 	stw	r19,16(sp)
   26994:	dc400215 	stw	r17,8(sp)
   26998:	dc000115 	stw	r16,4(sp)
   2699c:	d9000015 	stw	r4,0(sp)
   269a0:	2825883a 	mov	r18,r5
   269a4:	a51c1604 	addi	r20,r20,28760
   269a8:	a4400017 	ldw	r17,0(r20)
   269ac:	8cc00c17 	ldw	r19,48(r17)
   269b0:	8c400c04 	addi	r17,r17,48
   269b4:	98004526 	beq	r19,zero,26acc <__call_exitprocs+0x160>
   269b8:	9c000117 	ldw	r16,4(r19)
   269bc:	00900034 	movhi	r2,16384
   269c0:	10bfffc4 	addi	r2,r2,-1
   269c4:	9d402217 	ldw	r21,136(r19)
   269c8:	85bfffc4 	addi	r22,r16,-1
   269cc:	80a1883a 	add	r16,r16,r2
   269d0:	8421883a 	add	r16,r16,r16
   269d4:	8421883a 	add	r16,r16,r16
   269d8:	ac2f883a 	add	r23,r21,r16
   269dc:	84000204 	addi	r16,r16,8
   269e0:	9c21883a 	add	r16,r19,r16
   269e4:	b0002716 	blt	r22,zero,26a84 <__call_exitprocs+0x118>
   269e8:	90000726 	beq	r18,zero,26a08 <__call_exitprocs+0x9c>
   269ec:	a800041e 	bne	r21,zero,26a00 <__call_exitprocs+0x94>
   269f0:	b5bfffc4 	addi	r22,r22,-1
   269f4:	bdffff04 	addi	r23,r23,-4
   269f8:	843fff04 	addi	r16,r16,-4
   269fc:	003ff906 	br	269e4 <__alt_data_end+0xfffee344>
   26a00:	b9002017 	ldw	r4,128(r23)
   26a04:	913ffa1e 	bne	r18,r4,269f0 <__alt_data_end+0xfffee350>
   26a08:	99000117 	ldw	r4,4(r19)
   26a0c:	82000017 	ldw	r8,0(r16)
   26a10:	213fffc4 	addi	r4,r4,-1
   26a14:	b100021e 	bne	r22,r4,26a20 <__call_exitprocs+0xb4>
   26a18:	9d800115 	stw	r22,4(r19)
   26a1c:	00000106 	br	26a24 <__call_exitprocs+0xb8>
   26a20:	80000015 	stw	zero,0(r16)
   26a24:	403ff226 	beq	r8,zero,269f0 <__alt_data_end+0xfffee350>
   26a28:	9f000117 	ldw	fp,4(r19)
   26a2c:	a8000526 	beq	r21,zero,26a44 <__call_exitprocs+0xd8>
   26a30:	00800044 	movi	r2,1
   26a34:	1592983a 	sll	r9,r2,r22
   26a38:	a9404017 	ldw	r5,256(r21)
   26a3c:	494a703a 	and	r5,r9,r5
   26a40:	2800021e 	bne	r5,zero,26a4c <__call_exitprocs+0xe0>
   26a44:	403ee83a 	callr	r8
   26a48:	00000906 	br	26a70 <__call_exitprocs+0x104>
   26a4c:	a9004117 	ldw	r4,260(r21)
   26a50:	4908703a 	and	r4,r9,r4
   26a54:	2000041e 	bne	r4,zero,26a68 <__call_exitprocs+0xfc>
   26a58:	b9400017 	ldw	r5,0(r23)
   26a5c:	d9000017 	ldw	r4,0(sp)
   26a60:	403ee83a 	callr	r8
   26a64:	00000206 	br	26a70 <__call_exitprocs+0x104>
   26a68:	b9000017 	ldw	r4,0(r23)
   26a6c:	403ee83a 	callr	r8
   26a70:	99000117 	ldw	r4,4(r19)
   26a74:	e13fcc1e 	bne	fp,r4,269a8 <__alt_data_end+0xfffee308>
   26a78:	89000017 	ldw	r4,0(r17)
   26a7c:	993fdc26 	beq	r19,r4,269f0 <__alt_data_end+0xfffee350>
   26a80:	003fc906 	br	269a8 <__alt_data_end+0xfffee308>
   26a84:	00800034 	movhi	r2,0
   26a88:	10800004 	addi	r2,r2,0
   26a8c:	10000f26 	beq	r2,zero,26acc <__call_exitprocs+0x160>
   26a90:	99400117 	ldw	r5,4(r19)
   26a94:	99000017 	ldw	r4,0(r19)
   26a98:	2800091e 	bne	r5,zero,26ac0 <__call_exitprocs+0x154>
   26a9c:	20000826 	beq	r4,zero,26ac0 <__call_exitprocs+0x154>
   26aa0:	89000015 	stw	r4,0(r17)
   26aa4:	a8000226 	beq	r21,zero,26ab0 <__call_exitprocs+0x144>
   26aa8:	a809883a 	mov	r4,r21
   26aac:	00000000 	call	0 <__reset-0x20000>
   26ab0:	9809883a 	mov	r4,r19
   26ab4:	00000000 	call	0 <__reset-0x20000>
   26ab8:	8cc00017 	ldw	r19,0(r17)
   26abc:	003fbd06 	br	269b4 <__alt_data_end+0xfffee314>
   26ac0:	9823883a 	mov	r17,r19
   26ac4:	2027883a 	mov	r19,r4
   26ac8:	003fba06 	br	269b4 <__alt_data_end+0xfffee314>
   26acc:	dfc00a17 	ldw	ra,40(sp)
   26ad0:	df000917 	ldw	fp,36(sp)
   26ad4:	ddc00817 	ldw	r23,32(sp)
   26ad8:	dd800717 	ldw	r22,28(sp)
   26adc:	dd400617 	ldw	r21,24(sp)
   26ae0:	dd000517 	ldw	r20,20(sp)
   26ae4:	dcc00417 	ldw	r19,16(sp)
   26ae8:	dc800317 	ldw	r18,12(sp)
   26aec:	dc400217 	ldw	r17,8(sp)
   26af0:	dc000117 	ldw	r16,4(sp)
   26af4:	dec00b04 	addi	sp,sp,44
   26af8:	f800283a 	ret

00026afc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   26afc:	defffd04 	addi	sp,sp,-12
   26b00:	df000215 	stw	fp,8(sp)
   26b04:	df000204 	addi	fp,sp,8
   26b08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   26b0c:	0001883a 	nop
   26b10:	e0bfff17 	ldw	r2,-4(fp)
   26b14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   26b18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   26b1c:	10000226 	beq	r2,zero,26b28 <_exit+0x2c>
    ALT_SIM_FAIL();
   26b20:	002af070 	cmpltui	zero,zero,43969
   26b24:	00000106 	br	26b2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   26b28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   26b2c:	003fff06 	br	26b2c <__alt_data_end+0xfffee48c>
