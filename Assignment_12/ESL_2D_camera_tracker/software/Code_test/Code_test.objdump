
Code_test.elf:     file format elf32-littlenios2
Code_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081c4

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00006438 memsz 0x00006438 flags r-x
    LOAD off    0x00007458 vaddr 0x0000e458 paddr 0x0000e784 align 2**12
         filesz 0x0000032c memsz 0x0000032c flags rw-
    LOAD off    0x00007ab0 vaddr 0x0000eab0 paddr 0x0000eab0 align 2**12
         filesz 0x00000000 memsz 0x00000a0c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006088  000081c4  000081c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000020c  0000e24c  0000e24c  0000724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000032c  0000e458  0000e784  00007458  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a0c  0000eab0  0000eab0  00007ab0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000f4bc  0000f4bc  00007784  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007784  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000808  00000000  00000000  000077a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000ab53  00000000  00000000  00007fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003bc4  00000000  00000000  00012b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000473c  00000000  00000000  000166c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001238  00000000  00000000  0001ae04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002445  00000000  00000000  0001c03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000073b5  00000000  00000000  0001e481  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00025838  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c00  00000000  00000000  00025858  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000287f9  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000287fc  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000287ff  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00028800  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00028801  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00028805  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00028809  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002880d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00028816  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002881f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00028828  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000070  00000000  00000000  0002883a  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003e116  00000000  00000000  000288aa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081c4 l    d  .text	00000000 .text
0000e24c l    d  .rodata	00000000 .rodata
0000e458 l    d  .rwdata	00000000 .rwdata
0000eab0 l    d  .bss	00000000 .bss
0000f4bc l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Code_test_bsp//obj/HAL/src/crt0.o
000081fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 InterruptHandlerForUart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pan_funcs.c
00000000 l    df *ABS*	00000000 pan_integ.c
00000000 l    df *ABS*	00000000 pan_model.c
00000000 l    df *ABS*	00000000 pan_submod.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000c2fc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000e458 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000cb40 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000cc98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000cdd4 l     F .text	00000034 alt_dev_reg
0000e538 l     O .rwdata	0000002c jtag_uart
0000e564 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d0dc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000d28c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000d38c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
0000d4a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000d5dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d608 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d71c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000d87c l     F .text	0000003c alt_get_errno
0000d8b8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000cc2c g     F .text	0000006c alt_main
0000c24c g     F .text	00000080 _puts_r
0000f3bc g     O .bss	00000100 alt_irq
0000eab4 g     O .bss	00000002 RxHead_0
0000e784 g       *ABS*	00000000 __flash_rwdata_start
0000c200 g     F .text	0000004c printf
000095ac g     F .text	00000060 pan_CalculateOutput
0000eab6 g     O .bss	00000002 RxTail_0
0000acac g     F .text	000000dc .hidden __gtdf2
00008fdc g     F .text	000005d0 pan_CalculateDynamic
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000962c g     F .text	00000020 pan_ModelTerminate
0000ead0 g     O .bss	00000004 errno
00008200 g     F .text	00000064 InitUart0
0000eadc g     O .bss	00000004 alt_argv
00016738 g       *ABS*	00000000 _gp
0000e5b8 g     O .rwdata	00000180 alt_fd_list
0000dd4c g     F .text	00000090 alt_find_dev
0000eab2 g     O .bss	00000002 TxTail_0
0000c064 g     F .text	000000dc .hidden __floatsidf
0000d800 g     F .text	0000007c alt_io_redirect
0000ad88 g     F .text	000000f4 .hidden __ltdf2
0000c2cc g     F .text	00000014 puts
0000cf5c g     F .text	000000ec altera_avalon_jtag_uart_read
0000c1c4 g     F .text	0000003c _printf_r
0000994c g     F .text	00000064 .hidden __udivsi3
0000e750 g     O .rwdata	00000004 pan_number_of_inputs
0000dfa8 g     F .text	00000090 alt_icache_flush
00008c44 g     F .text	00000028 pan_DiscreteInitialize
0000f2ec g     O .bss	00000018 pan_I
0000e774 g     O .rwdata	00000004 alt_max_fd
00008390 g     F .text	0000003c EmptyUart0
00008c6c g     F .text	00000020 pan_DiscreteTerminate
0000c9c0 g     F .text	00000180 alt_irq_register
00008f08 g     F .text	0000003c pan_ModelInitialize_variables
00009a30 g     F .text	000008ac .hidden __adddf3
0000e758 g     O .rwdata	00000004 _global_impure_ptr
0000f4bc g       *ABS*	00000000 __bss_end
000097f0 g     F .text	00000064 pan_TerminateSubmodel
0000eab8 g     O .bss	00000008 pan_start_time
0000dc20 g     F .text	00000108 alt_tick
00008e38 g     F .text	00000050 pan_ModelInitialize_initialvalues
0000db84 g     F .text	0000009c alt_alarm_stop
0000ead4 g     O .bss	00000004 alt_irq_active
0000f304 g     O .bss	00000038 pan_P
00008fbc g     F .text	00000020 pan_CalculateInput
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000d8 alt_irq_handler
0000e590 g     O .rwdata	00000028 alt_dev_null
0000f33c g     O .bss	00000018 pan_s
0000978c g     F .text	00000064 pan_CalculateSubmodel
00008264 g     F .text	0000012c IsrUart0
0000d5bc g     F .text	00000020 alt_dcache_flush_all
0000bfe4 g     F .text	00000080 .hidden __fixdfsi
0000e74c g     O .rwdata	00000001 pan_initialize
0000e784 g       *ABS*	00000000 __ram_rwdata_end
0000e76c g     O .rwdata	00000008 alt_dev_list
0000ccd4 g     F .text	00000100 write
0000e458 g       *ABS*	00000000 __ram_rodata_end
0000ad88 g     F .text	000000f4 .hidden __ledf2
000099b0 g     F .text	00000058 .hidden __umodsi3
0000960c g     F .text	00000020 pan_CalculateFinal
0000e73c g     O .rwdata	00000008 pan_finish_time
0000f4bc g       *ABS*	00000000 end
0000eac0 g     O .bss	00000008 pan_time
0000d3c8 g     F .text	000000e0 altera_avalon_uart_write
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000d158 g     F .text	00000074 alt_avalon_timer_sc_init
0000d22c g     F .text	00000060 altera_avalon_uart_write_fd
0000c140 g     F .text	00000064 .hidden __clzsi2
0000d048 g     F .text	00000094 altera_avalon_jtag_uart_write
0000c368 g     F .text	0000052c ___vfprintf_internal_r
0000e088 g     F .text	00000190 __call_exitprocs
000081c4 g     F .text	0000003c _start
0000eae4 g     O .bss	00000004 _alt_tick_rate
0000eae8 g     O .bss	00000004 _alt_nticks
0000ce40 g     F .text	0000005c alt_sys_init
00008d54 g     F .text	000000e4 pan_ModelInitialize_parameters
000083cc g     F .text	0000005c GetUart0
00008bcc g     F .text	00000040 pan_String2Double
0000e738 g     O .rwdata	00000002 maxStepCount0
00009a08 g     F .text	00000028 .hidden __mulsi3
0000e458 g       *ABS*	00000000 __ram_rwdata_start
0000e24c g       *ABS*	00000000 __ram_rodata_start
0000ce9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000dee4 g     F .text	000000c4 alt_get_fd
00008428 g     F .text	0000011c PutUart0
00008c8c g     F .text	000000c8 pan_DiscreteStep
0000e058 g     F .text	00000030 memcmp
0000f4bc g       *ABS*	00000000 __alt_stack_base
0000e74d g     O .rwdata	00000001 pan_major
0000a2dc g     F .text	000009d0 .hidden __divdf3
0000ae7c g     F .text	0000086c .hidden __muldf3
0000dddc g     F .text	00000108 alt_find_file
0000d644 g     F .text	000000a4 alt_dev_llist_insert
0000c8b0 g     F .text	000000b8 __sfvwrite_small_dev
0000eab0 g       *ABS*	00000000 __bss_start
0000c1a4 g     F .text	00000020 memset
000087e8 g     F .text	000003e4 main
0000eae0 g     O .bss	00000004 alt_envp
0000cefc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e73a g     O .rwdata	00000002 maxStepCount1
000096a8 g     F .text	00000060 pan_CopyVariablesToOutputs
0000e778 g     O .rwdata	00000004 alt_errno
0000f354 g     O .bss	00000050 pan_V
0000eac8 g     O .bss	00000004 pan_steps
00009854 g     F .text	00000084 .hidden __divsi3
0000eab0 g     O .bss	00000002 TxHead_0
0000e24c g       *ABS*	00000000 __flash_rodata_start
0000eacc g     O .bss	00000001 pan_stop_simulation
0000ce08 g     F .text	00000038 alt_irq_init
0000db00 g     F .text	00000084 alt_release_fd
0000e31a g     O .rodata	00000100 .hidden __clz_tab
0000c968 g     F .text	00000058 _write_r
0000eaec g     O .bss	00000400 rx_buffer_0
0000e744 g     O .rwdata	00000008 pan_step_size
00008e88 g     F .text	00000080 pan_ModelInitialize_states
0000e75c g     O .rwdata	00000004 _impure_ptr
0000ead8 g     O .bss	00000004 alt_argc
00008544 g     F .text	000000a4 InitUart
00008020 g       .exceptions	00000000 alt_irq_entry
0000e764 g     O .rwdata	00000008 alt_fs_list
0000964c g     F .text	0000005c pan_CopyInputsToVariables
00008c0c g     F .text	00000038 pan_Double2String
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009708 g     F .text	00000084 pan_InitializeSubmodel
000086e8 g     F .text	00000100 Stepcount0ToSI
0000e784 g       *ABS*	00000000 _edata
0000d1cc g     F .text	00000060 altera_avalon_uart_read_fd
0000f4bc g       *ABS*	00000000 _end
000081c4 g       *ABS*	00000000 __ram_exceptions_end
0000e754 g     O .rwdata	00000004 pan_number_of_outputs
0000dd28 g     F .text	00000024 altera_nios2_qsys_irq_init
0000e038 g     F .text	00000020 exit
000098d8 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00008f9c g     F .text	00000020 pan_CalculateStatic
0000e218 g     F .text	00000034 _exit
0000c2e0 g     F .text	0000001c strlen
0000d9a4 g     F .text	0000015c open
0000acac g     F .text	000000dc .hidden __gedf2
0000d6e8 g     F .text	00000034 alt_icache_flush_all
00008f7c g     F .text	00000020 pan_CalculateInitial
0000e760 g     O .rwdata	00000004 alt_priority_mask
0000f3a4 g     O .bss	00000018 pan_R
0000c894 g     F .text	0000001c __vfprintf_internal
0000d2c8 g     F .text	000000c4 altera_avalon_uart_read
00008f44 g     F .text	00000038 pan_ModelInitialize
0000b6e8 g     F .text	000008fc .hidden __subdf3
000085e8 g     F .text	00000100 Stepcount1ToSI
0000e77c g     O .rwdata	00000008 alt_alarm_list
0000eeec g     O .bss	00000400 tx_buffer_0
0000d4e4 g     F .text	000000d8 close
0000cba8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff18cc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08607114 	ori	at,at,33220
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001526 	beq	r2,zero,8180 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
    812c:	00800074 	movhi	r2,1
    8130:	10bcef04 	addi	r2,r2,-3140
    8134:	e0fffd17 	ldw	r3,-12(fp)
    8138:	180690fa 	slli	r3,r3,3
    813c:	10c5883a 	add	r2,r2,r3
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	00800074 	movhi	r2,1
    8148:	10bcef04 	addi	r2,r2,-3140
    814c:	e13ffd17 	ldw	r4,-12(fp)
    8150:	200890fa 	slli	r4,r4,3
    8154:	1105883a 	add	r2,r2,r4
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	e17ffd17 	ldw	r5,-12(fp)
    8164:	1009883a 	mov	r4,r2
    8168:	183ee83a 	callr	r3
#endif
        break;
    816c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8178:	e0bfff17 	ldw	r2,-4(fp)
    817c:	00000706 	br	819c <alt_irq_handler+0xb0>
      }
      mask <<= 1;
    8180:	e0bffc17 	ldw	r2,-16(fp)
    8184:	1085883a 	add	r2,r2,r2
    8188:	e0bffc15 	stw	r2,-16(fp)
      i++;
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    8198:	003fe006 	br	811c <_gp+0xffff19e4>

    active = alt_irq_pending ();
    819c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81a0:	e0bffb17 	ldw	r2,-20(fp)
    81a4:	103fda1e 	bne	r2,zero,8110 <_gp+0xffff19d8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81a8:	0001883a 	nop
}
    81ac:	0001883a 	nop
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

Disassembly of section .text:

000081c4 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81c4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81c8:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81d0:	d699ce14 	ori	gp,gp,26424
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81d4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81d8:	10baac14 	ori	r2,r2,60080

    movhi r3, %hi(__bss_end)
    81dc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81e0:	18fd2f14 	ori	r3,r3,62652

    beq r2, r3, 1f
    81e4:	10c00326 	beq	r2,r3,81f4 <_start+0x30>

0:
    stw zero, (r2)
    81e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81f0:	10fffd36 	bltu	r2,r3,81e8 <_gp+0xffff1ab0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81f4:	000cba80 	call	cba8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81f8:	000cc2c0 	call	cc2c <alt_main>

000081fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81fc:	003fff06 	br	81fc <_gp+0xffff1ac4>

00008200 <InitUart0>:
unsigned short RxHead_0=0;
unsigned short RxTail_0=0;
unsigned char rx_buffer_0[RX_BUFFER_SIZE_0];
 
void InitUart0(unsigned int BaudRate)
{
    8200:	defffc04 	addi	sp,sp,-16
    8204:	dfc00315 	stw	ra,12(sp)
    8208:	df000215 	stw	fp,8(sp)
    820c:	df000204 	addi	fp,sp,8
    8210:	e13fff15 	stw	r4,-4(fp)
    unsigned int divisor;
    
    divisor = (ALT_CPU_FREQ/BaudRate) + 1;
    8214:	e17fff17 	ldw	r5,-4(fp)
    8218:	0100bef4 	movhi	r4,763
    821c:	213c2004 	addi	r4,r4,-3968
    8220:	000994c0 	call	994c <__udivsi3>
    8224:	10800044 	addi	r2,r2,1
    8228:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
    822c:	e0fffe17 	ldw	r3,-8(fp)
    8230:	00800074 	movhi	r2,1
    8234:	10850404 	addi	r2,r2,5136
    8238:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    823c:	00c02004 	movi	r3,128
    8240:	00800074 	movhi	r2,1
    8244:	10850304 	addi	r2,r2,5132
    8248:	10c00035 	stwio	r3,0(r2)
}
    824c:	0001883a 	nop
    8250:	e037883a 	mov	sp,fp
    8254:	dfc00117 	ldw	ra,4(sp)
    8258:	df000017 	ldw	fp,0(sp)
    825c:	dec00204 	addi	sp,sp,8
    8260:	f800283a 	ret

00008264 <IsrUart0>:
 
void IsrUart0(void* context, unsigned int id)
{
    8264:	defffc04 	addi	sp,sp,-16
    8268:	df000315 	stw	fp,12(sp)
    826c:	df000304 	addi	fp,sp,12
    8270:	e13ffe15 	stw	r4,-8(fp)
    8274:	e17fff15 	stw	r5,-4(fp)
    int sr;
    
    sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    8278:	00800074 	movhi	r2,1
    827c:	10850204 	addi	r2,r2,5128
    8280:	10800037 	ldwio	r2,0(r2)
    8284:	e0bffd15 	stw	r2,-12(fp)

    if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
    8288:	e0bffd17 	ldw	r2,-12(fp)
    828c:	1080200c 	andi	r2,r2,128
    8290:	10001626 	beq	r2,zero,82ec <IsrUart0+0x88>
        rx_buffer_0[RxHead_0] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8294:	d0a0df0b 	ldhu	r2,-31876(gp)
    8298:	10ffffcc 	andi	r3,r2,65535
    829c:	00800074 	movhi	r2,1
    82a0:	10850004 	addi	r2,r2,5120
    82a4:	10800037 	ldwio	r2,0(r2)
    82a8:	1009883a 	mov	r4,r2
    82ac:	00800074 	movhi	r2,1
    82b0:	10babb04 	addi	r2,r2,-5396
    82b4:	10c5883a 	add	r2,r2,r3
    82b8:	11000005 	stb	r4,0(r2)
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
    82bc:	0007883a 	mov	r3,zero
    82c0:	00800074 	movhi	r2,1
    82c4:	10850204 	addi	r2,r2,5128
    82c8:	10c00035 	stwio	r3,0(r2)
        if (++RxHead_0 > (RX_BUFFER_SIZE_0 - 1)) {
    82cc:	d0a0df0b 	ldhu	r2,-31876(gp)
    82d0:	10800044 	addi	r2,r2,1
    82d4:	d0a0df0d 	sth	r2,-31876(gp)
    82d8:	d0a0df0b 	ldhu	r2,-31876(gp)
    82dc:	10bfffcc 	andi	r2,r2,65535
    82e0:	10810030 	cmpltui	r2,r2,1024
    82e4:	1000011e 	bne	r2,zero,82ec <IsrUart0+0x88>
            RxHead_0 = 0;
    82e8:	d020df0d 	sth	zero,-31876(gp)
        }
    }

    if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
    82ec:	e0bffd17 	ldw	r2,-12(fp)
    82f0:	1080100c 	andi	r2,r2,64
    82f4:	10002126 	beq	r2,zero,837c <IsrUart0+0x118>
        if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK) {
    82f8:	00800074 	movhi	r2,1
    82fc:	10850304 	addi	r2,r2,5132
    8300:	10800037 	ldwio	r2,0(r2)
    8304:	1080100c 	andi	r2,r2,64
    8308:	10001c26 	beq	r2,zero,837c <IsrUart0+0x118>
            if (TxTail_0 != TxHead_0) {
    830c:	d0e0de8b 	ldhu	r3,-31878(gp)
    8310:	d0a0de0b 	ldhu	r2,-31880(gp)
    8314:	18ffffcc 	andi	r3,r3,65535
    8318:	10bfffcc 	andi	r2,r2,65535
    831c:	18801326 	beq	r3,r2,836c <IsrUart0+0x108>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_0[TxTail_0]);
    8320:	d0a0de8b 	ldhu	r2,-31878(gp)
    8324:	10ffffcc 	andi	r3,r2,65535
    8328:	00800074 	movhi	r2,1
    832c:	10bbbb04 	addi	r2,r2,-4372
    8330:	10c5883a 	add	r2,r2,r3
    8334:	10800003 	ldbu	r2,0(r2)
    8338:	10c03fcc 	andi	r3,r2,255
    833c:	00800074 	movhi	r2,1
    8340:	10850104 	addi	r2,r2,5124
    8344:	10c00035 	stwio	r3,0(r2)
                if (++TxTail_0 > (TX_BUFFER_SIZE_0 - 1)) {
    8348:	d0a0de8b 	ldhu	r2,-31878(gp)
    834c:	10800044 	addi	r2,r2,1
    8350:	d0a0de8d 	sth	r2,-31878(gp)
    8354:	d0a0de8b 	ldhu	r2,-31878(gp)
    8358:	10bfffcc 	andi	r2,r2,65535
    835c:	10810030 	cmpltui	r2,r2,1024
    8360:	1000061e 	bne	r2,zero,837c <IsrUart0+0x118>
                    TxTail_0 = 0;
    8364:	d020de8d 	sth	zero,-31878(gp)
            else {
                IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
            }
        }
    }
}
    8368:	00000406 	br	837c <IsrUart0+0x118>
                if (++TxTail_0 > (TX_BUFFER_SIZE_0 - 1)) {
                    TxTail_0 = 0;
                }
            }
            else {
                IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    836c:	00c02004 	movi	r3,128
    8370:	00800074 	movhi	r2,1
    8374:	10850304 	addi	r2,r2,5132
    8378:	10c00035 	stwio	r3,0(r2)
            }
        }
    }
}
    837c:	0001883a 	nop
    8380:	e037883a 	mov	sp,fp
    8384:	df000017 	ldw	fp,0(sp)
    8388:	dec00104 	addi	sp,sp,4
    838c:	f800283a 	ret

00008390 <EmptyUart0>:
 
unsigned char EmptyUart0()
{
    8390:	deffff04 	addi	sp,sp,-4
    8394:	df000015 	stw	fp,0(sp)
    8398:	d839883a 	mov	fp,sp
    if(RxHead_0 == RxTail_0) {
    839c:	d0e0df0b 	ldhu	r3,-31876(gp)
    83a0:	d0a0df8b 	ldhu	r2,-31874(gp)
    83a4:	18ffffcc 	andi	r3,r3,65535
    83a8:	10bfffcc 	andi	r2,r2,65535
    83ac:	1880021e 	bne	r3,r2,83b8 <EmptyUart0+0x28>
        return 1;
    83b0:	00800044 	movi	r2,1
    83b4:	00000106 	br	83bc <EmptyUart0+0x2c>
    }
    
    return 0;
    83b8:	0005883a 	mov	r2,zero
} 
    83bc:	e037883a 	mov	sp,fp
    83c0:	df000017 	ldw	fp,0(sp)
    83c4:	dec00104 	addi	sp,sp,4
    83c8:	f800283a 	ret

000083cc <GetUart0>:
    
unsigned char GetUart0(void)
{
    83cc:	defffe04 	addi	sp,sp,-8
    83d0:	df000115 	stw	fp,4(sp)
    83d4:	df000104 	addi	fp,sp,4
    unsigned char rxChar; 
    
    /* buffer is empty */
    
    rxChar=rx_buffer_0[RxTail_0];
    83d8:	d0a0df8b 	ldhu	r2,-31874(gp)
    83dc:	10ffffcc 	andi	r3,r2,65535
    83e0:	00800074 	movhi	r2,1
    83e4:	10babb04 	addi	r2,r2,-5396
    83e8:	10c5883a 	add	r2,r2,r3
    83ec:	10800003 	ldbu	r2,0(r2)
    83f0:	e0bfff05 	stb	r2,-4(fp)
    if (++RxTail_0 > (RX_BUFFER_SIZE_0 - 1)) {
    83f4:	d0a0df8b 	ldhu	r2,-31874(gp)
    83f8:	10800044 	addi	r2,r2,1
    83fc:	d0a0df8d 	sth	r2,-31874(gp)
    8400:	d0a0df8b 	ldhu	r2,-31874(gp)
    8404:	10bfffcc 	andi	r2,r2,65535
    8408:	10810030 	cmpltui	r2,r2,1024
    840c:	1000011e 	bne	r2,zero,8414 <GetUart0+0x48>
        RxTail_0 = 0;
    8410:	d020df8d 	sth	zero,-31874(gp)
    }
    
    return rxChar;
    8414:	e0bfff03 	ldbu	r2,-4(fp)
}
    8418:	e037883a 	mov	sp,fp
    841c:	df000017 	ldw	fp,0(sp)
    8420:	dec00104 	addi	sp,sp,4
    8424:	f800283a 	ret

00008428 <PutUart0>:
 
unsigned char PutUart0(unsigned char in_char)
{
    8428:	defffc04 	addi	sp,sp,-16
    842c:	df000315 	stw	fp,12(sp)
    8430:	df000304 	addi	fp,sp,12
    8434:	2005883a 	mov	r2,r4
    8438:	e0bfff05 	stb	r2,-4(fp)
    unsigned short size;
    unsigned int z;
    
    z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
    843c:	00800074 	movhi	r2,1
    8440:	10850204 	addi	r2,r2,5128
    8444:	10800037 	ldwio	r2,0(r2)
    8448:	1080100c 	andi	r2,r2,64
    844c:	e0bffe15 	stw	r2,-8(fp)
    
    if ((TxHead_0==TxTail_0) && z) {
    8450:	d0e0de0b 	ldhu	r3,-31880(gp)
    8454:	d0a0de8b 	ldhu	r2,-31878(gp)
    8458:	18ffffcc 	andi	r3,r3,65535
    845c:	10bfffcc 	andi	r2,r2,65535
    8460:	1880071e 	bne	r3,r2,8480 <PutUart0+0x58>
    8464:	e0bffe17 	ldw	r2,-8(fp)
    8468:	10000526 	beq	r2,zero,8480 <PutUart0+0x58>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
    846c:	e0ffff03 	ldbu	r3,-4(fp)
    8470:	00800074 	movhi	r2,1
    8474:	10850104 	addi	r2,r2,5124
    8478:	10c00035 	stwio	r3,0(r2)
    847c:	00002c06 	br	8530 <PutUart0+0x108>
    } else {
        if (TxHead_0 >= TxTail_0) {
    8480:	d0e0de0b 	ldhu	r3,-31880(gp)
    8484:	d0a0de8b 	ldhu	r2,-31878(gp)
    8488:	18ffffcc 	andi	r3,r3,65535
    848c:	10bfffcc 	andi	r2,r2,65535
    8490:	18800536 	bltu	r3,r2,84a8 <PutUart0+0x80>
            size = TxHead_0 - TxTail_0;
    8494:	d0e0de0b 	ldhu	r3,-31880(gp)
    8498:	d0a0de8b 	ldhu	r2,-31878(gp)
    849c:	1885c83a 	sub	r2,r3,r2
    84a0:	e0bffd0d 	sth	r2,-12(fp)
    84a4:	00000506 	br	84bc <PutUart0+0x94>
        } else {
            size = ((TX_BUFFER_SIZE_0 - 1) - TxTail_0) + TxHead_0;
    84a8:	d0e0de0b 	ldhu	r3,-31880(gp)
    84ac:	d0a0de8b 	ldhu	r2,-31878(gp)
    84b0:	1885c83a 	sub	r2,r3,r2
    84b4:	1080ffc4 	addi	r2,r2,1023
    84b8:	e0bffd0d 	sth	r2,-12(fp)
        }

        if (size > (TX_BUFFER_SIZE_0 - 3)) {
    84bc:	e0bffd0b 	ldhu	r2,-12(fp)
    84c0:	1080ffb0 	cmpltui	r2,r2,1022
    84c4:	1000021e 	bne	r2,zero,84d0 <PutUart0+0xa8>
            return (-1);
    84c8:	00bfffc4 	movi	r2,-1
    84cc:	00001906 	br	8534 <PutUart0+0x10c>
        }
        
        tx_buffer_0[TxHead_0] = in_char;
    84d0:	d0a0de0b 	ldhu	r2,-31880(gp)
    84d4:	10ffffcc 	andi	r3,r2,65535
    84d8:	00800074 	movhi	r2,1
    84dc:	10bbbb04 	addi	r2,r2,-4372
    84e0:	10c5883a 	add	r2,r2,r3
    84e4:	e0ffff03 	ldbu	r3,-4(fp)
    84e8:	10c00005 	stb	r3,0(r2)

        if (++TxHead_0 > (TX_BUFFER_SIZE_0-1)) {
    84ec:	d0a0de0b 	ldhu	r2,-31880(gp)
    84f0:	10800044 	addi	r2,r2,1
    84f4:	d0a0de0d 	sth	r2,-31880(gp)
    84f8:	d0a0de0b 	ldhu	r2,-31880(gp)
    84fc:	10bfffcc 	andi	r2,r2,65535
    8500:	10810030 	cmpltui	r2,r2,1024
    8504:	1000011e 	bne	r2,zero,850c <PutUart0+0xe4>
            TxHead_0 = 0;
    8508:	d020de0d 	sth	zero,-31880(gp)
        }

        z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    850c:	00800074 	movhi	r2,1
    8510:	10850304 	addi	r2,r2,5132
    8514:	10800037 	ldwio	r2,0(r2)
    8518:	10801014 	ori	r2,r2,64
    851c:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
    8520:	e0fffe17 	ldw	r3,-8(fp)
    8524:	00800074 	movhi	r2,1
    8528:	10850304 	addi	r2,r2,5132
    852c:	10c00035 	stwio	r3,0(r2)
    }

    return(1);
    8530:	00800044 	movi	r2,1
}
    8534:	e037883a 	mov	sp,fp
    8538:	df000017 	ldw	fp,0(sp)
    853c:	dec00104 	addi	sp,sp,4
    8540:	f800283a 	ret

00008544 <InitUart>:

uint16_t maxStepCount0 = 1115;
uint16_t maxStepCount1 = 221;

void InitUart()
{
    8544:	defff904 	addi	sp,sp,-28
    8548:	dfc00615 	stw	ra,24(sp)
    854c:	df000515 	stw	fp,20(sp)
    8550:	df000504 	addi	fp,sp,20
    int context_uart0;

    InitUart0(BAUD_RATE_0);
    8554:	010000b4 	movhi	r4,2
    8558:	21308004 	addi	r4,r4,-15872
    855c:	00082000 	call	8200 <InitUart0>

    //alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ,&context_uart1,IsrUart1,NULL); // install UART1 ISR
    alt_irq_register(UART_0_IRQ,&context_uart0,IsrUart0); // install UART0 ISR
    8560:	e0bfff04 	addi	r2,fp,-4
    8564:	01800074 	movhi	r6,1
    8568:	31a09904 	addi	r6,r6,-32156
    856c:	100b883a 	mov	r5,r2
    8570:	0009883a 	mov	r4,zero
    8574:	000c9c00 	call	c9c0 <alt_irq_register>
    8578:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    857c:	0005303a 	rdctl	r2,status
    8580:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8584:	e0fffc17 	ldw	r3,-16(fp)
    8588:	00bfff84 	movi	r2,-2
    858c:	1884703a 	and	r2,r3,r2
    8590:	1001703a 	wrctl	status,r2
  
  return context;
    8594:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8598:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    859c:	00c00044 	movi	r3,1
    85a0:	e0bffb17 	ldw	r2,-20(fp)
    85a4:	1884983a 	sll	r2,r3,r2
    85a8:	1007883a 	mov	r3,r2
    85ac:	d0a0e717 	ldw	r2,-31844(gp)
    85b0:	1884b03a 	or	r2,r3,r2
    85b4:	d0a0e715 	stw	r2,-31844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    85b8:	d0a0e717 	ldw	r2,-31844(gp)
    85bc:	100170fa 	wrctl	ienable,r2
    85c0:	e0bffd17 	ldw	r2,-12(fp)
    85c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    85c8:	e0bffe17 	ldw	r2,-8(fp)
    85cc:	1001703a 	wrctl	status,r2

    //alt_ic_irq_enable (UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ);
    alt_irq_enable (UART_0_IRQ);
}
    85d0:	0001883a 	nop
    85d4:	e037883a 	mov	sp,fp
    85d8:	dfc00117 	ldw	ra,4(sp)
    85dc:	df000017 	ldw	fp,0(sp)
    85e0:	dec00204 	addi	sp,sp,8
    85e4:	f800283a 	ret

000085e8 <Stepcount1ToSI>:

double Stepcount1ToSI(int16_t steps)
{
    85e8:	defffb04 	addi	sp,sp,-20
    85ec:	dfc00415 	stw	ra,16(sp)
    85f0:	df000315 	stw	fp,12(sp)
    85f4:	df000304 	addi	fp,sp,12
    85f8:	2005883a 	mov	r2,r4
    85fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount1/170*360;
    8600:	d0a0008b 	ldhu	r2,-32766(gp)
    8604:	10bfffcc 	andi	r2,r2,65535
    8608:	01402a84 	movi	r5,170
    860c:	1009883a 	mov	r4,r2
    8610:	000994c0 	call	994c <__udivsi3>
    8614:	10bfffcc 	andi	r2,r2,65535
    8618:	01405a04 	movi	r5,360
    861c:	1009883a 	mov	r4,r2
    8620:	0009a080 	call	9a08 <__mulsi3>
    8624:	1009883a 	mov	r4,r2
    8628:	000c0640 	call	c064 <__floatsidf>
    862c:	1009883a 	mov	r4,r2
    8630:	180b883a 	mov	r5,r3
    8634:	e13ffd15 	stw	r4,-12(fp)
    8638:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    863c:	e0bfff0f 	ldh	r2,-4(fp)
    8640:	1009883a 	mov	r4,r2
    8644:	000c0640 	call	c064 <__floatsidf>
    8648:	1011883a 	mov	r8,r2
    864c:	1813883a 	mov	r9,r3
    8650:	e1bffd17 	ldw	r6,-12(fp)
    8654:	e1fffe17 	ldw	r7,-8(fp)
    8658:	4009883a 	mov	r4,r8
    865c:	480b883a 	mov	r5,r9
    8660:	000a2dc0 	call	a2dc <__divdf3>
    8664:	1009883a 	mov	r4,r2
    8668:	180b883a 	mov	r5,r3
    866c:	2005883a 	mov	r2,r4
    8670:	2807883a 	mov	r3,r5
    8674:	100d883a 	mov	r6,r2
    8678:	180f883a 	mov	r7,r3
    867c:	1009883a 	mov	r4,r2
    8680:	180b883a 	mov	r5,r3
    8684:	0009a300 	call	9a30 <__adddf3>
    8688:	1009883a 	mov	r4,r2
    868c:	180b883a 	mov	r5,r3
    8690:	2005883a 	mov	r2,r4
    8694:	2807883a 	mov	r3,r5
    8698:	01b020f4 	movhi	r6,49283
    869c:	31849bc4 	addi	r6,r6,4719
    86a0:	01d00274 	movhi	r7,16393
    86a4:	39c87284 	addi	r7,r7,8650
    86a8:	1009883a 	mov	r4,r2
    86ac:	180b883a 	mov	r5,r3
    86b0:	000ae7c0 	call	ae7c <__muldf3>
    86b4:	100f883a 	mov	r7,r2
    86b8:	1811883a 	mov	r8,r3
    86bc:	380b883a 	mov	r5,r7
    86c0:	400d883a 	mov	r6,r8
    86c4:	2807883a 	mov	r3,r5
    86c8:	3009883a 	mov	r4,r6

}
    86cc:	1805883a 	mov	r2,r3
    86d0:	2007883a 	mov	r3,r4
    86d4:	e037883a 	mov	sp,fp
    86d8:	dfc00117 	ldw	ra,4(sp)
    86dc:	df000017 	ldw	fp,0(sp)
    86e0:	dec00204 	addi	sp,sp,8
    86e4:	f800283a 	ret

000086e8 <Stepcount0ToSI>:

double Stepcount0ToSI(int16_t steps)
{
    86e8:	defffb04 	addi	sp,sp,-20
    86ec:	dfc00415 	stw	ra,16(sp)
    86f0:	df000315 	stw	fp,12(sp)
    86f4:	df000304 	addi	fp,sp,12
    86f8:	2005883a 	mov	r2,r4
    86fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount0/325*360;
    8700:	d0a0000b 	ldhu	r2,-32768(gp)
    8704:	10bfffcc 	andi	r2,r2,65535
    8708:	01405144 	movi	r5,325
    870c:	1009883a 	mov	r4,r2
    8710:	000994c0 	call	994c <__udivsi3>
    8714:	10bfffcc 	andi	r2,r2,65535
    8718:	01405a04 	movi	r5,360
    871c:	1009883a 	mov	r4,r2
    8720:	0009a080 	call	9a08 <__mulsi3>
    8724:	1009883a 	mov	r4,r2
    8728:	000c0640 	call	c064 <__floatsidf>
    872c:	1009883a 	mov	r4,r2
    8730:	180b883a 	mov	r5,r3
    8734:	e13ffd15 	stw	r4,-12(fp)
    8738:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    873c:	e0bfff0f 	ldh	r2,-4(fp)
    8740:	1009883a 	mov	r4,r2
    8744:	000c0640 	call	c064 <__floatsidf>
    8748:	1011883a 	mov	r8,r2
    874c:	1813883a 	mov	r9,r3
    8750:	e1bffd17 	ldw	r6,-12(fp)
    8754:	e1fffe17 	ldw	r7,-8(fp)
    8758:	4009883a 	mov	r4,r8
    875c:	480b883a 	mov	r5,r9
    8760:	000a2dc0 	call	a2dc <__divdf3>
    8764:	1009883a 	mov	r4,r2
    8768:	180b883a 	mov	r5,r3
    876c:	2005883a 	mov	r2,r4
    8770:	2807883a 	mov	r3,r5
    8774:	100d883a 	mov	r6,r2
    8778:	180f883a 	mov	r7,r3
    877c:	1009883a 	mov	r4,r2
    8780:	180b883a 	mov	r5,r3
    8784:	0009a300 	call	9a30 <__adddf3>
    8788:	1009883a 	mov	r4,r2
    878c:	180b883a 	mov	r5,r3
    8790:	2005883a 	mov	r2,r4
    8794:	2807883a 	mov	r3,r5
    8798:	01b020f4 	movhi	r6,49283
    879c:	31849bc4 	addi	r6,r6,4719
    87a0:	01d00274 	movhi	r7,16393
    87a4:	39c87284 	addi	r7,r7,8650
    87a8:	1009883a 	mov	r4,r2
    87ac:	180b883a 	mov	r5,r3
    87b0:	000ae7c0 	call	ae7c <__muldf3>
    87b4:	100f883a 	mov	r7,r2
    87b8:	1811883a 	mov	r8,r3
    87bc:	380b883a 	mov	r5,r7
    87c0:	400d883a 	mov	r6,r8
    87c4:	2807883a 	mov	r3,r5
    87c8:	3009883a 	mov	r4,r6
}
    87cc:	1805883a 	mov	r2,r3
    87d0:	2007883a 	mov	r3,r4
    87d4:	e037883a 	mov	sp,fp
    87d8:	dfc00117 	ldw	ra,4(sp)
    87dc:	df000017 	ldw	fp,0(sp)
    87e0:	dec00204 	addi	sp,sp,8
    87e4:	f800283a 	ret

000087e8 <main>:

int main()
{
    87e8:	deffe804 	addi	sp,sp,-96
    87ec:	dfc01715 	stw	ra,92(sp)
    87f0:	df001615 	stw	fp,88(sp)
    87f4:	df001604 	addi	fp,sp,88
	unsigned char ch;
	printf("\n\nHello NiosII!!!!!\n");
    87f8:	01000074 	movhi	r4,1
    87fc:	21389304 	addi	r4,r4,-7604
    8800:	000c2cc0 	call	c2cc <puts>
	IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000000000000000000000);
    8804:	0007883a 	mov	r3,zero
    8808:	00800074 	movhi	r2,1
    880c:	10840004 	addi	r2,r2,4096
    8810:	10c00035 	stwio	r3,0(r2)
	//IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000001000000000000000);
	InitUart();
    8814:	00085440 	call	8544 <InitUart>
	//initialize 20-sim
	double u [3 + 1];
	double y [1 + 1];

	/* Initialize the inputs and outputs with correct initial values */
	u[0] = 0.0;		/* corr */
    8818:	e03ff415 	stw	zero,-48(fp)
    881c:	e03ff515 	stw	zero,-44(fp)
	u[1] = 0.0;		/* in */
    8820:	e03ff615 	stw	zero,-40(fp)
    8824:	e03ff715 	stw	zero,-36(fp)
	u[2] = 0.0;		/* position */
    8828:	e03ff815 	stw	zero,-32(fp)
    882c:	e03ff915 	stw	zero,-28(fp)

	y[0] = 0.0;		/* out */
    8830:	e03ffc15 	stw	zero,-16(fp)
    8834:	e03ffd15 	stw	zero,-12(fp)


	/* Initialize the submodel itself */
	pan_InitializeSubmodel (&u, &y, pan_time);
    8838:	d0a0e217 	ldw	r2,-31864(gp)
    883c:	d0e0e317 	ldw	r3,-31860(gp)
    8840:	e17ffc04 	addi	r5,fp,-16
    8844:	e13ff404 	addi	r4,fp,-48
    8848:	100d883a 	mov	r6,r2
    884c:	180f883a 	mov	r7,r3
    8850:	00097080 	call	9708 <pan_InitializeSubmodel>
	
	//end initialize 20-sim
	
	//variables for avalon communication
	uint32_t nReadOut = 0;
    8854:	e03fec15 	stw	zero,-80(fp)
	uint16_t stepCount0 = 0;
    8858:	e03fea0d 	sth	zero,-88(fp)
	uint16_t stepCount1 = 0;
    885c:	e03fea8d 	sth	zero,-86(fp)
	uint16_t stepCount0Old = 0;
    8860:	e03feb0d 	sth	zero,-84(fp)
	uint16_t stepCount1Old = 0;
    8864:	e03feb8d 	sth	zero,-82(fp)
	int8_t PWM0 = 0;
    8868:	e03fed05 	stb	zero,-76(fp)
	int8_t PWM1 = 0;
    886c:	e03fed45 	stb	zero,-75(fp)
	uint32_t avalondSend = 0;
    8870:	e03fee15 	stw	zero,-72(fp)
	while( (pan_stop_simulation == 0) ) {
    8874:	0000c306 	br	8b84 <main+0x39c>

		//avalon bus communication
		nReadOut = IORD(ESL_NIOS_II_IP_0_BASE, 0x00);
    8878:	00800074 	movhi	r2,1
    887c:	10840004 	addi	r2,r2,4096
    8880:	10800037 	ldwio	r2,0(r2)
    8884:	e0bfec15 	stw	r2,-80(fp)
		unsigned int readID = nReadOut >> 29;
    8888:	e0bfec17 	ldw	r2,-80(fp)
    888c:	1004d77a 	srli	r2,r2,29
    8890:	e0bfef15 	stw	r2,-68(fp)
		nReadOut = nReadOut << 3;
    8894:	e0bfec17 	ldw	r2,-80(fp)
    8898:	100490fa 	slli	r2,r2,3
    889c:	e0bfec15 	stw	r2,-80(fp)
		uint32_t temp32;

		switch(readID) {
    88a0:	e0bfef17 	ldw	r2,-68(fp)
    88a4:	10c00060 	cmpeqi	r3,r2,1
    88a8:	1800031e 	bne	r3,zero,88b8 <main+0xd0>
    88ac:	108000a0 	cmpeqi	r2,r2,2
    88b0:	10000b1e 	bne	r2,zero,88e0 <main+0xf8>
    88b4:	00002006 	br	8938 <main+0x150>
			case 1:
				stepCount0 = nReadOut >> (32-11);
    88b8:	e0bfec17 	ldw	r2,-80(fp)
    88bc:	1004d57a 	srli	r2,r2,21
    88c0:	e0bfea0d 	sth	r2,-88(fp)

				temp32 = nReadOut << 11;
    88c4:	e0bfec17 	ldw	r2,-80(fp)
    88c8:	100492fa 	slli	r2,r2,11
    88cc:	e0bff015 	stw	r2,-64(fp)
				stepCount1 = temp32 >> (32-11);
    88d0:	e0bff017 	ldw	r2,-64(fp)
    88d4:	1004d57a 	srli	r2,r2,21
    88d8:	e0bfea8d 	sth	r2,-86(fp)
				break;
    88dc:	00001a06 	br	8948 <main+0x160>
			case 2:
				maxStepCount0 = nReadOut >> (32-11);
    88e0:	e0bfec17 	ldw	r2,-80(fp)
    88e4:	1004d57a 	srli	r2,r2,21
    88e8:	d0a0000d 	sth	r2,-32768(gp)
				temp32 = nReadOut << 11;
    88ec:	e0bfec17 	ldw	r2,-80(fp)
    88f0:	100492fa 	slli	r2,r2,11
    88f4:	e0bff015 	stw	r2,-64(fp)
				maxStepCount1 = temp32 >> (32-11);
    88f8:	e0bff017 	ldw	r2,-64(fp)
    88fc:	1004d57a 	srli	r2,r2,21
    8900:	d0a0008d 	sth	r2,-32766(gp)
				printf(".....................Received new calibration values!:\t");
    8904:	01000074 	movhi	r4,1
    8908:	21389804 	addi	r4,r4,-7584
    890c:	000c2000 	call	c200 <printf>
				printf("stepCount0_max: %d\t stepCount1_max: %d \n\r", maxStepCount0, maxStepCount1);
    8910:	d0a0000b 	ldhu	r2,-32768(gp)
    8914:	10bfffcc 	andi	r2,r2,65535
    8918:	d0e0008b 	ldhu	r3,-32766(gp)
    891c:	18ffffcc 	andi	r3,r3,65535
    8920:	180d883a 	mov	r6,r3
    8924:	100b883a 	mov	r5,r2
    8928:	01000074 	movhi	r4,1
    892c:	2138a604 	addi	r4,r4,-7528
    8930:	000c2000 	call	c200 <printf>
				break;
    8934:	00000406 	br	8948 <main+0x160>
			default:
				// default statements
				printf("Received incorrect message");
    8938:	01000074 	movhi	r4,1
    893c:	2138b104 	addi	r4,r4,-7484
    8940:	000c2000 	call	c200 <printf>
				break;
    8944:	0001883a 	nop
		}
		
		
		

		if(stepCount0 != stepCount0Old || stepCount1 != stepCount1Old)
    8948:	e0ffea0b 	ldhu	r3,-88(fp)
    894c:	e0bfeb0b 	ldhu	r2,-84(fp)
    8950:	1880031e 	bne	r3,r2,8960 <main+0x178>
    8954:	e0ffea8b 	ldhu	r3,-86(fp)
    8958:	e0bfeb8b 	ldhu	r2,-82(fp)
    895c:	18800726 	beq	r3,r2,897c <main+0x194>
			printf("stepCount0: %d\t stepCount1: %d \n\r", stepCount0, stepCount1);
    8960:	e0bfea0b 	ldhu	r2,-88(fp)
    8964:	e0ffea8b 	ldhu	r3,-86(fp)
    8968:	180d883a 	mov	r6,r3
    896c:	100b883a 	mov	r5,r2
    8970:	01000074 	movhi	r4,1
    8974:	2138b804 	addi	r4,r4,-7456
    8978:	000c2000 	call	c200 <printf>
		
		//generate inputs
		u[1] = 0;
    897c:	e03ff615 	stw	zero,-40(fp)
    8980:	e03ff715 	stw	zero,-36(fp)
		if(pan_time >= 1){
    8984:	d0a0e217 	ldw	r2,-31864(gp)
    8988:	d0e0e317 	ldw	r3,-31860(gp)
    898c:	000d883a 	mov	r6,zero
    8990:	01cffc34 	movhi	r7,16368
    8994:	1009883a 	mov	r4,r2
    8998:	180b883a 	mov	r5,r3
    899c:	000acac0 	call	acac <__gedf2>
    89a0:	10000616 	blt	r2,zero,89bc <main+0x1d4>
			u[1] = 0.5*pi;
    89a4:	00b020f4 	movhi	r2,49283
    89a8:	10849bc4 	addi	r2,r2,4719
    89ac:	e0bff615 	stw	r2,-40(fp)
    89b0:	008ffe74 	movhi	r2,16377
    89b4:	10887284 	addi	r2,r2,8650
    89b8:	e0bff715 	stw	r2,-36(fp)

		}
		if(pan_time >= 5){
    89bc:	d0a0e217 	ldw	r2,-31864(gp)
    89c0:	d0e0e317 	ldw	r3,-31860(gp)
    89c4:	000d883a 	mov	r6,zero
    89c8:	01d00534 	movhi	r7,16404
    89cc:	1009883a 	mov	r4,r2
    89d0:	180b883a 	mov	r5,r3
    89d4:	000acac0 	call	acac <__gedf2>
    89d8:	10000616 	blt	r2,zero,89f4 <main+0x20c>
			u[1] = 1.5*pi;
    89dc:	008418b4 	movhi	r2,4194
    89e0:	109374c4 	addi	r2,r2,19923
    89e4:	e0bff615 	stw	r2,-40(fp)
    89e8:	009004f4 	movhi	r2,16403
    89ec:	10b65604 	addi	r2,r2,-9896
    89f0:	e0bff715 	stw	r2,-36(fp)

		}
		if(pan_time >= 10){
    89f4:	d0a0e217 	ldw	r2,-31864(gp)
    89f8:	d0e0e317 	ldw	r3,-31860(gp)
    89fc:	000d883a 	mov	r6,zero
    8a00:	01d00934 	movhi	r7,16420
    8a04:	1009883a 	mov	r4,r2
    8a08:	180b883a 	mov	r5,r3
    8a0c:	000acac0 	call	acac <__gedf2>
    8a10:	10000616 	blt	r2,zero,8a2c <main+0x244>

			u[1] = 0.5*pi;
    8a14:	00b020f4 	movhi	r2,49283
    8a18:	10849bc4 	addi	r2,r2,4719
    8a1c:	e0bff615 	stw	r2,-40(fp)
    8a20:	008ffe74 	movhi	r2,16377
    8a24:	10887284 	addi	r2,r2,8650
    8a28:	e0bff715 	stw	r2,-36(fp)

		}
		
		
		/* Call the 20-sim submodel to calculate the output */
		u[2] = Stepcount0ToSI(stepCount0);
    8a2c:	e0bfea0b 	ldhu	r2,-88(fp)
    8a30:	10bfffcc 	andi	r2,r2,65535
    8a34:	10a0001c 	xori	r2,r2,32768
    8a38:	10a00004 	addi	r2,r2,-32768
    8a3c:	1009883a 	mov	r4,r2
    8a40:	00086e80 	call	86e8 <Stepcount0ToSI>
    8a44:	1009883a 	mov	r4,r2
    8a48:	180b883a 	mov	r5,r3
    8a4c:	e13ff815 	stw	r4,-32(fp)
    8a50:	e17ff915 	stw	r5,-28(fp)
		double temp = y[0];
    8a54:	e0bffc17 	ldw	r2,-16(fp)
    8a58:	e0bff115 	stw	r2,-60(fp)
    8a5c:	e0bffd17 	ldw	r2,-12(fp)
    8a60:	e0bff215 	stw	r2,-56(fp)
		
		//printf("%f\n",temp);

		pan_CalculateSubmodel (&u, &y, pan_time);
    8a64:	d0a0e217 	ldw	r2,-31864(gp)
    8a68:	d0e0e317 	ldw	r3,-31860(gp)
    8a6c:	e17ffc04 	addi	r5,fp,-16
    8a70:	e13ff404 	addi	r4,fp,-48
    8a74:	100d883a 	mov	r6,r2
    8a78:	180f883a 	mov	r7,r3
    8a7c:	000978c0 	call	978c <pan_CalculateSubmodel>
		PWM0 = y[0]*70;
    8a80:	e0bffc17 	ldw	r2,-16(fp)
    8a84:	e0fffd17 	ldw	r3,-12(fp)
    8a88:	000d883a 	mov	r6,zero
    8a8c:	01d014b4 	movhi	r7,16466
    8a90:	39e00004 	addi	r7,r7,-32768
    8a94:	1009883a 	mov	r4,r2
    8a98:	180b883a 	mov	r5,r3
    8a9c:	000ae7c0 	call	ae7c <__muldf3>
    8aa0:	1009883a 	mov	r4,r2
    8aa4:	180b883a 	mov	r5,r3
    8aa8:	2005883a 	mov	r2,r4
    8aac:	2807883a 	mov	r3,r5
    8ab0:	1009883a 	mov	r4,r2
    8ab4:	180b883a 	mov	r5,r3
    8ab8:	000bfe40 	call	bfe4 <__fixdfsi>
    8abc:	e0bfed05 	stb	r2,-76(fp)
		int16_t temp16 = 0;
    8ac0:	e03ff30d 	sth	zero,-52(fp)
		avalondSend = PWM0 << 24 | PWM1 <<16 | temp16;
    8ac4:	e0bfed07 	ldb	r2,-76(fp)
    8ac8:	1006963a 	slli	r3,r2,24
    8acc:	e0bfed47 	ldb	r2,-75(fp)
    8ad0:	1004943a 	slli	r2,r2,16
    8ad4:	1886b03a 	or	r3,r3,r2
    8ad8:	e0bff30f 	ldh	r2,-52(fp)
    8adc:	1884b03a 	or	r2,r3,r2
    8ae0:	e0bfee15 	stw	r2,-72(fp)
		//printf("%x\n",avalondSend);
		IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,avalondSend);
    8ae4:	e0ffee17 	ldw	r3,-72(fp)
    8ae8:	00800074 	movhi	r2,1
    8aec:	10840004 	addi	r2,r2,4096
    8af0:	10c00035 	stwio	r3,0(r2)
		
		if(!EmptyUart0()){
    8af4:	00083900 	call	8390 <EmptyUart0>
    8af8:	10803fcc 	andi	r2,r2,255
    8afc:	10000e1e 	bne	r2,zero,8b38 <main+0x350>
			ch = GetUart0();
    8b00:	00083cc0 	call	83cc <GetUart0>
    8b04:	e0bff385 	stb	r2,-50(fp)
			printf("received message: %c\n",ch);
    8b08:	e0bff383 	ldbu	r2,-50(fp)
    8b0c:	100b883a 	mov	r5,r2
    8b10:	01000074 	movhi	r4,1
    8b14:	2138c104 	addi	r4,r4,-7420
    8b18:	000c2000 	call	c200 <printf>
			PutUart0(ch);
    8b1c:	e0bff383 	ldbu	r2,-50(fp)
    8b20:	1009883a 	mov	r4,r2
    8b24:	00084280 	call	8428 <PutUart0>
			PutUart0('\r');
    8b28:	01000344 	movi	r4,13
    8b2c:	00084280 	call	8428 <PutUart0>
			PutUart0('\n');
    8b30:	01000284 	movi	r4,10
    8b34:	00084280 	call	8428 <PutUart0>
			
			
		}
		
		stepCount0Old = stepCount0;
    8b38:	e0bfea0b 	ldhu	r2,-88(fp)
    8b3c:	e0bfeb0d 	sth	r2,-84(fp)
		stepCount1Old = stepCount1;
    8b40:	e0bfea8b 	ldhu	r2,-86(fp)
    8b44:	e0bfeb8d 	sth	r2,-82(fp)
		pan_time+=0.0013;
    8b48:	d0a0e217 	ldw	r2,-31864(gp)
    8b4c:	d0e0e317 	ldw	r3,-31860(gp)
    8b50:	0197c1f4 	movhi	r6,24327
    8b54:	31bda504 	addi	r6,r6,-2412
    8b58:	01cfd574 	movhi	r7,16213
    8b5c:	39d32604 	addi	r7,r7,19608
    8b60:	1009883a 	mov	r4,r2
    8b64:	180b883a 	mov	r5,r3
    8b68:	0009a300 	call	9a30 <__adddf3>
    8b6c:	1009883a 	mov	r4,r2
    8b70:	180b883a 	mov	r5,r3
    8b74:	2005883a 	mov	r2,r4
    8b78:	2807883a 	mov	r3,r5
    8b7c:	d0a0e215 	stw	r2,-31864(gp)
    8b80:	d0e0e315 	stw	r3,-31860(gp)
	uint16_t stepCount0Old = 0;
	uint16_t stepCount1Old = 0;
	int8_t PWM0 = 0;
	int8_t PWM1 = 0;
	uint32_t avalondSend = 0;
	while( (pan_stop_simulation == 0) ) {
    8b84:	d0a0e503 	ldbu	r2,-31852(gp)
    8b88:	10803fcc 	andi	r2,r2,255
    8b8c:	1080201c 	xori	r2,r2,128
    8b90:	10bfe004 	addi	r2,r2,-128
    8b94:	103f3826 	beq	r2,zero,8878 <_gp+0xffff2140>
		stepCount1Old = stepCount1;
		pan_time+=0.0013;
	} 

	/* Perform the final 20-sim calculations */
	pan_TerminateSubmodel (&u, &y, pan_time);
    8b98:	d0a0e217 	ldw	r2,-31864(gp)
    8b9c:	d0e0e317 	ldw	r3,-31860(gp)
    8ba0:	e17ffc04 	addi	r5,fp,-16
    8ba4:	e13ff404 	addi	r4,fp,-48
    8ba8:	100d883a 	mov	r6,r2
    8bac:	180f883a 	mov	r7,r3
    8bb0:	00097f00 	call	97f0 <pan_TerminateSubmodel>

return 0;
    8bb4:	0005883a 	mov	r2,zero

}
    8bb8:	e037883a 	mov	sp,fp
    8bbc:	dfc00117 	ldw	ra,4(sp)
    8bc0:	df000017 	ldw	fp,0(sp)
    8bc4:	dec00204 	addi	sp,sp,8
    8bc8:	f800283a 	ret

00008bcc <pan_String2Double>:
	double m_double;
	const char* m_char;
}str2dbl;

double pan_String2Double(const char* argument)
{
    8bcc:	defffc04 	addi	sp,sp,-16
    8bd0:	df000315 	stw	fp,12(sp)
    8bd4:	df000304 	addi	fp,sp,12
    8bd8:	e13fff15 	stw	r4,-4(fp)
	str2dbl myConversion;
	myConversion.m_char = argument;
    8bdc:	e0bfff17 	ldw	r2,-4(fp)
    8be0:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_double;
    8be4:	e0bffd17 	ldw	r2,-12(fp)
    8be8:	e0fffe17 	ldw	r3,-8(fp)
    8bec:	1009883a 	mov	r4,r2
    8bf0:	180b883a 	mov	r5,r3

}
    8bf4:	2005883a 	mov	r2,r4
    8bf8:	2807883a 	mov	r3,r5
    8bfc:	e037883a 	mov	sp,fp
    8c00:	df000017 	ldw	fp,0(sp)
    8c04:	dec00104 	addi	sp,sp,4
    8c08:	f800283a 	ret

00008c0c <pan_Double2String>:

const char* pan_Double2String(double argument)
{
    8c0c:	defffb04 	addi	sp,sp,-20
    8c10:	df000415 	stw	fp,16(sp)
    8c14:	df000404 	addi	fp,sp,16
    8c18:	e13ffe15 	stw	r4,-8(fp)
    8c1c:	e17fff15 	stw	r5,-4(fp)
	str2dbl myConversion;
	myConversion.m_double = argument;
    8c20:	e0bffe17 	ldw	r2,-8(fp)
    8c24:	e0bffc15 	stw	r2,-16(fp)
    8c28:	e0bfff17 	ldw	r2,-4(fp)
    8c2c:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_char;
    8c30:	e0bffc17 	ldw	r2,-16(fp)
}
    8c34:	e037883a 	mov	sp,fp
    8c38:	df000017 	ldw	fp,0(sp)
    8c3c:	dec00104 	addi	sp,sp,4
    8c40:	f800283a 	ret

00008c44 <pan_DiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void pan_DiscreteInitialize (void)
{
    8c44:	deffff04 	addi	sp,sp,-4
    8c48:	df000015 	stw	fp,0(sp)
    8c4c:	d839883a 	mov	fp,sp
	/* nothing to be done */
	pan_major = 1;
    8c50:	00800044 	movi	r2,1
    8c54:	d0a00545 	stb	r2,-32747(gp)
}
    8c58:	0001883a 	nop
    8c5c:	e037883a 	mov	sp,fp
    8c60:	df000017 	ldw	fp,0(sp)
    8c64:	dec00104 	addi	sp,sp,4
    8c68:	f800283a 	ret

00008c6c <pan_DiscreteTerminate>:

/* the termination of the Discrete integration method */
void pan_DiscreteTerminate (void)
{
    8c6c:	deffff04 	addi	sp,sp,-4
    8c70:	df000015 	stw	fp,0(sp)
    8c74:	d839883a 	mov	fp,sp
	/* nothing to be done */
}
    8c78:	0001883a 	nop
    8c7c:	e037883a 	mov	sp,fp
    8c80:	df000017 	ldw	fp,0(sp)
    8c84:	dec00104 	addi	sp,sp,4
    8c88:	f800283a 	ret

00008c8c <pan_DiscreteStep>:

/* the Discrete integration method itself */
void pan_DiscreteStep (void)
{
    8c8c:	defffd04 	addi	sp,sp,-12
    8c90:	dfc00215 	stw	ra,8(sp)
    8c94:	df000115 	stw	fp,4(sp)
    8c98:	df000104 	addi	fp,sp,4

	/* for each of the supplied states */
	for (int index = 0; index < pan_STATE_SIZE; index++)
    8c9c:	e03fff15 	stw	zero,-4(fp)
    8ca0:	00001106 	br	8ce8 <pan_DiscreteStep+0x5c>
	{
		/* just a move of the new state */
		pan_s [index] = pan_R [index];
    8ca4:	00800074 	movhi	r2,1
    8ca8:	10bce904 	addi	r2,r2,-3164
    8cac:	e0ffff17 	ldw	r3,-4(fp)
    8cb0:	180690fa 	slli	r3,r3,3
    8cb4:	10c9883a 	add	r4,r2,r3
    8cb8:	20800017 	ldw	r2,0(r4)
    8cbc:	20c00117 	ldw	r3,4(r4)
    8cc0:	01000074 	movhi	r4,1
    8cc4:	213ccf04 	addi	r4,r4,-3268
    8cc8:	e17fff17 	ldw	r5,-4(fp)
    8ccc:	280a90fa 	slli	r5,r5,3
    8cd0:	2149883a 	add	r4,r4,r5
    8cd4:	20800015 	stw	r2,0(r4)
    8cd8:	20c00115 	stw	r3,4(r4)
/* the Discrete integration method itself */
void pan_DiscreteStep (void)
{

	/* for each of the supplied states */
	for (int index = 0; index < pan_STATE_SIZE; index++)
    8cdc:	e0bfff17 	ldw	r2,-4(fp)
    8ce0:	10800044 	addi	r2,r2,1
    8ce4:	e0bfff15 	stw	r2,-4(fp)
    8ce8:	e0bfff17 	ldw	r2,-4(fp)
    8cec:	108000d0 	cmplti	r2,r2,3
    8cf0:	103fec1e 	bne	r2,zero,8ca4 <_gp+0xffff256c>
	{
		/* just a move of the new state */
		pan_s [index] = pan_R [index];
	}
	/* increment the simulation time */
	pan_time += pan_step_size;
    8cf4:	d0a0e217 	ldw	r2,-31864(gp)
    8cf8:	d0e0e317 	ldw	r3,-31860(gp)
    8cfc:	d1200317 	ldw	r4,-32756(gp)
    8d00:	d1600417 	ldw	r5,-32752(gp)
    8d04:	200d883a 	mov	r6,r4
    8d08:	280f883a 	mov	r7,r5
    8d0c:	1009883a 	mov	r4,r2
    8d10:	180b883a 	mov	r5,r3
    8d14:	0009a300 	call	9a30 <__adddf3>
    8d18:	1009883a 	mov	r4,r2
    8d1c:	180b883a 	mov	r5,r3
    8d20:	2005883a 	mov	r2,r4
    8d24:	2807883a 	mov	r3,r5
    8d28:	d0a0e215 	stw	r2,-31864(gp)
    8d2c:	d0e0e315 	stw	r3,-31860(gp)

	pan_major = 1;
    8d30:	00800044 	movi	r2,1
    8d34:	d0a00545 	stb	r2,-32747(gp)

	/* evaluate the dynamic part to calculate the new rates */
	pan_CalculateDynamic ();
    8d38:	0008fdc0 	call	8fdc <pan_CalculateDynamic>
}
    8d3c:	0001883a 	nop
    8d40:	e037883a 	mov	sp,fp
    8d44:	dfc00117 	ldw	ra,4(sp)
    8d48:	df000017 	ldw	fp,0(sp)
    8d4c:	dec00204 	addi	sp,sp,8
    8d50:	f800283a 	ret

00008d54 <pan_ModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void pan_ModelInitialize_parameters(void)
{
    8d54:	deffff04 	addi	sp,sp,-4
    8d58:	df000015 	stw	fp,0(sp)
    8d5c:	d839883a 	mov	fp,sp
	/* set the parameters */
	pan_P[0] = 0.0;		/* corrGain\K */
    8d60:	00800074 	movhi	r2,1
    8d64:	10bcc104 	addi	r2,r2,-3324
    8d68:	10000015 	stw	zero,0(r2)
    8d6c:	10000115 	stw	zero,4(r2)
	pan_P[1] = 2.6;		/* PID1\kp */
    8d70:	00800074 	movhi	r2,1
    8d74:	10bcc104 	addi	r2,r2,-3324
    8d78:	00f33374 	movhi	r3,52429
    8d7c:	18f33344 	addi	r3,r3,-13107
    8d80:	10c00215 	stw	r3,8(r2)
    8d84:	00d00174 	movhi	r3,16389
    8d88:	18f33304 	addi	r3,r3,-13108
    8d8c:	10c00315 	stw	r3,12(r2)
	pan_P[2] = 0.05;		/* PID1\tauD */
    8d90:	00800074 	movhi	r2,1
    8d94:	10bcc104 	addi	r2,r2,-3324
    8d98:	00e666b4 	movhi	r3,39322
    8d9c:	18e66684 	addi	r3,r3,-26214
    8da0:	10c00415 	stw	r3,16(r2)
    8da4:	00cfeab4 	movhi	r3,16298
    8da8:	18e66644 	addi	r3,r3,-26215
    8dac:	10c00515 	stw	r3,20(r2)
	pan_P[3] = 0.17;		/* PID1\beta */
    8db0:	00800074 	movhi	r2,1
    8db4:	10bcc104 	addi	r2,r2,-3324
    8db8:	00d70a74 	movhi	r3,23593
    8dbc:	18fd70c4 	addi	r3,r3,-2621
    8dc0:	10c00615 	stw	r3,24(r2)
    8dc4:	00cff1b4 	movhi	r3,16326
    8dc8:	18f0a3c4 	addi	r3,r3,-15729
    8dcc:	10c00715 	stw	r3,28(r2)
	pan_P[4] = 9.0;		/* PID1\tauI */
    8dd0:	00800074 	movhi	r2,1
    8dd4:	10bcc104 	addi	r2,r2,-3324
    8dd8:	10000815 	stw	zero,32(r2)
    8ddc:	00d008b4 	movhi	r3,16418
    8de0:	10c00915 	stw	r3,36(r2)
	pan_P[5] = -0.99;		/* SignalLimiter2\minimum */
    8de4:	00800074 	movhi	r2,1
    8de8:	10bcc104 	addi	r2,r2,-3324
    8dec:	00deb874 	movhi	r3,31457
    8df0:	18d1eb84 	addi	r3,r3,18350
    8df4:	10c00a15 	stw	r3,40(r2)
    8df8:	00effc34 	movhi	r3,49136
    8dfc:	18eb8504 	addi	r3,r3,-20972
    8e00:	10c00b15 	stw	r3,44(r2)
	pan_P[6] = 0.99;		/* SignalLimiter2\maximum */
    8e04:	00800074 	movhi	r2,1
    8e08:	10bcc104 	addi	r2,r2,-3324
    8e0c:	00deb874 	movhi	r3,31457
    8e10:	18d1eb84 	addi	r3,r3,18350
    8e14:	10c00c15 	stw	r3,48(r2)
    8e18:	00cffc34 	movhi	r3,16368
    8e1c:	18eb8504 	addi	r3,r3,-20972
    8e20:	10c00d15 	stw	r3,52(r2)

}
    8e24:	0001883a 	nop
    8e28:	e037883a 	mov	sp,fp
    8e2c:	df000017 	ldw	fp,0(sp)
    8e30:	dec00104 	addi	sp,sp,4
    8e34:	f800283a 	ret

00008e38 <pan_ModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void pan_ModelInitialize_initialvalues(void)
{
    8e38:	deffff04 	addi	sp,sp,-4
    8e3c:	df000015 	stw	fp,0(sp)
    8e40:	d839883a 	mov	fp,sp
	/* set the initial values */
	pan_I[0] = 0.0;		/* PID1\uD_previous_initial */
    8e44:	00800074 	movhi	r2,1
    8e48:	10bcbb04 	addi	r2,r2,-3348
    8e4c:	10000015 	stw	zero,0(r2)
    8e50:	10000115 	stw	zero,4(r2)
	pan_I[1] = 0.0;		/* PID1\error_previous_initial */
    8e54:	00800074 	movhi	r2,1
    8e58:	10bcbb04 	addi	r2,r2,-3348
    8e5c:	10000215 	stw	zero,8(r2)
    8e60:	10000315 	stw	zero,12(r2)
	pan_I[2] = 0.0;		/* PID1\uI_previous_initial */
    8e64:	00800074 	movhi	r2,1
    8e68:	10bcbb04 	addi	r2,r2,-3348
    8e6c:	10000415 	stw	zero,16(r2)
    8e70:	10000515 	stw	zero,20(r2)

}
    8e74:	0001883a 	nop
    8e78:	e037883a 	mov	sp,fp
    8e7c:	df000017 	ldw	fp,0(sp)
    8e80:	dec00104 	addi	sp,sp,4
    8e84:	f800283a 	ret

00008e88 <pan_ModelInitialize_states>:

void pan_ModelInitialize_states(void)
{
    8e88:	deffff04 	addi	sp,sp,-4
    8e8c:	df000015 	stw	fp,0(sp)
    8e90:	d839883a 	mov	fp,sp
	/* set the states */
	pan_s[0] = pan_I[0];		/* PID1\uD_previous */
    8e94:	01000074 	movhi	r4,1
    8e98:	213cbb04 	addi	r4,r4,-3348
    8e9c:	20800017 	ldw	r2,0(r4)
    8ea0:	20c00117 	ldw	r3,4(r4)
    8ea4:	01000074 	movhi	r4,1
    8ea8:	213ccf04 	addi	r4,r4,-3268
    8eac:	20800015 	stw	r2,0(r4)
    8eb0:	20c00115 	stw	r3,4(r4)
	pan_s[1] = pan_I[1];		/* PID1\error_previous */
    8eb4:	01000074 	movhi	r4,1
    8eb8:	213cbb04 	addi	r4,r4,-3348
    8ebc:	20800217 	ldw	r2,8(r4)
    8ec0:	20c00317 	ldw	r3,12(r4)
    8ec4:	01000074 	movhi	r4,1
    8ec8:	213ccf04 	addi	r4,r4,-3268
    8ecc:	20800215 	stw	r2,8(r4)
    8ed0:	20c00315 	stw	r3,12(r4)
	pan_s[2] = pan_I[2];		/* PID1\uI_previous */
    8ed4:	01000074 	movhi	r4,1
    8ed8:	213cbb04 	addi	r4,r4,-3348
    8edc:	20800417 	ldw	r2,16(r4)
    8ee0:	20c00517 	ldw	r3,20(r4)
    8ee4:	01000074 	movhi	r4,1
    8ee8:	213ccf04 	addi	r4,r4,-3268
    8eec:	20800415 	stw	r2,16(r4)
    8ef0:	20c00515 	stw	r3,20(r4)

}
    8ef4:	0001883a 	nop
    8ef8:	e037883a 	mov	sp,fp
    8efc:	df000017 	ldw	fp,0(sp)
    8f00:	dec00104 	addi	sp,sp,4
    8f04:	f800283a 	ret

00008f08 <pan_ModelInitialize_variables>:

void pan_ModelInitialize_variables(void)
{
    8f08:	defffe04 	addi	sp,sp,-8
    8f0c:	dfc00115 	stw	ra,4(sp)
    8f10:	df000015 	stw	fp,0(sp)
    8f14:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(pan_V, 0, pan_variables_size * sizeof(double));
    8f18:	01801404 	movi	r6,80
    8f1c:	000b883a 	mov	r5,zero
    8f20:	01000074 	movhi	r4,1
    8f24:	213cd504 	addi	r4,r4,-3244
    8f28:	000c1a40 	call	c1a4 <memset>
}
    8f2c:	0001883a 	nop
    8f30:	e037883a 	mov	sp,fp
    8f34:	dfc00117 	ldw	ra,4(sp)
    8f38:	df000017 	ldw	fp,0(sp)
    8f3c:	dec00204 	addi	sp,sp,8
    8f40:	f800283a 	ret

00008f44 <pan_ModelInitialize>:

/* this method is called before calculation is possible */
void pan_ModelInitialize (void)
{
    8f44:	defffe04 	addi	sp,sp,-8
    8f48:	dfc00115 	stw	ra,4(sp)
    8f4c:	df000015 	stw	fp,0(sp)
    8f50:	d839883a 	mov	fp,sp
	pan_ModelInitialize_parameters();
    8f54:	0008d540 	call	8d54 <pan_ModelInitialize_parameters>
	pan_ModelInitialize_variables();
    8f58:	0008f080 	call	8f08 <pan_ModelInitialize_variables>
	pan_ModelInitialize_initialvalues();
    8f5c:	0008e380 	call	8e38 <pan_ModelInitialize_initialvalues>
	pan_ModelInitialize_states();
    8f60:	0008e880 	call	8e88 <pan_ModelInitialize_states>
}
    8f64:	0001883a 	nop
    8f68:	e037883a 	mov	sp,fp
    8f6c:	dfc00117 	ldw	ra,4(sp)
    8f70:	df000017 	ldw	fp,0(sp)
    8f74:	dec00204 	addi	sp,sp,8
    8f78:	f800283a 	ret

00008f7c <pan_CalculateInitial>:

/* This function calculates the initial equations of the model.
 * These equations are calculated before anything else
 */
void pan_CalculateInitial (void)
{
    8f7c:	deffff04 	addi	sp,sp,-4
    8f80:	df000015 	stw	fp,0(sp)
    8f84:	d839883a 	mov	fp,sp

}
    8f88:	0001883a 	nop
    8f8c:	e037883a 	mov	sp,fp
    8f90:	df000017 	ldw	fp,0(sp)
    8f94:	dec00104 	addi	sp,sp,4
    8f98:	f800283a 	ret

00008f9c <pan_CalculateStatic>:

/* This function calculates the static equations of the model.
 * These equations are only dependent from parameters and constants
 */
void pan_CalculateStatic (void)
{
    8f9c:	deffff04 	addi	sp,sp,-4
    8fa0:	df000015 	stw	fp,0(sp)
    8fa4:	d839883a 	mov	fp,sp

}
    8fa8:	0001883a 	nop
    8fac:	e037883a 	mov	sp,fp
    8fb0:	df000017 	ldw	fp,0(sp)
    8fb4:	dec00104 	addi	sp,sp,4
    8fb8:	f800283a 	ret

00008fbc <pan_CalculateInput>:
/* This function calculates the input equations of the model.
 * These equations are dynamic equations that must not change
 * in calls from the integration method (like random and delay).
 */
void pan_CalculateInput (void)
{
    8fbc:	deffff04 	addi	sp,sp,-4
    8fc0:	df000015 	stw	fp,0(sp)
    8fc4:	d839883a 	mov	fp,sp

}
    8fc8:	0001883a 	nop
    8fcc:	e037883a 	mov	sp,fp
    8fd0:	df000017 	ldw	fp,0(sp)
    8fd4:	dec00104 	addi	sp,sp,4
    8fd8:	f800283a 	ret

00008fdc <pan_CalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void pan_CalculateDynamic (void)
{
    8fdc:	defff804 	addi	sp,sp,-32
    8fe0:	dfc00715 	stw	ra,28(sp)
    8fe4:	df000615 	stw	fp,24(sp)
    8fe8:	dd400515 	stw	r21,20(sp)
    8fec:	dd000415 	stw	r20,16(sp)
    8ff0:	dcc00315 	stw	r19,12(sp)
    8ff4:	dc800215 	stw	r18,8(sp)
    8ff8:	dc400115 	stw	r17,4(sp)
    8ffc:	dc000015 	stw	r16,0(sp)
    9000:	df000604 	addi	fp,sp,24
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	pan_V[2] = 1.0 / (pan_step_size + pan_P[2] * pan_P[3]);
    9004:	01000074 	movhi	r4,1
    9008:	213cc104 	addi	r4,r4,-3324
    900c:	20800417 	ldw	r2,16(r4)
    9010:	20c00517 	ldw	r3,20(r4)
    9014:	01800074 	movhi	r6,1
    9018:	31bcc104 	addi	r6,r6,-3324
    901c:	31000617 	ldw	r4,24(r6)
    9020:	31400717 	ldw	r5,28(r6)
    9024:	200d883a 	mov	r6,r4
    9028:	280f883a 	mov	r7,r5
    902c:	1009883a 	mov	r4,r2
    9030:	180b883a 	mov	r5,r3
    9034:	000ae7c0 	call	ae7c <__muldf3>
    9038:	1009883a 	mov	r4,r2
    903c:	180b883a 	mov	r5,r3
    9040:	2011883a 	mov	r8,r4
    9044:	2813883a 	mov	r9,r5
    9048:	d0a00317 	ldw	r2,-32756(gp)
    904c:	d0e00417 	ldw	r3,-32752(gp)
    9050:	100d883a 	mov	r6,r2
    9054:	180f883a 	mov	r7,r3
    9058:	4009883a 	mov	r4,r8
    905c:	480b883a 	mov	r5,r9
    9060:	0009a300 	call	9a30 <__adddf3>
    9064:	1009883a 	mov	r4,r2
    9068:	180b883a 	mov	r5,r3
    906c:	2005883a 	mov	r2,r4
    9070:	2807883a 	mov	r3,r5
    9074:	100d883a 	mov	r6,r2
    9078:	180f883a 	mov	r7,r3
    907c:	0009883a 	mov	r4,zero
    9080:	014ffc34 	movhi	r5,16368
    9084:	000a2dc0 	call	a2dc <__divdf3>
    9088:	100b883a 	mov	r5,r2
    908c:	180d883a 	mov	r6,r3
    9090:	2807883a 	mov	r3,r5
    9094:	3009883a 	mov	r4,r6
    9098:	00800074 	movhi	r2,1
    909c:	10bcd504 	addi	r2,r2,-3244
    90a0:	10c00415 	stw	r3,16(r2)
    90a4:	11000515 	stw	r4,20(r2)

	/* PlusMinus1\plus1 = in; */
	pan_V[3] = pan_V[7];
    90a8:	01000074 	movhi	r4,1
    90ac:	213cd504 	addi	r4,r4,-3244
    90b0:	20800e17 	ldw	r2,56(r4)
    90b4:	20c00f17 	ldw	r3,60(r4)
    90b8:	01000074 	movhi	r4,1
    90bc:	213cd504 	addi	r4,r4,-3244
    90c0:	20800615 	stw	r2,24(r4)
    90c4:	20c00715 	stw	r3,28(r4)

	/* Splitter1\input = position; */
	pan_V[5] = pan_V[8];
    90c8:	01000074 	movhi	r4,1
    90cc:	213cd504 	addi	r4,r4,-3244
    90d0:	20801017 	ldw	r2,64(r4)
    90d4:	20c01117 	ldw	r3,68(r4)
    90d8:	01000074 	movhi	r4,1
    90dc:	213cd504 	addi	r4,r4,-3244
    90e0:	20800a15 	stw	r2,40(r4)
    90e4:	20c00b15 	stw	r3,44(r4)

	/* corrGain\corr = corrGain\K * Splitter1\input; */
	pan_V[0] = pan_P[0] * pan_V[5];
    90e8:	01000074 	movhi	r4,1
    90ec:	213cc104 	addi	r4,r4,-3324
    90f0:	20800017 	ldw	r2,0(r4)
    90f4:	20c00117 	ldw	r3,4(r4)
    90f8:	01800074 	movhi	r6,1
    90fc:	31bcd504 	addi	r6,r6,-3244
    9100:	31000a17 	ldw	r4,40(r6)
    9104:	31400b17 	ldw	r5,44(r6)
    9108:	200d883a 	mov	r6,r4
    910c:	280f883a 	mov	r7,r5
    9110:	1009883a 	mov	r4,r2
    9114:	180b883a 	mov	r5,r3
    9118:	000ae7c0 	call	ae7c <__muldf3>
    911c:	100b883a 	mov	r5,r2
    9120:	180d883a 	mov	r6,r3
    9124:	2807883a 	mov	r3,r5
    9128:	3009883a 	mov	r4,r6
    912c:	00800074 	movhi	r2,1
    9130:	10bcd504 	addi	r2,r2,-3244
    9134:	10c00015 	stw	r3,0(r2)
    9138:	11000115 	stw	r4,4(r2)

	/* PID1\error = PlusMinus1\plus1 - Splitter1\input; */
	pan_R[1] = pan_V[3] - pan_V[5];
    913c:	01000074 	movhi	r4,1
    9140:	213cd504 	addi	r4,r4,-3244
    9144:	20800617 	ldw	r2,24(r4)
    9148:	20c00717 	ldw	r3,28(r4)
    914c:	01800074 	movhi	r6,1
    9150:	31bcd504 	addi	r6,r6,-3244
    9154:	31000a17 	ldw	r4,40(r6)
    9158:	31400b17 	ldw	r5,44(r6)
    915c:	200d883a 	mov	r6,r4
    9160:	280f883a 	mov	r7,r5
    9164:	1009883a 	mov	r4,r2
    9168:	180b883a 	mov	r5,r3
    916c:	000b6e80 	call	b6e8 <__subdf3>
    9170:	100b883a 	mov	r5,r2
    9174:	180d883a 	mov	r6,r3
    9178:	2807883a 	mov	r3,r5
    917c:	3009883a 	mov	r4,r6
    9180:	00800074 	movhi	r2,1
    9184:	10bce904 	addi	r2,r2,-3164
    9188:	10c00215 	stw	r3,8(r2)
    918c:	11000315 	stw	r4,12(r2)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	pan_R[0] = pan_V[2] * (((pan_P[2] * pan_s[0]) * pan_P[3] + (pan_P[2] * pan_P[1]) * (pan_R[1] - pan_s[1])) + (pan_step_size * pan_P[1]) * pan_R[1]);
    9190:	00800074 	movhi	r2,1
    9194:	10bcd504 	addi	r2,r2,-3244
    9198:	14000417 	ldw	r16,16(r2)
    919c:	14400517 	ldw	r17,20(r2)
    91a0:	01000074 	movhi	r4,1
    91a4:	213cc104 	addi	r4,r4,-3324
    91a8:	20800417 	ldw	r2,16(r4)
    91ac:	20c00517 	ldw	r3,20(r4)
    91b0:	01800074 	movhi	r6,1
    91b4:	31bccf04 	addi	r6,r6,-3268
    91b8:	31000017 	ldw	r4,0(r6)
    91bc:	31400117 	ldw	r5,4(r6)
    91c0:	200d883a 	mov	r6,r4
    91c4:	280f883a 	mov	r7,r5
    91c8:	1009883a 	mov	r4,r2
    91cc:	180b883a 	mov	r5,r3
    91d0:	000ae7c0 	call	ae7c <__muldf3>
    91d4:	1009883a 	mov	r4,r2
    91d8:	180b883a 	mov	r5,r3
    91dc:	2011883a 	mov	r8,r4
    91e0:	2813883a 	mov	r9,r5
    91e4:	01000074 	movhi	r4,1
    91e8:	213cc104 	addi	r4,r4,-3324
    91ec:	20800617 	ldw	r2,24(r4)
    91f0:	20c00717 	ldw	r3,28(r4)
    91f4:	100d883a 	mov	r6,r2
    91f8:	180f883a 	mov	r7,r3
    91fc:	4009883a 	mov	r4,r8
    9200:	480b883a 	mov	r5,r9
    9204:	000ae7c0 	call	ae7c <__muldf3>
    9208:	1009883a 	mov	r4,r2
    920c:	180b883a 	mov	r5,r3
    9210:	2025883a 	mov	r18,r4
    9214:	2827883a 	mov	r19,r5
    9218:	01000074 	movhi	r4,1
    921c:	213cc104 	addi	r4,r4,-3324
    9220:	20800417 	ldw	r2,16(r4)
    9224:	20c00517 	ldw	r3,20(r4)
    9228:	01800074 	movhi	r6,1
    922c:	31bcc104 	addi	r6,r6,-3324
    9230:	31000217 	ldw	r4,8(r6)
    9234:	31400317 	ldw	r5,12(r6)
    9238:	200d883a 	mov	r6,r4
    923c:	280f883a 	mov	r7,r5
    9240:	1009883a 	mov	r4,r2
    9244:	180b883a 	mov	r5,r3
    9248:	000ae7c0 	call	ae7c <__muldf3>
    924c:	1009883a 	mov	r4,r2
    9250:	180b883a 	mov	r5,r3
    9254:	2029883a 	mov	r20,r4
    9258:	282b883a 	mov	r21,r5
    925c:	01000074 	movhi	r4,1
    9260:	213ce904 	addi	r4,r4,-3164
    9264:	20800217 	ldw	r2,8(r4)
    9268:	20c00317 	ldw	r3,12(r4)
    926c:	01800074 	movhi	r6,1
    9270:	31bccf04 	addi	r6,r6,-3268
    9274:	31000217 	ldw	r4,8(r6)
    9278:	31400317 	ldw	r5,12(r6)
    927c:	200d883a 	mov	r6,r4
    9280:	280f883a 	mov	r7,r5
    9284:	1009883a 	mov	r4,r2
    9288:	180b883a 	mov	r5,r3
    928c:	000b6e80 	call	b6e8 <__subdf3>
    9290:	1009883a 	mov	r4,r2
    9294:	180b883a 	mov	r5,r3
    9298:	2005883a 	mov	r2,r4
    929c:	2807883a 	mov	r3,r5
    92a0:	100d883a 	mov	r6,r2
    92a4:	180f883a 	mov	r7,r3
    92a8:	a009883a 	mov	r4,r20
    92ac:	a80b883a 	mov	r5,r21
    92b0:	000ae7c0 	call	ae7c <__muldf3>
    92b4:	1009883a 	mov	r4,r2
    92b8:	180b883a 	mov	r5,r3
    92bc:	2005883a 	mov	r2,r4
    92c0:	2807883a 	mov	r3,r5
    92c4:	100d883a 	mov	r6,r2
    92c8:	180f883a 	mov	r7,r3
    92cc:	9009883a 	mov	r4,r18
    92d0:	980b883a 	mov	r5,r19
    92d4:	0009a300 	call	9a30 <__adddf3>
    92d8:	1009883a 	mov	r4,r2
    92dc:	180b883a 	mov	r5,r3
    92e0:	2025883a 	mov	r18,r4
    92e4:	2827883a 	mov	r19,r5
    92e8:	01000074 	movhi	r4,1
    92ec:	213cc104 	addi	r4,r4,-3324
    92f0:	20800217 	ldw	r2,8(r4)
    92f4:	20c00317 	ldw	r3,12(r4)
    92f8:	d1200317 	ldw	r4,-32756(gp)
    92fc:	d1600417 	ldw	r5,-32752(gp)
    9300:	200d883a 	mov	r6,r4
    9304:	280f883a 	mov	r7,r5
    9308:	1009883a 	mov	r4,r2
    930c:	180b883a 	mov	r5,r3
    9310:	000ae7c0 	call	ae7c <__muldf3>
    9314:	1009883a 	mov	r4,r2
    9318:	180b883a 	mov	r5,r3
    931c:	2011883a 	mov	r8,r4
    9320:	2813883a 	mov	r9,r5
    9324:	01000074 	movhi	r4,1
    9328:	213ce904 	addi	r4,r4,-3164
    932c:	20800217 	ldw	r2,8(r4)
    9330:	20c00317 	ldw	r3,12(r4)
    9334:	100d883a 	mov	r6,r2
    9338:	180f883a 	mov	r7,r3
    933c:	4009883a 	mov	r4,r8
    9340:	480b883a 	mov	r5,r9
    9344:	000ae7c0 	call	ae7c <__muldf3>
    9348:	1009883a 	mov	r4,r2
    934c:	180b883a 	mov	r5,r3
    9350:	2005883a 	mov	r2,r4
    9354:	2807883a 	mov	r3,r5
    9358:	100d883a 	mov	r6,r2
    935c:	180f883a 	mov	r7,r3
    9360:	9009883a 	mov	r4,r18
    9364:	980b883a 	mov	r5,r19
    9368:	0009a300 	call	9a30 <__adddf3>
    936c:	1009883a 	mov	r4,r2
    9370:	180b883a 	mov	r5,r3
    9374:	2005883a 	mov	r2,r4
    9378:	2807883a 	mov	r3,r5
    937c:	100d883a 	mov	r6,r2
    9380:	180f883a 	mov	r7,r3
    9384:	8009883a 	mov	r4,r16
    9388:	880b883a 	mov	r5,r17
    938c:	000ae7c0 	call	ae7c <__muldf3>
    9390:	100b883a 	mov	r5,r2
    9394:	180d883a 	mov	r6,r3
    9398:	2807883a 	mov	r3,r5
    939c:	3009883a 	mov	r4,r6
    93a0:	00800074 	movhi	r2,1
    93a4:	10bce904 	addi	r2,r2,-3164
    93a8:	10c00015 	stw	r3,0(r2)
    93ac:	11000115 	stw	r4,4(r2)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	pan_R[2] = pan_s[2] + (pan_step_size * pan_R[0]) / pan_P[4];
    93b0:	00800074 	movhi	r2,1
    93b4:	10bccf04 	addi	r2,r2,-3268
    93b8:	14000417 	ldw	r16,16(r2)
    93bc:	14400517 	ldw	r17,20(r2)
    93c0:	01000074 	movhi	r4,1
    93c4:	213ce904 	addi	r4,r4,-3164
    93c8:	20800017 	ldw	r2,0(r4)
    93cc:	20c00117 	ldw	r3,4(r4)
    93d0:	d1200317 	ldw	r4,-32756(gp)
    93d4:	d1600417 	ldw	r5,-32752(gp)
    93d8:	200d883a 	mov	r6,r4
    93dc:	280f883a 	mov	r7,r5
    93e0:	1009883a 	mov	r4,r2
    93e4:	180b883a 	mov	r5,r3
    93e8:	000ae7c0 	call	ae7c <__muldf3>
    93ec:	1009883a 	mov	r4,r2
    93f0:	180b883a 	mov	r5,r3
    93f4:	2011883a 	mov	r8,r4
    93f8:	2813883a 	mov	r9,r5
    93fc:	01000074 	movhi	r4,1
    9400:	213cc104 	addi	r4,r4,-3324
    9404:	20800817 	ldw	r2,32(r4)
    9408:	20c00917 	ldw	r3,36(r4)
    940c:	100d883a 	mov	r6,r2
    9410:	180f883a 	mov	r7,r3
    9414:	4009883a 	mov	r4,r8
    9418:	480b883a 	mov	r5,r9
    941c:	000a2dc0 	call	a2dc <__divdf3>
    9420:	1009883a 	mov	r4,r2
    9424:	180b883a 	mov	r5,r3
    9428:	2005883a 	mov	r2,r4
    942c:	2807883a 	mov	r3,r5
    9430:	100d883a 	mov	r6,r2
    9434:	180f883a 	mov	r7,r3
    9438:	8009883a 	mov	r4,r16
    943c:	880b883a 	mov	r5,r17
    9440:	0009a300 	call	9a30 <__adddf3>
    9444:	100b883a 	mov	r5,r2
    9448:	180d883a 	mov	r6,r3
    944c:	2807883a 	mov	r3,r5
    9450:	3009883a 	mov	r4,r6
    9454:	00800074 	movhi	r2,1
    9458:	10bce904 	addi	r2,r2,-3164
    945c:	10c00415 	stw	r3,16(r2)
    9460:	11000515 	stw	r4,20(r2)

	/* PID1\output = PID1\uI + PID1\uD; */
	pan_V[1] = pan_R[2] + pan_R[0];
    9464:	01000074 	movhi	r4,1
    9468:	213ce904 	addi	r4,r4,-3164
    946c:	20800417 	ldw	r2,16(r4)
    9470:	20c00517 	ldw	r3,20(r4)
    9474:	01800074 	movhi	r6,1
    9478:	31bce904 	addi	r6,r6,-3164
    947c:	31000017 	ldw	r4,0(r6)
    9480:	31400117 	ldw	r5,4(r6)
    9484:	200d883a 	mov	r6,r4
    9488:	280f883a 	mov	r7,r5
    948c:	1009883a 	mov	r4,r2
    9490:	180b883a 	mov	r5,r3
    9494:	0009a300 	call	9a30 <__adddf3>
    9498:	100b883a 	mov	r5,r2
    949c:	180d883a 	mov	r6,r3
    94a0:	2807883a 	mov	r3,r5
    94a4:	3009883a 	mov	r4,r6
    94a8:	00800074 	movhi	r2,1
    94ac:	10bcd504 	addi	r2,r2,-3244
    94b0:	10c00215 	stw	r3,8(r2)
    94b4:	11000315 	stw	r4,12(r2)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
    94b8:	01000074 	movhi	r4,1
    94bc:	213cd504 	addi	r4,r4,-3244
    94c0:	20800217 	ldw	r2,8(r4)
    94c4:	20c00317 	ldw	r3,12(r4)
    94c8:	01800074 	movhi	r6,1
    94cc:	31bcc104 	addi	r6,r6,-3324
    94d0:	31000a17 	ldw	r4,40(r6)
    94d4:	31400b17 	ldw	r5,44(r6)
		/* SignalLimiter2\minimum */
		pan_P[5]
	:
    94d8:	200d883a 	mov	r6,r4
    94dc:	280f883a 	mov	r7,r5
    94e0:	1009883a 	mov	r4,r2
    94e4:	180b883a 	mov	r5,r3
    94e8:	000ad880 	call	ad88 <__ledf2>
    94ec:	1000050e 	bge	r2,zero,9504 <pan_CalculateDynamic+0x528>
    94f0:	01000074 	movhi	r4,1
    94f4:	213cc104 	addi	r4,r4,-3324
    94f8:	20800a17 	ldw	r2,40(r4)
    94fc:	20c00b17 	ldw	r3,44(r4)
    9500:	00001706 	br	9560 <pan_CalculateDynamic+0x584>
		/* (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) */
		((pan_V[1] > pan_P[6]) ? 
    9504:	01000074 	movhi	r4,1
    9508:	213cd504 	addi	r4,r4,-3244
    950c:	20800217 	ldw	r2,8(r4)
    9510:	20c00317 	ldw	r3,12(r4)
    9514:	01800074 	movhi	r6,1
    9518:	31bcc104 	addi	r6,r6,-3324
    951c:	31000c17 	ldw	r4,48(r6)
    9520:	31400d17 	ldw	r5,52(r6)
			/* SignalLimiter2\maximum */
			pan_P[6]
		:
    9524:	200d883a 	mov	r6,r4
    9528:	280f883a 	mov	r7,r5
    952c:	1009883a 	mov	r4,r2
    9530:	180b883a 	mov	r5,r3
    9534:	000acac0 	call	acac <__gedf2>
    9538:	0080050e 	bge	zero,r2,9550 <pan_CalculateDynamic+0x574>
    953c:	01000074 	movhi	r4,1
    9540:	213cc104 	addi	r4,r4,-3324
    9544:	20800c17 	ldw	r2,48(r4)
    9548:	20c00d17 	ldw	r3,52(r4)
    954c:	00000406 	br	9560 <pan_CalculateDynamic+0x584>
    9550:	01000074 	movhi	r4,1
    9554:	213cd504 	addi	r4,r4,-3244
    9558:	20800217 	ldw	r2,8(r4)
    955c:	20c00317 	ldw	r3,12(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	pan_V[1] = pan_R[2] + pan_R[0];

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
    9560:	01000074 	movhi	r4,1
    9564:	213cd504 	addi	r4,r4,-3244
    9568:	20800815 	stw	r2,32(r4)
    956c:	20c00915 	stw	r3,36(r4)
		)
	);


	/* increment the step counter */
	pan_steps++;
    9570:	d0a0e417 	ldw	r2,-31856(gp)
    9574:	10800044 	addi	r2,r2,1
    9578:	d0a0e415 	stw	r2,-31856(gp)
}
    957c:	0001883a 	nop
    9580:	e6fffa04 	addi	sp,fp,-24
    9584:	dfc00717 	ldw	ra,28(sp)
    9588:	df000617 	ldw	fp,24(sp)
    958c:	dd400517 	ldw	r21,20(sp)
    9590:	dd000417 	ldw	r20,16(sp)
    9594:	dcc00317 	ldw	r19,12(sp)
    9598:	dc800217 	ldw	r18,8(sp)
    959c:	dc400117 	ldw	r17,4(sp)
    95a0:	dc000017 	ldw	r16,0(sp)
    95a4:	dec00804 	addi	sp,sp,32
    95a8:	f800283a 	ret

000095ac <pan_CalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void pan_CalculateOutput (void)
{
    95ac:	deffff04 	addi	sp,sp,-4
    95b0:	df000015 	stw	fp,0(sp)
    95b4:	d839883a 	mov	fp,sp
	/* corr = corrGain\corr; */
	pan_V[6] = pan_V[0];
    95b8:	01000074 	movhi	r4,1
    95bc:	213cd504 	addi	r4,r4,-3244
    95c0:	20800017 	ldw	r2,0(r4)
    95c4:	20c00117 	ldw	r3,4(r4)
    95c8:	01000074 	movhi	r4,1
    95cc:	213cd504 	addi	r4,r4,-3244
    95d0:	20800c15 	stw	r2,48(r4)
    95d4:	20c00d15 	stw	r3,52(r4)

	/* out = SignalLimiter2\output; */
	pan_V[9] = pan_V[4];
    95d8:	01000074 	movhi	r4,1
    95dc:	213cd504 	addi	r4,r4,-3244
    95e0:	20800817 	ldw	r2,32(r4)
    95e4:	20c00917 	ldw	r3,36(r4)
    95e8:	01000074 	movhi	r4,1
    95ec:	213cd504 	addi	r4,r4,-3244
    95f0:	20801215 	stw	r2,72(r4)
    95f4:	20c01315 	stw	r3,76(r4)

}
    95f8:	0001883a 	nop
    95fc:	e037883a 	mov	sp,fp
    9600:	df000017 	ldw	fp,0(sp)
    9604:	dec00104 	addi	sp,sp,4
    9608:	f800283a 	ret

0000960c <pan_CalculateFinal>:
/* This function calculates the final equations of the model.
 * These equations are calculated after all the calculations
 * are performed
 */
void pan_CalculateFinal (void)
{
    960c:	deffff04 	addi	sp,sp,-4
    9610:	df000015 	stw	fp,0(sp)
    9614:	d839883a 	mov	fp,sp

}
    9618:	0001883a 	nop
    961c:	e037883a 	mov	sp,fp
    9620:	df000017 	ldw	fp,0(sp)
    9624:	dec00104 	addi	sp,sp,4
    9628:	f800283a 	ret

0000962c <pan_ModelTerminate>:

/* this method is called after all calculations are performed */
void pan_ModelTerminate(void)
{
    962c:	deffff04 	addi	sp,sp,-4
    9630:	df000015 	stw	fp,0(sp)
    9634:	d839883a 	mov	fp,sp
}
    9638:	0001883a 	nop
    963c:	e037883a 	mov	sp,fp
    9640:	df000017 	ldw	fp,0(sp)
    9644:	dec00104 	addi	sp,sp,4
    9648:	f800283a 	ret

0000964c <pan_CopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void pan_CopyInputsToVariables (double *u)
{
    964c:	defffe04 	addi	sp,sp,-8
    9650:	df000115 	stw	fp,4(sp)
    9654:	df000104 	addi	fp,sp,4
    9658:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	pan_V[7] = u[0];		/* in */
    965c:	e13fff17 	ldw	r4,-4(fp)
    9660:	20800017 	ldw	r2,0(r4)
    9664:	20c00117 	ldw	r3,4(r4)
    9668:	01000074 	movhi	r4,1
    966c:	213cd504 	addi	r4,r4,-3244
    9670:	20800e15 	stw	r2,56(r4)
    9674:	20c00f15 	stw	r3,60(r4)
	pan_V[8] = u[1];		/* position */
    9678:	e13fff17 	ldw	r4,-4(fp)
    967c:	20800217 	ldw	r2,8(r4)
    9680:	20c00317 	ldw	r3,12(r4)
    9684:	01000074 	movhi	r4,1
    9688:	213cd504 	addi	r4,r4,-3244
    968c:	20801015 	stw	r2,64(r4)
    9690:	20c01115 	stw	r3,68(r4)

}
    9694:	0001883a 	nop
    9698:	e037883a 	mov	sp,fp
    969c:	df000017 	ldw	fp,0(sp)
    96a0:	dec00104 	addi	sp,sp,4
    96a4:	f800283a 	ret

000096a8 <pan_CopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void pan_CopyVariablesToOutputs (double *y)
{
    96a8:	defffe04 	addi	sp,sp,-8
    96ac:	df000115 	stw	fp,4(sp)
    96b0:	df000104 	addi	fp,sp,4
    96b4:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	pan_V[6];		/* corr */
    96b8:	01000074 	movhi	r4,1
    96bc:	213cd504 	addi	r4,r4,-3244
    96c0:	20800c17 	ldw	r2,48(r4)
    96c4:	20c00d17 	ldw	r3,52(r4)
    96c8:	e13fff17 	ldw	r4,-4(fp)
    96cc:	20800015 	stw	r2,0(r4)
    96d0:	20c00115 	stw	r3,4(r4)
	y[1] = 	pan_V[9];		/* out */
    96d4:	e0bfff17 	ldw	r2,-4(fp)
    96d8:	11400204 	addi	r5,r2,8
    96dc:	01000074 	movhi	r4,1
    96e0:	213cd504 	addi	r4,r4,-3244
    96e4:	20801217 	ldw	r2,72(r4)
    96e8:	20c01317 	ldw	r3,76(r4)
    96ec:	28800015 	stw	r2,0(r5)
    96f0:	28c00115 	stw	r3,4(r5)

}
    96f4:	0001883a 	nop
    96f8:	e037883a 	mov	sp,fp
    96fc:	df000017 	ldw	fp,0(sp)
    9700:	dec00104 	addi	sp,sp,4
    9704:	f800283a 	ret

00009708 <pan_InitializeSubmodel>:

/* The initialization function for submodel */
void pan_InitializeSubmodel (double *u, double *y, double t)
{
    9708:	defffa04 	addi	sp,sp,-24
    970c:	dfc00515 	stw	ra,20(sp)
    9710:	df000415 	stw	fp,16(sp)
    9714:	df000404 	addi	fp,sp,16
    9718:	e13ffc15 	stw	r4,-16(fp)
    971c:	e17ffd15 	stw	r5,-12(fp)
    9720:	e1bffe15 	stw	r6,-8(fp)
    9724:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	pan_initialize = 1;
    9728:	00800044 	movi	r2,1
    972c:	d0a00505 	stb	r2,-32748(gp)
	pan_steps = 0;
    9730:	d020e415 	stw	zero,-31856(gp)
	pan_ModelInitialize ();
    9734:	0008f440 	call	8f44 <pan_ModelInitialize>
	pan_DiscreteInitialize ();
    9738:	0008c440 	call	8c44 <pan_DiscreteInitialize>

	/* Copy the inputs */
	pan_time = t;
    973c:	e0bffe17 	ldw	r2,-8(fp)
    9740:	d0a0e215 	stw	r2,-31864(gp)
    9744:	e0bfff17 	ldw	r2,-4(fp)
    9748:	d0a0e315 	stw	r2,-31860(gp)
	pan_CopyInputsToVariables (u);
    974c:	e13ffc17 	ldw	r4,-16(fp)
    9750:	000964c0 	call	964c <pan_CopyInputsToVariables>

	/* Calculate the model for the first time */
	pan_CalculateInitial ();
    9754:	0008f7c0 	call	8f7c <pan_CalculateInitial>
	pan_CalculateStatic ();
    9758:	0008f9c0 	call	8f9c <pan_CalculateStatic>
	pan_CalculateInput ();
    975c:	0008fbc0 	call	8fbc <pan_CalculateInput>
	pan_CalculateDynamic ();
    9760:	0008fdc0 	call	8fdc <pan_CalculateDynamic>
	pan_CalculateOutput ();
    9764:	00095ac0 	call	95ac <pan_CalculateOutput>

	/* Set the outputs */
	pan_CopyVariablesToOutputs (y);
    9768:	e13ffd17 	ldw	r4,-12(fp)
    976c:	00096a80 	call	96a8 <pan_CopyVariablesToOutputs>

	/* End of initialization phase */
	pan_initialize = 0;
    9770:	d0200505 	stb	zero,-32748(gp)
}
    9774:	0001883a 	nop
    9778:	e037883a 	mov	sp,fp
    977c:	dfc00117 	ldw	ra,4(sp)
    9780:	df000017 	ldw	fp,0(sp)
    9784:	dec00204 	addi	sp,sp,8
    9788:	f800283a 	ret

0000978c <pan_CalculateSubmodel>:

/* The function that calculates the submodel */
void pan_CalculateSubmodel (double *u, double *y, double t)
{
    978c:	defffa04 	addi	sp,sp,-24
    9790:	dfc00515 	stw	ra,20(sp)
    9794:	df000415 	stw	fp,16(sp)
    9798:	df000404 	addi	fp,sp,16
    979c:	e13ffc15 	stw	r4,-16(fp)
    97a0:	e17ffd15 	stw	r5,-12(fp)
    97a4:	e1bffe15 	stw	r6,-8(fp)
    97a8:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	pan_time = t;
    97ac:	e0bffe17 	ldw	r2,-8(fp)
    97b0:	d0a0e215 	stw	r2,-31864(gp)
    97b4:	e0bfff17 	ldw	r2,-4(fp)
    97b8:	d0a0e315 	stw	r2,-31860(gp)
	pan_CopyInputsToVariables (u);
    97bc:	e13ffc17 	ldw	r4,-16(fp)
    97c0:	000964c0 	call	964c <pan_CopyInputsToVariables>

	/* Calculate the model */
	pan_CalculateInput ();
    97c4:	0008fbc0 	call	8fbc <pan_CalculateInput>
	pan_DiscreteStep ();
    97c8:	0008c8c0 	call	8c8c <pan_DiscreteStep>
	pan_CalculateOutput ();
    97cc:	00095ac0 	call	95ac <pan_CalculateOutput>

	/* Copy the outputs */
	pan_CopyVariablesToOutputs (y);
    97d0:	e13ffd17 	ldw	r4,-12(fp)
    97d4:	00096a80 	call	96a8 <pan_CopyVariablesToOutputs>
}
    97d8:	0001883a 	nop
    97dc:	e037883a 	mov	sp,fp
    97e0:	dfc00117 	ldw	ra,4(sp)
    97e4:	df000017 	ldw	fp,0(sp)
    97e8:	dec00204 	addi	sp,sp,8
    97ec:	f800283a 	ret

000097f0 <pan_TerminateSubmodel>:

/* The termination function for submodel */
void pan_TerminateSubmodel (double *u, double *y, double t)
{
    97f0:	defffa04 	addi	sp,sp,-24
    97f4:	dfc00515 	stw	ra,20(sp)
    97f8:	df000415 	stw	fp,16(sp)
    97fc:	df000404 	addi	fp,sp,16
    9800:	e13ffc15 	stw	r4,-16(fp)
    9804:	e17ffd15 	stw	r5,-12(fp)
    9808:	e1bffe15 	stw	r6,-8(fp)
    980c:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	pan_time = t;
    9810:	e0bffe17 	ldw	r2,-8(fp)
    9814:	d0a0e215 	stw	r2,-31864(gp)
    9818:	e0bfff17 	ldw	r2,-4(fp)
    981c:	d0a0e315 	stw	r2,-31860(gp)
	pan_CopyInputsToVariables (u);
    9820:	e13ffc17 	ldw	r4,-16(fp)
    9824:	000964c0 	call	964c <pan_CopyInputsToVariables>

	/* Calculate the final model equations */
	pan_CalculateFinal ();
    9828:	000960c0 	call	960c <pan_CalculateFinal>

	/* Set the outputs */
	pan_CopyVariablesToOutputs (y);
    982c:	e13ffd17 	ldw	r4,-12(fp)
    9830:	00096a80 	call	96a8 <pan_CopyVariablesToOutputs>

	/* and terminate the model itself (releasing memory) */
	pan_ModelTerminate ();
    9834:	000962c0 	call	962c <pan_ModelTerminate>
	pan_DiscreteTerminate ();
    9838:	0008c6c0 	call	8c6c <pan_DiscreteTerminate>
}
    983c:	0001883a 	nop
    9840:	e037883a 	mov	sp,fp
    9844:	dfc00117 	ldw	ra,4(sp)
    9848:	df000017 	ldw	fp,0(sp)
    984c:	dec00204 	addi	sp,sp,8
    9850:	f800283a 	ret

00009854 <__divsi3>:
    9854:	20001b16 	blt	r4,zero,98c4 <__divsi3+0x70>
    9858:	000f883a 	mov	r7,zero
    985c:	28001616 	blt	r5,zero,98b8 <__divsi3+0x64>
    9860:	200d883a 	mov	r6,r4
    9864:	29001a2e 	bgeu	r5,r4,98d0 <__divsi3+0x7c>
    9868:	00800804 	movi	r2,32
    986c:	00c00044 	movi	r3,1
    9870:	00000106 	br	9878 <__divsi3+0x24>
    9874:	10000d26 	beq	r2,zero,98ac <__divsi3+0x58>
    9878:	294b883a 	add	r5,r5,r5
    987c:	10bfffc4 	addi	r2,r2,-1
    9880:	18c7883a 	add	r3,r3,r3
    9884:	293ffb36 	bltu	r5,r4,9874 <_gp+0xffff313c>
    9888:	0005883a 	mov	r2,zero
    988c:	18000726 	beq	r3,zero,98ac <__divsi3+0x58>
    9890:	0005883a 	mov	r2,zero
    9894:	31400236 	bltu	r6,r5,98a0 <__divsi3+0x4c>
    9898:	314dc83a 	sub	r6,r6,r5
    989c:	10c4b03a 	or	r2,r2,r3
    98a0:	1806d07a 	srli	r3,r3,1
    98a4:	280ad07a 	srli	r5,r5,1
    98a8:	183ffa1e 	bne	r3,zero,9894 <_gp+0xffff315c>
    98ac:	38000126 	beq	r7,zero,98b4 <__divsi3+0x60>
    98b0:	0085c83a 	sub	r2,zero,r2
    98b4:	f800283a 	ret
    98b8:	014bc83a 	sub	r5,zero,r5
    98bc:	39c0005c 	xori	r7,r7,1
    98c0:	003fe706 	br	9860 <_gp+0xffff3128>
    98c4:	0109c83a 	sub	r4,zero,r4
    98c8:	01c00044 	movi	r7,1
    98cc:	003fe306 	br	985c <_gp+0xffff3124>
    98d0:	00c00044 	movi	r3,1
    98d4:	003fee06 	br	9890 <_gp+0xffff3158>

000098d8 <__modsi3>:
    98d8:	20001716 	blt	r4,zero,9938 <__modsi3+0x60>
    98dc:	000f883a 	mov	r7,zero
    98e0:	2005883a 	mov	r2,r4
    98e4:	28001216 	blt	r5,zero,9930 <__modsi3+0x58>
    98e8:	2900162e 	bgeu	r5,r4,9944 <__modsi3+0x6c>
    98ec:	01800804 	movi	r6,32
    98f0:	00c00044 	movi	r3,1
    98f4:	00000106 	br	98fc <__modsi3+0x24>
    98f8:	30000a26 	beq	r6,zero,9924 <__modsi3+0x4c>
    98fc:	294b883a 	add	r5,r5,r5
    9900:	31bfffc4 	addi	r6,r6,-1
    9904:	18c7883a 	add	r3,r3,r3
    9908:	293ffb36 	bltu	r5,r4,98f8 <_gp+0xffff31c0>
    990c:	18000526 	beq	r3,zero,9924 <__modsi3+0x4c>
    9910:	1806d07a 	srli	r3,r3,1
    9914:	11400136 	bltu	r2,r5,991c <__modsi3+0x44>
    9918:	1145c83a 	sub	r2,r2,r5
    991c:	280ad07a 	srli	r5,r5,1
    9920:	183ffb1e 	bne	r3,zero,9910 <_gp+0xffff31d8>
    9924:	38000126 	beq	r7,zero,992c <__modsi3+0x54>
    9928:	0085c83a 	sub	r2,zero,r2
    992c:	f800283a 	ret
    9930:	014bc83a 	sub	r5,zero,r5
    9934:	003fec06 	br	98e8 <_gp+0xffff31b0>
    9938:	0109c83a 	sub	r4,zero,r4
    993c:	01c00044 	movi	r7,1
    9940:	003fe706 	br	98e0 <_gp+0xffff31a8>
    9944:	00c00044 	movi	r3,1
    9948:	003ff106 	br	9910 <_gp+0xffff31d8>

0000994c <__udivsi3>:
    994c:	200d883a 	mov	r6,r4
    9950:	2900152e 	bgeu	r5,r4,99a8 <__udivsi3+0x5c>
    9954:	28001416 	blt	r5,zero,99a8 <__udivsi3+0x5c>
    9958:	00800804 	movi	r2,32
    995c:	00c00044 	movi	r3,1
    9960:	00000206 	br	996c <__udivsi3+0x20>
    9964:	10000e26 	beq	r2,zero,99a0 <__udivsi3+0x54>
    9968:	28000516 	blt	r5,zero,9980 <__udivsi3+0x34>
    996c:	294b883a 	add	r5,r5,r5
    9970:	10bfffc4 	addi	r2,r2,-1
    9974:	18c7883a 	add	r3,r3,r3
    9978:	293ffa36 	bltu	r5,r4,9964 <_gp+0xffff322c>
    997c:	18000826 	beq	r3,zero,99a0 <__udivsi3+0x54>
    9980:	0005883a 	mov	r2,zero
    9984:	31400236 	bltu	r6,r5,9990 <__udivsi3+0x44>
    9988:	314dc83a 	sub	r6,r6,r5
    998c:	10c4b03a 	or	r2,r2,r3
    9990:	1806d07a 	srli	r3,r3,1
    9994:	280ad07a 	srli	r5,r5,1
    9998:	183ffa1e 	bne	r3,zero,9984 <_gp+0xffff324c>
    999c:	f800283a 	ret
    99a0:	0005883a 	mov	r2,zero
    99a4:	f800283a 	ret
    99a8:	00c00044 	movi	r3,1
    99ac:	003ff406 	br	9980 <_gp+0xffff3248>

000099b0 <__umodsi3>:
    99b0:	2005883a 	mov	r2,r4
    99b4:	2900122e 	bgeu	r5,r4,9a00 <__umodsi3+0x50>
    99b8:	28001116 	blt	r5,zero,9a00 <__umodsi3+0x50>
    99bc:	01800804 	movi	r6,32
    99c0:	00c00044 	movi	r3,1
    99c4:	00000206 	br	99d0 <__umodsi3+0x20>
    99c8:	30000c26 	beq	r6,zero,99fc <__umodsi3+0x4c>
    99cc:	28000516 	blt	r5,zero,99e4 <__umodsi3+0x34>
    99d0:	294b883a 	add	r5,r5,r5
    99d4:	31bfffc4 	addi	r6,r6,-1
    99d8:	18c7883a 	add	r3,r3,r3
    99dc:	293ffa36 	bltu	r5,r4,99c8 <_gp+0xffff3290>
    99e0:	18000626 	beq	r3,zero,99fc <__umodsi3+0x4c>
    99e4:	1806d07a 	srli	r3,r3,1
    99e8:	11400136 	bltu	r2,r5,99f0 <__umodsi3+0x40>
    99ec:	1145c83a 	sub	r2,r2,r5
    99f0:	280ad07a 	srli	r5,r5,1
    99f4:	183ffb1e 	bne	r3,zero,99e4 <_gp+0xffff32ac>
    99f8:	f800283a 	ret
    99fc:	f800283a 	ret
    9a00:	00c00044 	movi	r3,1
    9a04:	003ff706 	br	99e4 <_gp+0xffff32ac>

00009a08 <__mulsi3>:
    9a08:	0005883a 	mov	r2,zero
    9a0c:	20000726 	beq	r4,zero,9a2c <__mulsi3+0x24>
    9a10:	20c0004c 	andi	r3,r4,1
    9a14:	2008d07a 	srli	r4,r4,1
    9a18:	18000126 	beq	r3,zero,9a20 <__mulsi3+0x18>
    9a1c:	1145883a 	add	r2,r2,r5
    9a20:	294b883a 	add	r5,r5,r5
    9a24:	203ffa1e 	bne	r4,zero,9a10 <_gp+0xffff32d8>
    9a28:	f800283a 	ret
    9a2c:	f800283a 	ret

00009a30 <__adddf3>:
    9a30:	02c00434 	movhi	r11,16
    9a34:	5affffc4 	addi	r11,r11,-1
    9a38:	2806d7fa 	srli	r3,r5,31
    9a3c:	2ad4703a 	and	r10,r5,r11
    9a40:	3ad2703a 	and	r9,r7,r11
    9a44:	3804d53a 	srli	r2,r7,20
    9a48:	3018d77a 	srli	r12,r6,29
    9a4c:	280ad53a 	srli	r5,r5,20
    9a50:	501490fa 	slli	r10,r10,3
    9a54:	2010d77a 	srli	r8,r4,29
    9a58:	481290fa 	slli	r9,r9,3
    9a5c:	380ed7fa 	srli	r7,r7,31
    9a60:	defffb04 	addi	sp,sp,-20
    9a64:	dc800215 	stw	r18,8(sp)
    9a68:	dc400115 	stw	r17,4(sp)
    9a6c:	dc000015 	stw	r16,0(sp)
    9a70:	dfc00415 	stw	ra,16(sp)
    9a74:	dcc00315 	stw	r19,12(sp)
    9a78:	1c803fcc 	andi	r18,r3,255
    9a7c:	2c01ffcc 	andi	r16,r5,2047
    9a80:	5210b03a 	or	r8,r10,r8
    9a84:	202290fa 	slli	r17,r4,3
    9a88:	1081ffcc 	andi	r2,r2,2047
    9a8c:	4b12b03a 	or	r9,r9,r12
    9a90:	300c90fa 	slli	r6,r6,3
    9a94:	91c07526 	beq	r18,r7,9c6c <__adddf3+0x23c>
    9a98:	8087c83a 	sub	r3,r16,r2
    9a9c:	00c0ab0e 	bge	zero,r3,9d4c <__adddf3+0x31c>
    9aa0:	10002a1e 	bne	r2,zero,9b4c <__adddf3+0x11c>
    9aa4:	4984b03a 	or	r2,r9,r6
    9aa8:	1000961e 	bne	r2,zero,9d04 <__adddf3+0x2d4>
    9aac:	888001cc 	andi	r2,r17,7
    9ab0:	10000726 	beq	r2,zero,9ad0 <__adddf3+0xa0>
    9ab4:	888003cc 	andi	r2,r17,15
    9ab8:	00c00104 	movi	r3,4
    9abc:	10c00426 	beq	r2,r3,9ad0 <__adddf3+0xa0>
    9ac0:	88c7883a 	add	r3,r17,r3
    9ac4:	1c63803a 	cmpltu	r17,r3,r17
    9ac8:	4451883a 	add	r8,r8,r17
    9acc:	1823883a 	mov	r17,r3
    9ad0:	4080202c 	andhi	r2,r8,128
    9ad4:	10005926 	beq	r2,zero,9c3c <__adddf3+0x20c>
    9ad8:	84000044 	addi	r16,r16,1
    9adc:	0081ffc4 	movi	r2,2047
    9ae0:	8080ba26 	beq	r16,r2,9dcc <__adddf3+0x39c>
    9ae4:	00bfe034 	movhi	r2,65408
    9ae8:	10bfffc4 	addi	r2,r2,-1
    9aec:	4090703a 	and	r8,r8,r2
    9af0:	4004977a 	slli	r2,r8,29
    9af4:	4010927a 	slli	r8,r8,9
    9af8:	8822d0fa 	srli	r17,r17,3
    9afc:	8401ffcc 	andi	r16,r16,2047
    9b00:	4010d33a 	srli	r8,r8,12
    9b04:	9007883a 	mov	r3,r18
    9b08:	1444b03a 	or	r2,r2,r17
    9b0c:	8401ffcc 	andi	r16,r16,2047
    9b10:	8020953a 	slli	r16,r16,20
    9b14:	18c03fcc 	andi	r3,r3,255
    9b18:	01000434 	movhi	r4,16
    9b1c:	213fffc4 	addi	r4,r4,-1
    9b20:	180697fa 	slli	r3,r3,31
    9b24:	4110703a 	and	r8,r8,r4
    9b28:	4410b03a 	or	r8,r8,r16
    9b2c:	40c6b03a 	or	r3,r8,r3
    9b30:	dfc00417 	ldw	ra,16(sp)
    9b34:	dcc00317 	ldw	r19,12(sp)
    9b38:	dc800217 	ldw	r18,8(sp)
    9b3c:	dc400117 	ldw	r17,4(sp)
    9b40:	dc000017 	ldw	r16,0(sp)
    9b44:	dec00504 	addi	sp,sp,20
    9b48:	f800283a 	ret
    9b4c:	0081ffc4 	movi	r2,2047
    9b50:	80bfd626 	beq	r16,r2,9aac <_gp+0xffff3374>
    9b54:	4a402034 	orhi	r9,r9,128
    9b58:	00800e04 	movi	r2,56
    9b5c:	10c09f16 	blt	r2,r3,9ddc <__adddf3+0x3ac>
    9b60:	008007c4 	movi	r2,31
    9b64:	10c0c216 	blt	r2,r3,9e70 <__adddf3+0x440>
    9b68:	00800804 	movi	r2,32
    9b6c:	10c5c83a 	sub	r2,r2,r3
    9b70:	488a983a 	sll	r5,r9,r2
    9b74:	30c8d83a 	srl	r4,r6,r3
    9b78:	3084983a 	sll	r2,r6,r2
    9b7c:	48c6d83a 	srl	r3,r9,r3
    9b80:	290cb03a 	or	r6,r5,r4
    9b84:	1004c03a 	cmpne	r2,r2,zero
    9b88:	308cb03a 	or	r6,r6,r2
    9b8c:	898dc83a 	sub	r6,r17,r6
    9b90:	89a3803a 	cmpltu	r17,r17,r6
    9b94:	40d1c83a 	sub	r8,r8,r3
    9b98:	4451c83a 	sub	r8,r8,r17
    9b9c:	3023883a 	mov	r17,r6
    9ba0:	4080202c 	andhi	r2,r8,128
    9ba4:	10002326 	beq	r2,zero,9c34 <__adddf3+0x204>
    9ba8:	04c02034 	movhi	r19,128
    9bac:	9cffffc4 	addi	r19,r19,-1
    9bb0:	44e6703a 	and	r19,r8,r19
    9bb4:	98007626 	beq	r19,zero,9d90 <__adddf3+0x360>
    9bb8:	9809883a 	mov	r4,r19
    9bbc:	000c1400 	call	c140 <__clzsi2>
    9bc0:	10fffe04 	addi	r3,r2,-8
    9bc4:	010007c4 	movi	r4,31
    9bc8:	20c07716 	blt	r4,r3,9da8 <__adddf3+0x378>
    9bcc:	00800804 	movi	r2,32
    9bd0:	10c5c83a 	sub	r2,r2,r3
    9bd4:	8884d83a 	srl	r2,r17,r2
    9bd8:	98d0983a 	sll	r8,r19,r3
    9bdc:	88e2983a 	sll	r17,r17,r3
    9be0:	1204b03a 	or	r2,r2,r8
    9be4:	1c007416 	blt	r3,r16,9db8 <__adddf3+0x388>
    9be8:	1c21c83a 	sub	r16,r3,r16
    9bec:	82000044 	addi	r8,r16,1
    9bf0:	00c007c4 	movi	r3,31
    9bf4:	1a009116 	blt	r3,r8,9e3c <__adddf3+0x40c>
    9bf8:	00c00804 	movi	r3,32
    9bfc:	1a07c83a 	sub	r3,r3,r8
    9c00:	8a08d83a 	srl	r4,r17,r8
    9c04:	88e2983a 	sll	r17,r17,r3
    9c08:	10c6983a 	sll	r3,r2,r3
    9c0c:	1210d83a 	srl	r8,r2,r8
    9c10:	8804c03a 	cmpne	r2,r17,zero
    9c14:	1906b03a 	or	r3,r3,r4
    9c18:	18a2b03a 	or	r17,r3,r2
    9c1c:	0021883a 	mov	r16,zero
    9c20:	003fa206 	br	9aac <_gp+0xffff3374>
    9c24:	1890b03a 	or	r8,r3,r2
    9c28:	40017d26 	beq	r8,zero,a220 <__adddf3+0x7f0>
    9c2c:	1011883a 	mov	r8,r2
    9c30:	1823883a 	mov	r17,r3
    9c34:	888001cc 	andi	r2,r17,7
    9c38:	103f9e1e 	bne	r2,zero,9ab4 <_gp+0xffff337c>
    9c3c:	4004977a 	slli	r2,r8,29
    9c40:	8822d0fa 	srli	r17,r17,3
    9c44:	4010d0fa 	srli	r8,r8,3
    9c48:	9007883a 	mov	r3,r18
    9c4c:	1444b03a 	or	r2,r2,r17
    9c50:	0101ffc4 	movi	r4,2047
    9c54:	81002426 	beq	r16,r4,9ce8 <__adddf3+0x2b8>
    9c58:	8120703a 	and	r16,r16,r4
    9c5c:	01000434 	movhi	r4,16
    9c60:	213fffc4 	addi	r4,r4,-1
    9c64:	4110703a 	and	r8,r8,r4
    9c68:	003fa806 	br	9b0c <_gp+0xffff33d4>
    9c6c:	8089c83a 	sub	r4,r16,r2
    9c70:	01005e0e 	bge	zero,r4,9dec <__adddf3+0x3bc>
    9c74:	10002b26 	beq	r2,zero,9d24 <__adddf3+0x2f4>
    9c78:	0081ffc4 	movi	r2,2047
    9c7c:	80bf8b26 	beq	r16,r2,9aac <_gp+0xffff3374>
    9c80:	4a402034 	orhi	r9,r9,128
    9c84:	00800e04 	movi	r2,56
    9c88:	1100a40e 	bge	r2,r4,9f1c <__adddf3+0x4ec>
    9c8c:	498cb03a 	or	r6,r9,r6
    9c90:	300ac03a 	cmpne	r5,r6,zero
    9c94:	0013883a 	mov	r9,zero
    9c98:	2c4b883a 	add	r5,r5,r17
    9c9c:	2c63803a 	cmpltu	r17,r5,r17
    9ca0:	4a11883a 	add	r8,r9,r8
    9ca4:	8a11883a 	add	r8,r17,r8
    9ca8:	2823883a 	mov	r17,r5
    9cac:	4080202c 	andhi	r2,r8,128
    9cb0:	103fe026 	beq	r2,zero,9c34 <_gp+0xffff34fc>
    9cb4:	84000044 	addi	r16,r16,1
    9cb8:	0081ffc4 	movi	r2,2047
    9cbc:	8080d226 	beq	r16,r2,a008 <__adddf3+0x5d8>
    9cc0:	00bfe034 	movhi	r2,65408
    9cc4:	10bfffc4 	addi	r2,r2,-1
    9cc8:	4090703a 	and	r8,r8,r2
    9ccc:	880ad07a 	srli	r5,r17,1
    9cd0:	400897fa 	slli	r4,r8,31
    9cd4:	88c0004c 	andi	r3,r17,1
    9cd8:	28e2b03a 	or	r17,r5,r3
    9cdc:	4010d07a 	srli	r8,r8,1
    9ce0:	2462b03a 	or	r17,r4,r17
    9ce4:	003f7106 	br	9aac <_gp+0xffff3374>
    9ce8:	4088b03a 	or	r4,r8,r2
    9cec:	20014526 	beq	r4,zero,a204 <__adddf3+0x7d4>
    9cf0:	01000434 	movhi	r4,16
    9cf4:	42000234 	orhi	r8,r8,8
    9cf8:	213fffc4 	addi	r4,r4,-1
    9cfc:	4110703a 	and	r8,r8,r4
    9d00:	003f8206 	br	9b0c <_gp+0xffff33d4>
    9d04:	18ffffc4 	addi	r3,r3,-1
    9d08:	1800491e 	bne	r3,zero,9e30 <__adddf3+0x400>
    9d0c:	898bc83a 	sub	r5,r17,r6
    9d10:	8963803a 	cmpltu	r17,r17,r5
    9d14:	4251c83a 	sub	r8,r8,r9
    9d18:	4451c83a 	sub	r8,r8,r17
    9d1c:	2823883a 	mov	r17,r5
    9d20:	003f9f06 	br	9ba0 <_gp+0xffff3468>
    9d24:	4984b03a 	or	r2,r9,r6
    9d28:	103f6026 	beq	r2,zero,9aac <_gp+0xffff3374>
    9d2c:	213fffc4 	addi	r4,r4,-1
    9d30:	2000931e 	bne	r4,zero,9f80 <__adddf3+0x550>
    9d34:	898d883a 	add	r6,r17,r6
    9d38:	3463803a 	cmpltu	r17,r6,r17
    9d3c:	4251883a 	add	r8,r8,r9
    9d40:	8a11883a 	add	r8,r17,r8
    9d44:	3023883a 	mov	r17,r6
    9d48:	003fd806 	br	9cac <_gp+0xffff3574>
    9d4c:	1800541e 	bne	r3,zero,9ea0 <__adddf3+0x470>
    9d50:	80800044 	addi	r2,r16,1
    9d54:	1081ffcc 	andi	r2,r2,2047
    9d58:	00c00044 	movi	r3,1
    9d5c:	1880a00e 	bge	r3,r2,9fe0 <__adddf3+0x5b0>
    9d60:	8989c83a 	sub	r4,r17,r6
    9d64:	8905803a 	cmpltu	r2,r17,r4
    9d68:	4267c83a 	sub	r19,r8,r9
    9d6c:	98a7c83a 	sub	r19,r19,r2
    9d70:	9880202c 	andhi	r2,r19,128
    9d74:	10006326 	beq	r2,zero,9f04 <__adddf3+0x4d4>
    9d78:	3463c83a 	sub	r17,r6,r17
    9d7c:	4a07c83a 	sub	r3,r9,r8
    9d80:	344d803a 	cmpltu	r6,r6,r17
    9d84:	19a7c83a 	sub	r19,r3,r6
    9d88:	3825883a 	mov	r18,r7
    9d8c:	983f8a1e 	bne	r19,zero,9bb8 <_gp+0xffff3480>
    9d90:	8809883a 	mov	r4,r17
    9d94:	000c1400 	call	c140 <__clzsi2>
    9d98:	10800804 	addi	r2,r2,32
    9d9c:	10fffe04 	addi	r3,r2,-8
    9da0:	010007c4 	movi	r4,31
    9da4:	20ff890e 	bge	r4,r3,9bcc <_gp+0xffff3494>
    9da8:	10bff604 	addi	r2,r2,-40
    9dac:	8884983a 	sll	r2,r17,r2
    9db0:	0023883a 	mov	r17,zero
    9db4:	1c3f8c0e 	bge	r3,r16,9be8 <_gp+0xffff34b0>
    9db8:	023fe034 	movhi	r8,65408
    9dbc:	423fffc4 	addi	r8,r8,-1
    9dc0:	80e1c83a 	sub	r16,r16,r3
    9dc4:	1210703a 	and	r8,r2,r8
    9dc8:	003f3806 	br	9aac <_gp+0xffff3374>
    9dcc:	9007883a 	mov	r3,r18
    9dd0:	0011883a 	mov	r8,zero
    9dd4:	0005883a 	mov	r2,zero
    9dd8:	003f4c06 	br	9b0c <_gp+0xffff33d4>
    9ddc:	498cb03a 	or	r6,r9,r6
    9de0:	300cc03a 	cmpne	r6,r6,zero
    9de4:	0007883a 	mov	r3,zero
    9de8:	003f6806 	br	9b8c <_gp+0xffff3454>
    9dec:	20009c1e 	bne	r4,zero,a060 <__adddf3+0x630>
    9df0:	80800044 	addi	r2,r16,1
    9df4:	1141ffcc 	andi	r5,r2,2047
    9df8:	01000044 	movi	r4,1
    9dfc:	2140670e 	bge	r4,r5,9f9c <__adddf3+0x56c>
    9e00:	0101ffc4 	movi	r4,2047
    9e04:	11007f26 	beq	r2,r4,a004 <__adddf3+0x5d4>
    9e08:	898d883a 	add	r6,r17,r6
    9e0c:	4247883a 	add	r3,r8,r9
    9e10:	3451803a 	cmpltu	r8,r6,r17
    9e14:	40d1883a 	add	r8,r8,r3
    9e18:	402297fa 	slli	r17,r8,31
    9e1c:	300cd07a 	srli	r6,r6,1
    9e20:	4010d07a 	srli	r8,r8,1
    9e24:	1021883a 	mov	r16,r2
    9e28:	89a2b03a 	or	r17,r17,r6
    9e2c:	003f1f06 	br	9aac <_gp+0xffff3374>
    9e30:	0081ffc4 	movi	r2,2047
    9e34:	80bf481e 	bne	r16,r2,9b58 <_gp+0xffff3420>
    9e38:	003f1c06 	br	9aac <_gp+0xffff3374>
    9e3c:	843ff844 	addi	r16,r16,-31
    9e40:	01000804 	movi	r4,32
    9e44:	1406d83a 	srl	r3,r2,r16
    9e48:	41005026 	beq	r8,r4,9f8c <__adddf3+0x55c>
    9e4c:	01001004 	movi	r4,64
    9e50:	2211c83a 	sub	r8,r4,r8
    9e54:	1204983a 	sll	r2,r2,r8
    9e58:	88a2b03a 	or	r17,r17,r2
    9e5c:	8822c03a 	cmpne	r17,r17,zero
    9e60:	1c62b03a 	or	r17,r3,r17
    9e64:	0011883a 	mov	r8,zero
    9e68:	0021883a 	mov	r16,zero
    9e6c:	003f7106 	br	9c34 <_gp+0xffff34fc>
    9e70:	193ff804 	addi	r4,r3,-32
    9e74:	00800804 	movi	r2,32
    9e78:	4908d83a 	srl	r4,r9,r4
    9e7c:	18804526 	beq	r3,r2,9f94 <__adddf3+0x564>
    9e80:	00801004 	movi	r2,64
    9e84:	10c5c83a 	sub	r2,r2,r3
    9e88:	4886983a 	sll	r3,r9,r2
    9e8c:	198cb03a 	or	r6,r3,r6
    9e90:	300cc03a 	cmpne	r6,r6,zero
    9e94:	218cb03a 	or	r6,r4,r6
    9e98:	0007883a 	mov	r3,zero
    9e9c:	003f3b06 	br	9b8c <_gp+0xffff3454>
    9ea0:	80002a26 	beq	r16,zero,9f4c <__adddf3+0x51c>
    9ea4:	0101ffc4 	movi	r4,2047
    9ea8:	11006826 	beq	r2,r4,a04c <__adddf3+0x61c>
    9eac:	00c7c83a 	sub	r3,zero,r3
    9eb0:	42002034 	orhi	r8,r8,128
    9eb4:	01000e04 	movi	r4,56
    9eb8:	20c07c16 	blt	r4,r3,a0ac <__adddf3+0x67c>
    9ebc:	010007c4 	movi	r4,31
    9ec0:	20c0da16 	blt	r4,r3,a22c <__adddf3+0x7fc>
    9ec4:	01000804 	movi	r4,32
    9ec8:	20c9c83a 	sub	r4,r4,r3
    9ecc:	4114983a 	sll	r10,r8,r4
    9ed0:	88cad83a 	srl	r5,r17,r3
    9ed4:	8908983a 	sll	r4,r17,r4
    9ed8:	40c6d83a 	srl	r3,r8,r3
    9edc:	5162b03a 	or	r17,r10,r5
    9ee0:	2008c03a 	cmpne	r4,r4,zero
    9ee4:	8922b03a 	or	r17,r17,r4
    9ee8:	3463c83a 	sub	r17,r6,r17
    9eec:	48c7c83a 	sub	r3,r9,r3
    9ef0:	344d803a 	cmpltu	r6,r6,r17
    9ef4:	1991c83a 	sub	r8,r3,r6
    9ef8:	1021883a 	mov	r16,r2
    9efc:	3825883a 	mov	r18,r7
    9f00:	003f2706 	br	9ba0 <_gp+0xffff3468>
    9f04:	24d0b03a 	or	r8,r4,r19
    9f08:	40001b1e 	bne	r8,zero,9f78 <__adddf3+0x548>
    9f0c:	0005883a 	mov	r2,zero
    9f10:	0007883a 	mov	r3,zero
    9f14:	0021883a 	mov	r16,zero
    9f18:	003f4d06 	br	9c50 <_gp+0xffff3518>
    9f1c:	008007c4 	movi	r2,31
    9f20:	11003c16 	blt	r2,r4,a014 <__adddf3+0x5e4>
    9f24:	00800804 	movi	r2,32
    9f28:	1105c83a 	sub	r2,r2,r4
    9f2c:	488e983a 	sll	r7,r9,r2
    9f30:	310ad83a 	srl	r5,r6,r4
    9f34:	3084983a 	sll	r2,r6,r2
    9f38:	4912d83a 	srl	r9,r9,r4
    9f3c:	394ab03a 	or	r5,r7,r5
    9f40:	1004c03a 	cmpne	r2,r2,zero
    9f44:	288ab03a 	or	r5,r5,r2
    9f48:	003f5306 	br	9c98 <_gp+0xffff3560>
    9f4c:	4448b03a 	or	r4,r8,r17
    9f50:	20003e26 	beq	r4,zero,a04c <__adddf3+0x61c>
    9f54:	00c6303a 	nor	r3,zero,r3
    9f58:	18003a1e 	bne	r3,zero,a044 <__adddf3+0x614>
    9f5c:	3463c83a 	sub	r17,r6,r17
    9f60:	4a07c83a 	sub	r3,r9,r8
    9f64:	344d803a 	cmpltu	r6,r6,r17
    9f68:	1991c83a 	sub	r8,r3,r6
    9f6c:	1021883a 	mov	r16,r2
    9f70:	3825883a 	mov	r18,r7
    9f74:	003f0a06 	br	9ba0 <_gp+0xffff3468>
    9f78:	2023883a 	mov	r17,r4
    9f7c:	003f0d06 	br	9bb4 <_gp+0xffff347c>
    9f80:	0081ffc4 	movi	r2,2047
    9f84:	80bf3f1e 	bne	r16,r2,9c84 <_gp+0xffff354c>
    9f88:	003ec806 	br	9aac <_gp+0xffff3374>
    9f8c:	0005883a 	mov	r2,zero
    9f90:	003fb106 	br	9e58 <_gp+0xffff3720>
    9f94:	0007883a 	mov	r3,zero
    9f98:	003fbc06 	br	9e8c <_gp+0xffff3754>
    9f9c:	4444b03a 	or	r2,r8,r17
    9fa0:	8000871e 	bne	r16,zero,a1c0 <__adddf3+0x790>
    9fa4:	1000ba26 	beq	r2,zero,a290 <__adddf3+0x860>
    9fa8:	4984b03a 	or	r2,r9,r6
    9fac:	103ebf26 	beq	r2,zero,9aac <_gp+0xffff3374>
    9fb0:	8985883a 	add	r2,r17,r6
    9fb4:	4247883a 	add	r3,r8,r9
    9fb8:	1451803a 	cmpltu	r8,r2,r17
    9fbc:	40d1883a 	add	r8,r8,r3
    9fc0:	40c0202c 	andhi	r3,r8,128
    9fc4:	1023883a 	mov	r17,r2
    9fc8:	183f1a26 	beq	r3,zero,9c34 <_gp+0xffff34fc>
    9fcc:	00bfe034 	movhi	r2,65408
    9fd0:	10bfffc4 	addi	r2,r2,-1
    9fd4:	2021883a 	mov	r16,r4
    9fd8:	4090703a 	and	r8,r8,r2
    9fdc:	003eb306 	br	9aac <_gp+0xffff3374>
    9fe0:	4444b03a 	or	r2,r8,r17
    9fe4:	8000291e 	bne	r16,zero,a08c <__adddf3+0x65c>
    9fe8:	10004b1e 	bne	r2,zero,a118 <__adddf3+0x6e8>
    9fec:	4990b03a 	or	r8,r9,r6
    9ff0:	40008b26 	beq	r8,zero,a220 <__adddf3+0x7f0>
    9ff4:	4811883a 	mov	r8,r9
    9ff8:	3023883a 	mov	r17,r6
    9ffc:	3825883a 	mov	r18,r7
    a000:	003eaa06 	br	9aac <_gp+0xffff3374>
    a004:	1021883a 	mov	r16,r2
    a008:	0011883a 	mov	r8,zero
    a00c:	0005883a 	mov	r2,zero
    a010:	003f0f06 	br	9c50 <_gp+0xffff3518>
    a014:	217ff804 	addi	r5,r4,-32
    a018:	00800804 	movi	r2,32
    a01c:	494ad83a 	srl	r5,r9,r5
    a020:	20807d26 	beq	r4,r2,a218 <__adddf3+0x7e8>
    a024:	00801004 	movi	r2,64
    a028:	1109c83a 	sub	r4,r2,r4
    a02c:	4912983a 	sll	r9,r9,r4
    a030:	498cb03a 	or	r6,r9,r6
    a034:	300cc03a 	cmpne	r6,r6,zero
    a038:	298ab03a 	or	r5,r5,r6
    a03c:	0013883a 	mov	r9,zero
    a040:	003f1506 	br	9c98 <_gp+0xffff3560>
    a044:	0101ffc4 	movi	r4,2047
    a048:	113f9a1e 	bne	r2,r4,9eb4 <_gp+0xffff377c>
    a04c:	4811883a 	mov	r8,r9
    a050:	3023883a 	mov	r17,r6
    a054:	1021883a 	mov	r16,r2
    a058:	3825883a 	mov	r18,r7
    a05c:	003e9306 	br	9aac <_gp+0xffff3374>
    a060:	8000161e 	bne	r16,zero,a0bc <__adddf3+0x68c>
    a064:	444ab03a 	or	r5,r8,r17
    a068:	28005126 	beq	r5,zero,a1b0 <__adddf3+0x780>
    a06c:	0108303a 	nor	r4,zero,r4
    a070:	20004d1e 	bne	r4,zero,a1a8 <__adddf3+0x778>
    a074:	89a3883a 	add	r17,r17,r6
    a078:	4253883a 	add	r9,r8,r9
    a07c:	898d803a 	cmpltu	r6,r17,r6
    a080:	3251883a 	add	r8,r6,r9
    a084:	1021883a 	mov	r16,r2
    a088:	003f0806 	br	9cac <_gp+0xffff3574>
    a08c:	1000301e 	bne	r2,zero,a150 <__adddf3+0x720>
    a090:	4984b03a 	or	r2,r9,r6
    a094:	10007126 	beq	r2,zero,a25c <__adddf3+0x82c>
    a098:	4811883a 	mov	r8,r9
    a09c:	3023883a 	mov	r17,r6
    a0a0:	3825883a 	mov	r18,r7
    a0a4:	0401ffc4 	movi	r16,2047
    a0a8:	003e8006 	br	9aac <_gp+0xffff3374>
    a0ac:	4462b03a 	or	r17,r8,r17
    a0b0:	8822c03a 	cmpne	r17,r17,zero
    a0b4:	0007883a 	mov	r3,zero
    a0b8:	003f8b06 	br	9ee8 <_gp+0xffff37b0>
    a0bc:	0141ffc4 	movi	r5,2047
    a0c0:	11403b26 	beq	r2,r5,a1b0 <__adddf3+0x780>
    a0c4:	0109c83a 	sub	r4,zero,r4
    a0c8:	42002034 	orhi	r8,r8,128
    a0cc:	01400e04 	movi	r5,56
    a0d0:	29006716 	blt	r5,r4,a270 <__adddf3+0x840>
    a0d4:	014007c4 	movi	r5,31
    a0d8:	29007016 	blt	r5,r4,a29c <__adddf3+0x86c>
    a0dc:	01400804 	movi	r5,32
    a0e0:	290bc83a 	sub	r5,r5,r4
    a0e4:	4154983a 	sll	r10,r8,r5
    a0e8:	890ed83a 	srl	r7,r17,r4
    a0ec:	894a983a 	sll	r5,r17,r5
    a0f0:	4108d83a 	srl	r4,r8,r4
    a0f4:	51e2b03a 	or	r17,r10,r7
    a0f8:	280ac03a 	cmpne	r5,r5,zero
    a0fc:	8962b03a 	or	r17,r17,r5
    a100:	89a3883a 	add	r17,r17,r6
    a104:	2253883a 	add	r9,r4,r9
    a108:	898d803a 	cmpltu	r6,r17,r6
    a10c:	3251883a 	add	r8,r6,r9
    a110:	1021883a 	mov	r16,r2
    a114:	003ee506 	br	9cac <_gp+0xffff3574>
    a118:	4984b03a 	or	r2,r9,r6
    a11c:	103e6326 	beq	r2,zero,9aac <_gp+0xffff3374>
    a120:	8987c83a 	sub	r3,r17,r6
    a124:	88c9803a 	cmpltu	r4,r17,r3
    a128:	4245c83a 	sub	r2,r8,r9
    a12c:	1105c83a 	sub	r2,r2,r4
    a130:	1100202c 	andhi	r4,r2,128
    a134:	203ebb26 	beq	r4,zero,9c24 <_gp+0xffff34ec>
    a138:	3463c83a 	sub	r17,r6,r17
    a13c:	4a07c83a 	sub	r3,r9,r8
    a140:	344d803a 	cmpltu	r6,r6,r17
    a144:	1991c83a 	sub	r8,r3,r6
    a148:	3825883a 	mov	r18,r7
    a14c:	003e5706 	br	9aac <_gp+0xffff3374>
    a150:	4984b03a 	or	r2,r9,r6
    a154:	10002e26 	beq	r2,zero,a210 <__adddf3+0x7e0>
    a158:	4004d0fa 	srli	r2,r8,3
    a15c:	8822d0fa 	srli	r17,r17,3
    a160:	4010977a 	slli	r8,r8,29
    a164:	10c0022c 	andhi	r3,r2,8
    a168:	4462b03a 	or	r17,r8,r17
    a16c:	18000826 	beq	r3,zero,a190 <__adddf3+0x760>
    a170:	4808d0fa 	srli	r4,r9,3
    a174:	20c0022c 	andhi	r3,r4,8
    a178:	1800051e 	bne	r3,zero,a190 <__adddf3+0x760>
    a17c:	300cd0fa 	srli	r6,r6,3
    a180:	4806977a 	slli	r3,r9,29
    a184:	2005883a 	mov	r2,r4
    a188:	3825883a 	mov	r18,r7
    a18c:	19a2b03a 	or	r17,r3,r6
    a190:	8810d77a 	srli	r8,r17,29
    a194:	100490fa 	slli	r2,r2,3
    a198:	882290fa 	slli	r17,r17,3
    a19c:	0401ffc4 	movi	r16,2047
    a1a0:	4090b03a 	or	r8,r8,r2
    a1a4:	003e4106 	br	9aac <_gp+0xffff3374>
    a1a8:	0141ffc4 	movi	r5,2047
    a1ac:	117fc71e 	bne	r2,r5,a0cc <_gp+0xffff3994>
    a1b0:	4811883a 	mov	r8,r9
    a1b4:	3023883a 	mov	r17,r6
    a1b8:	1021883a 	mov	r16,r2
    a1bc:	003e3b06 	br	9aac <_gp+0xffff3374>
    a1c0:	10002f26 	beq	r2,zero,a280 <__adddf3+0x850>
    a1c4:	4984b03a 	or	r2,r9,r6
    a1c8:	10001126 	beq	r2,zero,a210 <__adddf3+0x7e0>
    a1cc:	4004d0fa 	srli	r2,r8,3
    a1d0:	8822d0fa 	srli	r17,r17,3
    a1d4:	4010977a 	slli	r8,r8,29
    a1d8:	10c0022c 	andhi	r3,r2,8
    a1dc:	4462b03a 	or	r17,r8,r17
    a1e0:	183feb26 	beq	r3,zero,a190 <_gp+0xffff3a58>
    a1e4:	4808d0fa 	srli	r4,r9,3
    a1e8:	20c0022c 	andhi	r3,r4,8
    a1ec:	183fe81e 	bne	r3,zero,a190 <_gp+0xffff3a58>
    a1f0:	300cd0fa 	srli	r6,r6,3
    a1f4:	4806977a 	slli	r3,r9,29
    a1f8:	2005883a 	mov	r2,r4
    a1fc:	19a2b03a 	or	r17,r3,r6
    a200:	003fe306 	br	a190 <_gp+0xffff3a58>
    a204:	0011883a 	mov	r8,zero
    a208:	0005883a 	mov	r2,zero
    a20c:	003e3f06 	br	9b0c <_gp+0xffff33d4>
    a210:	0401ffc4 	movi	r16,2047
    a214:	003e2506 	br	9aac <_gp+0xffff3374>
    a218:	0013883a 	mov	r9,zero
    a21c:	003f8406 	br	a030 <_gp+0xffff38f8>
    a220:	0005883a 	mov	r2,zero
    a224:	0007883a 	mov	r3,zero
    a228:	003e8906 	br	9c50 <_gp+0xffff3518>
    a22c:	197ff804 	addi	r5,r3,-32
    a230:	01000804 	movi	r4,32
    a234:	414ad83a 	srl	r5,r8,r5
    a238:	19002426 	beq	r3,r4,a2cc <__adddf3+0x89c>
    a23c:	01001004 	movi	r4,64
    a240:	20c7c83a 	sub	r3,r4,r3
    a244:	40c6983a 	sll	r3,r8,r3
    a248:	1c46b03a 	or	r3,r3,r17
    a24c:	1806c03a 	cmpne	r3,r3,zero
    a250:	28e2b03a 	or	r17,r5,r3
    a254:	0007883a 	mov	r3,zero
    a258:	003f2306 	br	9ee8 <_gp+0xffff37b0>
    a25c:	0007883a 	mov	r3,zero
    a260:	5811883a 	mov	r8,r11
    a264:	00bfffc4 	movi	r2,-1
    a268:	0401ffc4 	movi	r16,2047
    a26c:	003e7806 	br	9c50 <_gp+0xffff3518>
    a270:	4462b03a 	or	r17,r8,r17
    a274:	8822c03a 	cmpne	r17,r17,zero
    a278:	0009883a 	mov	r4,zero
    a27c:	003fa006 	br	a100 <_gp+0xffff39c8>
    a280:	4811883a 	mov	r8,r9
    a284:	3023883a 	mov	r17,r6
    a288:	0401ffc4 	movi	r16,2047
    a28c:	003e0706 	br	9aac <_gp+0xffff3374>
    a290:	4811883a 	mov	r8,r9
    a294:	3023883a 	mov	r17,r6
    a298:	003e0406 	br	9aac <_gp+0xffff3374>
    a29c:	21fff804 	addi	r7,r4,-32
    a2a0:	01400804 	movi	r5,32
    a2a4:	41ced83a 	srl	r7,r8,r7
    a2a8:	21400a26 	beq	r4,r5,a2d4 <__adddf3+0x8a4>
    a2ac:	01401004 	movi	r5,64
    a2b0:	2909c83a 	sub	r4,r5,r4
    a2b4:	4108983a 	sll	r4,r8,r4
    a2b8:	2448b03a 	or	r4,r4,r17
    a2bc:	2008c03a 	cmpne	r4,r4,zero
    a2c0:	3922b03a 	or	r17,r7,r4
    a2c4:	0009883a 	mov	r4,zero
    a2c8:	003f8d06 	br	a100 <_gp+0xffff39c8>
    a2cc:	0007883a 	mov	r3,zero
    a2d0:	003fdd06 	br	a248 <_gp+0xffff3b10>
    a2d4:	0009883a 	mov	r4,zero
    a2d8:	003ff706 	br	a2b8 <_gp+0xffff3b80>

0000a2dc <__divdf3>:
    a2dc:	defff004 	addi	sp,sp,-64
    a2e0:	dc800815 	stw	r18,32(sp)
    a2e4:	2824d53a 	srli	r18,r5,20
    a2e8:	dd800c15 	stw	r22,48(sp)
    a2ec:	282cd7fa 	srli	r22,r5,31
    a2f0:	dc000615 	stw	r16,24(sp)
    a2f4:	04000434 	movhi	r16,16
    a2f8:	843fffc4 	addi	r16,r16,-1
    a2fc:	dfc00f15 	stw	ra,60(sp)
    a300:	df000e15 	stw	fp,56(sp)
    a304:	ddc00d15 	stw	r23,52(sp)
    a308:	dd400b15 	stw	r21,44(sp)
    a30c:	dd000a15 	stw	r20,40(sp)
    a310:	dcc00915 	stw	r19,36(sp)
    a314:	dc400715 	stw	r17,28(sp)
    a318:	9481ffcc 	andi	r18,r18,2047
    a31c:	2c20703a 	and	r16,r5,r16
    a320:	b2003fcc 	andi	r8,r22,255
    a324:	90006126 	beq	r18,zero,a4ac <__divdf3+0x1d0>
    a328:	0081ffc4 	movi	r2,2047
    a32c:	202b883a 	mov	r21,r4
    a330:	90803726 	beq	r18,r2,a410 <__divdf3+0x134>
    a334:	80800434 	orhi	r2,r16,16
    a338:	100490fa 	slli	r2,r2,3
    a33c:	2020d77a 	srli	r16,r4,29
    a340:	202a90fa 	slli	r21,r4,3
    a344:	94bf0044 	addi	r18,r18,-1023
    a348:	80a0b03a 	or	r16,r16,r2
    a34c:	0013883a 	mov	r9,zero
    a350:	000b883a 	mov	r5,zero
    a354:	3806d53a 	srli	r3,r7,20
    a358:	382ed7fa 	srli	r23,r7,31
    a35c:	04400434 	movhi	r17,16
    a360:	8c7fffc4 	addi	r17,r17,-1
    a364:	18c1ffcc 	andi	r3,r3,2047
    a368:	3029883a 	mov	r20,r6
    a36c:	3c62703a 	and	r17,r7,r17
    a370:	bf003fcc 	andi	fp,r23,255
    a374:	18006e26 	beq	r3,zero,a530 <__divdf3+0x254>
    a378:	0081ffc4 	movi	r2,2047
    a37c:	18806626 	beq	r3,r2,a518 <__divdf3+0x23c>
    a380:	88800434 	orhi	r2,r17,16
    a384:	100490fa 	slli	r2,r2,3
    a388:	3022d77a 	srli	r17,r6,29
    a38c:	302890fa 	slli	r20,r6,3
    a390:	18ff0044 	addi	r3,r3,-1023
    a394:	88a2b03a 	or	r17,r17,r2
    a398:	000f883a 	mov	r7,zero
    a39c:	b5e6f03a 	xor	r19,r22,r23
    a3a0:	3a4cb03a 	or	r6,r7,r9
    a3a4:	008003c4 	movi	r2,15
    a3a8:	9809883a 	mov	r4,r19
    a3ac:	90c7c83a 	sub	r3,r18,r3
    a3b0:	9cc03fcc 	andi	r19,r19,255
    a3b4:	11809636 	bltu	r2,r6,a610 <__divdf3+0x334>
    a3b8:	300c90ba 	slli	r6,r6,2
    a3bc:	00800074 	movhi	r2,1
    a3c0:	10a8f404 	addi	r2,r2,-23600
    a3c4:	308d883a 	add	r6,r6,r2
    a3c8:	30800017 	ldw	r2,0(r6)
    a3cc:	1000683a 	jmp	r2
    a3d0:	0000a610 	cmplti	zero,zero,664
    a3d4:	0000a448 	cmpgei	zero,zero,657
    a3d8:	0000a600 	call	a60 <__alt_mem_onchip_mem-0x75a0>
    a3dc:	0000a43c 	xorhi	zero,zero,656
    a3e0:	0000a600 	call	a60 <__alt_mem_onchip_mem-0x75a0>
    a3e4:	0000a5d4 	movui	zero,663
    a3e8:	0000a600 	call	a60 <__alt_mem_onchip_mem-0x75a0>
    a3ec:	0000a43c 	xorhi	zero,zero,656
    a3f0:	0000a448 	cmpgei	zero,zero,657
    a3f4:	0000a448 	cmpgei	zero,zero,657
    a3f8:	0000a5d4 	movui	zero,663
    a3fc:	0000a43c 	xorhi	zero,zero,656
    a400:	0000a42c 	andhi	zero,zero,656
    a404:	0000a42c 	andhi	zero,zero,656
    a408:	0000a42c 	andhi	zero,zero,656
    a40c:	0000a998 	cmpnei	zero,zero,678
    a410:	2404b03a 	or	r2,r4,r16
    a414:	10006c1e 	bne	r2,zero,a5c8 <__divdf3+0x2ec>
    a418:	02400204 	movi	r9,8
    a41c:	0021883a 	mov	r16,zero
    a420:	002b883a 	mov	r21,zero
    a424:	01400084 	movi	r5,2
    a428:	003fca06 	br	a354 <_gp+0xffff3c1c>
    a42c:	8023883a 	mov	r17,r16
    a430:	a829883a 	mov	r20,r21
    a434:	4039883a 	mov	fp,r8
    a438:	280f883a 	mov	r7,r5
    a43c:	00800084 	movi	r2,2
    a440:	3881601e 	bne	r7,r2,a9c4 <__divdf3+0x6e8>
    a444:	e027883a 	mov	r19,fp
    a448:	9900004c 	andi	r4,r19,1
    a44c:	0081ffc4 	movi	r2,2047
    a450:	0021883a 	mov	r16,zero
    a454:	002b883a 	mov	r21,zero
    a458:	1004953a 	slli	r2,r2,20
    a45c:	20c03fcc 	andi	r3,r4,255
    a460:	01400434 	movhi	r5,16
    a464:	297fffc4 	addi	r5,r5,-1
    a468:	180697fa 	slli	r3,r3,31
    a46c:	8160703a 	and	r16,r16,r5
    a470:	80a0b03a 	or	r16,r16,r2
    a474:	80c6b03a 	or	r3,r16,r3
    a478:	a805883a 	mov	r2,r21
    a47c:	dfc00f17 	ldw	ra,60(sp)
    a480:	df000e17 	ldw	fp,56(sp)
    a484:	ddc00d17 	ldw	r23,52(sp)
    a488:	dd800c17 	ldw	r22,48(sp)
    a48c:	dd400b17 	ldw	r21,44(sp)
    a490:	dd000a17 	ldw	r20,40(sp)
    a494:	dcc00917 	ldw	r19,36(sp)
    a498:	dc800817 	ldw	r18,32(sp)
    a49c:	dc400717 	ldw	r17,28(sp)
    a4a0:	dc000617 	ldw	r16,24(sp)
    a4a4:	dec01004 	addi	sp,sp,64
    a4a8:	f800283a 	ret
    a4ac:	2404b03a 	or	r2,r4,r16
    a4b0:	2023883a 	mov	r17,r4
    a4b4:	10003f26 	beq	r2,zero,a5b4 <__divdf3+0x2d8>
    a4b8:	80015e26 	beq	r16,zero,aa34 <__divdf3+0x758>
    a4bc:	8009883a 	mov	r4,r16
    a4c0:	d9800215 	stw	r6,8(sp)
    a4c4:	d9c00515 	stw	r7,20(sp)
    a4c8:	da000415 	stw	r8,16(sp)
    a4cc:	000c1400 	call	c140 <__clzsi2>
    a4d0:	d9800217 	ldw	r6,8(sp)
    a4d4:	d9c00517 	ldw	r7,20(sp)
    a4d8:	da000417 	ldw	r8,16(sp)
    a4dc:	113ffd44 	addi	r4,r2,-11
    a4e0:	00c00704 	movi	r3,28
    a4e4:	19014f16 	blt	r3,r4,aa24 <__divdf3+0x748>
    a4e8:	00c00744 	movi	r3,29
    a4ec:	157ffe04 	addi	r21,r2,-8
    a4f0:	1907c83a 	sub	r3,r3,r4
    a4f4:	8560983a 	sll	r16,r16,r21
    a4f8:	88c6d83a 	srl	r3,r17,r3
    a4fc:	8d6a983a 	sll	r21,r17,r21
    a500:	1c20b03a 	or	r16,r3,r16
    a504:	1080fcc4 	addi	r2,r2,1011
    a508:	00a5c83a 	sub	r18,zero,r2
    a50c:	0013883a 	mov	r9,zero
    a510:	000b883a 	mov	r5,zero
    a514:	003f8f06 	br	a354 <_gp+0xffff3c1c>
    a518:	3444b03a 	or	r2,r6,r17
    a51c:	1000231e 	bne	r2,zero,a5ac <__divdf3+0x2d0>
    a520:	0023883a 	mov	r17,zero
    a524:	0029883a 	mov	r20,zero
    a528:	01c00084 	movi	r7,2
    a52c:	003f9b06 	br	a39c <_gp+0xffff3c64>
    a530:	3444b03a 	or	r2,r6,r17
    a534:	10001926 	beq	r2,zero,a59c <__divdf3+0x2c0>
    a538:	88014b26 	beq	r17,zero,aa68 <__divdf3+0x78c>
    a53c:	8809883a 	mov	r4,r17
    a540:	d9400115 	stw	r5,4(sp)
    a544:	d9800215 	stw	r6,8(sp)
    a548:	da000415 	stw	r8,16(sp)
    a54c:	da400315 	stw	r9,12(sp)
    a550:	000c1400 	call	c140 <__clzsi2>
    a554:	d9400117 	ldw	r5,4(sp)
    a558:	d9800217 	ldw	r6,8(sp)
    a55c:	da000417 	ldw	r8,16(sp)
    a560:	da400317 	ldw	r9,12(sp)
    a564:	113ffd44 	addi	r4,r2,-11
    a568:	00c00704 	movi	r3,28
    a56c:	19013a16 	blt	r3,r4,aa58 <__divdf3+0x77c>
    a570:	00c00744 	movi	r3,29
    a574:	153ffe04 	addi	r20,r2,-8
    a578:	1907c83a 	sub	r3,r3,r4
    a57c:	8d22983a 	sll	r17,r17,r20
    a580:	30c6d83a 	srl	r3,r6,r3
    a584:	3528983a 	sll	r20,r6,r20
    a588:	1c62b03a 	or	r17,r3,r17
    a58c:	1080fcc4 	addi	r2,r2,1011
    a590:	0087c83a 	sub	r3,zero,r2
    a594:	000f883a 	mov	r7,zero
    a598:	003f8006 	br	a39c <_gp+0xffff3c64>
    a59c:	0023883a 	mov	r17,zero
    a5a0:	0029883a 	mov	r20,zero
    a5a4:	01c00044 	movi	r7,1
    a5a8:	003f7c06 	br	a39c <_gp+0xffff3c64>
    a5ac:	01c000c4 	movi	r7,3
    a5b0:	003f7a06 	br	a39c <_gp+0xffff3c64>
    a5b4:	02400104 	movi	r9,4
    a5b8:	0021883a 	mov	r16,zero
    a5bc:	002b883a 	mov	r21,zero
    a5c0:	01400044 	movi	r5,1
    a5c4:	003f6306 	br	a354 <_gp+0xffff3c1c>
    a5c8:	02400304 	movi	r9,12
    a5cc:	014000c4 	movi	r5,3
    a5d0:	003f6006 	br	a354 <_gp+0xffff3c1c>
    a5d4:	04000434 	movhi	r16,16
    a5d8:	0009883a 	mov	r4,zero
    a5dc:	843fffc4 	addi	r16,r16,-1
    a5e0:	057fffc4 	movi	r21,-1
    a5e4:	0081ffc4 	movi	r2,2047
    a5e8:	003f9b06 	br	a458 <_gp+0xffff3d20>
    a5ec:	00c00044 	movi	r3,1
    a5f0:	1887c83a 	sub	r3,r3,r2
    a5f4:	01000e04 	movi	r4,56
    a5f8:	20c1530e 	bge	r4,r3,ab48 <__divdf3+0x86c>
    a5fc:	9900004c 	andi	r4,r19,1
    a600:	0005883a 	mov	r2,zero
    a604:	0021883a 	mov	r16,zero
    a608:	002b883a 	mov	r21,zero
    a60c:	003f9206 	br	a458 <_gp+0xffff3d20>
    a610:	8c012e36 	bltu	r17,r16,aacc <__divdf3+0x7f0>
    a614:	84412c26 	beq	r16,r17,aac8 <__divdf3+0x7ec>
    a618:	a82f883a 	mov	r23,r21
    a61c:	18ffffc4 	addi	r3,r3,-1
    a620:	002b883a 	mov	r21,zero
    a624:	a004d63a 	srli	r2,r20,24
    a628:	8822923a 	slli	r17,r17,8
    a62c:	a028923a 	slli	r20,r20,8
    a630:	8009883a 	mov	r4,r16
    a634:	88acb03a 	or	r22,r17,r2
    a638:	dd000015 	stw	r20,0(sp)
    a63c:	b028d43a 	srli	r20,r22,16
    a640:	d8c00215 	stw	r3,8(sp)
    a644:	b4bfffcc 	andi	r18,r22,65535
    a648:	a00b883a 	mov	r5,r20
    a64c:	000994c0 	call	994c <__udivsi3>
    a650:	100b883a 	mov	r5,r2
    a654:	9009883a 	mov	r4,r18
    a658:	1023883a 	mov	r17,r2
    a65c:	0009a080 	call	9a08 <__mulsi3>
    a660:	8009883a 	mov	r4,r16
    a664:	a00b883a 	mov	r5,r20
    a668:	1039883a 	mov	fp,r2
    a66c:	00099b00 	call	99b0 <__umodsi3>
    a670:	1004943a 	slli	r2,r2,16
    a674:	b808d43a 	srli	r4,r23,16
    a678:	d8c00217 	ldw	r3,8(sp)
    a67c:	2084b03a 	or	r2,r4,r2
    a680:	1700062e 	bgeu	r2,fp,a69c <__divdf3+0x3c0>
    a684:	1585883a 	add	r2,r2,r22
    a688:	893fffc4 	addi	r4,r17,-1
    a68c:	15811d36 	bltu	r2,r22,ab04 <__divdf3+0x828>
    a690:	17011c2e 	bgeu	r2,fp,ab04 <__divdf3+0x828>
    a694:	8c7fff84 	addi	r17,r17,-2
    a698:	1585883a 	add	r2,r2,r22
    a69c:	1739c83a 	sub	fp,r2,fp
    a6a0:	a00b883a 	mov	r5,r20
    a6a4:	e009883a 	mov	r4,fp
    a6a8:	d8c00215 	stw	r3,8(sp)
    a6ac:	000994c0 	call	994c <__udivsi3>
    a6b0:	100b883a 	mov	r5,r2
    a6b4:	9009883a 	mov	r4,r18
    a6b8:	1021883a 	mov	r16,r2
    a6bc:	0009a080 	call	9a08 <__mulsi3>
    a6c0:	a00b883a 	mov	r5,r20
    a6c4:	e009883a 	mov	r4,fp
    a6c8:	d8800415 	stw	r2,16(sp)
    a6cc:	00099b00 	call	99b0 <__umodsi3>
    a6d0:	1004943a 	slli	r2,r2,16
    a6d4:	da000417 	ldw	r8,16(sp)
    a6d8:	bdffffcc 	andi	r23,r23,65535
    a6dc:	b884b03a 	or	r2,r23,r2
    a6e0:	d8c00217 	ldw	r3,8(sp)
    a6e4:	1200062e 	bgeu	r2,r8,a700 <__divdf3+0x424>
    a6e8:	1585883a 	add	r2,r2,r22
    a6ec:	813fffc4 	addi	r4,r16,-1
    a6f0:	15810236 	bltu	r2,r22,aafc <__divdf3+0x820>
    a6f4:	1201012e 	bgeu	r2,r8,aafc <__divdf3+0x820>
    a6f8:	843fff84 	addi	r16,r16,-2
    a6fc:	1585883a 	add	r2,r2,r22
    a700:	8822943a 	slli	r17,r17,16
    a704:	d9800017 	ldw	r6,0(sp)
    a708:	1211c83a 	sub	r8,r2,r8
    a70c:	8c22b03a 	or	r17,r17,r16
    a710:	373fffcc 	andi	fp,r6,65535
    a714:	8abfffcc 	andi	r10,r17,65535
    a718:	8820d43a 	srli	r16,r17,16
    a71c:	5009883a 	mov	r4,r10
    a720:	e00b883a 	mov	r5,fp
    a724:	302ed43a 	srli	r23,r6,16
    a728:	d8c00215 	stw	r3,8(sp)
    a72c:	da000415 	stw	r8,16(sp)
    a730:	da800115 	stw	r10,4(sp)
    a734:	0009a080 	call	9a08 <__mulsi3>
    a738:	800b883a 	mov	r5,r16
    a73c:	e009883a 	mov	r4,fp
    a740:	d8800515 	stw	r2,20(sp)
    a744:	0009a080 	call	9a08 <__mulsi3>
    a748:	8009883a 	mov	r4,r16
    a74c:	b80b883a 	mov	r5,r23
    a750:	d8800315 	stw	r2,12(sp)
    a754:	0009a080 	call	9a08 <__mulsi3>
    a758:	da800117 	ldw	r10,4(sp)
    a75c:	b80b883a 	mov	r5,r23
    a760:	1021883a 	mov	r16,r2
    a764:	5009883a 	mov	r4,r10
    a768:	0009a080 	call	9a08 <__mulsi3>
    a76c:	d9c00517 	ldw	r7,20(sp)
    a770:	da400317 	ldw	r9,12(sp)
    a774:	d8c00217 	ldw	r3,8(sp)
    a778:	3808d43a 	srli	r4,r7,16
    a77c:	1245883a 	add	r2,r2,r9
    a780:	da000417 	ldw	r8,16(sp)
    a784:	2085883a 	add	r2,r4,r2
    a788:	1240022e 	bgeu	r2,r9,a794 <__divdf3+0x4b8>
    a78c:	01000074 	movhi	r4,1
    a790:	8121883a 	add	r16,r16,r4
    a794:	1008d43a 	srli	r4,r2,16
    a798:	1004943a 	slli	r2,r2,16
    a79c:	39ffffcc 	andi	r7,r7,65535
    a7a0:	2409883a 	add	r4,r4,r16
    a7a4:	11c5883a 	add	r2,r2,r7
    a7a8:	4100bb36 	bltu	r8,r4,aa98 <__divdf3+0x7bc>
    a7ac:	4100d726 	beq	r8,r4,ab0c <__divdf3+0x830>
    a7b0:	4109c83a 	sub	r4,r8,r4
    a7b4:	a8a1c83a 	sub	r16,r21,r2
    a7b8:	ac2b803a 	cmpltu	r21,r21,r16
    a7bc:	256bc83a 	sub	r21,r4,r21
    a7c0:	b540d926 	beq	r22,r21,ab28 <__divdf3+0x84c>
    a7c4:	a00b883a 	mov	r5,r20
    a7c8:	a809883a 	mov	r4,r21
    a7cc:	d8c00215 	stw	r3,8(sp)
    a7d0:	000994c0 	call	994c <__udivsi3>
    a7d4:	100b883a 	mov	r5,r2
    a7d8:	9009883a 	mov	r4,r18
    a7dc:	d8800515 	stw	r2,20(sp)
    a7e0:	0009a080 	call	9a08 <__mulsi3>
    a7e4:	a809883a 	mov	r4,r21
    a7e8:	a00b883a 	mov	r5,r20
    a7ec:	d8800415 	stw	r2,16(sp)
    a7f0:	00099b00 	call	99b0 <__umodsi3>
    a7f4:	1004943a 	slli	r2,r2,16
    a7f8:	8008d43a 	srli	r4,r16,16
    a7fc:	da000417 	ldw	r8,16(sp)
    a800:	d8c00217 	ldw	r3,8(sp)
    a804:	2084b03a 	or	r2,r4,r2
    a808:	d9c00517 	ldw	r7,20(sp)
    a80c:	1200062e 	bgeu	r2,r8,a828 <__divdf3+0x54c>
    a810:	1585883a 	add	r2,r2,r22
    a814:	393fffc4 	addi	r4,r7,-1
    a818:	1580c536 	bltu	r2,r22,ab30 <__divdf3+0x854>
    a81c:	1200c42e 	bgeu	r2,r8,ab30 <__divdf3+0x854>
    a820:	39ffff84 	addi	r7,r7,-2
    a824:	1585883a 	add	r2,r2,r22
    a828:	122bc83a 	sub	r21,r2,r8
    a82c:	a00b883a 	mov	r5,r20
    a830:	a809883a 	mov	r4,r21
    a834:	d8c00215 	stw	r3,8(sp)
    a838:	d9c00515 	stw	r7,20(sp)
    a83c:	000994c0 	call	994c <__udivsi3>
    a840:	9009883a 	mov	r4,r18
    a844:	100b883a 	mov	r5,r2
    a848:	d8800415 	stw	r2,16(sp)
    a84c:	0009a080 	call	9a08 <__mulsi3>
    a850:	a809883a 	mov	r4,r21
    a854:	a00b883a 	mov	r5,r20
    a858:	1025883a 	mov	r18,r2
    a85c:	00099b00 	call	99b0 <__umodsi3>
    a860:	1004943a 	slli	r2,r2,16
    a864:	813fffcc 	andi	r4,r16,65535
    a868:	d8c00217 	ldw	r3,8(sp)
    a86c:	20a0b03a 	or	r16,r4,r2
    a870:	d9c00517 	ldw	r7,20(sp)
    a874:	da000417 	ldw	r8,16(sp)
    a878:	8480062e 	bgeu	r16,r18,a894 <__divdf3+0x5b8>
    a87c:	85a1883a 	add	r16,r16,r22
    a880:	40bfffc4 	addi	r2,r8,-1
    a884:	8580ac36 	bltu	r16,r22,ab38 <__divdf3+0x85c>
    a888:	8480ab2e 	bgeu	r16,r18,ab38 <__divdf3+0x85c>
    a88c:	423fff84 	addi	r8,r8,-2
    a890:	85a1883a 	add	r16,r16,r22
    a894:	3804943a 	slli	r2,r7,16
    a898:	84a1c83a 	sub	r16,r16,r18
    a89c:	e009883a 	mov	r4,fp
    a8a0:	1228b03a 	or	r20,r2,r8
    a8a4:	a1ffffcc 	andi	r7,r20,65535
    a8a8:	a024d43a 	srli	r18,r20,16
    a8ac:	380b883a 	mov	r5,r7
    a8b0:	d8c00215 	stw	r3,8(sp)
    a8b4:	d9c00515 	stw	r7,20(sp)
    a8b8:	0009a080 	call	9a08 <__mulsi3>
    a8bc:	900b883a 	mov	r5,r18
    a8c0:	e009883a 	mov	r4,fp
    a8c4:	102b883a 	mov	r21,r2
    a8c8:	0009a080 	call	9a08 <__mulsi3>
    a8cc:	900b883a 	mov	r5,r18
    a8d0:	b809883a 	mov	r4,r23
    a8d4:	1039883a 	mov	fp,r2
    a8d8:	0009a080 	call	9a08 <__mulsi3>
    a8dc:	d9c00517 	ldw	r7,20(sp)
    a8e0:	b80b883a 	mov	r5,r23
    a8e4:	1025883a 	mov	r18,r2
    a8e8:	3809883a 	mov	r4,r7
    a8ec:	0009a080 	call	9a08 <__mulsi3>
    a8f0:	a808d43a 	srli	r4,r21,16
    a8f4:	1705883a 	add	r2,r2,fp
    a8f8:	d8c00217 	ldw	r3,8(sp)
    a8fc:	2085883a 	add	r2,r4,r2
    a900:	1700022e 	bgeu	r2,fp,a90c <__divdf3+0x630>
    a904:	01000074 	movhi	r4,1
    a908:	9125883a 	add	r18,r18,r4
    a90c:	1008d43a 	srli	r4,r2,16
    a910:	1004943a 	slli	r2,r2,16
    a914:	ad7fffcc 	andi	r21,r21,65535
    a918:	2489883a 	add	r4,r4,r18
    a91c:	1545883a 	add	r2,r2,r21
    a920:	81003836 	bltu	r16,r4,aa04 <__divdf3+0x728>
    a924:	81003626 	beq	r16,r4,aa00 <__divdf3+0x724>
    a928:	a5000054 	ori	r20,r20,1
    a92c:	1880ffc4 	addi	r2,r3,1023
    a930:	00bf2e0e 	bge	zero,r2,a5ec <_gp+0xffff3eb4>
    a934:	a10001cc 	andi	r4,r20,7
    a938:	20000726 	beq	r4,zero,a958 <__divdf3+0x67c>
    a93c:	a10003cc 	andi	r4,r20,15
    a940:	01400104 	movi	r5,4
    a944:	21400426 	beq	r4,r5,a958 <__divdf3+0x67c>
    a948:	a149883a 	add	r4,r20,r5
    a94c:	2529803a 	cmpltu	r20,r4,r20
    a950:	8d23883a 	add	r17,r17,r20
    a954:	2029883a 	mov	r20,r4
    a958:	8900402c 	andhi	r4,r17,256
    a95c:	20000426 	beq	r4,zero,a970 <__divdf3+0x694>
    a960:	18810004 	addi	r2,r3,1024
    a964:	00ffc034 	movhi	r3,65280
    a968:	18ffffc4 	addi	r3,r3,-1
    a96c:	88e2703a 	and	r17,r17,r3
    a970:	00c1ff84 	movi	r3,2046
    a974:	18beb416 	blt	r3,r2,a448 <_gp+0xffff3d10>
    a978:	a028d0fa 	srli	r20,r20,3
    a97c:	882a977a 	slli	r21,r17,29
    a980:	8820927a 	slli	r16,r17,9
    a984:	1081ffcc 	andi	r2,r2,2047
    a988:	ad2ab03a 	or	r21,r21,r20
    a98c:	8020d33a 	srli	r16,r16,12
    a990:	9900004c 	andi	r4,r19,1
    a994:	003eb006 	br	a458 <_gp+0xffff3d20>
    a998:	8080022c 	andhi	r2,r16,8
    a99c:	10001226 	beq	r2,zero,a9e8 <__divdf3+0x70c>
    a9a0:	8880022c 	andhi	r2,r17,8
    a9a4:	1000101e 	bne	r2,zero,a9e8 <__divdf3+0x70c>
    a9a8:	00800434 	movhi	r2,16
    a9ac:	8c000234 	orhi	r16,r17,8
    a9b0:	10bfffc4 	addi	r2,r2,-1
    a9b4:	b809883a 	mov	r4,r23
    a9b8:	80a0703a 	and	r16,r16,r2
    a9bc:	a02b883a 	mov	r21,r20
    a9c0:	003f0806 	br	a5e4 <_gp+0xffff3eac>
    a9c4:	008000c4 	movi	r2,3
    a9c8:	3880b126 	beq	r7,r2,ac90 <__divdf3+0x9b4>
    a9cc:	00800044 	movi	r2,1
    a9d0:	38805b1e 	bne	r7,r2,ab40 <__divdf3+0x864>
    a9d4:	e009883a 	mov	r4,fp
    a9d8:	0005883a 	mov	r2,zero
    a9dc:	0021883a 	mov	r16,zero
    a9e0:	002b883a 	mov	r21,zero
    a9e4:	003e9c06 	br	a458 <_gp+0xffff3d20>
    a9e8:	00800434 	movhi	r2,16
    a9ec:	84000234 	orhi	r16,r16,8
    a9f0:	10bfffc4 	addi	r2,r2,-1
    a9f4:	b009883a 	mov	r4,r22
    a9f8:	80a0703a 	and	r16,r16,r2
    a9fc:	003ef906 	br	a5e4 <_gp+0xffff3eac>
    aa00:	103fca26 	beq	r2,zero,a92c <_gp+0xffff41f4>
    aa04:	b421883a 	add	r16,r22,r16
    aa08:	a17fffc4 	addi	r5,r20,-1
    aa0c:	8580422e 	bgeu	r16,r22,ab18 <__divdf3+0x83c>
    aa10:	2829883a 	mov	r20,r5
    aa14:	813fc41e 	bne	r16,r4,a928 <_gp+0xffff41f0>
    aa18:	d9800017 	ldw	r6,0(sp)
    aa1c:	30bfc21e 	bne	r6,r2,a928 <_gp+0xffff41f0>
    aa20:	003fc206 	br	a92c <_gp+0xffff41f4>
    aa24:	143ff604 	addi	r16,r2,-40
    aa28:	8c20983a 	sll	r16,r17,r16
    aa2c:	002b883a 	mov	r21,zero
    aa30:	003eb406 	br	a504 <_gp+0xffff3dcc>
    aa34:	d9800215 	stw	r6,8(sp)
    aa38:	d9c00515 	stw	r7,20(sp)
    aa3c:	da000415 	stw	r8,16(sp)
    aa40:	000c1400 	call	c140 <__clzsi2>
    aa44:	10800804 	addi	r2,r2,32
    aa48:	da000417 	ldw	r8,16(sp)
    aa4c:	d9c00517 	ldw	r7,20(sp)
    aa50:	d9800217 	ldw	r6,8(sp)
    aa54:	003ea106 	br	a4dc <_gp+0xffff3da4>
    aa58:	147ff604 	addi	r17,r2,-40
    aa5c:	3462983a 	sll	r17,r6,r17
    aa60:	0029883a 	mov	r20,zero
    aa64:	003ec906 	br	a58c <_gp+0xffff3e54>
    aa68:	3009883a 	mov	r4,r6
    aa6c:	d9400115 	stw	r5,4(sp)
    aa70:	d9800215 	stw	r6,8(sp)
    aa74:	da000415 	stw	r8,16(sp)
    aa78:	da400315 	stw	r9,12(sp)
    aa7c:	000c1400 	call	c140 <__clzsi2>
    aa80:	10800804 	addi	r2,r2,32
    aa84:	da400317 	ldw	r9,12(sp)
    aa88:	da000417 	ldw	r8,16(sp)
    aa8c:	d9800217 	ldw	r6,8(sp)
    aa90:	d9400117 	ldw	r5,4(sp)
    aa94:	003eb306 	br	a564 <_gp+0xffff3e2c>
    aa98:	d9800017 	ldw	r6,0(sp)
    aa9c:	a9ab883a 	add	r21,r21,r6
    aaa0:	a98b803a 	cmpltu	r5,r21,r6
    aaa4:	2d8b883a 	add	r5,r5,r22
    aaa8:	2a11883a 	add	r8,r5,r8
    aaac:	897fffc4 	addi	r5,r17,-1
    aab0:	b2000c2e 	bgeu	r22,r8,aae4 <__divdf3+0x808>
    aab4:	41003f36 	bltu	r8,r4,abb4 <__divdf3+0x8d8>
    aab8:	22006c26 	beq	r4,r8,ac6c <__divdf3+0x990>
    aabc:	4109c83a 	sub	r4,r8,r4
    aac0:	2823883a 	mov	r17,r5
    aac4:	003f3b06 	br	a7b4 <_gp+0xffff407c>
    aac8:	ad3ed336 	bltu	r21,r20,a618 <_gp+0xffff3ee0>
    aacc:	a804d07a 	srli	r2,r21,1
    aad0:	802e97fa 	slli	r23,r16,31
    aad4:	a82a97fa 	slli	r21,r21,31
    aad8:	8020d07a 	srli	r16,r16,1
    aadc:	b8aeb03a 	or	r23,r23,r2
    aae0:	003ed006 	br	a624 <_gp+0xffff3eec>
    aae4:	b23ff51e 	bne	r22,r8,aabc <_gp+0xffff4384>
    aae8:	d9800017 	ldw	r6,0(sp)
    aaec:	a9bff12e 	bgeu	r21,r6,aab4 <_gp+0xffff437c>
    aaf0:	b109c83a 	sub	r4,r22,r4
    aaf4:	2823883a 	mov	r17,r5
    aaf8:	003f2e06 	br	a7b4 <_gp+0xffff407c>
    aafc:	2021883a 	mov	r16,r4
    ab00:	003eff06 	br	a700 <_gp+0xffff3fc8>
    ab04:	2023883a 	mov	r17,r4
    ab08:	003ee406 	br	a69c <_gp+0xffff3f64>
    ab0c:	a8bfe236 	bltu	r21,r2,aa98 <_gp+0xffff4360>
    ab10:	0009883a 	mov	r4,zero
    ab14:	003f2706 	br	a7b4 <_gp+0xffff407c>
    ab18:	81002d36 	bltu	r16,r4,abd0 <__divdf3+0x8f4>
    ab1c:	24005626 	beq	r4,r16,ac78 <__divdf3+0x99c>
    ab20:	2829883a 	mov	r20,r5
    ab24:	003f8006 	br	a928 <_gp+0xffff41f0>
    ab28:	053fffc4 	movi	r20,-1
    ab2c:	003f7f06 	br	a92c <_gp+0xffff41f4>
    ab30:	200f883a 	mov	r7,r4
    ab34:	003f3c06 	br	a828 <_gp+0xffff40f0>
    ab38:	1011883a 	mov	r8,r2
    ab3c:	003f5506 	br	a894 <_gp+0xffff415c>
    ab40:	e027883a 	mov	r19,fp
    ab44:	003f7906 	br	a92c <_gp+0xffff41f4>
    ab48:	010007c4 	movi	r4,31
    ab4c:	20c02816 	blt	r4,r3,abf0 <__divdf3+0x914>
    ab50:	00800804 	movi	r2,32
    ab54:	10c5c83a 	sub	r2,r2,r3
    ab58:	888a983a 	sll	r5,r17,r2
    ab5c:	a0c8d83a 	srl	r4,r20,r3
    ab60:	a084983a 	sll	r2,r20,r2
    ab64:	88e2d83a 	srl	r17,r17,r3
    ab68:	2906b03a 	or	r3,r5,r4
    ab6c:	1004c03a 	cmpne	r2,r2,zero
    ab70:	1886b03a 	or	r3,r3,r2
    ab74:	188001cc 	andi	r2,r3,7
    ab78:	10000726 	beq	r2,zero,ab98 <__divdf3+0x8bc>
    ab7c:	188003cc 	andi	r2,r3,15
    ab80:	01000104 	movi	r4,4
    ab84:	11000426 	beq	r2,r4,ab98 <__divdf3+0x8bc>
    ab88:	1805883a 	mov	r2,r3
    ab8c:	10c00104 	addi	r3,r2,4
    ab90:	1885803a 	cmpltu	r2,r3,r2
    ab94:	88a3883a 	add	r17,r17,r2
    ab98:	8880202c 	andhi	r2,r17,128
    ab9c:	10002926 	beq	r2,zero,ac44 <__divdf3+0x968>
    aba0:	9900004c 	andi	r4,r19,1
    aba4:	00800044 	movi	r2,1
    aba8:	0021883a 	mov	r16,zero
    abac:	002b883a 	mov	r21,zero
    abb0:	003e2906 	br	a458 <_gp+0xffff3d20>
    abb4:	d9800017 	ldw	r6,0(sp)
    abb8:	8c7fff84 	addi	r17,r17,-2
    abbc:	a9ab883a 	add	r21,r21,r6
    abc0:	a98b803a 	cmpltu	r5,r21,r6
    abc4:	2d8b883a 	add	r5,r5,r22
    abc8:	2a11883a 	add	r8,r5,r8
    abcc:	003ef806 	br	a7b0 <_gp+0xffff4078>
    abd0:	d9800017 	ldw	r6,0(sp)
    abd4:	318f883a 	add	r7,r6,r6
    abd8:	398b803a 	cmpltu	r5,r7,r6
    abdc:	2d8d883a 	add	r6,r5,r22
    abe0:	81a1883a 	add	r16,r16,r6
    abe4:	a17fff84 	addi	r5,r20,-2
    abe8:	d9c00015 	stw	r7,0(sp)
    abec:	003f8806 	br	aa10 <_gp+0xffff42d8>
    abf0:	013ff844 	movi	r4,-31
    abf4:	2085c83a 	sub	r2,r4,r2
    abf8:	8888d83a 	srl	r4,r17,r2
    abfc:	00800804 	movi	r2,32
    ac00:	18802126 	beq	r3,r2,ac88 <__divdf3+0x9ac>
    ac04:	04001004 	movi	r16,64
    ac08:	80c7c83a 	sub	r3,r16,r3
    ac0c:	88e0983a 	sll	r16,r17,r3
    ac10:	8504b03a 	or	r2,r16,r20
    ac14:	1004c03a 	cmpne	r2,r2,zero
    ac18:	2084b03a 	or	r2,r4,r2
    ac1c:	144001cc 	andi	r17,r2,7
    ac20:	88000d1e 	bne	r17,zero,ac58 <__divdf3+0x97c>
    ac24:	0021883a 	mov	r16,zero
    ac28:	102ad0fa 	srli	r21,r2,3
    ac2c:	9900004c 	andi	r4,r19,1
    ac30:	0005883a 	mov	r2,zero
    ac34:	ac6ab03a 	or	r21,r21,r17
    ac38:	003e0706 	br	a458 <_gp+0xffff3d20>
    ac3c:	1007883a 	mov	r3,r2
    ac40:	0023883a 	mov	r17,zero
    ac44:	8820927a 	slli	r16,r17,9
    ac48:	1805883a 	mov	r2,r3
    ac4c:	8822977a 	slli	r17,r17,29
    ac50:	8020d33a 	srli	r16,r16,12
    ac54:	003ff406 	br	ac28 <_gp+0xffff44f0>
    ac58:	10c003cc 	andi	r3,r2,15
    ac5c:	01000104 	movi	r4,4
    ac60:	193ff626 	beq	r3,r4,ac3c <_gp+0xffff4504>
    ac64:	0023883a 	mov	r17,zero
    ac68:	003fc806 	br	ab8c <_gp+0xffff4454>
    ac6c:	a8bfd136 	bltu	r21,r2,abb4 <_gp+0xffff447c>
    ac70:	2823883a 	mov	r17,r5
    ac74:	003fa606 	br	ab10 <_gp+0xffff43d8>
    ac78:	d9800017 	ldw	r6,0(sp)
    ac7c:	30bfd436 	bltu	r6,r2,abd0 <_gp+0xffff4498>
    ac80:	2829883a 	mov	r20,r5
    ac84:	003f6406 	br	aa18 <_gp+0xffff42e0>
    ac88:	0021883a 	mov	r16,zero
    ac8c:	003fe006 	br	ac10 <_gp+0xffff44d8>
    ac90:	00800434 	movhi	r2,16
    ac94:	8c000234 	orhi	r16,r17,8
    ac98:	10bfffc4 	addi	r2,r2,-1
    ac9c:	e009883a 	mov	r4,fp
    aca0:	80a0703a 	and	r16,r16,r2
    aca4:	a02b883a 	mov	r21,r20
    aca8:	003e4e06 	br	a5e4 <_gp+0xffff3eac>

0000acac <__gedf2>:
    acac:	2804d53a 	srli	r2,r5,20
    acb0:	3806d53a 	srli	r3,r7,20
    acb4:	02000434 	movhi	r8,16
    acb8:	423fffc4 	addi	r8,r8,-1
    acbc:	1081ffcc 	andi	r2,r2,2047
    acc0:	0241ffc4 	movi	r9,2047
    acc4:	2a14703a 	and	r10,r5,r8
    acc8:	18c1ffcc 	andi	r3,r3,2047
    accc:	3a10703a 	and	r8,r7,r8
    acd0:	280ad7fa 	srli	r5,r5,31
    acd4:	380ed7fa 	srli	r7,r7,31
    acd8:	12401d26 	beq	r2,r9,ad50 <__gedf2+0xa4>
    acdc:	0241ffc4 	movi	r9,2047
    ace0:	1a401226 	beq	r3,r9,ad2c <__gedf2+0x80>
    ace4:	1000081e 	bne	r2,zero,ad08 <__gedf2+0x5c>
    ace8:	2296b03a 	or	r11,r4,r10
    acec:	5813003a 	cmpeq	r9,r11,zero
    acf0:	1800091e 	bne	r3,zero,ad18 <__gedf2+0x6c>
    acf4:	3218b03a 	or	r12,r6,r8
    acf8:	6000071e 	bne	r12,zero,ad18 <__gedf2+0x6c>
    acfc:	0005883a 	mov	r2,zero
    ad00:	5800101e 	bne	r11,zero,ad44 <__gedf2+0x98>
    ad04:	f800283a 	ret
    ad08:	18000c1e 	bne	r3,zero,ad3c <__gedf2+0x90>
    ad0c:	3212b03a 	or	r9,r6,r8
    ad10:	48000c26 	beq	r9,zero,ad44 <__gedf2+0x98>
    ad14:	0013883a 	mov	r9,zero
    ad18:	39c03fcc 	andi	r7,r7,255
    ad1c:	48000826 	beq	r9,zero,ad40 <__gedf2+0x94>
    ad20:	38000926 	beq	r7,zero,ad48 <__gedf2+0x9c>
    ad24:	00800044 	movi	r2,1
    ad28:	f800283a 	ret
    ad2c:	3212b03a 	or	r9,r6,r8
    ad30:	483fec26 	beq	r9,zero,ace4 <_gp+0xffff45ac>
    ad34:	00bfff84 	movi	r2,-2
    ad38:	f800283a 	ret
    ad3c:	39c03fcc 	andi	r7,r7,255
    ad40:	29c00626 	beq	r5,r7,ad5c <__gedf2+0xb0>
    ad44:	283ff726 	beq	r5,zero,ad24 <_gp+0xffff45ec>
    ad48:	00bfffc4 	movi	r2,-1
    ad4c:	f800283a 	ret
    ad50:	2292b03a 	or	r9,r4,r10
    ad54:	483fe126 	beq	r9,zero,acdc <_gp+0xffff45a4>
    ad58:	003ff606 	br	ad34 <_gp+0xffff45fc>
    ad5c:	18bff916 	blt	r3,r2,ad44 <_gp+0xffff460c>
    ad60:	10c00316 	blt	r2,r3,ad70 <__gedf2+0xc4>
    ad64:	42bff736 	bltu	r8,r10,ad44 <_gp+0xffff460c>
    ad68:	52000326 	beq	r10,r8,ad78 <__gedf2+0xcc>
    ad6c:	5200042e 	bgeu	r10,r8,ad80 <__gedf2+0xd4>
    ad70:	283fec1e 	bne	r5,zero,ad24 <_gp+0xffff45ec>
    ad74:	003ff406 	br	ad48 <_gp+0xffff4610>
    ad78:	313ff236 	bltu	r6,r4,ad44 <_gp+0xffff460c>
    ad7c:	21bffc36 	bltu	r4,r6,ad70 <_gp+0xffff4638>
    ad80:	0005883a 	mov	r2,zero
    ad84:	f800283a 	ret

0000ad88 <__ledf2>:
    ad88:	2804d53a 	srli	r2,r5,20
    ad8c:	3810d53a 	srli	r8,r7,20
    ad90:	00c00434 	movhi	r3,16
    ad94:	18ffffc4 	addi	r3,r3,-1
    ad98:	1081ffcc 	andi	r2,r2,2047
    ad9c:	0241ffc4 	movi	r9,2047
    ada0:	28d4703a 	and	r10,r5,r3
    ada4:	4201ffcc 	andi	r8,r8,2047
    ada8:	38c6703a 	and	r3,r7,r3
    adac:	280ad7fa 	srli	r5,r5,31
    adb0:	380ed7fa 	srli	r7,r7,31
    adb4:	12401f26 	beq	r2,r9,ae34 <__ledf2+0xac>
    adb8:	0241ffc4 	movi	r9,2047
    adbc:	42401426 	beq	r8,r9,ae10 <__ledf2+0x88>
    adc0:	1000091e 	bne	r2,zero,ade8 <__ledf2+0x60>
    adc4:	2296b03a 	or	r11,r4,r10
    adc8:	5813003a 	cmpeq	r9,r11,zero
    adcc:	29403fcc 	andi	r5,r5,255
    add0:	40000a1e 	bne	r8,zero,adfc <__ledf2+0x74>
    add4:	30d8b03a 	or	r12,r6,r3
    add8:	6000081e 	bne	r12,zero,adfc <__ledf2+0x74>
    addc:	0005883a 	mov	r2,zero
    ade0:	5800111e 	bne	r11,zero,ae28 <__ledf2+0xa0>
    ade4:	f800283a 	ret
    ade8:	29403fcc 	andi	r5,r5,255
    adec:	40000c1e 	bne	r8,zero,ae20 <__ledf2+0x98>
    adf0:	30d2b03a 	or	r9,r6,r3
    adf4:	48000c26 	beq	r9,zero,ae28 <__ledf2+0xa0>
    adf8:	0013883a 	mov	r9,zero
    adfc:	39c03fcc 	andi	r7,r7,255
    ae00:	48000826 	beq	r9,zero,ae24 <__ledf2+0x9c>
    ae04:	38001126 	beq	r7,zero,ae4c <__ledf2+0xc4>
    ae08:	00800044 	movi	r2,1
    ae0c:	f800283a 	ret
    ae10:	30d2b03a 	or	r9,r6,r3
    ae14:	483fea26 	beq	r9,zero,adc0 <_gp+0xffff4688>
    ae18:	00800084 	movi	r2,2
    ae1c:	f800283a 	ret
    ae20:	39c03fcc 	andi	r7,r7,255
    ae24:	39400726 	beq	r7,r5,ae44 <__ledf2+0xbc>
    ae28:	2800081e 	bne	r5,zero,ae4c <__ledf2+0xc4>
    ae2c:	00800044 	movi	r2,1
    ae30:	f800283a 	ret
    ae34:	2292b03a 	or	r9,r4,r10
    ae38:	483fdf26 	beq	r9,zero,adb8 <_gp+0xffff4680>
    ae3c:	00800084 	movi	r2,2
    ae40:	f800283a 	ret
    ae44:	4080030e 	bge	r8,r2,ae54 <__ledf2+0xcc>
    ae48:	383fef26 	beq	r7,zero,ae08 <_gp+0xffff46d0>
    ae4c:	00bfffc4 	movi	r2,-1
    ae50:	f800283a 	ret
    ae54:	123feb16 	blt	r2,r8,ae04 <_gp+0xffff46cc>
    ae58:	1abff336 	bltu	r3,r10,ae28 <_gp+0xffff46f0>
    ae5c:	50c00326 	beq	r10,r3,ae6c <__ledf2+0xe4>
    ae60:	50c0042e 	bgeu	r10,r3,ae74 <__ledf2+0xec>
    ae64:	283fe81e 	bne	r5,zero,ae08 <_gp+0xffff46d0>
    ae68:	003ff806 	br	ae4c <_gp+0xffff4714>
    ae6c:	313fee36 	bltu	r6,r4,ae28 <_gp+0xffff46f0>
    ae70:	21bffc36 	bltu	r4,r6,ae64 <_gp+0xffff472c>
    ae74:	0005883a 	mov	r2,zero
    ae78:	f800283a 	ret

0000ae7c <__muldf3>:
    ae7c:	deffee04 	addi	sp,sp,-72
    ae80:	dd000c15 	stw	r20,48(sp)
    ae84:	2828d53a 	srli	r20,r5,20
    ae88:	ddc00f15 	stw	r23,60(sp)
    ae8c:	282ed7fa 	srli	r23,r5,31
    ae90:	dc000815 	stw	r16,32(sp)
    ae94:	04000434 	movhi	r16,16
    ae98:	dcc00b15 	stw	r19,44(sp)
    ae9c:	843fffc4 	addi	r16,r16,-1
    aea0:	dfc01115 	stw	ra,68(sp)
    aea4:	df001015 	stw	fp,64(sp)
    aea8:	dd800e15 	stw	r22,56(sp)
    aeac:	dd400d15 	stw	r21,52(sp)
    aeb0:	dc800a15 	stw	r18,40(sp)
    aeb4:	dc400915 	stw	r17,36(sp)
    aeb8:	a501ffcc 	andi	r20,r20,2047
    aebc:	2c20703a 	and	r16,r5,r16
    aec0:	b827883a 	mov	r19,r23
    aec4:	ba403fcc 	andi	r9,r23,255
    aec8:	a0006026 	beq	r20,zero,b04c <__muldf3+0x1d0>
    aecc:	0081ffc4 	movi	r2,2047
    aed0:	202d883a 	mov	r22,r4
    aed4:	a0803626 	beq	r20,r2,afb0 <__muldf3+0x134>
    aed8:	84000434 	orhi	r16,r16,16
    aedc:	200ad77a 	srli	r5,r4,29
    aee0:	800490fa 	slli	r2,r16,3
    aee4:	202c90fa 	slli	r22,r4,3
    aee8:	a53f0044 	addi	r20,r20,-1023
    aeec:	28a0b03a 	or	r16,r5,r2
    aef0:	002b883a 	mov	r21,zero
    aef4:	000b883a 	mov	r5,zero
    aef8:	3804d53a 	srli	r2,r7,20
    aefc:	3838d7fa 	srli	fp,r7,31
    af00:	04400434 	movhi	r17,16
    af04:	8c7fffc4 	addi	r17,r17,-1
    af08:	1081ffcc 	andi	r2,r2,2047
    af0c:	3025883a 	mov	r18,r6
    af10:	3c62703a 	and	r17,r7,r17
    af14:	e2803fcc 	andi	r10,fp,255
    af18:	10006d26 	beq	r2,zero,b0d0 <__muldf3+0x254>
    af1c:	00c1ffc4 	movi	r3,2047
    af20:	10c06526 	beq	r2,r3,b0b8 <__muldf3+0x23c>
    af24:	8c400434 	orhi	r17,r17,16
    af28:	300ed77a 	srli	r7,r6,29
    af2c:	880690fa 	slli	r3,r17,3
    af30:	302490fa 	slli	r18,r6,3
    af34:	10bf0044 	addi	r2,r2,-1023
    af38:	38e2b03a 	or	r17,r7,r3
    af3c:	000f883a 	mov	r7,zero
    af40:	a087883a 	add	r3,r20,r2
    af44:	010003c4 	movi	r4,15
    af48:	3d44b03a 	or	r2,r7,r21
    af4c:	e5ccf03a 	xor	r6,fp,r23
    af50:	1a000044 	addi	r8,r3,1
    af54:	20809b36 	bltu	r4,r2,b1c4 <__muldf3+0x348>
    af58:	100490ba 	slli	r2,r2,2
    af5c:	01000074 	movhi	r4,1
    af60:	212bdc04 	addi	r4,r4,-20624
    af64:	1105883a 	add	r2,r2,r4
    af68:	10800017 	ldw	r2,0(r2)
    af6c:	1000683a 	jmp	r2
    af70:	0000b1c4 	movi	zero,711
    af74:	0000afd0 	cmplti	zero,zero,703
    af78:	0000afd0 	cmplti	zero,zero,703
    af7c:	0000afcc 	andi	zero,zero,703
    af80:	0000b1a0 	cmpeqi	zero,zero,710
    af84:	0000b1a0 	cmpeqi	zero,zero,710
    af88:	0000b188 	cmpgei	zero,zero,710
    af8c:	0000afcc 	andi	zero,zero,703
    af90:	0000b1a0 	cmpeqi	zero,zero,710
    af94:	0000b188 	cmpgei	zero,zero,710
    af98:	0000b1a0 	cmpeqi	zero,zero,710
    af9c:	0000afcc 	andi	zero,zero,703
    afa0:	0000b1b0 	cmpltui	zero,zero,710
    afa4:	0000b1b0 	cmpltui	zero,zero,710
    afa8:	0000b1b0 	cmpltui	zero,zero,710
    afac:	0000b510 	cmplti	zero,zero,724
    afb0:	2404b03a 	or	r2,r4,r16
    afb4:	1000711e 	bne	r2,zero,b17c <__muldf3+0x300>
    afb8:	05400204 	movi	r21,8
    afbc:	0021883a 	mov	r16,zero
    afc0:	002d883a 	mov	r22,zero
    afc4:	01400084 	movi	r5,2
    afc8:	003fcb06 	br	aef8 <_gp+0xffff47c0>
    afcc:	500d883a 	mov	r6,r10
    afd0:	00800084 	movi	r2,2
    afd4:	38805926 	beq	r7,r2,b13c <__muldf3+0x2c0>
    afd8:	008000c4 	movi	r2,3
    afdc:	3881bb26 	beq	r7,r2,b6cc <__muldf3+0x850>
    afe0:	00800044 	movi	r2,1
    afe4:	3881961e 	bne	r7,r2,b640 <__muldf3+0x7c4>
    afe8:	3027883a 	mov	r19,r6
    afec:	0005883a 	mov	r2,zero
    aff0:	0021883a 	mov	r16,zero
    aff4:	002d883a 	mov	r22,zero
    aff8:	1004953a 	slli	r2,r2,20
    affc:	98c03fcc 	andi	r3,r19,255
    b000:	04400434 	movhi	r17,16
    b004:	8c7fffc4 	addi	r17,r17,-1
    b008:	180697fa 	slli	r3,r3,31
    b00c:	8460703a 	and	r16,r16,r17
    b010:	80a0b03a 	or	r16,r16,r2
    b014:	80c6b03a 	or	r3,r16,r3
    b018:	b005883a 	mov	r2,r22
    b01c:	dfc01117 	ldw	ra,68(sp)
    b020:	df001017 	ldw	fp,64(sp)
    b024:	ddc00f17 	ldw	r23,60(sp)
    b028:	dd800e17 	ldw	r22,56(sp)
    b02c:	dd400d17 	ldw	r21,52(sp)
    b030:	dd000c17 	ldw	r20,48(sp)
    b034:	dcc00b17 	ldw	r19,44(sp)
    b038:	dc800a17 	ldw	r18,40(sp)
    b03c:	dc400917 	ldw	r17,36(sp)
    b040:	dc000817 	ldw	r16,32(sp)
    b044:	dec01204 	addi	sp,sp,72
    b048:	f800283a 	ret
    b04c:	2404b03a 	or	r2,r4,r16
    b050:	202b883a 	mov	r21,r4
    b054:	10004426 	beq	r2,zero,b168 <__muldf3+0x2ec>
    b058:	80015126 	beq	r16,zero,b5a0 <__muldf3+0x724>
    b05c:	8009883a 	mov	r4,r16
    b060:	d9800715 	stw	r6,28(sp)
    b064:	d9c00215 	stw	r7,8(sp)
    b068:	da400415 	stw	r9,16(sp)
    b06c:	000c1400 	call	c140 <__clzsi2>
    b070:	d9800717 	ldw	r6,28(sp)
    b074:	d9c00217 	ldw	r7,8(sp)
    b078:	da400417 	ldw	r9,16(sp)
    b07c:	113ffd44 	addi	r4,r2,-11
    b080:	00c00704 	movi	r3,28
    b084:	19014216 	blt	r3,r4,b590 <__muldf3+0x714>
    b088:	00c00744 	movi	r3,29
    b08c:	15bffe04 	addi	r22,r2,-8
    b090:	1907c83a 	sub	r3,r3,r4
    b094:	85a0983a 	sll	r16,r16,r22
    b098:	a8c6d83a 	srl	r3,r21,r3
    b09c:	adac983a 	sll	r22,r21,r22
    b0a0:	1c20b03a 	or	r16,r3,r16
    b0a4:	1080fcc4 	addi	r2,r2,1011
    b0a8:	00a9c83a 	sub	r20,zero,r2
    b0ac:	002b883a 	mov	r21,zero
    b0b0:	000b883a 	mov	r5,zero
    b0b4:	003f9006 	br	aef8 <_gp+0xffff47c0>
    b0b8:	3446b03a 	or	r3,r6,r17
    b0bc:	1800281e 	bne	r3,zero,b160 <__muldf3+0x2e4>
    b0c0:	0023883a 	mov	r17,zero
    b0c4:	0025883a 	mov	r18,zero
    b0c8:	01c00084 	movi	r7,2
    b0cc:	003f9c06 	br	af40 <_gp+0xffff4808>
    b0d0:	3446b03a 	or	r3,r6,r17
    b0d4:	18001e26 	beq	r3,zero,b150 <__muldf3+0x2d4>
    b0d8:	88012126 	beq	r17,zero,b560 <__muldf3+0x6e4>
    b0dc:	8809883a 	mov	r4,r17
    b0e0:	d9400215 	stw	r5,8(sp)
    b0e4:	d9800715 	stw	r6,28(sp)
    b0e8:	da400415 	stw	r9,16(sp)
    b0ec:	da800315 	stw	r10,12(sp)
    b0f0:	000c1400 	call	c140 <__clzsi2>
    b0f4:	d9400217 	ldw	r5,8(sp)
    b0f8:	d9800717 	ldw	r6,28(sp)
    b0fc:	da400417 	ldw	r9,16(sp)
    b100:	da800317 	ldw	r10,12(sp)
    b104:	113ffd44 	addi	r4,r2,-11
    b108:	00c00704 	movi	r3,28
    b10c:	19011016 	blt	r3,r4,b550 <__muldf3+0x6d4>
    b110:	00c00744 	movi	r3,29
    b114:	14bffe04 	addi	r18,r2,-8
    b118:	1907c83a 	sub	r3,r3,r4
    b11c:	8ca2983a 	sll	r17,r17,r18
    b120:	30c6d83a 	srl	r3,r6,r3
    b124:	34a4983a 	sll	r18,r6,r18
    b128:	1c62b03a 	or	r17,r3,r17
    b12c:	1080fcc4 	addi	r2,r2,1011
    b130:	0085c83a 	sub	r2,zero,r2
    b134:	000f883a 	mov	r7,zero
    b138:	003f8106 	br	af40 <_gp+0xffff4808>
    b13c:	3027883a 	mov	r19,r6
    b140:	0081ffc4 	movi	r2,2047
    b144:	0021883a 	mov	r16,zero
    b148:	002d883a 	mov	r22,zero
    b14c:	003faa06 	br	aff8 <_gp+0xffff48c0>
    b150:	0023883a 	mov	r17,zero
    b154:	0025883a 	mov	r18,zero
    b158:	01c00044 	movi	r7,1
    b15c:	003f7806 	br	af40 <_gp+0xffff4808>
    b160:	01c000c4 	movi	r7,3
    b164:	003f7606 	br	af40 <_gp+0xffff4808>
    b168:	05400104 	movi	r21,4
    b16c:	0021883a 	mov	r16,zero
    b170:	002d883a 	mov	r22,zero
    b174:	01400044 	movi	r5,1
    b178:	003f5f06 	br	aef8 <_gp+0xffff47c0>
    b17c:	05400304 	movi	r21,12
    b180:	014000c4 	movi	r5,3
    b184:	003f5c06 	br	aef8 <_gp+0xffff47c0>
    b188:	04000434 	movhi	r16,16
    b18c:	0027883a 	mov	r19,zero
    b190:	843fffc4 	addi	r16,r16,-1
    b194:	05bfffc4 	movi	r22,-1
    b198:	0081ffc4 	movi	r2,2047
    b19c:	003f9606 	br	aff8 <_gp+0xffff48c0>
    b1a0:	8023883a 	mov	r17,r16
    b1a4:	b025883a 	mov	r18,r22
    b1a8:	280f883a 	mov	r7,r5
    b1ac:	003f8806 	br	afd0 <_gp+0xffff4898>
    b1b0:	8023883a 	mov	r17,r16
    b1b4:	b025883a 	mov	r18,r22
    b1b8:	480d883a 	mov	r6,r9
    b1bc:	280f883a 	mov	r7,r5
    b1c0:	003f8306 	br	afd0 <_gp+0xffff4898>
    b1c4:	b026d43a 	srli	r19,r22,16
    b1c8:	902ed43a 	srli	r23,r18,16
    b1cc:	b5bfffcc 	andi	r22,r22,65535
    b1d0:	94bfffcc 	andi	r18,r18,65535
    b1d4:	b00b883a 	mov	r5,r22
    b1d8:	9009883a 	mov	r4,r18
    b1dc:	d8c00515 	stw	r3,20(sp)
    b1e0:	d9800715 	stw	r6,28(sp)
    b1e4:	da000615 	stw	r8,24(sp)
    b1e8:	0009a080 	call	9a08 <__mulsi3>
    b1ec:	980b883a 	mov	r5,r19
    b1f0:	9009883a 	mov	r4,r18
    b1f4:	1029883a 	mov	r20,r2
    b1f8:	0009a080 	call	9a08 <__mulsi3>
    b1fc:	b80b883a 	mov	r5,r23
    b200:	9809883a 	mov	r4,r19
    b204:	102b883a 	mov	r21,r2
    b208:	0009a080 	call	9a08 <__mulsi3>
    b20c:	b809883a 	mov	r4,r23
    b210:	b00b883a 	mov	r5,r22
    b214:	1039883a 	mov	fp,r2
    b218:	0009a080 	call	9a08 <__mulsi3>
    b21c:	a008d43a 	srli	r4,r20,16
    b220:	1545883a 	add	r2,r2,r21
    b224:	d8c00517 	ldw	r3,20(sp)
    b228:	2085883a 	add	r2,r4,r2
    b22c:	d9800717 	ldw	r6,28(sp)
    b230:	da000617 	ldw	r8,24(sp)
    b234:	1540022e 	bgeu	r2,r21,b240 <__muldf3+0x3c4>
    b238:	01000074 	movhi	r4,1
    b23c:	e139883a 	add	fp,fp,r4
    b240:	100e943a 	slli	r7,r2,16
    b244:	1004d43a 	srli	r2,r2,16
    b248:	882ad43a 	srli	r21,r17,16
    b24c:	a53fffcc 	andi	r20,r20,65535
    b250:	8c7fffcc 	andi	r17,r17,65535
    b254:	3d29883a 	add	r20,r7,r20
    b258:	b00b883a 	mov	r5,r22
    b25c:	8809883a 	mov	r4,r17
    b260:	d8c00515 	stw	r3,20(sp)
    b264:	d9800715 	stw	r6,28(sp)
    b268:	da000615 	stw	r8,24(sp)
    b26c:	dd000115 	stw	r20,4(sp)
    b270:	d8800015 	stw	r2,0(sp)
    b274:	0009a080 	call	9a08 <__mulsi3>
    b278:	980b883a 	mov	r5,r19
    b27c:	8809883a 	mov	r4,r17
    b280:	d8800215 	stw	r2,8(sp)
    b284:	0009a080 	call	9a08 <__mulsi3>
    b288:	9809883a 	mov	r4,r19
    b28c:	a80b883a 	mov	r5,r21
    b290:	1029883a 	mov	r20,r2
    b294:	0009a080 	call	9a08 <__mulsi3>
    b298:	b00b883a 	mov	r5,r22
    b29c:	a809883a 	mov	r4,r21
    b2a0:	d8800415 	stw	r2,16(sp)
    b2a4:	0009a080 	call	9a08 <__mulsi3>
    b2a8:	d9c00217 	ldw	r7,8(sp)
    b2ac:	1505883a 	add	r2,r2,r20
    b2b0:	d8c00517 	ldw	r3,20(sp)
    b2b4:	3826d43a 	srli	r19,r7,16
    b2b8:	d9800717 	ldw	r6,28(sp)
    b2bc:	da000617 	ldw	r8,24(sp)
    b2c0:	9885883a 	add	r2,r19,r2
    b2c4:	da400417 	ldw	r9,16(sp)
    b2c8:	1500022e 	bgeu	r2,r20,b2d4 <__muldf3+0x458>
    b2cc:	01000074 	movhi	r4,1
    b2d0:	4913883a 	add	r9,r9,r4
    b2d4:	1028d43a 	srli	r20,r2,16
    b2d8:	1004943a 	slli	r2,r2,16
    b2dc:	802cd43a 	srli	r22,r16,16
    b2e0:	843fffcc 	andi	r16,r16,65535
    b2e4:	3cffffcc 	andi	r19,r7,65535
    b2e8:	9009883a 	mov	r4,r18
    b2ec:	800b883a 	mov	r5,r16
    b2f0:	a269883a 	add	r20,r20,r9
    b2f4:	d8c00515 	stw	r3,20(sp)
    b2f8:	d9800715 	stw	r6,28(sp)
    b2fc:	da000615 	stw	r8,24(sp)
    b300:	14e7883a 	add	r19,r2,r19
    b304:	0009a080 	call	9a08 <__mulsi3>
    b308:	9009883a 	mov	r4,r18
    b30c:	b00b883a 	mov	r5,r22
    b310:	d8800315 	stw	r2,12(sp)
    b314:	0009a080 	call	9a08 <__mulsi3>
    b318:	b809883a 	mov	r4,r23
    b31c:	b00b883a 	mov	r5,r22
    b320:	d8800215 	stw	r2,8(sp)
    b324:	0009a080 	call	9a08 <__mulsi3>
    b328:	b80b883a 	mov	r5,r23
    b32c:	8009883a 	mov	r4,r16
    b330:	d8800415 	stw	r2,16(sp)
    b334:	0009a080 	call	9a08 <__mulsi3>
    b338:	da800317 	ldw	r10,12(sp)
    b33c:	d9c00217 	ldw	r7,8(sp)
    b340:	d9000017 	ldw	r4,0(sp)
    b344:	502ed43a 	srli	r23,r10,16
    b348:	11c5883a 	add	r2,r2,r7
    b34c:	24e5883a 	add	r18,r4,r19
    b350:	b885883a 	add	r2,r23,r2
    b354:	d8c00517 	ldw	r3,20(sp)
    b358:	d9800717 	ldw	r6,28(sp)
    b35c:	da000617 	ldw	r8,24(sp)
    b360:	da400417 	ldw	r9,16(sp)
    b364:	11c0022e 	bgeu	r2,r7,b370 <__muldf3+0x4f4>
    b368:	01000074 	movhi	r4,1
    b36c:	4913883a 	add	r9,r9,r4
    b370:	100ed43a 	srli	r7,r2,16
    b374:	1004943a 	slli	r2,r2,16
    b378:	55ffffcc 	andi	r23,r10,65535
    b37c:	3a53883a 	add	r9,r7,r9
    b380:	8809883a 	mov	r4,r17
    b384:	800b883a 	mov	r5,r16
    b388:	d8c00515 	stw	r3,20(sp)
    b38c:	d9800715 	stw	r6,28(sp)
    b390:	da000615 	stw	r8,24(sp)
    b394:	da400415 	stw	r9,16(sp)
    b398:	15ef883a 	add	r23,r2,r23
    b39c:	0009a080 	call	9a08 <__mulsi3>
    b3a0:	8809883a 	mov	r4,r17
    b3a4:	b00b883a 	mov	r5,r22
    b3a8:	d8800215 	stw	r2,8(sp)
    b3ac:	0009a080 	call	9a08 <__mulsi3>
    b3b0:	b00b883a 	mov	r5,r22
    b3b4:	a809883a 	mov	r4,r21
    b3b8:	d8800315 	stw	r2,12(sp)
    b3bc:	0009a080 	call	9a08 <__mulsi3>
    b3c0:	8009883a 	mov	r4,r16
    b3c4:	a80b883a 	mov	r5,r21
    b3c8:	1023883a 	mov	r17,r2
    b3cc:	0009a080 	call	9a08 <__mulsi3>
    b3d0:	d9c00217 	ldw	r7,8(sp)
    b3d4:	da800317 	ldw	r10,12(sp)
    b3d8:	d8c00517 	ldw	r3,20(sp)
    b3dc:	3808d43a 	srli	r4,r7,16
    b3e0:	1285883a 	add	r2,r2,r10
    b3e4:	d9800717 	ldw	r6,28(sp)
    b3e8:	2085883a 	add	r2,r4,r2
    b3ec:	da000617 	ldw	r8,24(sp)
    b3f0:	da400417 	ldw	r9,16(sp)
    b3f4:	1280022e 	bgeu	r2,r10,b400 <__muldf3+0x584>
    b3f8:	01000074 	movhi	r4,1
    b3fc:	8923883a 	add	r17,r17,r4
    b400:	1008943a 	slli	r4,r2,16
    b404:	39ffffcc 	andi	r7,r7,65535
    b408:	e4b9883a 	add	fp,fp,r18
    b40c:	21cf883a 	add	r7,r4,r7
    b410:	e4e7803a 	cmpltu	r19,fp,r19
    b414:	3d0f883a 	add	r7,r7,r20
    b418:	bf39883a 	add	fp,r23,fp
    b41c:	99c9883a 	add	r4,r19,r7
    b420:	e5ef803a 	cmpltu	r23,fp,r23
    b424:	490b883a 	add	r5,r9,r4
    b428:	1004d43a 	srli	r2,r2,16
    b42c:	b965883a 	add	r18,r23,r5
    b430:	24c9803a 	cmpltu	r4,r4,r19
    b434:	3d29803a 	cmpltu	r20,r7,r20
    b438:	a128b03a 	or	r20,r20,r4
    b43c:	95ef803a 	cmpltu	r23,r18,r23
    b440:	2a53803a 	cmpltu	r9,r5,r9
    b444:	a0a9883a 	add	r20,r20,r2
    b448:	4deeb03a 	or	r23,r9,r23
    b44c:	a5ef883a 	add	r23,r20,r23
    b450:	bc63883a 	add	r17,r23,r17
    b454:	e004927a 	slli	r2,fp,9
    b458:	d9000117 	ldw	r4,4(sp)
    b45c:	882e927a 	slli	r23,r17,9
    b460:	9022d5fa 	srli	r17,r18,23
    b464:	e038d5fa 	srli	fp,fp,23
    b468:	1104b03a 	or	r2,r2,r4
    b46c:	9024927a 	slli	r18,r18,9
    b470:	1004c03a 	cmpne	r2,r2,zero
    b474:	bc62b03a 	or	r17,r23,r17
    b478:	1738b03a 	or	fp,r2,fp
    b47c:	8880402c 	andhi	r2,r17,256
    b480:	e4a4b03a 	or	r18,fp,r18
    b484:	10000726 	beq	r2,zero,b4a4 <__muldf3+0x628>
    b488:	9006d07a 	srli	r3,r18,1
    b48c:	880497fa 	slli	r2,r17,31
    b490:	9480004c 	andi	r18,r18,1
    b494:	8822d07a 	srli	r17,r17,1
    b498:	1ca4b03a 	or	r18,r3,r18
    b49c:	14a4b03a 	or	r18,r2,r18
    b4a0:	4007883a 	mov	r3,r8
    b4a4:	1880ffc4 	addi	r2,r3,1023
    b4a8:	0080460e 	bge	zero,r2,b5c4 <__muldf3+0x748>
    b4ac:	910001cc 	andi	r4,r18,7
    b4b0:	20000726 	beq	r4,zero,b4d0 <__muldf3+0x654>
    b4b4:	910003cc 	andi	r4,r18,15
    b4b8:	01400104 	movi	r5,4
    b4bc:	21400426 	beq	r4,r5,b4d0 <__muldf3+0x654>
    b4c0:	9149883a 	add	r4,r18,r5
    b4c4:	24a5803a 	cmpltu	r18,r4,r18
    b4c8:	8ca3883a 	add	r17,r17,r18
    b4cc:	2025883a 	mov	r18,r4
    b4d0:	8900402c 	andhi	r4,r17,256
    b4d4:	20000426 	beq	r4,zero,b4e8 <__muldf3+0x66c>
    b4d8:	18810004 	addi	r2,r3,1024
    b4dc:	00ffc034 	movhi	r3,65280
    b4e0:	18ffffc4 	addi	r3,r3,-1
    b4e4:	88e2703a 	and	r17,r17,r3
    b4e8:	00c1ff84 	movi	r3,2046
    b4ec:	18bf1316 	blt	r3,r2,b13c <_gp+0xffff4a04>
    b4f0:	882c977a 	slli	r22,r17,29
    b4f4:	9024d0fa 	srli	r18,r18,3
    b4f8:	8822927a 	slli	r17,r17,9
    b4fc:	1081ffcc 	andi	r2,r2,2047
    b500:	b4acb03a 	or	r22,r22,r18
    b504:	8820d33a 	srli	r16,r17,12
    b508:	3027883a 	mov	r19,r6
    b50c:	003eba06 	br	aff8 <_gp+0xffff48c0>
    b510:	8080022c 	andhi	r2,r16,8
    b514:	10000926 	beq	r2,zero,b53c <__muldf3+0x6c0>
    b518:	8880022c 	andhi	r2,r17,8
    b51c:	1000071e 	bne	r2,zero,b53c <__muldf3+0x6c0>
    b520:	00800434 	movhi	r2,16
    b524:	8c000234 	orhi	r16,r17,8
    b528:	10bfffc4 	addi	r2,r2,-1
    b52c:	e027883a 	mov	r19,fp
    b530:	80a0703a 	and	r16,r16,r2
    b534:	902d883a 	mov	r22,r18
    b538:	003f1706 	br	b198 <_gp+0xffff4a60>
    b53c:	00800434 	movhi	r2,16
    b540:	84000234 	orhi	r16,r16,8
    b544:	10bfffc4 	addi	r2,r2,-1
    b548:	80a0703a 	and	r16,r16,r2
    b54c:	003f1206 	br	b198 <_gp+0xffff4a60>
    b550:	147ff604 	addi	r17,r2,-40
    b554:	3462983a 	sll	r17,r6,r17
    b558:	0025883a 	mov	r18,zero
    b55c:	003ef306 	br	b12c <_gp+0xffff49f4>
    b560:	3009883a 	mov	r4,r6
    b564:	d9400215 	stw	r5,8(sp)
    b568:	d9800715 	stw	r6,28(sp)
    b56c:	da400415 	stw	r9,16(sp)
    b570:	da800315 	stw	r10,12(sp)
    b574:	000c1400 	call	c140 <__clzsi2>
    b578:	10800804 	addi	r2,r2,32
    b57c:	da800317 	ldw	r10,12(sp)
    b580:	da400417 	ldw	r9,16(sp)
    b584:	d9800717 	ldw	r6,28(sp)
    b588:	d9400217 	ldw	r5,8(sp)
    b58c:	003edd06 	br	b104 <_gp+0xffff49cc>
    b590:	143ff604 	addi	r16,r2,-40
    b594:	ac20983a 	sll	r16,r21,r16
    b598:	002d883a 	mov	r22,zero
    b59c:	003ec106 	br	b0a4 <_gp+0xffff496c>
    b5a0:	d9800715 	stw	r6,28(sp)
    b5a4:	d9c00215 	stw	r7,8(sp)
    b5a8:	da400415 	stw	r9,16(sp)
    b5ac:	000c1400 	call	c140 <__clzsi2>
    b5b0:	10800804 	addi	r2,r2,32
    b5b4:	da400417 	ldw	r9,16(sp)
    b5b8:	d9c00217 	ldw	r7,8(sp)
    b5bc:	d9800717 	ldw	r6,28(sp)
    b5c0:	003eae06 	br	b07c <_gp+0xffff4944>
    b5c4:	00c00044 	movi	r3,1
    b5c8:	1887c83a 	sub	r3,r3,r2
    b5cc:	01000e04 	movi	r4,56
    b5d0:	20fe8516 	blt	r4,r3,afe8 <_gp+0xffff48b0>
    b5d4:	010007c4 	movi	r4,31
    b5d8:	20c01b16 	blt	r4,r3,b648 <__muldf3+0x7cc>
    b5dc:	00800804 	movi	r2,32
    b5e0:	10c5c83a 	sub	r2,r2,r3
    b5e4:	888a983a 	sll	r5,r17,r2
    b5e8:	90c8d83a 	srl	r4,r18,r3
    b5ec:	9084983a 	sll	r2,r18,r2
    b5f0:	88e2d83a 	srl	r17,r17,r3
    b5f4:	2906b03a 	or	r3,r5,r4
    b5f8:	1004c03a 	cmpne	r2,r2,zero
    b5fc:	1886b03a 	or	r3,r3,r2
    b600:	188001cc 	andi	r2,r3,7
    b604:	10000726 	beq	r2,zero,b624 <__muldf3+0x7a8>
    b608:	188003cc 	andi	r2,r3,15
    b60c:	01000104 	movi	r4,4
    b610:	11000426 	beq	r2,r4,b624 <__muldf3+0x7a8>
    b614:	1805883a 	mov	r2,r3
    b618:	10c00104 	addi	r3,r2,4
    b61c:	1885803a 	cmpltu	r2,r3,r2
    b620:	88a3883a 	add	r17,r17,r2
    b624:	8880202c 	andhi	r2,r17,128
    b628:	10001c26 	beq	r2,zero,b69c <__muldf3+0x820>
    b62c:	3027883a 	mov	r19,r6
    b630:	00800044 	movi	r2,1
    b634:	0021883a 	mov	r16,zero
    b638:	002d883a 	mov	r22,zero
    b63c:	003e6e06 	br	aff8 <_gp+0xffff48c0>
    b640:	4007883a 	mov	r3,r8
    b644:	003f9706 	br	b4a4 <_gp+0xffff4d6c>
    b648:	017ff844 	movi	r5,-31
    b64c:	2885c83a 	sub	r2,r5,r2
    b650:	888ad83a 	srl	r5,r17,r2
    b654:	00800804 	movi	r2,32
    b658:	18801a26 	beq	r3,r2,b6c4 <__muldf3+0x848>
    b65c:	01001004 	movi	r4,64
    b660:	20c7c83a 	sub	r3,r4,r3
    b664:	88e2983a 	sll	r17,r17,r3
    b668:	8ca4b03a 	or	r18,r17,r18
    b66c:	9004c03a 	cmpne	r2,r18,zero
    b670:	2884b03a 	or	r2,r5,r2
    b674:	144001cc 	andi	r17,r2,7
    b678:	88000d1e 	bne	r17,zero,b6b0 <__muldf3+0x834>
    b67c:	0021883a 	mov	r16,zero
    b680:	102cd0fa 	srli	r22,r2,3
    b684:	3027883a 	mov	r19,r6
    b688:	0005883a 	mov	r2,zero
    b68c:	b46cb03a 	or	r22,r22,r17
    b690:	003e5906 	br	aff8 <_gp+0xffff48c0>
    b694:	1007883a 	mov	r3,r2
    b698:	0023883a 	mov	r17,zero
    b69c:	8820927a 	slli	r16,r17,9
    b6a0:	1805883a 	mov	r2,r3
    b6a4:	8822977a 	slli	r17,r17,29
    b6a8:	8020d33a 	srli	r16,r16,12
    b6ac:	003ff406 	br	b680 <_gp+0xffff4f48>
    b6b0:	10c003cc 	andi	r3,r2,15
    b6b4:	01000104 	movi	r4,4
    b6b8:	193ff626 	beq	r3,r4,b694 <_gp+0xffff4f5c>
    b6bc:	0023883a 	mov	r17,zero
    b6c0:	003fd506 	br	b618 <_gp+0xffff4ee0>
    b6c4:	0023883a 	mov	r17,zero
    b6c8:	003fe706 	br	b668 <_gp+0xffff4f30>
    b6cc:	00800434 	movhi	r2,16
    b6d0:	8c000234 	orhi	r16,r17,8
    b6d4:	10bfffc4 	addi	r2,r2,-1
    b6d8:	3027883a 	mov	r19,r6
    b6dc:	80a0703a 	and	r16,r16,r2
    b6e0:	902d883a 	mov	r22,r18
    b6e4:	003eac06 	br	b198 <_gp+0xffff4a60>

0000b6e8 <__subdf3>:
    b6e8:	02000434 	movhi	r8,16
    b6ec:	423fffc4 	addi	r8,r8,-1
    b6f0:	defffb04 	addi	sp,sp,-20
    b6f4:	2a14703a 	and	r10,r5,r8
    b6f8:	3812d53a 	srli	r9,r7,20
    b6fc:	3a10703a 	and	r8,r7,r8
    b700:	2006d77a 	srli	r3,r4,29
    b704:	3004d77a 	srli	r2,r6,29
    b708:	dc000015 	stw	r16,0(sp)
    b70c:	501490fa 	slli	r10,r10,3
    b710:	2820d53a 	srli	r16,r5,20
    b714:	401090fa 	slli	r8,r8,3
    b718:	dc800215 	stw	r18,8(sp)
    b71c:	dc400115 	stw	r17,4(sp)
    b720:	dfc00415 	stw	ra,16(sp)
    b724:	202290fa 	slli	r17,r4,3
    b728:	dcc00315 	stw	r19,12(sp)
    b72c:	4a41ffcc 	andi	r9,r9,2047
    b730:	0101ffc4 	movi	r4,2047
    b734:	2824d7fa 	srli	r18,r5,31
    b738:	8401ffcc 	andi	r16,r16,2047
    b73c:	50c6b03a 	or	r3,r10,r3
    b740:	380ed7fa 	srli	r7,r7,31
    b744:	408ab03a 	or	r5,r8,r2
    b748:	300c90fa 	slli	r6,r6,3
    b74c:	49009626 	beq	r9,r4,b9a8 <__subdf3+0x2c0>
    b750:	39c0005c 	xori	r7,r7,1
    b754:	8245c83a 	sub	r2,r16,r9
    b758:	3c807426 	beq	r7,r18,b92c <__subdf3+0x244>
    b75c:	0080af0e 	bge	zero,r2,ba1c <__subdf3+0x334>
    b760:	48002a1e 	bne	r9,zero,b80c <__subdf3+0x124>
    b764:	2988b03a 	or	r4,r5,r6
    b768:	20009a1e 	bne	r4,zero,b9d4 <__subdf3+0x2ec>
    b76c:	888001cc 	andi	r2,r17,7
    b770:	10000726 	beq	r2,zero,b790 <__subdf3+0xa8>
    b774:	888003cc 	andi	r2,r17,15
    b778:	01000104 	movi	r4,4
    b77c:	11000426 	beq	r2,r4,b790 <__subdf3+0xa8>
    b780:	890b883a 	add	r5,r17,r4
    b784:	2c63803a 	cmpltu	r17,r5,r17
    b788:	1c47883a 	add	r3,r3,r17
    b78c:	2823883a 	mov	r17,r5
    b790:	1880202c 	andhi	r2,r3,128
    b794:	10005926 	beq	r2,zero,b8fc <__subdf3+0x214>
    b798:	84000044 	addi	r16,r16,1
    b79c:	0081ffc4 	movi	r2,2047
    b7a0:	8080be26 	beq	r16,r2,ba9c <__subdf3+0x3b4>
    b7a4:	017fe034 	movhi	r5,65408
    b7a8:	297fffc4 	addi	r5,r5,-1
    b7ac:	1946703a 	and	r3,r3,r5
    b7b0:	1804977a 	slli	r2,r3,29
    b7b4:	1806927a 	slli	r3,r3,9
    b7b8:	8822d0fa 	srli	r17,r17,3
    b7bc:	8401ffcc 	andi	r16,r16,2047
    b7c0:	180ad33a 	srli	r5,r3,12
    b7c4:	9100004c 	andi	r4,r18,1
    b7c8:	1444b03a 	or	r2,r2,r17
    b7cc:	80c1ffcc 	andi	r3,r16,2047
    b7d0:	1820953a 	slli	r16,r3,20
    b7d4:	20c03fcc 	andi	r3,r4,255
    b7d8:	180897fa 	slli	r4,r3,31
    b7dc:	00c00434 	movhi	r3,16
    b7e0:	18ffffc4 	addi	r3,r3,-1
    b7e4:	28c6703a 	and	r3,r5,r3
    b7e8:	1c06b03a 	or	r3,r3,r16
    b7ec:	1906b03a 	or	r3,r3,r4
    b7f0:	dfc00417 	ldw	ra,16(sp)
    b7f4:	dcc00317 	ldw	r19,12(sp)
    b7f8:	dc800217 	ldw	r18,8(sp)
    b7fc:	dc400117 	ldw	r17,4(sp)
    b800:	dc000017 	ldw	r16,0(sp)
    b804:	dec00504 	addi	sp,sp,20
    b808:	f800283a 	ret
    b80c:	0101ffc4 	movi	r4,2047
    b810:	813fd626 	beq	r16,r4,b76c <_gp+0xffff5034>
    b814:	29402034 	orhi	r5,r5,128
    b818:	01000e04 	movi	r4,56
    b81c:	2080a316 	blt	r4,r2,baac <__subdf3+0x3c4>
    b820:	010007c4 	movi	r4,31
    b824:	2080c616 	blt	r4,r2,bb40 <__subdf3+0x458>
    b828:	01000804 	movi	r4,32
    b82c:	2089c83a 	sub	r4,r4,r2
    b830:	2910983a 	sll	r8,r5,r4
    b834:	308ed83a 	srl	r7,r6,r2
    b838:	3108983a 	sll	r4,r6,r4
    b83c:	2884d83a 	srl	r2,r5,r2
    b840:	41ccb03a 	or	r6,r8,r7
    b844:	2008c03a 	cmpne	r4,r4,zero
    b848:	310cb03a 	or	r6,r6,r4
    b84c:	898dc83a 	sub	r6,r17,r6
    b850:	89a3803a 	cmpltu	r17,r17,r6
    b854:	1887c83a 	sub	r3,r3,r2
    b858:	1c47c83a 	sub	r3,r3,r17
    b85c:	3023883a 	mov	r17,r6
    b860:	1880202c 	andhi	r2,r3,128
    b864:	10002326 	beq	r2,zero,b8f4 <__subdf3+0x20c>
    b868:	04c02034 	movhi	r19,128
    b86c:	9cffffc4 	addi	r19,r19,-1
    b870:	1ce6703a 	and	r19,r3,r19
    b874:	98007a26 	beq	r19,zero,ba60 <__subdf3+0x378>
    b878:	9809883a 	mov	r4,r19
    b87c:	000c1400 	call	c140 <__clzsi2>
    b880:	113ffe04 	addi	r4,r2,-8
    b884:	00c007c4 	movi	r3,31
    b888:	19007b16 	blt	r3,r4,ba78 <__subdf3+0x390>
    b88c:	00800804 	movi	r2,32
    b890:	1105c83a 	sub	r2,r2,r4
    b894:	8884d83a 	srl	r2,r17,r2
    b898:	9906983a 	sll	r3,r19,r4
    b89c:	8922983a 	sll	r17,r17,r4
    b8a0:	10c4b03a 	or	r2,r2,r3
    b8a4:	24007816 	blt	r4,r16,ba88 <__subdf3+0x3a0>
    b8a8:	2421c83a 	sub	r16,r4,r16
    b8ac:	80c00044 	addi	r3,r16,1
    b8b0:	010007c4 	movi	r4,31
    b8b4:	20c09516 	blt	r4,r3,bb0c <__subdf3+0x424>
    b8b8:	01400804 	movi	r5,32
    b8bc:	28cbc83a 	sub	r5,r5,r3
    b8c0:	88c8d83a 	srl	r4,r17,r3
    b8c4:	8962983a 	sll	r17,r17,r5
    b8c8:	114a983a 	sll	r5,r2,r5
    b8cc:	10c6d83a 	srl	r3,r2,r3
    b8d0:	8804c03a 	cmpne	r2,r17,zero
    b8d4:	290ab03a 	or	r5,r5,r4
    b8d8:	28a2b03a 	or	r17,r5,r2
    b8dc:	0021883a 	mov	r16,zero
    b8e0:	003fa206 	br	b76c <_gp+0xffff5034>
    b8e4:	2090b03a 	or	r8,r4,r2
    b8e8:	40018e26 	beq	r8,zero,bf24 <__subdf3+0x83c>
    b8ec:	1007883a 	mov	r3,r2
    b8f0:	2023883a 	mov	r17,r4
    b8f4:	888001cc 	andi	r2,r17,7
    b8f8:	103f9e1e 	bne	r2,zero,b774 <_gp+0xffff503c>
    b8fc:	1804977a 	slli	r2,r3,29
    b900:	8822d0fa 	srli	r17,r17,3
    b904:	1810d0fa 	srli	r8,r3,3
    b908:	9100004c 	andi	r4,r18,1
    b90c:	1444b03a 	or	r2,r2,r17
    b910:	00c1ffc4 	movi	r3,2047
    b914:	80c02826 	beq	r16,r3,b9b8 <__subdf3+0x2d0>
    b918:	01400434 	movhi	r5,16
    b91c:	297fffc4 	addi	r5,r5,-1
    b920:	80e0703a 	and	r16,r16,r3
    b924:	414a703a 	and	r5,r8,r5
    b928:	003fa806 	br	b7cc <_gp+0xffff5094>
    b92c:	0080630e 	bge	zero,r2,babc <__subdf3+0x3d4>
    b930:	48003026 	beq	r9,zero,b9f4 <__subdf3+0x30c>
    b934:	0101ffc4 	movi	r4,2047
    b938:	813f8c26 	beq	r16,r4,b76c <_gp+0xffff5034>
    b93c:	29402034 	orhi	r5,r5,128
    b940:	01000e04 	movi	r4,56
    b944:	2080a90e 	bge	r4,r2,bbec <__subdf3+0x504>
    b948:	298cb03a 	or	r6,r5,r6
    b94c:	3012c03a 	cmpne	r9,r6,zero
    b950:	0005883a 	mov	r2,zero
    b954:	4c53883a 	add	r9,r9,r17
    b958:	4c63803a 	cmpltu	r17,r9,r17
    b95c:	10c7883a 	add	r3,r2,r3
    b960:	88c7883a 	add	r3,r17,r3
    b964:	4823883a 	mov	r17,r9
    b968:	1880202c 	andhi	r2,r3,128
    b96c:	1000d026 	beq	r2,zero,bcb0 <__subdf3+0x5c8>
    b970:	84000044 	addi	r16,r16,1
    b974:	0081ffc4 	movi	r2,2047
    b978:	8080fe26 	beq	r16,r2,bd74 <__subdf3+0x68c>
    b97c:	00bfe034 	movhi	r2,65408
    b980:	10bfffc4 	addi	r2,r2,-1
    b984:	1886703a 	and	r3,r3,r2
    b988:	880ad07a 	srli	r5,r17,1
    b98c:	180497fa 	slli	r2,r3,31
    b990:	8900004c 	andi	r4,r17,1
    b994:	2922b03a 	or	r17,r5,r4
    b998:	1806d07a 	srli	r3,r3,1
    b99c:	1462b03a 	or	r17,r2,r17
    b9a0:	3825883a 	mov	r18,r7
    b9a4:	003f7106 	br	b76c <_gp+0xffff5034>
    b9a8:	2984b03a 	or	r2,r5,r6
    b9ac:	103f6826 	beq	r2,zero,b750 <_gp+0xffff5018>
    b9b0:	39c03fcc 	andi	r7,r7,255
    b9b4:	003f6706 	br	b754 <_gp+0xffff501c>
    b9b8:	4086b03a 	or	r3,r8,r2
    b9bc:	18015226 	beq	r3,zero,bf08 <__subdf3+0x820>
    b9c0:	00c00434 	movhi	r3,16
    b9c4:	41400234 	orhi	r5,r8,8
    b9c8:	18ffffc4 	addi	r3,r3,-1
    b9cc:	28ca703a 	and	r5,r5,r3
    b9d0:	003f7e06 	br	b7cc <_gp+0xffff5094>
    b9d4:	10bfffc4 	addi	r2,r2,-1
    b9d8:	1000491e 	bne	r2,zero,bb00 <__subdf3+0x418>
    b9dc:	898fc83a 	sub	r7,r17,r6
    b9e0:	89e3803a 	cmpltu	r17,r17,r7
    b9e4:	1947c83a 	sub	r3,r3,r5
    b9e8:	1c47c83a 	sub	r3,r3,r17
    b9ec:	3823883a 	mov	r17,r7
    b9f0:	003f9b06 	br	b860 <_gp+0xffff5128>
    b9f4:	2988b03a 	or	r4,r5,r6
    b9f8:	203f5c26 	beq	r4,zero,b76c <_gp+0xffff5034>
    b9fc:	10bfffc4 	addi	r2,r2,-1
    ba00:	1000931e 	bne	r2,zero,bc50 <__subdf3+0x568>
    ba04:	898d883a 	add	r6,r17,r6
    ba08:	3463803a 	cmpltu	r17,r6,r17
    ba0c:	1947883a 	add	r3,r3,r5
    ba10:	88c7883a 	add	r3,r17,r3
    ba14:	3023883a 	mov	r17,r6
    ba18:	003fd306 	br	b968 <_gp+0xffff5230>
    ba1c:	1000541e 	bne	r2,zero,bb70 <__subdf3+0x488>
    ba20:	80800044 	addi	r2,r16,1
    ba24:	1081ffcc 	andi	r2,r2,2047
    ba28:	01000044 	movi	r4,1
    ba2c:	2080a20e 	bge	r4,r2,bcb8 <__subdf3+0x5d0>
    ba30:	8989c83a 	sub	r4,r17,r6
    ba34:	8905803a 	cmpltu	r2,r17,r4
    ba38:	1967c83a 	sub	r19,r3,r5
    ba3c:	98a7c83a 	sub	r19,r19,r2
    ba40:	9880202c 	andhi	r2,r19,128
    ba44:	10006326 	beq	r2,zero,bbd4 <__subdf3+0x4ec>
    ba48:	3463c83a 	sub	r17,r6,r17
    ba4c:	28c7c83a 	sub	r3,r5,r3
    ba50:	344d803a 	cmpltu	r6,r6,r17
    ba54:	19a7c83a 	sub	r19,r3,r6
    ba58:	3825883a 	mov	r18,r7
    ba5c:	983f861e 	bne	r19,zero,b878 <_gp+0xffff5140>
    ba60:	8809883a 	mov	r4,r17
    ba64:	000c1400 	call	c140 <__clzsi2>
    ba68:	10800804 	addi	r2,r2,32
    ba6c:	113ffe04 	addi	r4,r2,-8
    ba70:	00c007c4 	movi	r3,31
    ba74:	193f850e 	bge	r3,r4,b88c <_gp+0xffff5154>
    ba78:	10bff604 	addi	r2,r2,-40
    ba7c:	8884983a 	sll	r2,r17,r2
    ba80:	0023883a 	mov	r17,zero
    ba84:	243f880e 	bge	r4,r16,b8a8 <_gp+0xffff5170>
    ba88:	00ffe034 	movhi	r3,65408
    ba8c:	18ffffc4 	addi	r3,r3,-1
    ba90:	8121c83a 	sub	r16,r16,r4
    ba94:	10c6703a 	and	r3,r2,r3
    ba98:	003f3406 	br	b76c <_gp+0xffff5034>
    ba9c:	9100004c 	andi	r4,r18,1
    baa0:	000b883a 	mov	r5,zero
    baa4:	0005883a 	mov	r2,zero
    baa8:	003f4806 	br	b7cc <_gp+0xffff5094>
    baac:	298cb03a 	or	r6,r5,r6
    bab0:	300cc03a 	cmpne	r6,r6,zero
    bab4:	0005883a 	mov	r2,zero
    bab8:	003f6406 	br	b84c <_gp+0xffff5114>
    babc:	10009a1e 	bne	r2,zero,bd28 <__subdf3+0x640>
    bac0:	82400044 	addi	r9,r16,1
    bac4:	4881ffcc 	andi	r2,r9,2047
    bac8:	02800044 	movi	r10,1
    bacc:	5080670e 	bge	r10,r2,bc6c <__subdf3+0x584>
    bad0:	0081ffc4 	movi	r2,2047
    bad4:	4880af26 	beq	r9,r2,bd94 <__subdf3+0x6ac>
    bad8:	898d883a 	add	r6,r17,r6
    badc:	1945883a 	add	r2,r3,r5
    bae0:	3447803a 	cmpltu	r3,r6,r17
    bae4:	1887883a 	add	r3,r3,r2
    bae8:	182297fa 	slli	r17,r3,31
    baec:	300cd07a 	srli	r6,r6,1
    baf0:	1806d07a 	srli	r3,r3,1
    baf4:	4821883a 	mov	r16,r9
    baf8:	89a2b03a 	or	r17,r17,r6
    bafc:	003f1b06 	br	b76c <_gp+0xffff5034>
    bb00:	0101ffc4 	movi	r4,2047
    bb04:	813f441e 	bne	r16,r4,b818 <_gp+0xffff50e0>
    bb08:	003f1806 	br	b76c <_gp+0xffff5034>
    bb0c:	843ff844 	addi	r16,r16,-31
    bb10:	01400804 	movi	r5,32
    bb14:	1408d83a 	srl	r4,r2,r16
    bb18:	19405026 	beq	r3,r5,bc5c <__subdf3+0x574>
    bb1c:	01401004 	movi	r5,64
    bb20:	28c7c83a 	sub	r3,r5,r3
    bb24:	10c4983a 	sll	r2,r2,r3
    bb28:	88a2b03a 	or	r17,r17,r2
    bb2c:	8822c03a 	cmpne	r17,r17,zero
    bb30:	2462b03a 	or	r17,r4,r17
    bb34:	0007883a 	mov	r3,zero
    bb38:	0021883a 	mov	r16,zero
    bb3c:	003f6d06 	br	b8f4 <_gp+0xffff51bc>
    bb40:	11fff804 	addi	r7,r2,-32
    bb44:	01000804 	movi	r4,32
    bb48:	29ced83a 	srl	r7,r5,r7
    bb4c:	11004526 	beq	r2,r4,bc64 <__subdf3+0x57c>
    bb50:	01001004 	movi	r4,64
    bb54:	2089c83a 	sub	r4,r4,r2
    bb58:	2904983a 	sll	r2,r5,r4
    bb5c:	118cb03a 	or	r6,r2,r6
    bb60:	300cc03a 	cmpne	r6,r6,zero
    bb64:	398cb03a 	or	r6,r7,r6
    bb68:	0005883a 	mov	r2,zero
    bb6c:	003f3706 	br	b84c <_gp+0xffff5114>
    bb70:	80002a26 	beq	r16,zero,bc1c <__subdf3+0x534>
    bb74:	0101ffc4 	movi	r4,2047
    bb78:	49006626 	beq	r9,r4,bd14 <__subdf3+0x62c>
    bb7c:	0085c83a 	sub	r2,zero,r2
    bb80:	18c02034 	orhi	r3,r3,128
    bb84:	01000e04 	movi	r4,56
    bb88:	20807e16 	blt	r4,r2,bd84 <__subdf3+0x69c>
    bb8c:	010007c4 	movi	r4,31
    bb90:	2080e716 	blt	r4,r2,bf30 <__subdf3+0x848>
    bb94:	01000804 	movi	r4,32
    bb98:	2089c83a 	sub	r4,r4,r2
    bb9c:	1914983a 	sll	r10,r3,r4
    bba0:	8890d83a 	srl	r8,r17,r2
    bba4:	8908983a 	sll	r4,r17,r4
    bba8:	1884d83a 	srl	r2,r3,r2
    bbac:	5222b03a 	or	r17,r10,r8
    bbb0:	2006c03a 	cmpne	r3,r4,zero
    bbb4:	88e2b03a 	or	r17,r17,r3
    bbb8:	3463c83a 	sub	r17,r6,r17
    bbbc:	2885c83a 	sub	r2,r5,r2
    bbc0:	344d803a 	cmpltu	r6,r6,r17
    bbc4:	1187c83a 	sub	r3,r2,r6
    bbc8:	4821883a 	mov	r16,r9
    bbcc:	3825883a 	mov	r18,r7
    bbd0:	003f2306 	br	b860 <_gp+0xffff5128>
    bbd4:	24d0b03a 	or	r8,r4,r19
    bbd8:	40001b1e 	bne	r8,zero,bc48 <__subdf3+0x560>
    bbdc:	0005883a 	mov	r2,zero
    bbe0:	0009883a 	mov	r4,zero
    bbe4:	0021883a 	mov	r16,zero
    bbe8:	003f4906 	br	b910 <_gp+0xffff51d8>
    bbec:	010007c4 	movi	r4,31
    bbf0:	20803a16 	blt	r4,r2,bcdc <__subdf3+0x5f4>
    bbf4:	01000804 	movi	r4,32
    bbf8:	2089c83a 	sub	r4,r4,r2
    bbfc:	2912983a 	sll	r9,r5,r4
    bc00:	3090d83a 	srl	r8,r6,r2
    bc04:	3108983a 	sll	r4,r6,r4
    bc08:	2884d83a 	srl	r2,r5,r2
    bc0c:	4a12b03a 	or	r9,r9,r8
    bc10:	2008c03a 	cmpne	r4,r4,zero
    bc14:	4912b03a 	or	r9,r9,r4
    bc18:	003f4e06 	br	b954 <_gp+0xffff521c>
    bc1c:	1c48b03a 	or	r4,r3,r17
    bc20:	20003c26 	beq	r4,zero,bd14 <__subdf3+0x62c>
    bc24:	0084303a 	nor	r2,zero,r2
    bc28:	1000381e 	bne	r2,zero,bd0c <__subdf3+0x624>
    bc2c:	3463c83a 	sub	r17,r6,r17
    bc30:	28c5c83a 	sub	r2,r5,r3
    bc34:	344d803a 	cmpltu	r6,r6,r17
    bc38:	1187c83a 	sub	r3,r2,r6
    bc3c:	4821883a 	mov	r16,r9
    bc40:	3825883a 	mov	r18,r7
    bc44:	003f0606 	br	b860 <_gp+0xffff5128>
    bc48:	2023883a 	mov	r17,r4
    bc4c:	003f0906 	br	b874 <_gp+0xffff513c>
    bc50:	0101ffc4 	movi	r4,2047
    bc54:	813f3a1e 	bne	r16,r4,b940 <_gp+0xffff5208>
    bc58:	003ec406 	br	b76c <_gp+0xffff5034>
    bc5c:	0005883a 	mov	r2,zero
    bc60:	003fb106 	br	bb28 <_gp+0xffff53f0>
    bc64:	0005883a 	mov	r2,zero
    bc68:	003fbc06 	br	bb5c <_gp+0xffff5424>
    bc6c:	1c44b03a 	or	r2,r3,r17
    bc70:	80008e1e 	bne	r16,zero,beac <__subdf3+0x7c4>
    bc74:	1000c826 	beq	r2,zero,bf98 <__subdf3+0x8b0>
    bc78:	2984b03a 	or	r2,r5,r6
    bc7c:	103ebb26 	beq	r2,zero,b76c <_gp+0xffff5034>
    bc80:	8989883a 	add	r4,r17,r6
    bc84:	1945883a 	add	r2,r3,r5
    bc88:	2447803a 	cmpltu	r3,r4,r17
    bc8c:	1887883a 	add	r3,r3,r2
    bc90:	1880202c 	andhi	r2,r3,128
    bc94:	2023883a 	mov	r17,r4
    bc98:	103f1626 	beq	r2,zero,b8f4 <_gp+0xffff51bc>
    bc9c:	00bfe034 	movhi	r2,65408
    bca0:	10bfffc4 	addi	r2,r2,-1
    bca4:	5021883a 	mov	r16,r10
    bca8:	1886703a 	and	r3,r3,r2
    bcac:	003eaf06 	br	b76c <_gp+0xffff5034>
    bcb0:	3825883a 	mov	r18,r7
    bcb4:	003f0f06 	br	b8f4 <_gp+0xffff51bc>
    bcb8:	1c44b03a 	or	r2,r3,r17
    bcbc:	8000251e 	bne	r16,zero,bd54 <__subdf3+0x66c>
    bcc0:	1000661e 	bne	r2,zero,be5c <__subdf3+0x774>
    bcc4:	2990b03a 	or	r8,r5,r6
    bcc8:	40009626 	beq	r8,zero,bf24 <__subdf3+0x83c>
    bccc:	2807883a 	mov	r3,r5
    bcd0:	3023883a 	mov	r17,r6
    bcd4:	3825883a 	mov	r18,r7
    bcd8:	003ea406 	br	b76c <_gp+0xffff5034>
    bcdc:	127ff804 	addi	r9,r2,-32
    bce0:	01000804 	movi	r4,32
    bce4:	2a52d83a 	srl	r9,r5,r9
    bce8:	11008c26 	beq	r2,r4,bf1c <__subdf3+0x834>
    bcec:	01001004 	movi	r4,64
    bcf0:	2085c83a 	sub	r2,r4,r2
    bcf4:	2884983a 	sll	r2,r5,r2
    bcf8:	118cb03a 	or	r6,r2,r6
    bcfc:	300cc03a 	cmpne	r6,r6,zero
    bd00:	4992b03a 	or	r9,r9,r6
    bd04:	0005883a 	mov	r2,zero
    bd08:	003f1206 	br	b954 <_gp+0xffff521c>
    bd0c:	0101ffc4 	movi	r4,2047
    bd10:	493f9c1e 	bne	r9,r4,bb84 <_gp+0xffff544c>
    bd14:	2807883a 	mov	r3,r5
    bd18:	3023883a 	mov	r17,r6
    bd1c:	4821883a 	mov	r16,r9
    bd20:	3825883a 	mov	r18,r7
    bd24:	003e9106 	br	b76c <_gp+0xffff5034>
    bd28:	80001f1e 	bne	r16,zero,bda8 <__subdf3+0x6c0>
    bd2c:	1c48b03a 	or	r4,r3,r17
    bd30:	20005a26 	beq	r4,zero,be9c <__subdf3+0x7b4>
    bd34:	0084303a 	nor	r2,zero,r2
    bd38:	1000561e 	bne	r2,zero,be94 <__subdf3+0x7ac>
    bd3c:	89a3883a 	add	r17,r17,r6
    bd40:	1945883a 	add	r2,r3,r5
    bd44:	898d803a 	cmpltu	r6,r17,r6
    bd48:	3087883a 	add	r3,r6,r2
    bd4c:	4821883a 	mov	r16,r9
    bd50:	003f0506 	br	b968 <_gp+0xffff5230>
    bd54:	10002b1e 	bne	r2,zero,be04 <__subdf3+0x71c>
    bd58:	2984b03a 	or	r2,r5,r6
    bd5c:	10008026 	beq	r2,zero,bf60 <__subdf3+0x878>
    bd60:	2807883a 	mov	r3,r5
    bd64:	3023883a 	mov	r17,r6
    bd68:	3825883a 	mov	r18,r7
    bd6c:	0401ffc4 	movi	r16,2047
    bd70:	003e7e06 	br	b76c <_gp+0xffff5034>
    bd74:	3809883a 	mov	r4,r7
    bd78:	0011883a 	mov	r8,zero
    bd7c:	0005883a 	mov	r2,zero
    bd80:	003ee306 	br	b910 <_gp+0xffff51d8>
    bd84:	1c62b03a 	or	r17,r3,r17
    bd88:	8822c03a 	cmpne	r17,r17,zero
    bd8c:	0005883a 	mov	r2,zero
    bd90:	003f8906 	br	bbb8 <_gp+0xffff5480>
    bd94:	3809883a 	mov	r4,r7
    bd98:	4821883a 	mov	r16,r9
    bd9c:	0011883a 	mov	r8,zero
    bda0:	0005883a 	mov	r2,zero
    bda4:	003eda06 	br	b910 <_gp+0xffff51d8>
    bda8:	0101ffc4 	movi	r4,2047
    bdac:	49003b26 	beq	r9,r4,be9c <__subdf3+0x7b4>
    bdb0:	0085c83a 	sub	r2,zero,r2
    bdb4:	18c02034 	orhi	r3,r3,128
    bdb8:	01000e04 	movi	r4,56
    bdbc:	20806e16 	blt	r4,r2,bf78 <__subdf3+0x890>
    bdc0:	010007c4 	movi	r4,31
    bdc4:	20807716 	blt	r4,r2,bfa4 <__subdf3+0x8bc>
    bdc8:	01000804 	movi	r4,32
    bdcc:	2089c83a 	sub	r4,r4,r2
    bdd0:	1914983a 	sll	r10,r3,r4
    bdd4:	8890d83a 	srl	r8,r17,r2
    bdd8:	8908983a 	sll	r4,r17,r4
    bddc:	1884d83a 	srl	r2,r3,r2
    bde0:	5222b03a 	or	r17,r10,r8
    bde4:	2006c03a 	cmpne	r3,r4,zero
    bde8:	88e2b03a 	or	r17,r17,r3
    bdec:	89a3883a 	add	r17,r17,r6
    bdf0:	1145883a 	add	r2,r2,r5
    bdf4:	898d803a 	cmpltu	r6,r17,r6
    bdf8:	3087883a 	add	r3,r6,r2
    bdfc:	4821883a 	mov	r16,r9
    be00:	003ed906 	br	b968 <_gp+0xffff5230>
    be04:	2984b03a 	or	r2,r5,r6
    be08:	10004226 	beq	r2,zero,bf14 <__subdf3+0x82c>
    be0c:	1808d0fa 	srli	r4,r3,3
    be10:	8822d0fa 	srli	r17,r17,3
    be14:	1806977a 	slli	r3,r3,29
    be18:	2080022c 	andhi	r2,r4,8
    be1c:	1c62b03a 	or	r17,r3,r17
    be20:	10000826 	beq	r2,zero,be44 <__subdf3+0x75c>
    be24:	2812d0fa 	srli	r9,r5,3
    be28:	4880022c 	andhi	r2,r9,8
    be2c:	1000051e 	bne	r2,zero,be44 <__subdf3+0x75c>
    be30:	300cd0fa 	srli	r6,r6,3
    be34:	2804977a 	slli	r2,r5,29
    be38:	4809883a 	mov	r4,r9
    be3c:	3825883a 	mov	r18,r7
    be40:	11a2b03a 	or	r17,r2,r6
    be44:	8806d77a 	srli	r3,r17,29
    be48:	200890fa 	slli	r4,r4,3
    be4c:	882290fa 	slli	r17,r17,3
    be50:	0401ffc4 	movi	r16,2047
    be54:	1906b03a 	or	r3,r3,r4
    be58:	003e4406 	br	b76c <_gp+0xffff5034>
    be5c:	2984b03a 	or	r2,r5,r6
    be60:	103e4226 	beq	r2,zero,b76c <_gp+0xffff5034>
    be64:	8989c83a 	sub	r4,r17,r6
    be68:	8911803a 	cmpltu	r8,r17,r4
    be6c:	1945c83a 	sub	r2,r3,r5
    be70:	1205c83a 	sub	r2,r2,r8
    be74:	1200202c 	andhi	r8,r2,128
    be78:	403e9a26 	beq	r8,zero,b8e4 <_gp+0xffff51ac>
    be7c:	3463c83a 	sub	r17,r6,r17
    be80:	28c5c83a 	sub	r2,r5,r3
    be84:	344d803a 	cmpltu	r6,r6,r17
    be88:	1187c83a 	sub	r3,r2,r6
    be8c:	3825883a 	mov	r18,r7
    be90:	003e3606 	br	b76c <_gp+0xffff5034>
    be94:	0101ffc4 	movi	r4,2047
    be98:	493fc71e 	bne	r9,r4,bdb8 <_gp+0xffff5680>
    be9c:	2807883a 	mov	r3,r5
    bea0:	3023883a 	mov	r17,r6
    bea4:	4821883a 	mov	r16,r9
    bea8:	003e3006 	br	b76c <_gp+0xffff5034>
    beac:	10003626 	beq	r2,zero,bf88 <__subdf3+0x8a0>
    beb0:	2984b03a 	or	r2,r5,r6
    beb4:	10001726 	beq	r2,zero,bf14 <__subdf3+0x82c>
    beb8:	1808d0fa 	srli	r4,r3,3
    bebc:	8822d0fa 	srli	r17,r17,3
    bec0:	1806977a 	slli	r3,r3,29
    bec4:	2080022c 	andhi	r2,r4,8
    bec8:	1c62b03a 	or	r17,r3,r17
    becc:	10000726 	beq	r2,zero,beec <__subdf3+0x804>
    bed0:	2812d0fa 	srli	r9,r5,3
    bed4:	4880022c 	andhi	r2,r9,8
    bed8:	1000041e 	bne	r2,zero,beec <__subdf3+0x804>
    bedc:	300cd0fa 	srli	r6,r6,3
    bee0:	2804977a 	slli	r2,r5,29
    bee4:	4809883a 	mov	r4,r9
    bee8:	11a2b03a 	or	r17,r2,r6
    beec:	8806d77a 	srli	r3,r17,29
    bef0:	200890fa 	slli	r4,r4,3
    bef4:	882290fa 	slli	r17,r17,3
    bef8:	3825883a 	mov	r18,r7
    befc:	1906b03a 	or	r3,r3,r4
    bf00:	0401ffc4 	movi	r16,2047
    bf04:	003e1906 	br	b76c <_gp+0xffff5034>
    bf08:	000b883a 	mov	r5,zero
    bf0c:	0005883a 	mov	r2,zero
    bf10:	003e2e06 	br	b7cc <_gp+0xffff5094>
    bf14:	0401ffc4 	movi	r16,2047
    bf18:	003e1406 	br	b76c <_gp+0xffff5034>
    bf1c:	0005883a 	mov	r2,zero
    bf20:	003f7506 	br	bcf8 <_gp+0xffff55c0>
    bf24:	0005883a 	mov	r2,zero
    bf28:	0009883a 	mov	r4,zero
    bf2c:	003e7806 	br	b910 <_gp+0xffff51d8>
    bf30:	123ff804 	addi	r8,r2,-32
    bf34:	01000804 	movi	r4,32
    bf38:	1a10d83a 	srl	r8,r3,r8
    bf3c:	11002526 	beq	r2,r4,bfd4 <__subdf3+0x8ec>
    bf40:	01001004 	movi	r4,64
    bf44:	2085c83a 	sub	r2,r4,r2
    bf48:	1884983a 	sll	r2,r3,r2
    bf4c:	1444b03a 	or	r2,r2,r17
    bf50:	1004c03a 	cmpne	r2,r2,zero
    bf54:	40a2b03a 	or	r17,r8,r2
    bf58:	0005883a 	mov	r2,zero
    bf5c:	003f1606 	br	bbb8 <_gp+0xffff5480>
    bf60:	02000434 	movhi	r8,16
    bf64:	0009883a 	mov	r4,zero
    bf68:	423fffc4 	addi	r8,r8,-1
    bf6c:	00bfffc4 	movi	r2,-1
    bf70:	0401ffc4 	movi	r16,2047
    bf74:	003e6606 	br	b910 <_gp+0xffff51d8>
    bf78:	1c62b03a 	or	r17,r3,r17
    bf7c:	8822c03a 	cmpne	r17,r17,zero
    bf80:	0005883a 	mov	r2,zero
    bf84:	003f9906 	br	bdec <_gp+0xffff56b4>
    bf88:	2807883a 	mov	r3,r5
    bf8c:	3023883a 	mov	r17,r6
    bf90:	0401ffc4 	movi	r16,2047
    bf94:	003df506 	br	b76c <_gp+0xffff5034>
    bf98:	2807883a 	mov	r3,r5
    bf9c:	3023883a 	mov	r17,r6
    bfa0:	003df206 	br	b76c <_gp+0xffff5034>
    bfa4:	123ff804 	addi	r8,r2,-32
    bfa8:	01000804 	movi	r4,32
    bfac:	1a10d83a 	srl	r8,r3,r8
    bfb0:	11000a26 	beq	r2,r4,bfdc <__subdf3+0x8f4>
    bfb4:	01001004 	movi	r4,64
    bfb8:	2085c83a 	sub	r2,r4,r2
    bfbc:	1884983a 	sll	r2,r3,r2
    bfc0:	1444b03a 	or	r2,r2,r17
    bfc4:	1004c03a 	cmpne	r2,r2,zero
    bfc8:	40a2b03a 	or	r17,r8,r2
    bfcc:	0005883a 	mov	r2,zero
    bfd0:	003f8606 	br	bdec <_gp+0xffff56b4>
    bfd4:	0005883a 	mov	r2,zero
    bfd8:	003fdc06 	br	bf4c <_gp+0xffff5814>
    bfdc:	0005883a 	mov	r2,zero
    bfe0:	003ff706 	br	bfc0 <_gp+0xffff5888>

0000bfe4 <__fixdfsi>:
    bfe4:	280cd53a 	srli	r6,r5,20
    bfe8:	00c00434 	movhi	r3,16
    bfec:	18ffffc4 	addi	r3,r3,-1
    bff0:	3181ffcc 	andi	r6,r6,2047
    bff4:	01c0ff84 	movi	r7,1022
    bff8:	28c6703a 	and	r3,r5,r3
    bffc:	280ad7fa 	srli	r5,r5,31
    c000:	3980120e 	bge	r7,r6,c04c <__fixdfsi+0x68>
    c004:	00810744 	movi	r2,1053
    c008:	11800c16 	blt	r2,r6,c03c <__fixdfsi+0x58>
    c00c:	00810cc4 	movi	r2,1075
    c010:	1185c83a 	sub	r2,r2,r6
    c014:	01c007c4 	movi	r7,31
    c018:	18c00434 	orhi	r3,r3,16
    c01c:	38800d16 	blt	r7,r2,c054 <__fixdfsi+0x70>
    c020:	31befb44 	addi	r6,r6,-1043
    c024:	2084d83a 	srl	r2,r4,r2
    c028:	1986983a 	sll	r3,r3,r6
    c02c:	1884b03a 	or	r2,r3,r2
    c030:	28000726 	beq	r5,zero,c050 <__fixdfsi+0x6c>
    c034:	0085c83a 	sub	r2,zero,r2
    c038:	f800283a 	ret
    c03c:	00a00034 	movhi	r2,32768
    c040:	10bfffc4 	addi	r2,r2,-1
    c044:	2885883a 	add	r2,r5,r2
    c048:	f800283a 	ret
    c04c:	0005883a 	mov	r2,zero
    c050:	f800283a 	ret
    c054:	008104c4 	movi	r2,1043
    c058:	1185c83a 	sub	r2,r2,r6
    c05c:	1884d83a 	srl	r2,r3,r2
    c060:	003ff306 	br	c030 <_gp+0xffff58f8>

0000c064 <__floatsidf>:
    c064:	defffd04 	addi	sp,sp,-12
    c068:	dfc00215 	stw	ra,8(sp)
    c06c:	dc400115 	stw	r17,4(sp)
    c070:	dc000015 	stw	r16,0(sp)
    c074:	20002b26 	beq	r4,zero,c124 <__floatsidf+0xc0>
    c078:	2023883a 	mov	r17,r4
    c07c:	2020d7fa 	srli	r16,r4,31
    c080:	20002d16 	blt	r4,zero,c138 <__floatsidf+0xd4>
    c084:	8809883a 	mov	r4,r17
    c088:	000c1400 	call	c140 <__clzsi2>
    c08c:	01410784 	movi	r5,1054
    c090:	288bc83a 	sub	r5,r5,r2
    c094:	01010cc4 	movi	r4,1075
    c098:	2149c83a 	sub	r4,r4,r5
    c09c:	00c007c4 	movi	r3,31
    c0a0:	1900160e 	bge	r3,r4,c0fc <__floatsidf+0x98>
    c0a4:	00c104c4 	movi	r3,1043
    c0a8:	1947c83a 	sub	r3,r3,r5
    c0ac:	88c6983a 	sll	r3,r17,r3
    c0b0:	00800434 	movhi	r2,16
    c0b4:	10bfffc4 	addi	r2,r2,-1
    c0b8:	1886703a 	and	r3,r3,r2
    c0bc:	2941ffcc 	andi	r5,r5,2047
    c0c0:	800d883a 	mov	r6,r16
    c0c4:	0005883a 	mov	r2,zero
    c0c8:	280a953a 	slli	r5,r5,20
    c0cc:	31803fcc 	andi	r6,r6,255
    c0d0:	01000434 	movhi	r4,16
    c0d4:	300c97fa 	slli	r6,r6,31
    c0d8:	213fffc4 	addi	r4,r4,-1
    c0dc:	1906703a 	and	r3,r3,r4
    c0e0:	1946b03a 	or	r3,r3,r5
    c0e4:	1986b03a 	or	r3,r3,r6
    c0e8:	dfc00217 	ldw	ra,8(sp)
    c0ec:	dc400117 	ldw	r17,4(sp)
    c0f0:	dc000017 	ldw	r16,0(sp)
    c0f4:	dec00304 	addi	sp,sp,12
    c0f8:	f800283a 	ret
    c0fc:	00c002c4 	movi	r3,11
    c100:	1887c83a 	sub	r3,r3,r2
    c104:	88c6d83a 	srl	r3,r17,r3
    c108:	8904983a 	sll	r2,r17,r4
    c10c:	01000434 	movhi	r4,16
    c110:	213fffc4 	addi	r4,r4,-1
    c114:	2941ffcc 	andi	r5,r5,2047
    c118:	1906703a 	and	r3,r3,r4
    c11c:	800d883a 	mov	r6,r16
    c120:	003fe906 	br	c0c8 <_gp+0xffff5990>
    c124:	000d883a 	mov	r6,zero
    c128:	000b883a 	mov	r5,zero
    c12c:	0007883a 	mov	r3,zero
    c130:	0005883a 	mov	r2,zero
    c134:	003fe406 	br	c0c8 <_gp+0xffff5990>
    c138:	0123c83a 	sub	r17,zero,r4
    c13c:	003fd106 	br	c084 <_gp+0xffff594c>

0000c140 <__clzsi2>:
    c140:	00bfffd4 	movui	r2,65535
    c144:	11000536 	bltu	r2,r4,c15c <__clzsi2+0x1c>
    c148:	00803fc4 	movi	r2,255
    c14c:	11000f36 	bltu	r2,r4,c18c <__clzsi2+0x4c>
    c150:	00800804 	movi	r2,32
    c154:	0007883a 	mov	r3,zero
    c158:	00000506 	br	c170 <__clzsi2+0x30>
    c15c:	00804034 	movhi	r2,256
    c160:	10bfffc4 	addi	r2,r2,-1
    c164:	11000c2e 	bgeu	r2,r4,c198 <__clzsi2+0x58>
    c168:	00800204 	movi	r2,8
    c16c:	00c00604 	movi	r3,24
    c170:	20c8d83a 	srl	r4,r4,r3
    c174:	00c00074 	movhi	r3,1
    c178:	18f8c684 	addi	r3,r3,-7398
    c17c:	1909883a 	add	r4,r3,r4
    c180:	20c00003 	ldbu	r3,0(r4)
    c184:	10c5c83a 	sub	r2,r2,r3
    c188:	f800283a 	ret
    c18c:	00800604 	movi	r2,24
    c190:	00c00204 	movi	r3,8
    c194:	003ff606 	br	c170 <_gp+0xffff5a38>
    c198:	00800404 	movi	r2,16
    c19c:	1007883a 	mov	r3,r2
    c1a0:	003ff306 	br	c170 <_gp+0xffff5a38>

0000c1a4 <memset>:
    c1a4:	2005883a 	mov	r2,r4
    c1a8:	2007883a 	mov	r3,r4
    c1ac:	218d883a 	add	r6,r4,r6
    c1b0:	19800326 	beq	r3,r6,c1c0 <memset+0x1c>
    c1b4:	19400005 	stb	r5,0(r3)
    c1b8:	18c00044 	addi	r3,r3,1
    c1bc:	003ffc06 	br	c1b0 <_gp+0xffff5a78>
    c1c0:	f800283a 	ret

0000c1c4 <_printf_r>:
    c1c4:	defffd04 	addi	sp,sp,-12
    c1c8:	dfc00015 	stw	ra,0(sp)
    c1cc:	d9800115 	stw	r6,4(sp)
    c1d0:	d9c00215 	stw	r7,8(sp)
    c1d4:	20c00217 	ldw	r3,8(r4)
    c1d8:	01800074 	movhi	r6,1
    c1dc:	31b22c04 	addi	r6,r6,-14160
    c1e0:	19800115 	stw	r6,4(r3)
    c1e4:	280d883a 	mov	r6,r5
    c1e8:	21400217 	ldw	r5,8(r4)
    c1ec:	d9c00104 	addi	r7,sp,4
    c1f0:	000c3680 	call	c368 <___vfprintf_internal_r>
    c1f4:	dfc00017 	ldw	ra,0(sp)
    c1f8:	dec00304 	addi	sp,sp,12
    c1fc:	f800283a 	ret

0000c200 <printf>:
    c200:	defffc04 	addi	sp,sp,-16
    c204:	dfc00015 	stw	ra,0(sp)
    c208:	d9400115 	stw	r5,4(sp)
    c20c:	d9800215 	stw	r6,8(sp)
    c210:	d9c00315 	stw	r7,12(sp)
    c214:	00800074 	movhi	r2,1
    c218:	10b9d704 	addi	r2,r2,-6308
    c21c:	10800017 	ldw	r2,0(r2)
    c220:	01400074 	movhi	r5,1
    c224:	29722c04 	addi	r5,r5,-14160
    c228:	10c00217 	ldw	r3,8(r2)
    c22c:	d9800104 	addi	r6,sp,4
    c230:	19400115 	stw	r5,4(r3)
    c234:	200b883a 	mov	r5,r4
    c238:	11000217 	ldw	r4,8(r2)
    c23c:	000c8940 	call	c894 <__vfprintf_internal>
    c240:	dfc00017 	ldw	ra,0(sp)
    c244:	dec00404 	addi	sp,sp,16
    c248:	f800283a 	ret

0000c24c <_puts_r>:
    c24c:	defffd04 	addi	sp,sp,-12
    c250:	dc000015 	stw	r16,0(sp)
    c254:	2021883a 	mov	r16,r4
    c258:	2809883a 	mov	r4,r5
    c25c:	dfc00215 	stw	ra,8(sp)
    c260:	dc400115 	stw	r17,4(sp)
    c264:	2823883a 	mov	r17,r5
    c268:	000c2e00 	call	c2e0 <strlen>
    c26c:	81400217 	ldw	r5,8(r16)
    c270:	01000074 	movhi	r4,1
    c274:	21322c04 	addi	r4,r4,-14160
    c278:	29000115 	stw	r4,4(r5)
    c27c:	100f883a 	mov	r7,r2
    c280:	880d883a 	mov	r6,r17
    c284:	8009883a 	mov	r4,r16
    c288:	000c8b00 	call	c8b0 <__sfvwrite_small_dev>
    c28c:	00ffffc4 	movi	r3,-1
    c290:	10c00926 	beq	r2,r3,c2b8 <_puts_r+0x6c>
    c294:	81400217 	ldw	r5,8(r16)
    c298:	01800074 	movhi	r6,1
    c29c:	01c00044 	movi	r7,1
    c2a0:	28800117 	ldw	r2,4(r5)
    c2a4:	31b90704 	addi	r6,r6,-7140
    c2a8:	8009883a 	mov	r4,r16
    c2ac:	103ee83a 	callr	r2
    c2b0:	10bfffe0 	cmpeqi	r2,r2,-1
    c2b4:	0085c83a 	sub	r2,zero,r2
    c2b8:	dfc00217 	ldw	ra,8(sp)
    c2bc:	dc400117 	ldw	r17,4(sp)
    c2c0:	dc000017 	ldw	r16,0(sp)
    c2c4:	dec00304 	addi	sp,sp,12
    c2c8:	f800283a 	ret

0000c2cc <puts>:
    c2cc:	00800074 	movhi	r2,1
    c2d0:	10b9d704 	addi	r2,r2,-6308
    c2d4:	200b883a 	mov	r5,r4
    c2d8:	11000017 	ldw	r4,0(r2)
    c2dc:	000c24c1 	jmpi	c24c <_puts_r>

0000c2e0 <strlen>:
    c2e0:	2005883a 	mov	r2,r4
    c2e4:	10c00007 	ldb	r3,0(r2)
    c2e8:	18000226 	beq	r3,zero,c2f4 <strlen+0x14>
    c2ec:	10800044 	addi	r2,r2,1
    c2f0:	003ffc06 	br	c2e4 <_gp+0xffff5bac>
    c2f4:	1105c83a 	sub	r2,r2,r4
    c2f8:	f800283a 	ret

0000c2fc <print_repeat>:
    c2fc:	defffb04 	addi	sp,sp,-20
    c300:	dc800315 	stw	r18,12(sp)
    c304:	dc400215 	stw	r17,8(sp)
    c308:	dc000115 	stw	r16,4(sp)
    c30c:	dfc00415 	stw	ra,16(sp)
    c310:	2025883a 	mov	r18,r4
    c314:	2823883a 	mov	r17,r5
    c318:	d9800005 	stb	r6,0(sp)
    c31c:	3821883a 	mov	r16,r7
    c320:	04000a0e 	bge	zero,r16,c34c <print_repeat+0x50>
    c324:	88800117 	ldw	r2,4(r17)
    c328:	01c00044 	movi	r7,1
    c32c:	d80d883a 	mov	r6,sp
    c330:	880b883a 	mov	r5,r17
    c334:	9009883a 	mov	r4,r18
    c338:	103ee83a 	callr	r2
    c33c:	843fffc4 	addi	r16,r16,-1
    c340:	103ff726 	beq	r2,zero,c320 <_gp+0xffff5be8>
    c344:	00bfffc4 	movi	r2,-1
    c348:	00000106 	br	c350 <print_repeat+0x54>
    c34c:	0005883a 	mov	r2,zero
    c350:	dfc00417 	ldw	ra,16(sp)
    c354:	dc800317 	ldw	r18,12(sp)
    c358:	dc400217 	ldw	r17,8(sp)
    c35c:	dc000117 	ldw	r16,4(sp)
    c360:	dec00504 	addi	sp,sp,20
    c364:	f800283a 	ret

0000c368 <___vfprintf_internal_r>:
    c368:	deffe504 	addi	sp,sp,-108
    c36c:	d8c00804 	addi	r3,sp,32
    c370:	ddc01815 	stw	r23,96(sp)
    c374:	dd801715 	stw	r22,92(sp)
    c378:	dd401615 	stw	r21,88(sp)
    c37c:	dd001515 	stw	r20,84(sp)
    c380:	dcc01415 	stw	r19,80(sp)
    c384:	dc801315 	stw	r18,76(sp)
    c388:	dc401215 	stw	r17,72(sp)
    c38c:	dc001115 	stw	r16,68(sp)
    c390:	dfc01a15 	stw	ra,104(sp)
    c394:	df001915 	stw	fp,100(sp)
    c398:	2029883a 	mov	r20,r4
    c39c:	2823883a 	mov	r17,r5
    c3a0:	382d883a 	mov	r22,r7
    c3a4:	d9800f15 	stw	r6,60(sp)
    c3a8:	0021883a 	mov	r16,zero
    c3ac:	d8000e15 	stw	zero,56(sp)
    c3b0:	d8000a15 	stw	zero,40(sp)
    c3b4:	002b883a 	mov	r21,zero
    c3b8:	0027883a 	mov	r19,zero
    c3bc:	0025883a 	mov	r18,zero
    c3c0:	d8000c15 	stw	zero,48(sp)
    c3c4:	d8000b15 	stw	zero,44(sp)
    c3c8:	002f883a 	mov	r23,zero
    c3cc:	d8c00915 	stw	r3,36(sp)
    c3d0:	d8c00f17 	ldw	r3,60(sp)
    c3d4:	19000003 	ldbu	r4,0(r3)
    c3d8:	20803fcc 	andi	r2,r4,255
    c3dc:	1080201c 	xori	r2,r2,128
    c3e0:	10bfe004 	addi	r2,r2,-128
    c3e4:	10011e26 	beq	r2,zero,c860 <___vfprintf_internal_r+0x4f8>
    c3e8:	00c00044 	movi	r3,1
    c3ec:	b8c01426 	beq	r23,r3,c440 <___vfprintf_internal_r+0xd8>
    c3f0:	1dc00216 	blt	r3,r23,c3fc <___vfprintf_internal_r+0x94>
    c3f4:	b8000626 	beq	r23,zero,c410 <___vfprintf_internal_r+0xa8>
    c3f8:	00011506 	br	c850 <___vfprintf_internal_r+0x4e8>
    c3fc:	01400084 	movi	r5,2
    c400:	b9401d26 	beq	r23,r5,c478 <___vfprintf_internal_r+0x110>
    c404:	014000c4 	movi	r5,3
    c408:	b9402b26 	beq	r23,r5,c4b8 <___vfprintf_internal_r+0x150>
    c40c:	00011006 	br	c850 <___vfprintf_internal_r+0x4e8>
    c410:	01400944 	movi	r5,37
    c414:	1140fc26 	beq	r2,r5,c808 <___vfprintf_internal_r+0x4a0>
    c418:	88800117 	ldw	r2,4(r17)
    c41c:	d9000005 	stb	r4,0(sp)
    c420:	01c00044 	movi	r7,1
    c424:	d80d883a 	mov	r6,sp
    c428:	880b883a 	mov	r5,r17
    c42c:	a009883a 	mov	r4,r20
    c430:	103ee83a 	callr	r2
    c434:	1000d81e 	bne	r2,zero,c798 <___vfprintf_internal_r+0x430>
    c438:	84000044 	addi	r16,r16,1
    c43c:	00010406 	br	c850 <___vfprintf_internal_r+0x4e8>
    c440:	01400c04 	movi	r5,48
    c444:	1140fa26 	beq	r2,r5,c830 <___vfprintf_internal_r+0x4c8>
    c448:	01400944 	movi	r5,37
    c44c:	11400a1e 	bne	r2,r5,c478 <___vfprintf_internal_r+0x110>
    c450:	d8800005 	stb	r2,0(sp)
    c454:	88800117 	ldw	r2,4(r17)
    c458:	b80f883a 	mov	r7,r23
    c45c:	d80d883a 	mov	r6,sp
    c460:	880b883a 	mov	r5,r17
    c464:	a009883a 	mov	r4,r20
    c468:	103ee83a 	callr	r2
    c46c:	1000ca1e 	bne	r2,zero,c798 <___vfprintf_internal_r+0x430>
    c470:	84000044 	addi	r16,r16,1
    c474:	0000f506 	br	c84c <___vfprintf_internal_r+0x4e4>
    c478:	25fff404 	addi	r23,r4,-48
    c47c:	bdc03fcc 	andi	r23,r23,255
    c480:	00c00244 	movi	r3,9
    c484:	1dc00936 	bltu	r3,r23,c4ac <___vfprintf_internal_r+0x144>
    c488:	00bfffc4 	movi	r2,-1
    c48c:	90800426 	beq	r18,r2,c4a0 <___vfprintf_internal_r+0x138>
    c490:	01400284 	movi	r5,10
    c494:	9009883a 	mov	r4,r18
    c498:	0009a080 	call	9a08 <__mulsi3>
    c49c:	00000106 	br	c4a4 <___vfprintf_internal_r+0x13c>
    c4a0:	0005883a 	mov	r2,zero
    c4a4:	b8a5883a 	add	r18,r23,r2
    c4a8:	0000e206 	br	c834 <___vfprintf_internal_r+0x4cc>
    c4ac:	01400b84 	movi	r5,46
    c4b0:	1140e426 	beq	r2,r5,c844 <___vfprintf_internal_r+0x4dc>
    c4b4:	05c00084 	movi	r23,2
    c4b8:	213ff404 	addi	r4,r4,-48
    c4bc:	27003fcc 	andi	fp,r4,255
    c4c0:	00c00244 	movi	r3,9
    c4c4:	1f000936 	bltu	r3,fp,c4ec <___vfprintf_internal_r+0x184>
    c4c8:	00bfffc4 	movi	r2,-1
    c4cc:	98800426 	beq	r19,r2,c4e0 <___vfprintf_internal_r+0x178>
    c4d0:	01400284 	movi	r5,10
    c4d4:	9809883a 	mov	r4,r19
    c4d8:	0009a080 	call	9a08 <__mulsi3>
    c4dc:	00000106 	br	c4e4 <___vfprintf_internal_r+0x17c>
    c4e0:	0005883a 	mov	r2,zero
    c4e4:	e0a7883a 	add	r19,fp,r2
    c4e8:	0000d906 	br	c850 <___vfprintf_internal_r+0x4e8>
    c4ec:	00c01b04 	movi	r3,108
    c4f0:	10c0d226 	beq	r2,r3,c83c <___vfprintf_internal_r+0x4d4>
    c4f4:	013fffc4 	movi	r4,-1
    c4f8:	99000226 	beq	r19,r4,c504 <___vfprintf_internal_r+0x19c>
    c4fc:	d8000b15 	stw	zero,44(sp)
    c500:	00000106 	br	c508 <___vfprintf_internal_r+0x1a0>
    c504:	04c00044 	movi	r19,1
    c508:	01001a44 	movi	r4,105
    c50c:	11001626 	beq	r2,r4,c568 <___vfprintf_internal_r+0x200>
    c510:	20800916 	blt	r4,r2,c538 <___vfprintf_internal_r+0x1d0>
    c514:	010018c4 	movi	r4,99
    c518:	11008826 	beq	r2,r4,c73c <___vfprintf_internal_r+0x3d4>
    c51c:	01001904 	movi	r4,100
    c520:	11001126 	beq	r2,r4,c568 <___vfprintf_internal_r+0x200>
    c524:	01001604 	movi	r4,88
    c528:	1100c81e 	bne	r2,r4,c84c <___vfprintf_internal_r+0x4e4>
    c52c:	00c00044 	movi	r3,1
    c530:	d8c00e15 	stw	r3,56(sp)
    c534:	00001506 	br	c58c <___vfprintf_internal_r+0x224>
    c538:	01001cc4 	movi	r4,115
    c53c:	11009826 	beq	r2,r4,c7a0 <___vfprintf_internal_r+0x438>
    c540:	20800416 	blt	r4,r2,c554 <___vfprintf_internal_r+0x1ec>
    c544:	01001bc4 	movi	r4,111
    c548:	1100c01e 	bne	r2,r4,c84c <___vfprintf_internal_r+0x4e4>
    c54c:	05400204 	movi	r21,8
    c550:	00000f06 	br	c590 <___vfprintf_internal_r+0x228>
    c554:	01001d44 	movi	r4,117
    c558:	11000d26 	beq	r2,r4,c590 <___vfprintf_internal_r+0x228>
    c55c:	01001e04 	movi	r4,120
    c560:	11000a26 	beq	r2,r4,c58c <___vfprintf_internal_r+0x224>
    c564:	0000b906 	br	c84c <___vfprintf_internal_r+0x4e4>
    c568:	d8c00a17 	ldw	r3,40(sp)
    c56c:	b7000104 	addi	fp,r22,4
    c570:	18000726 	beq	r3,zero,c590 <___vfprintf_internal_r+0x228>
    c574:	df000d15 	stw	fp,52(sp)
    c578:	b5c00017 	ldw	r23,0(r22)
    c57c:	b800080e 	bge	r23,zero,c5a0 <___vfprintf_internal_r+0x238>
    c580:	05efc83a 	sub	r23,zero,r23
    c584:	02400044 	movi	r9,1
    c588:	00000606 	br	c5a4 <___vfprintf_internal_r+0x23c>
    c58c:	05400404 	movi	r21,16
    c590:	b0c00104 	addi	r3,r22,4
    c594:	d8c00d15 	stw	r3,52(sp)
    c598:	b5c00017 	ldw	r23,0(r22)
    c59c:	d8000a15 	stw	zero,40(sp)
    c5a0:	0013883a 	mov	r9,zero
    c5a4:	d839883a 	mov	fp,sp
    c5a8:	b8001726 	beq	r23,zero,c608 <___vfprintf_internal_r+0x2a0>
    c5ac:	a80b883a 	mov	r5,r21
    c5b0:	b809883a 	mov	r4,r23
    c5b4:	da401015 	stw	r9,64(sp)
    c5b8:	000994c0 	call	994c <__udivsi3>
    c5bc:	a80b883a 	mov	r5,r21
    c5c0:	1009883a 	mov	r4,r2
    c5c4:	102d883a 	mov	r22,r2
    c5c8:	0009a080 	call	9a08 <__mulsi3>
    c5cc:	b885c83a 	sub	r2,r23,r2
    c5d0:	00c00244 	movi	r3,9
    c5d4:	da401017 	ldw	r9,64(sp)
    c5d8:	18800216 	blt	r3,r2,c5e4 <___vfprintf_internal_r+0x27c>
    c5dc:	10800c04 	addi	r2,r2,48
    c5e0:	00000506 	br	c5f8 <___vfprintf_internal_r+0x290>
    c5e4:	d8c00e17 	ldw	r3,56(sp)
    c5e8:	18000226 	beq	r3,zero,c5f4 <___vfprintf_internal_r+0x28c>
    c5ec:	10800dc4 	addi	r2,r2,55
    c5f0:	00000106 	br	c5f8 <___vfprintf_internal_r+0x290>
    c5f4:	108015c4 	addi	r2,r2,87
    c5f8:	e0800005 	stb	r2,0(fp)
    c5fc:	b02f883a 	mov	r23,r22
    c600:	e7000044 	addi	fp,fp,1
    c604:	003fe806 	br	c5a8 <_gp+0xffff5e70>
    c608:	e6efc83a 	sub	r23,fp,sp
    c60c:	9dc5c83a 	sub	r2,r19,r23
    c610:	0080090e 	bge	zero,r2,c638 <___vfprintf_internal_r+0x2d0>
    c614:	e085883a 	add	r2,fp,r2
    c618:	01400c04 	movi	r5,48
    c61c:	d8c00917 	ldw	r3,36(sp)
    c620:	e009883a 	mov	r4,fp
    c624:	e0c0032e 	bgeu	fp,r3,c634 <___vfprintf_internal_r+0x2cc>
    c628:	e7000044 	addi	fp,fp,1
    c62c:	21400005 	stb	r5,0(r4)
    c630:	e0bffa1e 	bne	fp,r2,c61c <_gp+0xffff5ee4>
    c634:	e6efc83a 	sub	r23,fp,sp
    c638:	d8c00b17 	ldw	r3,44(sp)
    c63c:	4dd1883a 	add	r8,r9,r23
    c640:	922dc83a 	sub	r22,r18,r8
    c644:	18001626 	beq	r3,zero,c6a0 <___vfprintf_internal_r+0x338>
    c648:	48000a26 	beq	r9,zero,c674 <___vfprintf_internal_r+0x30c>
    c64c:	00800b44 	movi	r2,45
    c650:	d8800805 	stb	r2,32(sp)
    c654:	88800117 	ldw	r2,4(r17)
    c658:	01c00044 	movi	r7,1
    c65c:	d9800804 	addi	r6,sp,32
    c660:	880b883a 	mov	r5,r17
    c664:	a009883a 	mov	r4,r20
    c668:	103ee83a 	callr	r2
    c66c:	10004a1e 	bne	r2,zero,c798 <___vfprintf_internal_r+0x430>
    c670:	84000044 	addi	r16,r16,1
    c674:	0580070e 	bge	zero,r22,c694 <___vfprintf_internal_r+0x32c>
    c678:	b00f883a 	mov	r7,r22
    c67c:	01800c04 	movi	r6,48
    c680:	880b883a 	mov	r5,r17
    c684:	a009883a 	mov	r4,r20
    c688:	000c2fc0 	call	c2fc <print_repeat>
    c68c:	1000421e 	bne	r2,zero,c798 <___vfprintf_internal_r+0x430>
    c690:	85a1883a 	add	r16,r16,r22
    c694:	e02d883a 	mov	r22,fp
    c698:	bf2fc83a 	sub	r23,r23,fp
    c69c:	00002006 	br	c720 <___vfprintf_internal_r+0x3b8>
    c6a0:	0580090e 	bge	zero,r22,c6c8 <___vfprintf_internal_r+0x360>
    c6a4:	b00f883a 	mov	r7,r22
    c6a8:	01800804 	movi	r6,32
    c6ac:	880b883a 	mov	r5,r17
    c6b0:	a009883a 	mov	r4,r20
    c6b4:	da401015 	stw	r9,64(sp)
    c6b8:	000c2fc0 	call	c2fc <print_repeat>
    c6bc:	da401017 	ldw	r9,64(sp)
    c6c0:	1000351e 	bne	r2,zero,c798 <___vfprintf_internal_r+0x430>
    c6c4:	85a1883a 	add	r16,r16,r22
    c6c8:	483ff226 	beq	r9,zero,c694 <_gp+0xffff5f5c>
    c6cc:	00800b44 	movi	r2,45
    c6d0:	d8800805 	stb	r2,32(sp)
    c6d4:	88800117 	ldw	r2,4(r17)
    c6d8:	01c00044 	movi	r7,1
    c6dc:	d9800804 	addi	r6,sp,32
    c6e0:	880b883a 	mov	r5,r17
    c6e4:	a009883a 	mov	r4,r20
    c6e8:	103ee83a 	callr	r2
    c6ec:	10002a1e 	bne	r2,zero,c798 <___vfprintf_internal_r+0x430>
    c6f0:	84000044 	addi	r16,r16,1
    c6f4:	003fe706 	br	c694 <_gp+0xffff5f5c>
    c6f8:	b5bfffc4 	addi	r22,r22,-1
    c6fc:	b0800003 	ldbu	r2,0(r22)
    c700:	01c00044 	movi	r7,1
    c704:	d9800804 	addi	r6,sp,32
    c708:	d8800805 	stb	r2,32(sp)
    c70c:	88800117 	ldw	r2,4(r17)
    c710:	880b883a 	mov	r5,r17
    c714:	a009883a 	mov	r4,r20
    c718:	103ee83a 	callr	r2
    c71c:	10001e1e 	bne	r2,zero,c798 <___vfprintf_internal_r+0x430>
    c720:	8585c83a 	sub	r2,r16,r22
    c724:	b5c9883a 	add	r4,r22,r23
    c728:	e085883a 	add	r2,fp,r2
    c72c:	013ff216 	blt	zero,r4,c6f8 <_gp+0xffff5fc0>
    c730:	1021883a 	mov	r16,r2
    c734:	dd800d17 	ldw	r22,52(sp)
    c738:	00004406 	br	c84c <___vfprintf_internal_r+0x4e4>
    c73c:	00800044 	movi	r2,1
    c740:	1480080e 	bge	r2,r18,c764 <___vfprintf_internal_r+0x3fc>
    c744:	95ffffc4 	addi	r23,r18,-1
    c748:	b80f883a 	mov	r7,r23
    c74c:	01800804 	movi	r6,32
    c750:	880b883a 	mov	r5,r17
    c754:	a009883a 	mov	r4,r20
    c758:	000c2fc0 	call	c2fc <print_repeat>
    c75c:	10000e1e 	bne	r2,zero,c798 <___vfprintf_internal_r+0x430>
    c760:	85e1883a 	add	r16,r16,r23
    c764:	b0800017 	ldw	r2,0(r22)
    c768:	01c00044 	movi	r7,1
    c76c:	d80d883a 	mov	r6,sp
    c770:	d8800005 	stb	r2,0(sp)
    c774:	88800117 	ldw	r2,4(r17)
    c778:	880b883a 	mov	r5,r17
    c77c:	a009883a 	mov	r4,r20
    c780:	b5c00104 	addi	r23,r22,4
    c784:	103ee83a 	callr	r2
    c788:	1000031e 	bne	r2,zero,c798 <___vfprintf_internal_r+0x430>
    c78c:	84000044 	addi	r16,r16,1
    c790:	b82d883a 	mov	r22,r23
    c794:	00002d06 	br	c84c <___vfprintf_internal_r+0x4e4>
    c798:	00bfffc4 	movi	r2,-1
    c79c:	00003106 	br	c864 <___vfprintf_internal_r+0x4fc>
    c7a0:	b5c00017 	ldw	r23,0(r22)
    c7a4:	b7000104 	addi	fp,r22,4
    c7a8:	b809883a 	mov	r4,r23
    c7ac:	000c2e00 	call	c2e0 <strlen>
    c7b0:	9091c83a 	sub	r8,r18,r2
    c7b4:	102d883a 	mov	r22,r2
    c7b8:	0200090e 	bge	zero,r8,c7e0 <___vfprintf_internal_r+0x478>
    c7bc:	400f883a 	mov	r7,r8
    c7c0:	01800804 	movi	r6,32
    c7c4:	880b883a 	mov	r5,r17
    c7c8:	a009883a 	mov	r4,r20
    c7cc:	da001015 	stw	r8,64(sp)
    c7d0:	000c2fc0 	call	c2fc <print_repeat>
    c7d4:	da001017 	ldw	r8,64(sp)
    c7d8:	103fef1e 	bne	r2,zero,c798 <_gp+0xffff6060>
    c7dc:	8221883a 	add	r16,r16,r8
    c7e0:	88800117 	ldw	r2,4(r17)
    c7e4:	b00f883a 	mov	r7,r22
    c7e8:	b80d883a 	mov	r6,r23
    c7ec:	880b883a 	mov	r5,r17
    c7f0:	a009883a 	mov	r4,r20
    c7f4:	103ee83a 	callr	r2
    c7f8:	103fe71e 	bne	r2,zero,c798 <_gp+0xffff6060>
    c7fc:	85a1883a 	add	r16,r16,r22
    c800:	e02d883a 	mov	r22,fp
    c804:	00001106 	br	c84c <___vfprintf_internal_r+0x4e4>
    c808:	00c00044 	movi	r3,1
    c80c:	04ffffc4 	movi	r19,-1
    c810:	d8000e15 	stw	zero,56(sp)
    c814:	d8c00a15 	stw	r3,40(sp)
    c818:	05400284 	movi	r21,10
    c81c:	9825883a 	mov	r18,r19
    c820:	d8000c15 	stw	zero,48(sp)
    c824:	d8000b15 	stw	zero,44(sp)
    c828:	182f883a 	mov	r23,r3
    c82c:	00000806 	br	c850 <___vfprintf_internal_r+0x4e8>
    c830:	ddc00b15 	stw	r23,44(sp)
    c834:	05c00084 	movi	r23,2
    c838:	00000506 	br	c850 <___vfprintf_internal_r+0x4e8>
    c83c:	00c00044 	movi	r3,1
    c840:	d8c00c15 	stw	r3,48(sp)
    c844:	05c000c4 	movi	r23,3
    c848:	00000106 	br	c850 <___vfprintf_internal_r+0x4e8>
    c84c:	002f883a 	mov	r23,zero
    c850:	d8c00f17 	ldw	r3,60(sp)
    c854:	18c00044 	addi	r3,r3,1
    c858:	d8c00f15 	stw	r3,60(sp)
    c85c:	003edc06 	br	c3d0 <_gp+0xffff5c98>
    c860:	8005883a 	mov	r2,r16
    c864:	dfc01a17 	ldw	ra,104(sp)
    c868:	df001917 	ldw	fp,100(sp)
    c86c:	ddc01817 	ldw	r23,96(sp)
    c870:	dd801717 	ldw	r22,92(sp)
    c874:	dd401617 	ldw	r21,88(sp)
    c878:	dd001517 	ldw	r20,84(sp)
    c87c:	dcc01417 	ldw	r19,80(sp)
    c880:	dc801317 	ldw	r18,76(sp)
    c884:	dc401217 	ldw	r17,72(sp)
    c888:	dc001117 	ldw	r16,68(sp)
    c88c:	dec01b04 	addi	sp,sp,108
    c890:	f800283a 	ret

0000c894 <__vfprintf_internal>:
    c894:	00800074 	movhi	r2,1
    c898:	10b9d704 	addi	r2,r2,-6308
    c89c:	300f883a 	mov	r7,r6
    c8a0:	280d883a 	mov	r6,r5
    c8a4:	200b883a 	mov	r5,r4
    c8a8:	11000017 	ldw	r4,0(r2)
    c8ac:	000c3681 	jmpi	c368 <___vfprintf_internal_r>

0000c8b0 <__sfvwrite_small_dev>:
    c8b0:	2880000b 	ldhu	r2,0(r5)
    c8b4:	1080020c 	andi	r2,r2,8
    c8b8:	10002126 	beq	r2,zero,c940 <__sfvwrite_small_dev+0x90>
    c8bc:	2880008f 	ldh	r2,2(r5)
    c8c0:	defffa04 	addi	sp,sp,-24
    c8c4:	dc000015 	stw	r16,0(sp)
    c8c8:	dfc00515 	stw	ra,20(sp)
    c8cc:	dd000415 	stw	r20,16(sp)
    c8d0:	dcc00315 	stw	r19,12(sp)
    c8d4:	dc800215 	stw	r18,8(sp)
    c8d8:	dc400115 	stw	r17,4(sp)
    c8dc:	2821883a 	mov	r16,r5
    c8e0:	10001216 	blt	r2,zero,c92c <__sfvwrite_small_dev+0x7c>
    c8e4:	2027883a 	mov	r19,r4
    c8e8:	3025883a 	mov	r18,r6
    c8ec:	3823883a 	mov	r17,r7
    c8f0:	05010004 	movi	r20,1024
    c8f4:	04400b0e 	bge	zero,r17,c924 <__sfvwrite_small_dev+0x74>
    c8f8:	880f883a 	mov	r7,r17
    c8fc:	a440010e 	bge	r20,r17,c904 <__sfvwrite_small_dev+0x54>
    c900:	01c10004 	movi	r7,1024
    c904:	8140008f 	ldh	r5,2(r16)
    c908:	900d883a 	mov	r6,r18
    c90c:	9809883a 	mov	r4,r19
    c910:	000c9680 	call	c968 <_write_r>
    c914:	0080050e 	bge	zero,r2,c92c <__sfvwrite_small_dev+0x7c>
    c918:	88a3c83a 	sub	r17,r17,r2
    c91c:	90a5883a 	add	r18,r18,r2
    c920:	003ff406 	br	c8f4 <_gp+0xffff61bc>
    c924:	0005883a 	mov	r2,zero
    c928:	00000706 	br	c948 <__sfvwrite_small_dev+0x98>
    c92c:	8080000b 	ldhu	r2,0(r16)
    c930:	10801014 	ori	r2,r2,64
    c934:	8080000d 	sth	r2,0(r16)
    c938:	00bfffc4 	movi	r2,-1
    c93c:	00000206 	br	c948 <__sfvwrite_small_dev+0x98>
    c940:	00bfffc4 	movi	r2,-1
    c944:	f800283a 	ret
    c948:	dfc00517 	ldw	ra,20(sp)
    c94c:	dd000417 	ldw	r20,16(sp)
    c950:	dcc00317 	ldw	r19,12(sp)
    c954:	dc800217 	ldw	r18,8(sp)
    c958:	dc400117 	ldw	r17,4(sp)
    c95c:	dc000017 	ldw	r16,0(sp)
    c960:	dec00604 	addi	sp,sp,24
    c964:	f800283a 	ret

0000c968 <_write_r>:
    c968:	defffd04 	addi	sp,sp,-12
    c96c:	dc000015 	stw	r16,0(sp)
    c970:	04000074 	movhi	r16,1
    c974:	dc400115 	stw	r17,4(sp)
    c978:	843ab404 	addi	r16,r16,-5424
    c97c:	2023883a 	mov	r17,r4
    c980:	2809883a 	mov	r4,r5
    c984:	300b883a 	mov	r5,r6
    c988:	380d883a 	mov	r6,r7
    c98c:	dfc00215 	stw	ra,8(sp)
    c990:	80000015 	stw	zero,0(r16)
    c994:	000ccd40 	call	ccd4 <write>
    c998:	00ffffc4 	movi	r3,-1
    c99c:	10c0031e 	bne	r2,r3,c9ac <_write_r+0x44>
    c9a0:	80c00017 	ldw	r3,0(r16)
    c9a4:	18000126 	beq	r3,zero,c9ac <_write_r+0x44>
    c9a8:	88c00015 	stw	r3,0(r17)
    c9ac:	dfc00217 	ldw	ra,8(sp)
    c9b0:	dc400117 	ldw	r17,4(sp)
    c9b4:	dc000017 	ldw	r16,0(sp)
    c9b8:	dec00304 	addi	sp,sp,12
    c9bc:	f800283a 	ret

0000c9c0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    c9c0:	defff004 	addi	sp,sp,-64
    c9c4:	df000f15 	stw	fp,60(sp)
    c9c8:	df000f04 	addi	fp,sp,60
    c9cc:	e13ffd15 	stw	r4,-12(fp)
    c9d0:	e17ffe15 	stw	r5,-8(fp)
    c9d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    c9d8:	00bffa84 	movi	r2,-22
    c9dc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c9e0:	e0bffd17 	ldw	r2,-12(fp)
    c9e4:	10800828 	cmpgeui	r2,r2,32
    c9e8:	1000501e 	bne	r2,zero,cb2c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c9ec:	0005303a 	rdctl	r2,status
    c9f0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c9f4:	e0fff617 	ldw	r3,-40(fp)
    c9f8:	00bfff84 	movi	r2,-2
    c9fc:	1884703a 	and	r2,r3,r2
    ca00:	1001703a 	wrctl	status,r2
  
  return context;
    ca04:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    ca08:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    ca0c:	00800074 	movhi	r2,1
    ca10:	10bcef04 	addi	r2,r2,-3140
    ca14:	e0fffd17 	ldw	r3,-12(fp)
    ca18:	180690fa 	slli	r3,r3,3
    ca1c:	10c5883a 	add	r2,r2,r3
    ca20:	e0ffff17 	ldw	r3,-4(fp)
    ca24:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    ca28:	00800074 	movhi	r2,1
    ca2c:	10bcef04 	addi	r2,r2,-3140
    ca30:	e0fffd17 	ldw	r3,-12(fp)
    ca34:	180690fa 	slli	r3,r3,3
    ca38:	10c5883a 	add	r2,r2,r3
    ca3c:	10800104 	addi	r2,r2,4
    ca40:	e0fffe17 	ldw	r3,-8(fp)
    ca44:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    ca48:	e0bfff17 	ldw	r2,-4(fp)
    ca4c:	10001926 	beq	r2,zero,cab4 <alt_irq_register+0xf4>
    ca50:	e0bffd17 	ldw	r2,-12(fp)
    ca54:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ca58:	0005303a 	rdctl	r2,status
    ca5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ca60:	e0fff717 	ldw	r3,-36(fp)
    ca64:	00bfff84 	movi	r2,-2
    ca68:	1884703a 	and	r2,r3,r2
    ca6c:	1001703a 	wrctl	status,r2
  
  return context;
    ca70:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ca74:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    ca78:	00c00044 	movi	r3,1
    ca7c:	e0bff217 	ldw	r2,-56(fp)
    ca80:	1884983a 	sll	r2,r3,r2
    ca84:	1007883a 	mov	r3,r2
    ca88:	d0a0e717 	ldw	r2,-31844(gp)
    ca8c:	1884b03a 	or	r2,r3,r2
    ca90:	d0a0e715 	stw	r2,-31844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ca94:	d0a0e717 	ldw	r2,-31844(gp)
    ca98:	100170fa 	wrctl	ienable,r2
    ca9c:	e0bff817 	ldw	r2,-32(fp)
    caa0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    caa4:	e0bff917 	ldw	r2,-28(fp)
    caa8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    caac:	0005883a 	mov	r2,zero
    cab0:	00001906 	br	cb18 <alt_irq_register+0x158>
    cab4:	e0bffd17 	ldw	r2,-12(fp)
    cab8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cabc:	0005303a 	rdctl	r2,status
    cac0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cac4:	e0fffa17 	ldw	r3,-24(fp)
    cac8:	00bfff84 	movi	r2,-2
    cacc:	1884703a 	and	r2,r3,r2
    cad0:	1001703a 	wrctl	status,r2
  
  return context;
    cad4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cad8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    cadc:	00c00044 	movi	r3,1
    cae0:	e0bff417 	ldw	r2,-48(fp)
    cae4:	1884983a 	sll	r2,r3,r2
    cae8:	0084303a 	nor	r2,zero,r2
    caec:	1007883a 	mov	r3,r2
    caf0:	d0a0e717 	ldw	r2,-31844(gp)
    caf4:	1884703a 	and	r2,r3,r2
    caf8:	d0a0e715 	stw	r2,-31844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cafc:	d0a0e717 	ldw	r2,-31844(gp)
    cb00:	100170fa 	wrctl	ienable,r2
    cb04:	e0bffb17 	ldw	r2,-20(fp)
    cb08:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb0c:	e0bffc17 	ldw	r2,-16(fp)
    cb10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cb14:	0005883a 	mov	r2,zero
    cb18:	e0bff115 	stw	r2,-60(fp)
    cb1c:	e0bff317 	ldw	r2,-52(fp)
    cb20:	e0bff515 	stw	r2,-44(fp)
    cb24:	e0bff517 	ldw	r2,-44(fp)
    cb28:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    cb2c:	e0bff117 	ldw	r2,-60(fp)
}
    cb30:	e037883a 	mov	sp,fp
    cb34:	df000017 	ldw	fp,0(sp)
    cb38:	dec00104 	addi	sp,sp,4
    cb3c:	f800283a 	ret

0000cb40 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    cb40:	defffc04 	addi	sp,sp,-16
    cb44:	df000315 	stw	fp,12(sp)
    cb48:	df000304 	addi	fp,sp,12
    cb4c:	e13ffd15 	stw	r4,-12(fp)
    cb50:	e17ffe15 	stw	r5,-8(fp)
    cb54:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    cb58:	e0fffe17 	ldw	r3,-8(fp)
    cb5c:	e0bffd17 	ldw	r2,-12(fp)
    cb60:	18800c26 	beq	r3,r2,cb94 <alt_load_section+0x54>
  {
    while( to != end )
    cb64:	00000806 	br	cb88 <alt_load_section+0x48>
    {
      *to++ = *from++;
    cb68:	e0bffe17 	ldw	r2,-8(fp)
    cb6c:	10c00104 	addi	r3,r2,4
    cb70:	e0fffe15 	stw	r3,-8(fp)
    cb74:	e0fffd17 	ldw	r3,-12(fp)
    cb78:	19000104 	addi	r4,r3,4
    cb7c:	e13ffd15 	stw	r4,-12(fp)
    cb80:	18c00017 	ldw	r3,0(r3)
    cb84:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    cb88:	e0fffe17 	ldw	r3,-8(fp)
    cb8c:	e0bfff17 	ldw	r2,-4(fp)
    cb90:	18bff51e 	bne	r3,r2,cb68 <_gp+0xffff6430>
    {
      *to++ = *from++;
    }
  }
}
    cb94:	0001883a 	nop
    cb98:	e037883a 	mov	sp,fp
    cb9c:	df000017 	ldw	fp,0(sp)
    cba0:	dec00104 	addi	sp,sp,4
    cba4:	f800283a 	ret

0000cba8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    cba8:	defffe04 	addi	sp,sp,-8
    cbac:	dfc00115 	stw	ra,4(sp)
    cbb0:	df000015 	stw	fp,0(sp)
    cbb4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    cbb8:	01800074 	movhi	r6,1
    cbbc:	31b9e104 	addi	r6,r6,-6268
    cbc0:	01400074 	movhi	r5,1
    cbc4:	29791604 	addi	r5,r5,-7080
    cbc8:	01000074 	movhi	r4,1
    cbcc:	2139e104 	addi	r4,r4,-6268
    cbd0:	000cb400 	call	cb40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    cbd4:	01800074 	movhi	r6,1
    cbd8:	31a07104 	addi	r6,r6,-32316
    cbdc:	01400074 	movhi	r5,1
    cbe0:	29600804 	addi	r5,r5,-32736
    cbe4:	01000074 	movhi	r4,1
    cbe8:	21200804 	addi	r4,r4,-32736
    cbec:	000cb400 	call	cb40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    cbf0:	01800074 	movhi	r6,1
    cbf4:	31b91604 	addi	r6,r6,-7080
    cbf8:	01400074 	movhi	r5,1
    cbfc:	29789304 	addi	r5,r5,-7604
    cc00:	01000074 	movhi	r4,1
    cc04:	21389304 	addi	r4,r4,-7604
    cc08:	000cb400 	call	cb40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    cc0c:	000d5bc0 	call	d5bc <alt_dcache_flush_all>
  alt_icache_flush_all();
    cc10:	000d6e80 	call	d6e8 <alt_icache_flush_all>
}
    cc14:	0001883a 	nop
    cc18:	e037883a 	mov	sp,fp
    cc1c:	dfc00117 	ldw	ra,4(sp)
    cc20:	df000017 	ldw	fp,0(sp)
    cc24:	dec00204 	addi	sp,sp,8
    cc28:	f800283a 	ret

0000cc2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    cc2c:	defffd04 	addi	sp,sp,-12
    cc30:	dfc00215 	stw	ra,8(sp)
    cc34:	df000115 	stw	fp,4(sp)
    cc38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    cc3c:	0009883a 	mov	r4,zero
    cc40:	000ce080 	call	ce08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    cc44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    cc48:	000ce400 	call	ce40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    cc4c:	01800074 	movhi	r6,1
    cc50:	31b90804 	addi	r6,r6,-7136
    cc54:	01400074 	movhi	r5,1
    cc58:	29790804 	addi	r5,r5,-7136
    cc5c:	01000074 	movhi	r4,1
    cc60:	21390804 	addi	r4,r4,-7136
    cc64:	000d8000 	call	d800 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    cc68:	d0a0e817 	ldw	r2,-31840(gp)
    cc6c:	d0e0e917 	ldw	r3,-31836(gp)
    cc70:	d120ea17 	ldw	r4,-31832(gp)
    cc74:	200d883a 	mov	r6,r4
    cc78:	180b883a 	mov	r5,r3
    cc7c:	1009883a 	mov	r4,r2
    cc80:	00087e80 	call	87e8 <main>
    cc84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    cc88:	01000044 	movi	r4,1
    cc8c:	000d4e40 	call	d4e4 <close>
  exit (result);
    cc90:	e13fff17 	ldw	r4,-4(fp)
    cc94:	000e0380 	call	e038 <exit>

0000cc98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cc98:	defffe04 	addi	sp,sp,-8
    cc9c:	dfc00115 	stw	ra,4(sp)
    cca0:	df000015 	stw	fp,0(sp)
    cca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cca8:	d0a01017 	ldw	r2,-32704(gp)
    ccac:	10000326 	beq	r2,zero,ccbc <alt_get_errno+0x24>
    ccb0:	d0a01017 	ldw	r2,-32704(gp)
    ccb4:	103ee83a 	callr	r2
    ccb8:	00000106 	br	ccc0 <alt_get_errno+0x28>
    ccbc:	d0a0e604 	addi	r2,gp,-31848
}
    ccc0:	e037883a 	mov	sp,fp
    ccc4:	dfc00117 	ldw	ra,4(sp)
    ccc8:	df000017 	ldw	fp,0(sp)
    cccc:	dec00204 	addi	sp,sp,8
    ccd0:	f800283a 	ret

0000ccd4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ccd4:	defff904 	addi	sp,sp,-28
    ccd8:	dfc00615 	stw	ra,24(sp)
    ccdc:	df000515 	stw	fp,20(sp)
    cce0:	df000504 	addi	fp,sp,20
    cce4:	e13ffd15 	stw	r4,-12(fp)
    cce8:	e17ffe15 	stw	r5,-8(fp)
    ccec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ccf0:	e0bffd17 	ldw	r2,-12(fp)
    ccf4:	10000816 	blt	r2,zero,cd18 <write+0x44>
    ccf8:	01400304 	movi	r5,12
    ccfc:	e13ffd17 	ldw	r4,-12(fp)
    cd00:	0009a080 	call	9a08 <__mulsi3>
    cd04:	1007883a 	mov	r3,r2
    cd08:	00800074 	movhi	r2,1
    cd0c:	10b96e04 	addi	r2,r2,-6728
    cd10:	1885883a 	add	r2,r3,r2
    cd14:	00000106 	br	cd1c <write+0x48>
    cd18:	0005883a 	mov	r2,zero
    cd1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    cd20:	e0bffb17 	ldw	r2,-20(fp)
    cd24:	10002126 	beq	r2,zero,cdac <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    cd28:	e0bffb17 	ldw	r2,-20(fp)
    cd2c:	10800217 	ldw	r2,8(r2)
    cd30:	108000cc 	andi	r2,r2,3
    cd34:	10001826 	beq	r2,zero,cd98 <write+0xc4>
    cd38:	e0bffb17 	ldw	r2,-20(fp)
    cd3c:	10800017 	ldw	r2,0(r2)
    cd40:	10800617 	ldw	r2,24(r2)
    cd44:	10001426 	beq	r2,zero,cd98 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    cd48:	e0bffb17 	ldw	r2,-20(fp)
    cd4c:	10800017 	ldw	r2,0(r2)
    cd50:	10800617 	ldw	r2,24(r2)
    cd54:	e0ffff17 	ldw	r3,-4(fp)
    cd58:	180d883a 	mov	r6,r3
    cd5c:	e17ffe17 	ldw	r5,-8(fp)
    cd60:	e13ffb17 	ldw	r4,-20(fp)
    cd64:	103ee83a 	callr	r2
    cd68:	e0bffc15 	stw	r2,-16(fp)
    cd6c:	e0bffc17 	ldw	r2,-16(fp)
    cd70:	1000070e 	bge	r2,zero,cd90 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    cd74:	000cc980 	call	cc98 <alt_get_errno>
    cd78:	1007883a 	mov	r3,r2
    cd7c:	e0bffc17 	ldw	r2,-16(fp)
    cd80:	0085c83a 	sub	r2,zero,r2
    cd84:	18800015 	stw	r2,0(r3)
        return -1;
    cd88:	00bfffc4 	movi	r2,-1
    cd8c:	00000c06 	br	cdc0 <write+0xec>
      }
      return rval;
    cd90:	e0bffc17 	ldw	r2,-16(fp)
    cd94:	00000a06 	br	cdc0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    cd98:	000cc980 	call	cc98 <alt_get_errno>
    cd9c:	1007883a 	mov	r3,r2
    cda0:	00800344 	movi	r2,13
    cda4:	18800015 	stw	r2,0(r3)
    cda8:	00000406 	br	cdbc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    cdac:	000cc980 	call	cc98 <alt_get_errno>
    cdb0:	1007883a 	mov	r3,r2
    cdb4:	00801444 	movi	r2,81
    cdb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    cdbc:	00bfffc4 	movi	r2,-1
}
    cdc0:	e037883a 	mov	sp,fp
    cdc4:	dfc00117 	ldw	ra,4(sp)
    cdc8:	df000017 	ldw	fp,0(sp)
    cdcc:	dec00204 	addi	sp,sp,8
    cdd0:	f800283a 	ret

0000cdd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    cdd4:	defffd04 	addi	sp,sp,-12
    cdd8:	dfc00215 	stw	ra,8(sp)
    cddc:	df000115 	stw	fp,4(sp)
    cde0:	df000104 	addi	fp,sp,4
    cde4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    cde8:	d1600d04 	addi	r5,gp,-32716
    cdec:	e13fff17 	ldw	r4,-4(fp)
    cdf0:	000d6440 	call	d644 <alt_dev_llist_insert>
}
    cdf4:	e037883a 	mov	sp,fp
    cdf8:	dfc00117 	ldw	ra,4(sp)
    cdfc:	df000017 	ldw	fp,0(sp)
    ce00:	dec00204 	addi	sp,sp,8
    ce04:	f800283a 	ret

0000ce08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ce08:	defffd04 	addi	sp,sp,-12
    ce0c:	dfc00215 	stw	ra,8(sp)
    ce10:	df000115 	stw	fp,4(sp)
    ce14:	df000104 	addi	fp,sp,4
    ce18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    ce1c:	000dd280 	call	dd28 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ce20:	00800044 	movi	r2,1
    ce24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ce28:	0001883a 	nop
    ce2c:	e037883a 	mov	sp,fp
    ce30:	dfc00117 	ldw	ra,4(sp)
    ce34:	df000017 	ldw	fp,0(sp)
    ce38:	dec00204 	addi	sp,sp,8
    ce3c:	f800283a 	ret

0000ce40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ce40:	defffe04 	addi	sp,sp,-8
    ce44:	dfc00115 	stw	ra,4(sp)
    ce48:	df000015 	stw	fp,0(sp)
    ce4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLOCK_TIMER, sys_clock_timer);
    ce50:	01c0fa04 	movi	r7,1000
    ce54:	01800044 	movi	r6,1
    ce58:	000b883a 	mov	r5,zero
    ce5c:	01000074 	movhi	r4,1
    ce60:	21050804 	addi	r4,r4,5152
    ce64:	000d1580 	call	d158 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ce68:	01000074 	movhi	r4,1
    ce6c:	21394e04 	addi	r4,r4,-6856
    ce70:	000cdd40 	call	cdd4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ce74:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    ce78:	01000074 	movhi	r4,1
    ce7c:	21395904 	addi	r4,r4,-6812
    ce80:	000cdd40 	call	cdd4 <alt_dev_reg>
}
    ce84:	0001883a 	nop
    ce88:	e037883a 	mov	sp,fp
    ce8c:	dfc00117 	ldw	ra,4(sp)
    ce90:	df000017 	ldw	fp,0(sp)
    ce94:	dec00204 	addi	sp,sp,8
    ce98:	f800283a 	ret

0000ce9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ce9c:	defffa04 	addi	sp,sp,-24
    cea0:	dfc00515 	stw	ra,20(sp)
    cea4:	df000415 	stw	fp,16(sp)
    cea8:	df000404 	addi	fp,sp,16
    ceac:	e13ffd15 	stw	r4,-12(fp)
    ceb0:	e17ffe15 	stw	r5,-8(fp)
    ceb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ceb8:	e0bffd17 	ldw	r2,-12(fp)
    cebc:	10800017 	ldw	r2,0(r2)
    cec0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    cec4:	e0bffc17 	ldw	r2,-16(fp)
    cec8:	10c00a04 	addi	r3,r2,40
    cecc:	e0bffd17 	ldw	r2,-12(fp)
    ced0:	10800217 	ldw	r2,8(r2)
    ced4:	100f883a 	mov	r7,r2
    ced8:	e1bfff17 	ldw	r6,-4(fp)
    cedc:	e17ffe17 	ldw	r5,-8(fp)
    cee0:	1809883a 	mov	r4,r3
    cee4:	000cf5c0 	call	cf5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    cee8:	e037883a 	mov	sp,fp
    ceec:	dfc00117 	ldw	ra,4(sp)
    cef0:	df000017 	ldw	fp,0(sp)
    cef4:	dec00204 	addi	sp,sp,8
    cef8:	f800283a 	ret

0000cefc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    cefc:	defffa04 	addi	sp,sp,-24
    cf00:	dfc00515 	stw	ra,20(sp)
    cf04:	df000415 	stw	fp,16(sp)
    cf08:	df000404 	addi	fp,sp,16
    cf0c:	e13ffd15 	stw	r4,-12(fp)
    cf10:	e17ffe15 	stw	r5,-8(fp)
    cf14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cf18:	e0bffd17 	ldw	r2,-12(fp)
    cf1c:	10800017 	ldw	r2,0(r2)
    cf20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    cf24:	e0bffc17 	ldw	r2,-16(fp)
    cf28:	10c00a04 	addi	r3,r2,40
    cf2c:	e0bffd17 	ldw	r2,-12(fp)
    cf30:	10800217 	ldw	r2,8(r2)
    cf34:	100f883a 	mov	r7,r2
    cf38:	e1bfff17 	ldw	r6,-4(fp)
    cf3c:	e17ffe17 	ldw	r5,-8(fp)
    cf40:	1809883a 	mov	r4,r3
    cf44:	000d0480 	call	d048 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    cf48:	e037883a 	mov	sp,fp
    cf4c:	dfc00117 	ldw	ra,4(sp)
    cf50:	df000017 	ldw	fp,0(sp)
    cf54:	dec00204 	addi	sp,sp,8
    cf58:	f800283a 	ret

0000cf5c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    cf5c:	defff704 	addi	sp,sp,-36
    cf60:	df000815 	stw	fp,32(sp)
    cf64:	df000804 	addi	fp,sp,32
    cf68:	e13ffc15 	stw	r4,-16(fp)
    cf6c:	e17ffd15 	stw	r5,-12(fp)
    cf70:	e1bffe15 	stw	r6,-8(fp)
    cf74:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    cf78:	e0bffc17 	ldw	r2,-16(fp)
    cf7c:	10800017 	ldw	r2,0(r2)
    cf80:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    cf84:	e0bffd17 	ldw	r2,-12(fp)
    cf88:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    cf8c:	e0bffe17 	ldw	r2,-8(fp)
    cf90:	e0fffd17 	ldw	r3,-12(fp)
    cf94:	1885883a 	add	r2,r3,r2
    cf98:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    cf9c:	00001206 	br	cfe8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    cfa0:	e0bff917 	ldw	r2,-28(fp)
    cfa4:	10800037 	ldwio	r2,0(r2)
    cfa8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    cfac:	e0bffb17 	ldw	r2,-20(fp)
    cfb0:	10a0000c 	andi	r2,r2,32768
    cfb4:	10000626 	beq	r2,zero,cfd0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    cfb8:	e0bff817 	ldw	r2,-32(fp)
    cfbc:	10c00044 	addi	r3,r2,1
    cfc0:	e0fff815 	stw	r3,-32(fp)
    cfc4:	e0fffb17 	ldw	r3,-20(fp)
    cfc8:	10c00005 	stb	r3,0(r2)
    cfcc:	00000606 	br	cfe8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    cfd0:	e0fff817 	ldw	r3,-32(fp)
    cfd4:	e0bffd17 	ldw	r2,-12(fp)
    cfd8:	1880071e 	bne	r3,r2,cff8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    cfdc:	e0bfff17 	ldw	r2,-4(fp)
    cfe0:	1090000c 	andi	r2,r2,16384
    cfe4:	1000061e 	bne	r2,zero,d000 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    cfe8:	e0fff817 	ldw	r3,-32(fp)
    cfec:	e0bffa17 	ldw	r2,-24(fp)
    cff0:	18bfeb36 	bltu	r3,r2,cfa0 <_gp+0xffff6868>
    cff4:	00000306 	br	d004 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    cff8:	0001883a 	nop
    cffc:	00000106 	br	d004 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    d000:	0001883a 	nop
    
  }

  if (ptr != buffer)
    d004:	e0fff817 	ldw	r3,-32(fp)
    d008:	e0bffd17 	ldw	r2,-12(fp)
    d00c:	18800426 	beq	r3,r2,d020 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    d010:	e0fff817 	ldw	r3,-32(fp)
    d014:	e0bffd17 	ldw	r2,-12(fp)
    d018:	1885c83a 	sub	r2,r3,r2
    d01c:	00000606 	br	d038 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    d020:	e0bfff17 	ldw	r2,-4(fp)
    d024:	1090000c 	andi	r2,r2,16384
    d028:	10000226 	beq	r2,zero,d034 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    d02c:	00bffd44 	movi	r2,-11
    d030:	00000106 	br	d038 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    d034:	00bffec4 	movi	r2,-5
}
    d038:	e037883a 	mov	sp,fp
    d03c:	df000017 	ldw	fp,0(sp)
    d040:	dec00104 	addi	sp,sp,4
    d044:	f800283a 	ret

0000d048 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    d048:	defff904 	addi	sp,sp,-28
    d04c:	df000615 	stw	fp,24(sp)
    d050:	df000604 	addi	fp,sp,24
    d054:	e13ffc15 	stw	r4,-16(fp)
    d058:	e17ffd15 	stw	r5,-12(fp)
    d05c:	e1bffe15 	stw	r6,-8(fp)
    d060:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    d064:	e0bffc17 	ldw	r2,-16(fp)
    d068:	10800017 	ldw	r2,0(r2)
    d06c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    d070:	e0bffe17 	ldw	r2,-8(fp)
    d074:	e0fffd17 	ldw	r3,-12(fp)
    d078:	1885883a 	add	r2,r3,r2
    d07c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    d080:	00000e06 	br	d0bc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    d084:	e0bffa17 	ldw	r2,-24(fp)
    d088:	10800104 	addi	r2,r2,4
    d08c:	10800037 	ldwio	r2,0(r2)
    d090:	10bfffec 	andhi	r2,r2,65535
    d094:	10000926 	beq	r2,zero,d0bc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    d098:	e0fffa17 	ldw	r3,-24(fp)
    d09c:	e0bffd17 	ldw	r2,-12(fp)
    d0a0:	11000044 	addi	r4,r2,1
    d0a4:	e13ffd15 	stw	r4,-12(fp)
    d0a8:	10800003 	ldbu	r2,0(r2)
    d0ac:	10803fcc 	andi	r2,r2,255
    d0b0:	1080201c 	xori	r2,r2,128
    d0b4:	10bfe004 	addi	r2,r2,-128
    d0b8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    d0bc:	e0fffd17 	ldw	r3,-12(fp)
    d0c0:	e0bffb17 	ldw	r2,-20(fp)
    d0c4:	18bfef36 	bltu	r3,r2,d084 <_gp+0xffff694c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    d0c8:	e0bffe17 	ldw	r2,-8(fp)
}
    d0cc:	e037883a 	mov	sp,fp
    d0d0:	df000017 	ldw	fp,0(sp)
    d0d4:	dec00104 	addi	sp,sp,4
    d0d8:	f800283a 	ret

0000d0dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d0dc:	defff904 	addi	sp,sp,-28
    d0e0:	dfc00615 	stw	ra,24(sp)
    d0e4:	df000515 	stw	fp,20(sp)
    d0e8:	df000504 	addi	fp,sp,20
    d0ec:	e13ffe15 	stw	r4,-8(fp)
    d0f0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d0f4:	0007883a 	mov	r3,zero
    d0f8:	e0bffe17 	ldw	r2,-8(fp)
    d0fc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d100:	e0bffe17 	ldw	r2,-8(fp)
    d104:	10800104 	addi	r2,r2,4
    d108:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d10c:	0005303a 	rdctl	r2,status
    d110:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d114:	e0fffc17 	ldw	r3,-16(fp)
    d118:	00bfff84 	movi	r2,-2
    d11c:	1884703a 	and	r2,r3,r2
    d120:	1001703a 	wrctl	status,r2
  
  return context;
    d124:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d128:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    d12c:	000dc200 	call	dc20 <alt_tick>
    d130:	e0bffb17 	ldw	r2,-20(fp)
    d134:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d138:	e0bffd17 	ldw	r2,-12(fp)
    d13c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d140:	0001883a 	nop
    d144:	e037883a 	mov	sp,fp
    d148:	dfc00117 	ldw	ra,4(sp)
    d14c:	df000017 	ldw	fp,0(sp)
    d150:	dec00204 	addi	sp,sp,8
    d154:	f800283a 	ret

0000d158 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d158:	defff904 	addi	sp,sp,-28
    d15c:	dfc00615 	stw	ra,24(sp)
    d160:	df000515 	stw	fp,20(sp)
    d164:	df000504 	addi	fp,sp,20
    d168:	e13ffc15 	stw	r4,-16(fp)
    d16c:	e17ffd15 	stw	r5,-12(fp)
    d170:	e1bffe15 	stw	r6,-8(fp)
    d174:	e1ffff15 	stw	r7,-4(fp)
    d178:	e0bfff17 	ldw	r2,-4(fp)
    d17c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    d180:	d0a0eb17 	ldw	r2,-31828(gp)
    d184:	1000021e 	bne	r2,zero,d190 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    d188:	e0bffb17 	ldw	r2,-20(fp)
    d18c:	d0a0eb15 	stw	r2,-31828(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    d190:	e0bffc17 	ldw	r2,-16(fp)
    d194:	10800104 	addi	r2,r2,4
    d198:	00c001c4 	movi	r3,7
    d19c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    d1a0:	01800074 	movhi	r6,1
    d1a4:	31b43704 	addi	r6,r6,-12068
    d1a8:	e17ffc17 	ldw	r5,-16(fp)
    d1ac:	e13ffe17 	ldw	r4,-8(fp)
    d1b0:	000c9c00 	call	c9c0 <alt_irq_register>
#endif  
}
    d1b4:	0001883a 	nop
    d1b8:	e037883a 	mov	sp,fp
    d1bc:	dfc00117 	ldw	ra,4(sp)
    d1c0:	df000017 	ldw	fp,0(sp)
    d1c4:	dec00204 	addi	sp,sp,8
    d1c8:	f800283a 	ret

0000d1cc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d1cc:	defffa04 	addi	sp,sp,-24
    d1d0:	dfc00515 	stw	ra,20(sp)
    d1d4:	df000415 	stw	fp,16(sp)
    d1d8:	df000404 	addi	fp,sp,16
    d1dc:	e13ffd15 	stw	r4,-12(fp)
    d1e0:	e17ffe15 	stw	r5,-8(fp)
    d1e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    d1e8:	e0bffd17 	ldw	r2,-12(fp)
    d1ec:	10800017 	ldw	r2,0(r2)
    d1f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    d1f4:	e0bffc17 	ldw	r2,-16(fp)
    d1f8:	10c00a04 	addi	r3,r2,40
    d1fc:	e0bffd17 	ldw	r2,-12(fp)
    d200:	10800217 	ldw	r2,8(r2)
    d204:	100f883a 	mov	r7,r2
    d208:	e1bfff17 	ldw	r6,-4(fp)
    d20c:	e17ffe17 	ldw	r5,-8(fp)
    d210:	1809883a 	mov	r4,r3
    d214:	000d2c80 	call	d2c8 <altera_avalon_uart_read>
      fd->fd_flags);
}
    d218:	e037883a 	mov	sp,fp
    d21c:	dfc00117 	ldw	ra,4(sp)
    d220:	df000017 	ldw	fp,0(sp)
    d224:	dec00204 	addi	sp,sp,8
    d228:	f800283a 	ret

0000d22c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d22c:	defffa04 	addi	sp,sp,-24
    d230:	dfc00515 	stw	ra,20(sp)
    d234:	df000415 	stw	fp,16(sp)
    d238:	df000404 	addi	fp,sp,16
    d23c:	e13ffd15 	stw	r4,-12(fp)
    d240:	e17ffe15 	stw	r5,-8(fp)
    d244:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    d248:	e0bffd17 	ldw	r2,-12(fp)
    d24c:	10800017 	ldw	r2,0(r2)
    d250:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    d254:	e0bffc17 	ldw	r2,-16(fp)
    d258:	10c00a04 	addi	r3,r2,40
    d25c:	e0bffd17 	ldw	r2,-12(fp)
    d260:	10800217 	ldw	r2,8(r2)
    d264:	100f883a 	mov	r7,r2
    d268:	e1bfff17 	ldw	r6,-4(fp)
    d26c:	e17ffe17 	ldw	r5,-8(fp)
    d270:	1809883a 	mov	r4,r3
    d274:	000d3c80 	call	d3c8 <altera_avalon_uart_write>
      fd->fd_flags);
}
    d278:	e037883a 	mov	sp,fp
    d27c:	dfc00117 	ldw	ra,4(sp)
    d280:	df000017 	ldw	fp,0(sp)
    d284:	dec00204 	addi	sp,sp,8
    d288:	f800283a 	ret

0000d28c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d28c:	defffe04 	addi	sp,sp,-8
    d290:	dfc00115 	stw	ra,4(sp)
    d294:	df000015 	stw	fp,0(sp)
    d298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d29c:	d0a01017 	ldw	r2,-32704(gp)
    d2a0:	10000326 	beq	r2,zero,d2b0 <alt_get_errno+0x24>
    d2a4:	d0a01017 	ldw	r2,-32704(gp)
    d2a8:	103ee83a 	callr	r2
    d2ac:	00000106 	br	d2b4 <alt_get_errno+0x28>
    d2b0:	d0a0e604 	addi	r2,gp,-31848
}
    d2b4:	e037883a 	mov	sp,fp
    d2b8:	dfc00117 	ldw	ra,4(sp)
    d2bc:	df000017 	ldw	fp,0(sp)
    d2c0:	dec00204 	addi	sp,sp,8
    d2c4:	f800283a 	ret

0000d2c8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    d2c8:	defff804 	addi	sp,sp,-32
    d2cc:	dfc00715 	stw	ra,28(sp)
    d2d0:	df000615 	stw	fp,24(sp)
    d2d4:	df000604 	addi	fp,sp,24
    d2d8:	e13ffc15 	stw	r4,-16(fp)
    d2dc:	e17ffd15 	stw	r5,-12(fp)
    d2e0:	e1bffe15 	stw	r6,-8(fp)
    d2e4:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    d2e8:	e0bfff17 	ldw	r2,-4(fp)
    d2ec:	1090000c 	andi	r2,r2,16384
    d2f0:	1005003a 	cmpeq	r2,r2,zero
    d2f4:	10803fcc 	andi	r2,r2,255
    d2f8:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    d2fc:	e0bffc17 	ldw	r2,-16(fp)
    d300:	10800017 	ldw	r2,0(r2)
    d304:	10800204 	addi	r2,r2,8
    d308:	10800037 	ldwio	r2,0(r2)
    d30c:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    d310:	e0bffc17 	ldw	r2,-16(fp)
    d314:	10800017 	ldw	r2,0(r2)
    d318:	10800204 	addi	r2,r2,8
    d31c:	0007883a 	mov	r3,zero
    d320:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    d324:	e0bffb17 	ldw	r2,-20(fp)
    d328:	1080200c 	andi	r2,r2,128
    d32c:	10000b26 	beq	r2,zero,d35c <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    d330:	e0bffc17 	ldw	r2,-16(fp)
    d334:	10800017 	ldw	r2,0(r2)
    d338:	10800037 	ldwio	r2,0(r2)
    d33c:	1007883a 	mov	r3,r2
    d340:	e0bffd17 	ldw	r2,-12(fp)
    d344:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    d348:	e0bffb17 	ldw	r2,-20(fp)
    d34c:	108000cc 	andi	r2,r2,3
    d350:	1000021e 	bne	r2,zero,d35c <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    d354:	00800044 	movi	r2,1
    d358:	00000706 	br	d378 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
    d35c:	e0bffa17 	ldw	r2,-24(fp)
    d360:	103fe61e 	bne	r2,zero,d2fc <_gp+0xffff6bc4>

  ALT_ERRNO = EWOULDBLOCK;
    d364:	000d28c0 	call	d28c <alt_get_errno>
    d368:	1007883a 	mov	r3,r2
    d36c:	008002c4 	movi	r2,11
    d370:	18800015 	stw	r2,0(r3)
 
  return 0;
    d374:	0005883a 	mov	r2,zero
}
    d378:	e037883a 	mov	sp,fp
    d37c:	dfc00117 	ldw	ra,4(sp)
    d380:	df000017 	ldw	fp,0(sp)
    d384:	dec00204 	addi	sp,sp,8
    d388:	f800283a 	ret

0000d38c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d38c:	defffe04 	addi	sp,sp,-8
    d390:	dfc00115 	stw	ra,4(sp)
    d394:	df000015 	stw	fp,0(sp)
    d398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d39c:	d0a01017 	ldw	r2,-32704(gp)
    d3a0:	10000326 	beq	r2,zero,d3b0 <alt_get_errno+0x24>
    d3a4:	d0a01017 	ldw	r2,-32704(gp)
    d3a8:	103ee83a 	callr	r2
    d3ac:	00000106 	br	d3b4 <alt_get_errno+0x28>
    d3b0:	d0a0e604 	addi	r2,gp,-31848
}
    d3b4:	e037883a 	mov	sp,fp
    d3b8:	dfc00117 	ldw	ra,4(sp)
    d3bc:	df000017 	ldw	fp,0(sp)
    d3c0:	dec00204 	addi	sp,sp,8
    d3c4:	f800283a 	ret

0000d3c8 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    d3c8:	defff704 	addi	sp,sp,-36
    d3cc:	dfc00815 	stw	ra,32(sp)
    d3d0:	df000715 	stw	fp,28(sp)
    d3d4:	df000704 	addi	fp,sp,28
    d3d8:	e13ffc15 	stw	r4,-16(fp)
    d3dc:	e17ffd15 	stw	r5,-12(fp)
    d3e0:	e1bffe15 	stw	r6,-8(fp)
    d3e4:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    d3e8:	e0bfff17 	ldw	r2,-4(fp)
    d3ec:	1090000c 	andi	r2,r2,16384
    d3f0:	1005003a 	cmpeq	r2,r2,zero
    d3f4:	10803fcc 	andi	r2,r2,255
    d3f8:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    d3fc:	e0bffe17 	ldw	r2,-8(fp)
    d400:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    d404:	e0bffc17 	ldw	r2,-16(fp)
    d408:	10800017 	ldw	r2,0(r2)
    d40c:	10800204 	addi	r2,r2,8
    d410:	10800037 	ldwio	r2,0(r2)
    d414:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    d418:	e0bffb17 	ldw	r2,-20(fp)
    d41c:	1080100c 	andi	r2,r2,64
    d420:	10000f26 	beq	r2,zero,d460 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    d424:	e0bffc17 	ldw	r2,-16(fp)
    d428:	10800017 	ldw	r2,0(r2)
    d42c:	10800104 	addi	r2,r2,4
    d430:	1009883a 	mov	r4,r2
    d434:	e0bffd17 	ldw	r2,-12(fp)
    d438:	10c00044 	addi	r3,r2,1
    d43c:	e0fffd15 	stw	r3,-12(fp)
    d440:	10800003 	ldbu	r2,0(r2)
    d444:	10803fcc 	andi	r2,r2,255
    d448:	1080201c 	xori	r2,r2,128
    d44c:	10bfe004 	addi	r2,r2,-128
    d450:	20800035 	stwio	r2,0(r4)
      count--;
    d454:	e0bff917 	ldw	r2,-28(fp)
    d458:	10bfffc4 	addi	r2,r2,-1
    d45c:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    d460:	e0bffa17 	ldw	r2,-24(fp)
    d464:	10000226 	beq	r2,zero,d470 <altera_avalon_uart_write+0xa8>
    d468:	e0bff917 	ldw	r2,-28(fp)
    d46c:	103fe51e 	bne	r2,zero,d404 <_gp+0xffff6ccc>

  if (count)
    d470:	e0bff917 	ldw	r2,-28(fp)
    d474:	10000426 	beq	r2,zero,d488 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
    d478:	000d38c0 	call	d38c <alt_get_errno>
    d47c:	1007883a 	mov	r3,r2
    d480:	008002c4 	movi	r2,11
    d484:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
    d488:	e0fffe17 	ldw	r3,-8(fp)
    d48c:	e0bff917 	ldw	r2,-28(fp)
    d490:	1885c83a 	sub	r2,r3,r2
}
    d494:	e037883a 	mov	sp,fp
    d498:	dfc00117 	ldw	ra,4(sp)
    d49c:	df000017 	ldw	fp,0(sp)
    d4a0:	dec00204 	addi	sp,sp,8
    d4a4:	f800283a 	ret

0000d4a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d4a8:	defffe04 	addi	sp,sp,-8
    d4ac:	dfc00115 	stw	ra,4(sp)
    d4b0:	df000015 	stw	fp,0(sp)
    d4b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d4b8:	d0a01017 	ldw	r2,-32704(gp)
    d4bc:	10000326 	beq	r2,zero,d4cc <alt_get_errno+0x24>
    d4c0:	d0a01017 	ldw	r2,-32704(gp)
    d4c4:	103ee83a 	callr	r2
    d4c8:	00000106 	br	d4d0 <alt_get_errno+0x28>
    d4cc:	d0a0e604 	addi	r2,gp,-31848
}
    d4d0:	e037883a 	mov	sp,fp
    d4d4:	dfc00117 	ldw	ra,4(sp)
    d4d8:	df000017 	ldw	fp,0(sp)
    d4dc:	dec00204 	addi	sp,sp,8
    d4e0:	f800283a 	ret

0000d4e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d4e4:	defffb04 	addi	sp,sp,-20
    d4e8:	dfc00415 	stw	ra,16(sp)
    d4ec:	df000315 	stw	fp,12(sp)
    d4f0:	df000304 	addi	fp,sp,12
    d4f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d4f8:	e0bfff17 	ldw	r2,-4(fp)
    d4fc:	10000816 	blt	r2,zero,d520 <close+0x3c>
    d500:	01400304 	movi	r5,12
    d504:	e13fff17 	ldw	r4,-4(fp)
    d508:	0009a080 	call	9a08 <__mulsi3>
    d50c:	1007883a 	mov	r3,r2
    d510:	00800074 	movhi	r2,1
    d514:	10b96e04 	addi	r2,r2,-6728
    d518:	1885883a 	add	r2,r3,r2
    d51c:	00000106 	br	d524 <close+0x40>
    d520:	0005883a 	mov	r2,zero
    d524:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d528:	e0bffd17 	ldw	r2,-12(fp)
    d52c:	10001926 	beq	r2,zero,d594 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d530:	e0bffd17 	ldw	r2,-12(fp)
    d534:	10800017 	ldw	r2,0(r2)
    d538:	10800417 	ldw	r2,16(r2)
    d53c:	10000626 	beq	r2,zero,d558 <close+0x74>
    d540:	e0bffd17 	ldw	r2,-12(fp)
    d544:	10800017 	ldw	r2,0(r2)
    d548:	10800417 	ldw	r2,16(r2)
    d54c:	e13ffd17 	ldw	r4,-12(fp)
    d550:	103ee83a 	callr	r2
    d554:	00000106 	br	d55c <close+0x78>
    d558:	0005883a 	mov	r2,zero
    d55c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d560:	e13fff17 	ldw	r4,-4(fp)
    d564:	000db000 	call	db00 <alt_release_fd>
    if (rval < 0)
    d568:	e0bffe17 	ldw	r2,-8(fp)
    d56c:	1000070e 	bge	r2,zero,d58c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d570:	000d4a80 	call	d4a8 <alt_get_errno>
    d574:	1007883a 	mov	r3,r2
    d578:	e0bffe17 	ldw	r2,-8(fp)
    d57c:	0085c83a 	sub	r2,zero,r2
    d580:	18800015 	stw	r2,0(r3)
      return -1;
    d584:	00bfffc4 	movi	r2,-1
    d588:	00000706 	br	d5a8 <close+0xc4>
    }
    return 0;
    d58c:	0005883a 	mov	r2,zero
    d590:	00000506 	br	d5a8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d594:	000d4a80 	call	d4a8 <alt_get_errno>
    d598:	1007883a 	mov	r3,r2
    d59c:	00801444 	movi	r2,81
    d5a0:	18800015 	stw	r2,0(r3)
    return -1;
    d5a4:	00bfffc4 	movi	r2,-1
  }
}
    d5a8:	e037883a 	mov	sp,fp
    d5ac:	dfc00117 	ldw	ra,4(sp)
    d5b0:	df000017 	ldw	fp,0(sp)
    d5b4:	dec00204 	addi	sp,sp,8
    d5b8:	f800283a 	ret

0000d5bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d5bc:	deffff04 	addi	sp,sp,-4
    d5c0:	df000015 	stw	fp,0(sp)
    d5c4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d5c8:	0001883a 	nop
    d5cc:	e037883a 	mov	sp,fp
    d5d0:	df000017 	ldw	fp,0(sp)
    d5d4:	dec00104 	addi	sp,sp,4
    d5d8:	f800283a 	ret

0000d5dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d5dc:	defffc04 	addi	sp,sp,-16
    d5e0:	df000315 	stw	fp,12(sp)
    d5e4:	df000304 	addi	fp,sp,12
    d5e8:	e13ffd15 	stw	r4,-12(fp)
    d5ec:	e17ffe15 	stw	r5,-8(fp)
    d5f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d5f4:	e0bfff17 	ldw	r2,-4(fp)
}
    d5f8:	e037883a 	mov	sp,fp
    d5fc:	df000017 	ldw	fp,0(sp)
    d600:	dec00104 	addi	sp,sp,4
    d604:	f800283a 	ret

0000d608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d608:	defffe04 	addi	sp,sp,-8
    d60c:	dfc00115 	stw	ra,4(sp)
    d610:	df000015 	stw	fp,0(sp)
    d614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d618:	d0a01017 	ldw	r2,-32704(gp)
    d61c:	10000326 	beq	r2,zero,d62c <alt_get_errno+0x24>
    d620:	d0a01017 	ldw	r2,-32704(gp)
    d624:	103ee83a 	callr	r2
    d628:	00000106 	br	d630 <alt_get_errno+0x28>
    d62c:	d0a0e604 	addi	r2,gp,-31848
}
    d630:	e037883a 	mov	sp,fp
    d634:	dfc00117 	ldw	ra,4(sp)
    d638:	df000017 	ldw	fp,0(sp)
    d63c:	dec00204 	addi	sp,sp,8
    d640:	f800283a 	ret

0000d644 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d644:	defffa04 	addi	sp,sp,-24
    d648:	dfc00515 	stw	ra,20(sp)
    d64c:	df000415 	stw	fp,16(sp)
    d650:	df000404 	addi	fp,sp,16
    d654:	e13ffe15 	stw	r4,-8(fp)
    d658:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d65c:	e0bffe17 	ldw	r2,-8(fp)
    d660:	10000326 	beq	r2,zero,d670 <alt_dev_llist_insert+0x2c>
    d664:	e0bffe17 	ldw	r2,-8(fp)
    d668:	10800217 	ldw	r2,8(r2)
    d66c:	1000061e 	bne	r2,zero,d688 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    d670:	000d6080 	call	d608 <alt_get_errno>
    d674:	1007883a 	mov	r3,r2
    d678:	00800584 	movi	r2,22
    d67c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d680:	00bffa84 	movi	r2,-22
    d684:	00001306 	br	d6d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d688:	e0bffe17 	ldw	r2,-8(fp)
    d68c:	e0ffff17 	ldw	r3,-4(fp)
    d690:	e0fffc15 	stw	r3,-16(fp)
    d694:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d698:	e0bffd17 	ldw	r2,-12(fp)
    d69c:	e0fffc17 	ldw	r3,-16(fp)
    d6a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    d6a4:	e0bffc17 	ldw	r2,-16(fp)
    d6a8:	10c00017 	ldw	r3,0(r2)
    d6ac:	e0bffd17 	ldw	r2,-12(fp)
    d6b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d6b4:	e0bffc17 	ldw	r2,-16(fp)
    d6b8:	10800017 	ldw	r2,0(r2)
    d6bc:	e0fffd17 	ldw	r3,-12(fp)
    d6c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    d6c4:	e0bffc17 	ldw	r2,-16(fp)
    d6c8:	e0fffd17 	ldw	r3,-12(fp)
    d6cc:	10c00015 	stw	r3,0(r2)

  return 0;  
    d6d0:	0005883a 	mov	r2,zero
}
    d6d4:	e037883a 	mov	sp,fp
    d6d8:	dfc00117 	ldw	ra,4(sp)
    d6dc:	df000017 	ldw	fp,0(sp)
    d6e0:	dec00204 	addi	sp,sp,8
    d6e4:	f800283a 	ret

0000d6e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d6e8:	defffe04 	addi	sp,sp,-8
    d6ec:	dfc00115 	stw	ra,4(sp)
    d6f0:	df000015 	stw	fp,0(sp)
    d6f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    d6f8:	01420004 	movi	r5,2048
    d6fc:	0009883a 	mov	r4,zero
    d700:	000dfa80 	call	dfa8 <alt_icache_flush>
#endif
}
    d704:	0001883a 	nop
    d708:	e037883a 	mov	sp,fp
    d70c:	dfc00117 	ldw	ra,4(sp)
    d710:	df000017 	ldw	fp,0(sp)
    d714:	dec00204 	addi	sp,sp,8
    d718:	f800283a 	ret

0000d71c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d71c:	defff804 	addi	sp,sp,-32
    d720:	dfc00715 	stw	ra,28(sp)
    d724:	df000615 	stw	fp,24(sp)
    d728:	dc000515 	stw	r16,20(sp)
    d72c:	df000604 	addi	fp,sp,24
    d730:	e13ffb15 	stw	r4,-20(fp)
    d734:	e17ffc15 	stw	r5,-16(fp)
    d738:	e1bffd15 	stw	r6,-12(fp)
    d73c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    d740:	e1bffe17 	ldw	r6,-8(fp)
    d744:	e17ffd17 	ldw	r5,-12(fp)
    d748:	e13ffc17 	ldw	r4,-16(fp)
    d74c:	000d9a40 	call	d9a4 <open>
    d750:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    d754:	e0bffa17 	ldw	r2,-24(fp)
    d758:	10002216 	blt	r2,zero,d7e4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    d75c:	04000074 	movhi	r16,1
    d760:	84396e04 	addi	r16,r16,-6728
    d764:	e0bffa17 	ldw	r2,-24(fp)
    d768:	01400304 	movi	r5,12
    d76c:	1009883a 	mov	r4,r2
    d770:	0009a080 	call	9a08 <__mulsi3>
    d774:	8085883a 	add	r2,r16,r2
    d778:	10c00017 	ldw	r3,0(r2)
    d77c:	e0bffb17 	ldw	r2,-20(fp)
    d780:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d784:	04000074 	movhi	r16,1
    d788:	84396e04 	addi	r16,r16,-6728
    d78c:	e0bffa17 	ldw	r2,-24(fp)
    d790:	01400304 	movi	r5,12
    d794:	1009883a 	mov	r4,r2
    d798:	0009a080 	call	9a08 <__mulsi3>
    d79c:	8085883a 	add	r2,r16,r2
    d7a0:	10800104 	addi	r2,r2,4
    d7a4:	10c00017 	ldw	r3,0(r2)
    d7a8:	e0bffb17 	ldw	r2,-20(fp)
    d7ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d7b0:	04000074 	movhi	r16,1
    d7b4:	84396e04 	addi	r16,r16,-6728
    d7b8:	e0bffa17 	ldw	r2,-24(fp)
    d7bc:	01400304 	movi	r5,12
    d7c0:	1009883a 	mov	r4,r2
    d7c4:	0009a080 	call	9a08 <__mulsi3>
    d7c8:	8085883a 	add	r2,r16,r2
    d7cc:	10800204 	addi	r2,r2,8
    d7d0:	10c00017 	ldw	r3,0(r2)
    d7d4:	e0bffb17 	ldw	r2,-20(fp)
    d7d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d7dc:	e13ffa17 	ldw	r4,-24(fp)
    d7e0:	000db000 	call	db00 <alt_release_fd>
  }
} 
    d7e4:	0001883a 	nop
    d7e8:	e6ffff04 	addi	sp,fp,-4
    d7ec:	dfc00217 	ldw	ra,8(sp)
    d7f0:	df000117 	ldw	fp,4(sp)
    d7f4:	dc000017 	ldw	r16,0(sp)
    d7f8:	dec00304 	addi	sp,sp,12
    d7fc:	f800283a 	ret

0000d800 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d800:	defffb04 	addi	sp,sp,-20
    d804:	dfc00415 	stw	ra,16(sp)
    d808:	df000315 	stw	fp,12(sp)
    d80c:	df000304 	addi	fp,sp,12
    d810:	e13ffd15 	stw	r4,-12(fp)
    d814:	e17ffe15 	stw	r5,-8(fp)
    d818:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d81c:	01c07fc4 	movi	r7,511
    d820:	01800044 	movi	r6,1
    d824:	e17ffd17 	ldw	r5,-12(fp)
    d828:	01000074 	movhi	r4,1
    d82c:	21397104 	addi	r4,r4,-6716
    d830:	000d71c0 	call	d71c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d834:	01c07fc4 	movi	r7,511
    d838:	000d883a 	mov	r6,zero
    d83c:	e17ffe17 	ldw	r5,-8(fp)
    d840:	01000074 	movhi	r4,1
    d844:	21396e04 	addi	r4,r4,-6728
    d848:	000d71c0 	call	d71c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d84c:	01c07fc4 	movi	r7,511
    d850:	01800044 	movi	r6,1
    d854:	e17fff17 	ldw	r5,-4(fp)
    d858:	01000074 	movhi	r4,1
    d85c:	21397404 	addi	r4,r4,-6704
    d860:	000d71c0 	call	d71c <alt_open_fd>
}  
    d864:	0001883a 	nop
    d868:	e037883a 	mov	sp,fp
    d86c:	dfc00117 	ldw	ra,4(sp)
    d870:	df000017 	ldw	fp,0(sp)
    d874:	dec00204 	addi	sp,sp,8
    d878:	f800283a 	ret

0000d87c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d87c:	defffe04 	addi	sp,sp,-8
    d880:	dfc00115 	stw	ra,4(sp)
    d884:	df000015 	stw	fp,0(sp)
    d888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d88c:	d0a01017 	ldw	r2,-32704(gp)
    d890:	10000326 	beq	r2,zero,d8a0 <alt_get_errno+0x24>
    d894:	d0a01017 	ldw	r2,-32704(gp)
    d898:	103ee83a 	callr	r2
    d89c:	00000106 	br	d8a4 <alt_get_errno+0x28>
    d8a0:	d0a0e604 	addi	r2,gp,-31848
}
    d8a4:	e037883a 	mov	sp,fp
    d8a8:	dfc00117 	ldw	ra,4(sp)
    d8ac:	df000017 	ldw	fp,0(sp)
    d8b0:	dec00204 	addi	sp,sp,8
    d8b4:	f800283a 	ret

0000d8b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d8b8:	defffb04 	addi	sp,sp,-20
    d8bc:	dfc00415 	stw	ra,16(sp)
    d8c0:	df000315 	stw	fp,12(sp)
    d8c4:	dc000215 	stw	r16,8(sp)
    d8c8:	df000304 	addi	fp,sp,12
    d8cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d8d0:	e0bffe17 	ldw	r2,-8(fp)
    d8d4:	10800217 	ldw	r2,8(r2)
    d8d8:	10d00034 	orhi	r3,r2,16384
    d8dc:	e0bffe17 	ldw	r2,-8(fp)
    d8e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d8e4:	e03ffd15 	stw	zero,-12(fp)
    d8e8:	00002306 	br	d978 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d8ec:	04000074 	movhi	r16,1
    d8f0:	84396e04 	addi	r16,r16,-6728
    d8f4:	e0bffd17 	ldw	r2,-12(fp)
    d8f8:	01400304 	movi	r5,12
    d8fc:	1009883a 	mov	r4,r2
    d900:	0009a080 	call	9a08 <__mulsi3>
    d904:	8085883a 	add	r2,r16,r2
    d908:	10c00017 	ldw	r3,0(r2)
    d90c:	e0bffe17 	ldw	r2,-8(fp)
    d910:	10800017 	ldw	r2,0(r2)
    d914:	1880151e 	bne	r3,r2,d96c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d918:	04000074 	movhi	r16,1
    d91c:	84396e04 	addi	r16,r16,-6728
    d920:	e0bffd17 	ldw	r2,-12(fp)
    d924:	01400304 	movi	r5,12
    d928:	1009883a 	mov	r4,r2
    d92c:	0009a080 	call	9a08 <__mulsi3>
    d930:	8085883a 	add	r2,r16,r2
    d934:	10800204 	addi	r2,r2,8
    d938:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d93c:	10000b0e 	bge	r2,zero,d96c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    d940:	01400304 	movi	r5,12
    d944:	e13ffd17 	ldw	r4,-12(fp)
    d948:	0009a080 	call	9a08 <__mulsi3>
    d94c:	1007883a 	mov	r3,r2
    d950:	00800074 	movhi	r2,1
    d954:	10b96e04 	addi	r2,r2,-6728
    d958:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d95c:	e0bffe17 	ldw	r2,-8(fp)
    d960:	18800226 	beq	r3,r2,d96c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d964:	00bffcc4 	movi	r2,-13
    d968:	00000806 	br	d98c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d96c:	e0bffd17 	ldw	r2,-12(fp)
    d970:	10800044 	addi	r2,r2,1
    d974:	e0bffd15 	stw	r2,-12(fp)
    d978:	d0a00f17 	ldw	r2,-32708(gp)
    d97c:	1007883a 	mov	r3,r2
    d980:	e0bffd17 	ldw	r2,-12(fp)
    d984:	18bfd92e 	bgeu	r3,r2,d8ec <_gp+0xffff71b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d988:	0005883a 	mov	r2,zero
}
    d98c:	e6ffff04 	addi	sp,fp,-4
    d990:	dfc00217 	ldw	ra,8(sp)
    d994:	df000117 	ldw	fp,4(sp)
    d998:	dc000017 	ldw	r16,0(sp)
    d99c:	dec00304 	addi	sp,sp,12
    d9a0:	f800283a 	ret

0000d9a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d9a4:	defff604 	addi	sp,sp,-40
    d9a8:	dfc00915 	stw	ra,36(sp)
    d9ac:	df000815 	stw	fp,32(sp)
    d9b0:	df000804 	addi	fp,sp,32
    d9b4:	e13ffd15 	stw	r4,-12(fp)
    d9b8:	e17ffe15 	stw	r5,-8(fp)
    d9bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d9c0:	00bfffc4 	movi	r2,-1
    d9c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    d9c8:	00bffb44 	movi	r2,-19
    d9cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    d9d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d9d4:	d1600d04 	addi	r5,gp,-32716
    d9d8:	e13ffd17 	ldw	r4,-12(fp)
    d9dc:	000dd4c0 	call	dd4c <alt_find_dev>
    d9e0:	e0bff815 	stw	r2,-32(fp)
    d9e4:	e0bff817 	ldw	r2,-32(fp)
    d9e8:	1000051e 	bne	r2,zero,da00 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d9ec:	e13ffd17 	ldw	r4,-12(fp)
    d9f0:	000dddc0 	call	dddc <alt_find_file>
    d9f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    d9f8:	00800044 	movi	r2,1
    d9fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    da00:	e0bff817 	ldw	r2,-32(fp)
    da04:	10002b26 	beq	r2,zero,dab4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    da08:	e13ff817 	ldw	r4,-32(fp)
    da0c:	000dee40 	call	dee4 <alt_get_fd>
    da10:	e0bff915 	stw	r2,-28(fp)
    da14:	e0bff917 	ldw	r2,-28(fp)
    da18:	1000030e 	bge	r2,zero,da28 <open+0x84>
    {
      status = index;
    da1c:	e0bff917 	ldw	r2,-28(fp)
    da20:	e0bffa15 	stw	r2,-24(fp)
    da24:	00002506 	br	dabc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    da28:	01400304 	movi	r5,12
    da2c:	e13ff917 	ldw	r4,-28(fp)
    da30:	0009a080 	call	9a08 <__mulsi3>
    da34:	1007883a 	mov	r3,r2
    da38:	00800074 	movhi	r2,1
    da3c:	10b96e04 	addi	r2,r2,-6728
    da40:	1885883a 	add	r2,r3,r2
    da44:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    da48:	e0fffe17 	ldw	r3,-8(fp)
    da4c:	00900034 	movhi	r2,16384
    da50:	10bfffc4 	addi	r2,r2,-1
    da54:	1886703a 	and	r3,r3,r2
    da58:	e0bffc17 	ldw	r2,-16(fp)
    da5c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    da60:	e0bffb17 	ldw	r2,-20(fp)
    da64:	1000051e 	bne	r2,zero,da7c <open+0xd8>
    da68:	e13ffc17 	ldw	r4,-16(fp)
    da6c:	000d8b80 	call	d8b8 <alt_file_locked>
    da70:	e0bffa15 	stw	r2,-24(fp)
    da74:	e0bffa17 	ldw	r2,-24(fp)
    da78:	10001016 	blt	r2,zero,dabc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    da7c:	e0bff817 	ldw	r2,-32(fp)
    da80:	10800317 	ldw	r2,12(r2)
    da84:	10000826 	beq	r2,zero,daa8 <open+0x104>
    da88:	e0bff817 	ldw	r2,-32(fp)
    da8c:	10800317 	ldw	r2,12(r2)
    da90:	e1ffff17 	ldw	r7,-4(fp)
    da94:	e1bffe17 	ldw	r6,-8(fp)
    da98:	e17ffd17 	ldw	r5,-12(fp)
    da9c:	e13ffc17 	ldw	r4,-16(fp)
    daa0:	103ee83a 	callr	r2
    daa4:	00000106 	br	daac <open+0x108>
    daa8:	0005883a 	mov	r2,zero
    daac:	e0bffa15 	stw	r2,-24(fp)
    dab0:	00000206 	br	dabc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    dab4:	00bffb44 	movi	r2,-19
    dab8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    dabc:	e0bffa17 	ldw	r2,-24(fp)
    dac0:	1000090e 	bge	r2,zero,dae8 <open+0x144>
  {
    alt_release_fd (index);  
    dac4:	e13ff917 	ldw	r4,-28(fp)
    dac8:	000db000 	call	db00 <alt_release_fd>
    ALT_ERRNO = -status;
    dacc:	000d87c0 	call	d87c <alt_get_errno>
    dad0:	1007883a 	mov	r3,r2
    dad4:	e0bffa17 	ldw	r2,-24(fp)
    dad8:	0085c83a 	sub	r2,zero,r2
    dadc:	18800015 	stw	r2,0(r3)
    return -1;
    dae0:	00bfffc4 	movi	r2,-1
    dae4:	00000106 	br	daec <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    dae8:	e0bff917 	ldw	r2,-28(fp)
}
    daec:	e037883a 	mov	sp,fp
    daf0:	dfc00117 	ldw	ra,4(sp)
    daf4:	df000017 	ldw	fp,0(sp)
    daf8:	dec00204 	addi	sp,sp,8
    dafc:	f800283a 	ret

0000db00 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    db00:	defffc04 	addi	sp,sp,-16
    db04:	dfc00315 	stw	ra,12(sp)
    db08:	df000215 	stw	fp,8(sp)
    db0c:	dc000115 	stw	r16,4(sp)
    db10:	df000204 	addi	fp,sp,8
    db14:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    db18:	e0bffe17 	ldw	r2,-8(fp)
    db1c:	108000d0 	cmplti	r2,r2,3
    db20:	1000111e 	bne	r2,zero,db68 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    db24:	04000074 	movhi	r16,1
    db28:	84396e04 	addi	r16,r16,-6728
    db2c:	e0bffe17 	ldw	r2,-8(fp)
    db30:	01400304 	movi	r5,12
    db34:	1009883a 	mov	r4,r2
    db38:	0009a080 	call	9a08 <__mulsi3>
    db3c:	8085883a 	add	r2,r16,r2
    db40:	10800204 	addi	r2,r2,8
    db44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    db48:	04000074 	movhi	r16,1
    db4c:	84396e04 	addi	r16,r16,-6728
    db50:	e0bffe17 	ldw	r2,-8(fp)
    db54:	01400304 	movi	r5,12
    db58:	1009883a 	mov	r4,r2
    db5c:	0009a080 	call	9a08 <__mulsi3>
    db60:	8085883a 	add	r2,r16,r2
    db64:	10000015 	stw	zero,0(r2)
  }
}
    db68:	0001883a 	nop
    db6c:	e6ffff04 	addi	sp,fp,-4
    db70:	dfc00217 	ldw	ra,8(sp)
    db74:	df000117 	ldw	fp,4(sp)
    db78:	dc000017 	ldw	r16,0(sp)
    db7c:	dec00304 	addi	sp,sp,12
    db80:	f800283a 	ret

0000db84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    db84:	defffa04 	addi	sp,sp,-24
    db88:	df000515 	stw	fp,20(sp)
    db8c:	df000504 	addi	fp,sp,20
    db90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db94:	0005303a 	rdctl	r2,status
    db98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db9c:	e0fffc17 	ldw	r3,-16(fp)
    dba0:	00bfff84 	movi	r2,-2
    dba4:	1884703a 	and	r2,r3,r2
    dba8:	1001703a 	wrctl	status,r2
  
  return context;
    dbac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    dbb0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    dbb4:	e0bfff17 	ldw	r2,-4(fp)
    dbb8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    dbbc:	e0bffd17 	ldw	r2,-12(fp)
    dbc0:	10800017 	ldw	r2,0(r2)
    dbc4:	e0fffd17 	ldw	r3,-12(fp)
    dbc8:	18c00117 	ldw	r3,4(r3)
    dbcc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    dbd0:	e0bffd17 	ldw	r2,-12(fp)
    dbd4:	10800117 	ldw	r2,4(r2)
    dbd8:	e0fffd17 	ldw	r3,-12(fp)
    dbdc:	18c00017 	ldw	r3,0(r3)
    dbe0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    dbe4:	e0bffd17 	ldw	r2,-12(fp)
    dbe8:	e0fffd17 	ldw	r3,-12(fp)
    dbec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    dbf0:	e0bffd17 	ldw	r2,-12(fp)
    dbf4:	e0fffd17 	ldw	r3,-12(fp)
    dbf8:	10c00015 	stw	r3,0(r2)
    dbfc:	e0bffb17 	ldw	r2,-20(fp)
    dc00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc04:	e0bffe17 	ldw	r2,-8(fp)
    dc08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    dc0c:	0001883a 	nop
    dc10:	e037883a 	mov	sp,fp
    dc14:	df000017 	ldw	fp,0(sp)
    dc18:	dec00104 	addi	sp,sp,4
    dc1c:	f800283a 	ret

0000dc20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    dc20:	defffb04 	addi	sp,sp,-20
    dc24:	dfc00415 	stw	ra,16(sp)
    dc28:	df000315 	stw	fp,12(sp)
    dc2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    dc30:	d0a01117 	ldw	r2,-32700(gp)
    dc34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    dc38:	d0a0ec17 	ldw	r2,-31824(gp)
    dc3c:	10800044 	addi	r2,r2,1
    dc40:	d0a0ec15 	stw	r2,-31824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dc44:	00002e06 	br	dd00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    dc48:	e0bffd17 	ldw	r2,-12(fp)
    dc4c:	10800017 	ldw	r2,0(r2)
    dc50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    dc54:	e0bffd17 	ldw	r2,-12(fp)
    dc58:	10800403 	ldbu	r2,16(r2)
    dc5c:	10803fcc 	andi	r2,r2,255
    dc60:	10000426 	beq	r2,zero,dc74 <alt_tick+0x54>
    dc64:	d0a0ec17 	ldw	r2,-31824(gp)
    dc68:	1000021e 	bne	r2,zero,dc74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    dc6c:	e0bffd17 	ldw	r2,-12(fp)
    dc70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    dc74:	e0bffd17 	ldw	r2,-12(fp)
    dc78:	10800217 	ldw	r2,8(r2)
    dc7c:	d0e0ec17 	ldw	r3,-31824(gp)
    dc80:	18801d36 	bltu	r3,r2,dcf8 <alt_tick+0xd8>
    dc84:	e0bffd17 	ldw	r2,-12(fp)
    dc88:	10800403 	ldbu	r2,16(r2)
    dc8c:	10803fcc 	andi	r2,r2,255
    dc90:	1000191e 	bne	r2,zero,dcf8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    dc94:	e0bffd17 	ldw	r2,-12(fp)
    dc98:	10800317 	ldw	r2,12(r2)
    dc9c:	e0fffd17 	ldw	r3,-12(fp)
    dca0:	18c00517 	ldw	r3,20(r3)
    dca4:	1809883a 	mov	r4,r3
    dca8:	103ee83a 	callr	r2
    dcac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    dcb0:	e0bfff17 	ldw	r2,-4(fp)
    dcb4:	1000031e 	bne	r2,zero,dcc4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    dcb8:	e13ffd17 	ldw	r4,-12(fp)
    dcbc:	000db840 	call	db84 <alt_alarm_stop>
    dcc0:	00000d06 	br	dcf8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    dcc4:	e0bffd17 	ldw	r2,-12(fp)
    dcc8:	10c00217 	ldw	r3,8(r2)
    dccc:	e0bfff17 	ldw	r2,-4(fp)
    dcd0:	1887883a 	add	r3,r3,r2
    dcd4:	e0bffd17 	ldw	r2,-12(fp)
    dcd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    dcdc:	e0bffd17 	ldw	r2,-12(fp)
    dce0:	10c00217 	ldw	r3,8(r2)
    dce4:	d0a0ec17 	ldw	r2,-31824(gp)
    dce8:	1880032e 	bgeu	r3,r2,dcf8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    dcec:	e0bffd17 	ldw	r2,-12(fp)
    dcf0:	00c00044 	movi	r3,1
    dcf4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    dcf8:	e0bffe17 	ldw	r2,-8(fp)
    dcfc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dd00:	e0fffd17 	ldw	r3,-12(fp)
    dd04:	d0a01104 	addi	r2,gp,-32700
    dd08:	18bfcf1e 	bne	r3,r2,dc48 <_gp+0xffff7510>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    dd0c:	0001883a 	nop
}
    dd10:	0001883a 	nop
    dd14:	e037883a 	mov	sp,fp
    dd18:	dfc00117 	ldw	ra,4(sp)
    dd1c:	df000017 	ldw	fp,0(sp)
    dd20:	dec00204 	addi	sp,sp,8
    dd24:	f800283a 	ret

0000dd28 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    dd28:	deffff04 	addi	sp,sp,-4
    dd2c:	df000015 	stw	fp,0(sp)
    dd30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    dd34:	000170fa 	wrctl	ienable,zero
}
    dd38:	0001883a 	nop
    dd3c:	e037883a 	mov	sp,fp
    dd40:	df000017 	ldw	fp,0(sp)
    dd44:	dec00104 	addi	sp,sp,4
    dd48:	f800283a 	ret

0000dd4c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    dd4c:	defffa04 	addi	sp,sp,-24
    dd50:	dfc00515 	stw	ra,20(sp)
    dd54:	df000415 	stw	fp,16(sp)
    dd58:	df000404 	addi	fp,sp,16
    dd5c:	e13ffe15 	stw	r4,-8(fp)
    dd60:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    dd64:	e0bfff17 	ldw	r2,-4(fp)
    dd68:	10800017 	ldw	r2,0(r2)
    dd6c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    dd70:	e13ffe17 	ldw	r4,-8(fp)
    dd74:	000c2e00 	call	c2e0 <strlen>
    dd78:	10800044 	addi	r2,r2,1
    dd7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    dd80:	00000d06 	br	ddb8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    dd84:	e0bffc17 	ldw	r2,-16(fp)
    dd88:	10800217 	ldw	r2,8(r2)
    dd8c:	e0fffd17 	ldw	r3,-12(fp)
    dd90:	180d883a 	mov	r6,r3
    dd94:	e17ffe17 	ldw	r5,-8(fp)
    dd98:	1009883a 	mov	r4,r2
    dd9c:	000e0580 	call	e058 <memcmp>
    dda0:	1000021e 	bne	r2,zero,ddac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    dda4:	e0bffc17 	ldw	r2,-16(fp)
    dda8:	00000706 	br	ddc8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ddac:	e0bffc17 	ldw	r2,-16(fp)
    ddb0:	10800017 	ldw	r2,0(r2)
    ddb4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ddb8:	e0fffc17 	ldw	r3,-16(fp)
    ddbc:	e0bfff17 	ldw	r2,-4(fp)
    ddc0:	18bff01e 	bne	r3,r2,dd84 <_gp+0xffff764c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    ddc4:	0005883a 	mov	r2,zero
}
    ddc8:	e037883a 	mov	sp,fp
    ddcc:	dfc00117 	ldw	ra,4(sp)
    ddd0:	df000017 	ldw	fp,0(sp)
    ddd4:	dec00204 	addi	sp,sp,8
    ddd8:	f800283a 	ret

0000dddc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    dddc:	defffb04 	addi	sp,sp,-20
    dde0:	dfc00415 	stw	ra,16(sp)
    dde4:	df000315 	stw	fp,12(sp)
    dde8:	df000304 	addi	fp,sp,12
    ddec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ddf0:	d0a00b17 	ldw	r2,-32724(gp)
    ddf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ddf8:	00003106 	br	dec0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    ddfc:	e0bffd17 	ldw	r2,-12(fp)
    de00:	10800217 	ldw	r2,8(r2)
    de04:	1009883a 	mov	r4,r2
    de08:	000c2e00 	call	c2e0 <strlen>
    de0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    de10:	e0bffd17 	ldw	r2,-12(fp)
    de14:	10c00217 	ldw	r3,8(r2)
    de18:	e0bffe17 	ldw	r2,-8(fp)
    de1c:	10bfffc4 	addi	r2,r2,-1
    de20:	1885883a 	add	r2,r3,r2
    de24:	10800003 	ldbu	r2,0(r2)
    de28:	10803fcc 	andi	r2,r2,255
    de2c:	1080201c 	xori	r2,r2,128
    de30:	10bfe004 	addi	r2,r2,-128
    de34:	10800bd8 	cmpnei	r2,r2,47
    de38:	1000031e 	bne	r2,zero,de48 <alt_find_file+0x6c>
    {
      len -= 1;
    de3c:	e0bffe17 	ldw	r2,-8(fp)
    de40:	10bfffc4 	addi	r2,r2,-1
    de44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    de48:	e0bffe17 	ldw	r2,-8(fp)
    de4c:	e0ffff17 	ldw	r3,-4(fp)
    de50:	1885883a 	add	r2,r3,r2
    de54:	10800003 	ldbu	r2,0(r2)
    de58:	10803fcc 	andi	r2,r2,255
    de5c:	1080201c 	xori	r2,r2,128
    de60:	10bfe004 	addi	r2,r2,-128
    de64:	10800be0 	cmpeqi	r2,r2,47
    de68:	1000081e 	bne	r2,zero,de8c <alt_find_file+0xb0>
    de6c:	e0bffe17 	ldw	r2,-8(fp)
    de70:	e0ffff17 	ldw	r3,-4(fp)
    de74:	1885883a 	add	r2,r3,r2
    de78:	10800003 	ldbu	r2,0(r2)
    de7c:	10803fcc 	andi	r2,r2,255
    de80:	1080201c 	xori	r2,r2,128
    de84:	10bfe004 	addi	r2,r2,-128
    de88:	10000a1e 	bne	r2,zero,deb4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    de8c:	e0bffd17 	ldw	r2,-12(fp)
    de90:	10800217 	ldw	r2,8(r2)
    de94:	e0fffe17 	ldw	r3,-8(fp)
    de98:	180d883a 	mov	r6,r3
    de9c:	e17fff17 	ldw	r5,-4(fp)
    dea0:	1009883a 	mov	r4,r2
    dea4:	000e0580 	call	e058 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    dea8:	1000021e 	bne	r2,zero,deb4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    deac:	e0bffd17 	ldw	r2,-12(fp)
    deb0:	00000706 	br	ded0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    deb4:	e0bffd17 	ldw	r2,-12(fp)
    deb8:	10800017 	ldw	r2,0(r2)
    debc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    dec0:	e0fffd17 	ldw	r3,-12(fp)
    dec4:	d0a00b04 	addi	r2,gp,-32724
    dec8:	18bfcc1e 	bne	r3,r2,ddfc <_gp+0xffff76c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    decc:	0005883a 	mov	r2,zero
}
    ded0:	e037883a 	mov	sp,fp
    ded4:	dfc00117 	ldw	ra,4(sp)
    ded8:	df000017 	ldw	fp,0(sp)
    dedc:	dec00204 	addi	sp,sp,8
    dee0:	f800283a 	ret

0000dee4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    dee4:	defffa04 	addi	sp,sp,-24
    dee8:	dfc00515 	stw	ra,20(sp)
    deec:	df000415 	stw	fp,16(sp)
    def0:	dc000315 	stw	r16,12(sp)
    def4:	df000404 	addi	fp,sp,16
    def8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    defc:	00bffa04 	movi	r2,-24
    df00:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    df04:	e03ffc15 	stw	zero,-16(fp)
    df08:	00001d06 	br	df80 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    df0c:	04000074 	movhi	r16,1
    df10:	84396e04 	addi	r16,r16,-6728
    df14:	e0bffc17 	ldw	r2,-16(fp)
    df18:	01400304 	movi	r5,12
    df1c:	1009883a 	mov	r4,r2
    df20:	0009a080 	call	9a08 <__mulsi3>
    df24:	8085883a 	add	r2,r16,r2
    df28:	10800017 	ldw	r2,0(r2)
    df2c:	1000111e 	bne	r2,zero,df74 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    df30:	04000074 	movhi	r16,1
    df34:	84396e04 	addi	r16,r16,-6728
    df38:	e0bffc17 	ldw	r2,-16(fp)
    df3c:	01400304 	movi	r5,12
    df40:	1009883a 	mov	r4,r2
    df44:	0009a080 	call	9a08 <__mulsi3>
    df48:	8085883a 	add	r2,r16,r2
    df4c:	e0fffe17 	ldw	r3,-8(fp)
    df50:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    df54:	d0e00f17 	ldw	r3,-32708(gp)
    df58:	e0bffc17 	ldw	r2,-16(fp)
    df5c:	1880020e 	bge	r3,r2,df68 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    df60:	e0bffc17 	ldw	r2,-16(fp)
    df64:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
    df68:	e0bffc17 	ldw	r2,-16(fp)
    df6c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    df70:	00000606 	br	df8c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    df74:	e0bffc17 	ldw	r2,-16(fp)
    df78:	10800044 	addi	r2,r2,1
    df7c:	e0bffc15 	stw	r2,-16(fp)
    df80:	e0bffc17 	ldw	r2,-16(fp)
    df84:	10800810 	cmplti	r2,r2,32
    df88:	103fe01e 	bne	r2,zero,df0c <_gp+0xffff77d4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    df8c:	e0bffd17 	ldw	r2,-12(fp)
}
    df90:	e6ffff04 	addi	sp,fp,-4
    df94:	dfc00217 	ldw	ra,8(sp)
    df98:	df000117 	ldw	fp,4(sp)
    df9c:	dc000017 	ldw	r16,0(sp)
    dfa0:	dec00304 	addi	sp,sp,12
    dfa4:	f800283a 	ret

0000dfa8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    dfa8:	defffb04 	addi	sp,sp,-20
    dfac:	df000415 	stw	fp,16(sp)
    dfb0:	df000404 	addi	fp,sp,16
    dfb4:	e13ffe15 	stw	r4,-8(fp)
    dfb8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    dfbc:	e0bfff17 	ldw	r2,-4(fp)
    dfc0:	10820070 	cmpltui	r2,r2,2049
    dfc4:	1000021e 	bne	r2,zero,dfd0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    dfc8:	00820004 	movi	r2,2048
    dfcc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    dfd0:	e0fffe17 	ldw	r3,-8(fp)
    dfd4:	e0bfff17 	ldw	r2,-4(fp)
    dfd8:	1885883a 	add	r2,r3,r2
    dfdc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    dfe0:	e0bffe17 	ldw	r2,-8(fp)
    dfe4:	e0bffc15 	stw	r2,-16(fp)
    dfe8:	00000506 	br	e000 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    dfec:	e0bffc17 	ldw	r2,-16(fp)
    dff0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    dff4:	e0bffc17 	ldw	r2,-16(fp)
    dff8:	10800804 	addi	r2,r2,32
    dffc:	e0bffc15 	stw	r2,-16(fp)
    e000:	e0fffc17 	ldw	r3,-16(fp)
    e004:	e0bffd17 	ldw	r2,-12(fp)
    e008:	18bff836 	bltu	r3,r2,dfec <_gp+0xffff78b4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e00c:	e0bffe17 	ldw	r2,-8(fp)
    e010:	108007cc 	andi	r2,r2,31
    e014:	10000226 	beq	r2,zero,e020 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e018:	e0bffc17 	ldw	r2,-16(fp)
    e01c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e020:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e024:	0001883a 	nop
    e028:	e037883a 	mov	sp,fp
    e02c:	df000017 	ldw	fp,0(sp)
    e030:	dec00104 	addi	sp,sp,4
    e034:	f800283a 	ret

0000e038 <exit>:
    e038:	defffe04 	addi	sp,sp,-8
    e03c:	000b883a 	mov	r5,zero
    e040:	dc000015 	stw	r16,0(sp)
    e044:	dfc00115 	stw	ra,4(sp)
    e048:	2021883a 	mov	r16,r4
    e04c:	000e0880 	call	e088 <__call_exitprocs>
    e050:	8009883a 	mov	r4,r16
    e054:	000e2180 	call	e218 <_exit>

0000e058 <memcmp>:
    e058:	218d883a 	add	r6,r4,r6
    e05c:	21800826 	beq	r4,r6,e080 <memcmp+0x28>
    e060:	20800003 	ldbu	r2,0(r4)
    e064:	28c00003 	ldbu	r3,0(r5)
    e068:	10c00226 	beq	r2,r3,e074 <memcmp+0x1c>
    e06c:	10c5c83a 	sub	r2,r2,r3
    e070:	f800283a 	ret
    e074:	21000044 	addi	r4,r4,1
    e078:	29400044 	addi	r5,r5,1
    e07c:	003ff706 	br	e05c <_gp+0xffff7924>
    e080:	0005883a 	mov	r2,zero
    e084:	f800283a 	ret

0000e088 <__call_exitprocs>:
    e088:	defff504 	addi	sp,sp,-44
    e08c:	dd000515 	stw	r20,20(sp)
    e090:	05000074 	movhi	r20,1
    e094:	dc800315 	stw	r18,12(sp)
    e098:	dfc00a15 	stw	ra,40(sp)
    e09c:	df000915 	stw	fp,36(sp)
    e0a0:	ddc00815 	stw	r23,32(sp)
    e0a4:	dd800715 	stw	r22,28(sp)
    e0a8:	dd400615 	stw	r21,24(sp)
    e0ac:	dcc00415 	stw	r19,16(sp)
    e0b0:	dc400215 	stw	r17,8(sp)
    e0b4:	dc000115 	stw	r16,4(sp)
    e0b8:	d9000015 	stw	r4,0(sp)
    e0bc:	2825883a 	mov	r18,r5
    e0c0:	a539d604 	addi	r20,r20,-6312
    e0c4:	a4400017 	ldw	r17,0(r20)
    e0c8:	8cc00c17 	ldw	r19,48(r17)
    e0cc:	8c400c04 	addi	r17,r17,48
    e0d0:	98004526 	beq	r19,zero,e1e8 <__call_exitprocs+0x160>
    e0d4:	9c000117 	ldw	r16,4(r19)
    e0d8:	00900034 	movhi	r2,16384
    e0dc:	10bfffc4 	addi	r2,r2,-1
    e0e0:	9d402217 	ldw	r21,136(r19)
    e0e4:	85bfffc4 	addi	r22,r16,-1
    e0e8:	80a1883a 	add	r16,r16,r2
    e0ec:	8421883a 	add	r16,r16,r16
    e0f0:	8421883a 	add	r16,r16,r16
    e0f4:	ac2f883a 	add	r23,r21,r16
    e0f8:	84000204 	addi	r16,r16,8
    e0fc:	9c21883a 	add	r16,r19,r16
    e100:	b0002716 	blt	r22,zero,e1a0 <__call_exitprocs+0x118>
    e104:	90000726 	beq	r18,zero,e124 <__call_exitprocs+0x9c>
    e108:	a800041e 	bne	r21,zero,e11c <__call_exitprocs+0x94>
    e10c:	b5bfffc4 	addi	r22,r22,-1
    e110:	bdffff04 	addi	r23,r23,-4
    e114:	843fff04 	addi	r16,r16,-4
    e118:	003ff906 	br	e100 <_gp+0xffff79c8>
    e11c:	b9002017 	ldw	r4,128(r23)
    e120:	913ffa1e 	bne	r18,r4,e10c <_gp+0xffff79d4>
    e124:	99000117 	ldw	r4,4(r19)
    e128:	82000017 	ldw	r8,0(r16)
    e12c:	213fffc4 	addi	r4,r4,-1
    e130:	b100021e 	bne	r22,r4,e13c <__call_exitprocs+0xb4>
    e134:	9d800115 	stw	r22,4(r19)
    e138:	00000106 	br	e140 <__call_exitprocs+0xb8>
    e13c:	80000015 	stw	zero,0(r16)
    e140:	403ff226 	beq	r8,zero,e10c <_gp+0xffff79d4>
    e144:	9f000117 	ldw	fp,4(r19)
    e148:	a8000526 	beq	r21,zero,e160 <__call_exitprocs+0xd8>
    e14c:	00800044 	movi	r2,1
    e150:	1592983a 	sll	r9,r2,r22
    e154:	a9404017 	ldw	r5,256(r21)
    e158:	494a703a 	and	r5,r9,r5
    e15c:	2800021e 	bne	r5,zero,e168 <__call_exitprocs+0xe0>
    e160:	403ee83a 	callr	r8
    e164:	00000906 	br	e18c <__call_exitprocs+0x104>
    e168:	a9004117 	ldw	r4,260(r21)
    e16c:	4908703a 	and	r4,r9,r4
    e170:	2000041e 	bne	r4,zero,e184 <__call_exitprocs+0xfc>
    e174:	b9400017 	ldw	r5,0(r23)
    e178:	d9000017 	ldw	r4,0(sp)
    e17c:	403ee83a 	callr	r8
    e180:	00000206 	br	e18c <__call_exitprocs+0x104>
    e184:	b9000017 	ldw	r4,0(r23)
    e188:	403ee83a 	callr	r8
    e18c:	99000117 	ldw	r4,4(r19)
    e190:	e13fcc1e 	bne	fp,r4,e0c4 <_gp+0xffff798c>
    e194:	89000017 	ldw	r4,0(r17)
    e198:	993fdc26 	beq	r19,r4,e10c <_gp+0xffff79d4>
    e19c:	003fc906 	br	e0c4 <_gp+0xffff798c>
    e1a0:	00800034 	movhi	r2,0
    e1a4:	10800004 	addi	r2,r2,0
    e1a8:	10000f26 	beq	r2,zero,e1e8 <__call_exitprocs+0x160>
    e1ac:	99400117 	ldw	r5,4(r19)
    e1b0:	99000017 	ldw	r4,0(r19)
    e1b4:	2800091e 	bne	r5,zero,e1dc <__call_exitprocs+0x154>
    e1b8:	20000826 	beq	r4,zero,e1dc <__call_exitprocs+0x154>
    e1bc:	89000015 	stw	r4,0(r17)
    e1c0:	a8000226 	beq	r21,zero,e1cc <__call_exitprocs+0x144>
    e1c4:	a809883a 	mov	r4,r21
    e1c8:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    e1cc:	9809883a 	mov	r4,r19
    e1d0:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    e1d4:	8cc00017 	ldw	r19,0(r17)
    e1d8:	003fbd06 	br	e0d0 <_gp+0xffff7998>
    e1dc:	9823883a 	mov	r17,r19
    e1e0:	2027883a 	mov	r19,r4
    e1e4:	003fba06 	br	e0d0 <_gp+0xffff7998>
    e1e8:	dfc00a17 	ldw	ra,40(sp)
    e1ec:	df000917 	ldw	fp,36(sp)
    e1f0:	ddc00817 	ldw	r23,32(sp)
    e1f4:	dd800717 	ldw	r22,28(sp)
    e1f8:	dd400617 	ldw	r21,24(sp)
    e1fc:	dd000517 	ldw	r20,20(sp)
    e200:	dcc00417 	ldw	r19,16(sp)
    e204:	dc800317 	ldw	r18,12(sp)
    e208:	dc400217 	ldw	r17,8(sp)
    e20c:	dc000117 	ldw	r16,4(sp)
    e210:	dec00b04 	addi	sp,sp,44
    e214:	f800283a 	ret

0000e218 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e218:	defffd04 	addi	sp,sp,-12
    e21c:	df000215 	stw	fp,8(sp)
    e220:	df000204 	addi	fp,sp,8
    e224:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    e228:	0001883a 	nop
    e22c:	e0bfff17 	ldw	r2,-4(fp)
    e230:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    e234:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e238:	10000226 	beq	r2,zero,e244 <_exit+0x2c>
    ALT_SIM_FAIL();
    e23c:	002af070 	cmpltui	zero,zero,43969
    e240:	00000106 	br	e248 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    e244:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e248:	003fff06 	br	e248 <_gp+0xffff7b10>
