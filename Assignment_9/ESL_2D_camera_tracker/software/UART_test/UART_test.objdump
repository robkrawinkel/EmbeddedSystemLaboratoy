
UART_test.elf:     file format elf32-littlenios2
UART_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00003008 memsz 0x00003008 flags r-x
    LOAD off    0x00004028 vaddr 0x0000b028 paddr 0x0000b334 align 2**12
         filesz 0x0000030c memsz 0x0000030c flags rw-
    LOAD off    0x00004640 vaddr 0x0000b640 paddr 0x0000b640 align 2**12
         filesz 0x00000000 memsz 0x0000112c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002e08  000081bc  000081bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  0000afc4  0000afc4  00003fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000030c  0000b028  0000b334  00004028  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000112c  0000b640  0000b640  00004640  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00004334  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000650  00000000  00000000  00004358  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008e19  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002e7b  00000000  00000000  0000d7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003717  00000000  00000000  0001063c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000aa0  00000000  00000000  00013d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000019a8  00000000  00000000  000147f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000020fb  00000000  00000000  0001619c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  00018298  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002a0  00000000  00000000  000182e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001a2ff  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0001a302  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001a305  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001a306  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0001a307  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0001a30b  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0001a30f  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0001a313  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0001a31c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0001a325  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  0001a32e  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000050  00000000  00000000  0001a340  2**0
                  CONTENTS, READONLY
 28 .jdi          00005585  00000000  00000000  0001a390  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003c049  00000000  00000000  0001f915  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081bc l    d  .text	00000000 .text
0000afc4 l    d  .rodata	00000000 .rodata
0000b028 l    d  .rwdata	00000000 .rwdata
0000b640 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_test_bsp//obj/HAL/src/crt0.o
000081f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 InterruptHandlerForUart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008988 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000b028 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00009678 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000097fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000993c l     F .text	00000038 alt_dev_reg
0000b108 l     O .rwdata	0000002c jtag_uart
0000b134 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009c4c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00009e04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00009f14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a194 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000a2cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000a2f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a418 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000a570 l     F .text	00000050 alt_get_errno
0000a5c0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00009764 g     F .text	00000068 alt_main
00008b40 g     F .text	00000080 _puts_r
0000c66c g     O .bss	00000100 alt_irq
0000b648 g     O .bss	00000002 TxHead_2
0000b334 g       *ABS*	00000000 __flash_rwdata_start
00008af4 g     F .text	0000004c printf
0000b646 g     O .bss	00000002 RxTail_1
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b650 g     O .bss	00000004 errno
0000b65c g     O .bss	00000004 alt_argv
00013308 g       *ABS*	00000000 _gp
000097cc g     F .text	00000030 usleep
0000b188 g     O .rwdata	00000180 alt_fd_list
0000aa44 g     F .text	00000090 alt_find_dev
0000a4f8 g     F .text	00000078 alt_io_redirect
00008bc0 g     F .text	00000014 puts
00009ac0 g     F .text	000000f4 altera_avalon_jtag_uart_read
00008ab8 g     F .text	0000003c _printf_r
00008aa8 g     F .text	00000008 __udivsi3
0000acbc g     F .text	0000008c alt_icache_flush
0000b324 g     O .rwdata	00000004 alt_max_fd
000094c8 g     F .text	000001b0 alt_irq_register
0000b66c g     O .bss	00000400 rx_buffer_2
000082b8 g     F .text	00000124 IsrUart1
0000874c g     F .text	0000011c PutUart2
0000b308 g     O .rwdata	00000004 _global_impure_ptr
0000c76c g       *ABS*	00000000 __bss_end
0000a920 g     F .text	00000104 alt_tick
0000a888 g     F .text	00000098 alt_alarm_stop
0000b654 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000d0 alt_irq_handler
0000b160 g     O .rwdata	00000028 alt_dev_null
0000a2b0 g     F .text	0000001c alt_dcache_flush_all
00008578 g     F .text	0000005c GetUart1
0000b334 g       *ABS*	00000000 __ram_rwdata_end
0000b31c g     O .rwdata	00000008 alt_dev_list
0000984c g     F .text	000000f0 write
0000b028 g       *ABS*	00000000 __ram_rodata_end
00008ab0 g     F .text	00000008 __umodsi3
0000c76c g       *ABS*	00000000 end
00009f64 g     F .text	000000dc altera_avalon_uart_write
0000b64a g     O .bss	00000002 TxTail_2
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009cc4 g     F .text	00000080 alt_avalon_timer_sc_init
00009da4 g     F .text	00000060 altera_avalon_uart_write_fd
00009bb4 g     F .text	00000098 altera_avalon_jtag_uart_write
00008bfc g     F .text	00000734 ___vfprintf_internal_r
0000adb0 g     F .text	000001d8 __call_exitprocs
000081bc g     F .text	0000003c _start
0000b664 g     O .bss	00000004 _alt_tick_rate
0000b668 g     O .bss	00000004 _alt_nticks
000099a8 g     F .text	00000058 alt_sys_init
0000b642 g     O .bss	00000002 TxTail_1
000094a0 g     F .text	00000028 __mulsi3
0000b028 g       *ABS*	00000000 __ram_rwdata_start
0000afc4 g       *ABS*	00000000 __ram_rodata_start
00009a00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000abe8 g     F .text	000000d4 alt_get_fd
0000a040 g     F .text	00000154 alt_busy_sleep
0000ad68 g     F .text	00000048 memcmp
0000c76c g       *ABS*	00000000 __alt_stack_base
0000aad4 g     F .text	00000114 alt_find_file
0000a348 g     F .text	000000a0 alt_dev_llist_insert
00009354 g     F .text	000000e0 __sfvwrite_small_dev
0000b640 g       *ABS*	00000000 __bss_start
0000ba6c g     O .bss	00000400 tx_buffer_2
00008920 g     F .text	00000068 main
0000b660 g     O .bss	00000004 alt_envp
00009a60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000be6c g     O .bss	00000400 rx_buffer_1
0000b640 g     O .bss	00000002 TxHead_1
0000b64c g     O .bss	00000002 RxHead_2
0000b328 g     O .rwdata	00000004 alt_errno
000089fc g     F .text	00000050 __divsi3
0000b644 g     O .bss	00000002 RxHead_1
0000afc4 g       *ABS*	00000000 __flash_rodata_start
00008258 g     F .text	00000060 InitUart2
00009974 g     F .text	00000034 alt_irq_init
0000a808 g     F .text	00000080 alt_release_fd
0000c26c g     O .bss	00000400 tx_buffer_1
00009434 g     F .text	0000006c _write_r
0000b64e g     O .bss	00000002 RxTail_2
0000b30c g     O .rwdata	00000004 _impure_ptr
0000b658 g     O .bss	00000004 alt_argc
00008868 g     F .text	000000b8 InitUart
00008020 g       .exceptions	00000000 alt_irq_entry
000085d4 g     F .text	0000005c GetUart2
0000b314 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000b334 g       *ABS*	00000000 _edata
00009d44 g     F .text	00000060 altera_avalon_uart_read_fd
0000c76c g       *ABS*	00000000 _end
000081bc g       *ABS*	00000000 __ram_exceptions_end
000081f8 g     F .text	00000060 InitUart1
0000aa24 g     F .text	00000020 altera_nios2_qsys_irq_init
0000ad48 g     F .text	00000020 exit
00008a4c g     F .text	0000005c __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00008630 g     F .text	0000011c PutUart1
0000af88 g     F .text	0000003c _exit
00008bd4 g     F .text	00000028 strlen
00008500 g     F .text	0000003c EmptyUart1
0000a6b0 g     F .text	00000158 open
0000a3e8 g     F .text	00000030 alt_icache_flush_all
0000b310 g     O .rwdata	00000004 alt_priority_mask
00009330 g     F .text	00000024 __vfprintf_internal
00009e54 g     F .text	000000c0 altera_avalon_uart_read
0000b32c g     O .rwdata	00000008 alt_alarm_list
0000a1e4 g     F .text	000000cc close
0000853c g     F .text	0000003c EmptyUart2
000083dc g     F .text	00000124 IsrUart2
000096e4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606f14 	ori	at,at,33212
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001826 	beq	r2,zero,818c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
    812c:	00c00074 	movhi	r3,1
    8130:	18f19b04 	addi	r3,r3,-14740
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	21319b04 	addi	r4,r4,-14740
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	e17ffd17 	ldw	r5,-12(fp)
    8168:	183ee83a 	callr	r3
#endif
        break;
    816c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8178:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    817c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    8180:	e0bffb17 	ldw	r2,-20(fp)
    8184:	103fe21e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8188:	00000706 	br	81a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fdd06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a8:	e037883a 	mov	sp,fp
    81ac:	dfc00117 	ldw	ra,4(sp)
    81b0:	df000017 	ldw	fp,0(sp)
    81b4:	dec00204 	addi	sp,sp,8
    81b8:	f800283a 	ret

Disassembly of section .text:

000081bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81bc:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    81c0:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    81c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c8:	d68cc214 	ori	gp,gp,13064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81cc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81d0:	10ad9014 	ori	r2,r2,46656

    movhi r3, %hi(__bss_end)
    81d4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d8:	18f1db14 	ori	r3,r3,51052

    beq r2, r3, 1f
    81dc:	10c00326 	beq	r2,r3,81ec <_start+0x30>

0:
    stw zero, (r2)
    81e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e8:	10fffd36 	bltu	r2,r3,81e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81ec:	00096e40 	call	96e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81f0:	00097640 	call	9764 <alt_main>

000081f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f4:	003fff06 	br	81f4 <alt_after_alt_main>

000081f8 <InitUart1>:
unsigned short RxHead_2=0;
unsigned short RxTail_2=0;
unsigned char rx_buffer_2[RX_BUFFER_SIZE_2];
 
void InitUart1(unsigned int BaudRate)
{
    81f8:	defffc04 	addi	sp,sp,-16
    81fc:	dfc00315 	stw	ra,12(sp)
    8200:	df000215 	stw	fp,8(sp)
    8204:	df000204 	addi	fp,sp,8
    8208:	e13fff15 	stw	r4,-4(fp)
unsigned int divisor;
 
divisor = (ALT_CPU_FREQ/BaudRate) +1;
    820c:	0100bef4 	movhi	r4,763
    8210:	213c2004 	addi	r4,r4,-3968
    8214:	e17fff17 	ldw	r5,-4(fp)
    8218:	0008aa80 	call	8aa8 <__udivsi3>
    821c:	10800044 	addi	r2,r2,1
    8220:	e0bffe15 	stw	r2,-8(fp)
IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
    8224:	e0fffe17 	ldw	r3,-8(fp)
    8228:	00800074 	movhi	r2,1
    822c:	10850404 	addi	r2,r2,5136
    8230:	10c00035 	stwio	r3,0(r2)
IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    8234:	00c02004 	movi	r3,128
    8238:	00800074 	movhi	r2,1
    823c:	10850304 	addi	r2,r2,5132
    8240:	10c00035 	stwio	r3,0(r2)
}
    8244:	e037883a 	mov	sp,fp
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	df000017 	ldw	fp,0(sp)
    8250:	dec00204 	addi	sp,sp,8
    8254:	f800283a 	ret

00008258 <InitUart2>:
 
void InitUart2(unsigned int BaudRate)
{
    8258:	defffc04 	addi	sp,sp,-16
    825c:	dfc00315 	stw	ra,12(sp)
    8260:	df000215 	stw	fp,8(sp)
    8264:	df000204 	addi	fp,sp,8
    8268:	e13fff15 	stw	r4,-4(fp)
unsigned int divisor;
 
divisor = (ALT_CPU_FREQ/BaudRate) +1;
    826c:	0100bef4 	movhi	r4,763
    8270:	213c2004 	addi	r4,r4,-3968
    8274:	e17fff17 	ldw	r5,-4(fp)
    8278:	0008aa80 	call	8aa8 <__udivsi3>
    827c:	10800044 	addi	r2,r2,1
    8280:	e0bffe15 	stw	r2,-8(fp)
IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
    8284:	e0fffe17 	ldw	r3,-8(fp)
    8288:	00800074 	movhi	r2,1
    828c:	10850404 	addi	r2,r2,5136
    8290:	10c00035 	stwio	r3,0(r2)
IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    8294:	00c02004 	movi	r3,128
    8298:	00800074 	movhi	r2,1
    829c:	10850304 	addi	r2,r2,5132
    82a0:	10c00035 	stwio	r3,0(r2)
}
    82a4:	e037883a 	mov	sp,fp
    82a8:	dfc00117 	ldw	ra,4(sp)
    82ac:	df000017 	ldw	fp,0(sp)
    82b0:	dec00204 	addi	sp,sp,8
    82b4:	f800283a 	ret

000082b8 <IsrUart1>:
 
void IsrUart1(void* context, unsigned int id)
{
    82b8:	defffc04 	addi	sp,sp,-16
    82bc:	df000315 	stw	fp,12(sp)
    82c0:	df000304 	addi	fp,sp,12
    82c4:	e13ffe15 	stw	r4,-8(fp)
    82c8:	e17fff15 	stw	r5,-4(fp)
int sr;
 
sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    82cc:	00800074 	movhi	r2,1
    82d0:	10850204 	addi	r2,r2,5128
    82d4:	10800037 	ldwio	r2,0(r2)
    82d8:	e0bffd15 	stw	r2,-12(fp)
if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    82dc:	e0bffd17 	ldw	r2,-12(fp)
    82e0:	1080200c 	andi	r2,r2,128
    82e4:	10001526 	beq	r2,zero,833c <IsrUart1+0x84>
{
rx_buffer_1[RxHead_1] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    82e8:	d0a0cf0b 	ldhu	r2,-31940(gp)
    82ec:	10bfffcc 	andi	r2,r2,65535
    82f0:	00c00074 	movhi	r3,1
    82f4:	18c50004 	addi	r3,r3,5120
    82f8:	18c00037 	ldwio	r3,0(r3)
    82fc:	01000074 	movhi	r4,1
    8300:	212f9b04 	addi	r4,r4,-16788
    8304:	2085883a 	add	r2,r4,r2
    8308:	10c00005 	stb	r3,0(r2)
IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
    830c:	0007883a 	mov	r3,zero
    8310:	00800074 	movhi	r2,1
    8314:	10850204 	addi	r2,r2,5128
    8318:	10c00035 	stwio	r3,0(r2)
if (++RxHead_1 > (RX_BUFFER_SIZE_1-1)) RxHead_1 = 0;
    831c:	d0a0cf0b 	ldhu	r2,-31940(gp)
    8320:	10800044 	addi	r2,r2,1
    8324:	d0a0cf0d 	sth	r2,-31940(gp)
    8328:	d0a0cf0b 	ldhu	r2,-31940(gp)
    832c:	10bfffcc 	andi	r2,r2,65535
    8330:	10810030 	cmpltui	r2,r2,1024
    8334:	1000011e 	bne	r2,zero,833c <IsrUart1+0x84>
    8338:	d020cf0d 	sth	zero,-31940(gp)
}
if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    833c:	e0bffd17 	ldw	r2,-12(fp)
    8340:	1080100c 	andi	r2,r2,64
    8344:	10002126 	beq	r2,zero,83cc <IsrUart1+0x114>
{
if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK)
    8348:	00800074 	movhi	r2,1
    834c:	10850304 	addi	r2,r2,5132
    8350:	10800037 	ldwio	r2,0(r2)
    8354:	1080100c 	andi	r2,r2,64
    8358:	10001c26 	beq	r2,zero,83cc <IsrUart1+0x114>
{
if (TxTail_1 != TxHead_1)
    835c:	d0e0ce8b 	ldhu	r3,-31942(gp)
    8360:	d0a0ce0b 	ldhu	r2,-31944(gp)
    8364:	18ffffcc 	andi	r3,r3,65535
    8368:	10bfffcc 	andi	r2,r2,65535
    836c:	18801326 	beq	r3,r2,83bc <IsrUart1+0x104>
{
IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_1[TxTail_1]);
    8370:	d0a0ce8b 	ldhu	r2,-31942(gp)
    8374:	10bfffcc 	andi	r2,r2,65535
    8378:	00c00074 	movhi	r3,1
    837c:	18f09b04 	addi	r3,r3,-15764
    8380:	1885883a 	add	r2,r3,r2
    8384:	10800003 	ldbu	r2,0(r2)
    8388:	10c03fcc 	andi	r3,r2,255
    838c:	00800074 	movhi	r2,1
    8390:	10850104 	addi	r2,r2,5124
    8394:	10c00035 	stwio	r3,0(r2)
if (++TxTail_1 > (TX_BUFFER_SIZE_1 -1)) TxTail_1 = 0;
    8398:	d0a0ce8b 	ldhu	r2,-31942(gp)
    839c:	10800044 	addi	r2,r2,1
    83a0:	d0a0ce8d 	sth	r2,-31942(gp)
    83a4:	d0a0ce8b 	ldhu	r2,-31942(gp)
    83a8:	10bfffcc 	andi	r2,r2,65535
    83ac:	10810030 	cmpltui	r2,r2,1024
    83b0:	1000061e 	bne	r2,zero,83cc <IsrUart1+0x114>
    83b4:	d020ce8d 	sth	zero,-31942(gp)
    83b8:	00000406 	br	83cc <IsrUart1+0x114>
}
else IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    83bc:	00c02004 	movi	r3,128
    83c0:	00800074 	movhi	r2,1
    83c4:	10850304 	addi	r2,r2,5132
    83c8:	10c00035 	stwio	r3,0(r2)
}
}
}
    83cc:	e037883a 	mov	sp,fp
    83d0:	df000017 	ldw	fp,0(sp)
    83d4:	dec00104 	addi	sp,sp,4
    83d8:	f800283a 	ret

000083dc <IsrUart2>:
 
void IsrUart2(void* context, unsigned int id)
{
    83dc:	defffc04 	addi	sp,sp,-16
    83e0:	df000315 	stw	fp,12(sp)
    83e4:	df000304 	addi	fp,sp,12
    83e8:	e13ffe15 	stw	r4,-8(fp)
    83ec:	e17fff15 	stw	r5,-4(fp)
int sr;
 
sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    83f0:	00800074 	movhi	r2,1
    83f4:	10850204 	addi	r2,r2,5128
    83f8:	10800037 	ldwio	r2,0(r2)
    83fc:	e0bffd15 	stw	r2,-12(fp)
if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    8400:	e0bffd17 	ldw	r2,-12(fp)
    8404:	1080200c 	andi	r2,r2,128
    8408:	10001526 	beq	r2,zero,8460 <IsrUart2+0x84>
{
rx_buffer_2[RxHead_2] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    840c:	d0a0d10b 	ldhu	r2,-31932(gp)
    8410:	10bfffcc 	andi	r2,r2,65535
    8414:	00c00074 	movhi	r3,1
    8418:	18c50004 	addi	r3,r3,5120
    841c:	18c00037 	ldwio	r3,0(r3)
    8420:	01000074 	movhi	r4,1
    8424:	212d9b04 	addi	r4,r4,-18836
    8428:	2085883a 	add	r2,r4,r2
    842c:	10c00005 	stb	r3,0(r2)
IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
    8430:	0007883a 	mov	r3,zero
    8434:	00800074 	movhi	r2,1
    8438:	10850204 	addi	r2,r2,5128
    843c:	10c00035 	stwio	r3,0(r2)
if (++RxHead_2 > (RX_BUFFER_SIZE_2-1)) RxHead_2 = 0;
    8440:	d0a0d10b 	ldhu	r2,-31932(gp)
    8444:	10800044 	addi	r2,r2,1
    8448:	d0a0d10d 	sth	r2,-31932(gp)
    844c:	d0a0d10b 	ldhu	r2,-31932(gp)
    8450:	10bfffcc 	andi	r2,r2,65535
    8454:	10810030 	cmpltui	r2,r2,1024
    8458:	1000011e 	bne	r2,zero,8460 <IsrUart2+0x84>
    845c:	d020d10d 	sth	zero,-31932(gp)
}
if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    8460:	e0bffd17 	ldw	r2,-12(fp)
    8464:	1080100c 	andi	r2,r2,64
    8468:	10002126 	beq	r2,zero,84f0 <IsrUart2+0x114>
{
if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK)
    846c:	00800074 	movhi	r2,1
    8470:	10850304 	addi	r2,r2,5132
    8474:	10800037 	ldwio	r2,0(r2)
    8478:	1080100c 	andi	r2,r2,64
    847c:	10001c26 	beq	r2,zero,84f0 <IsrUart2+0x114>
{
if (TxTail_2 != TxHead_2)
    8480:	d0e0d08b 	ldhu	r3,-31934(gp)
    8484:	d0a0d00b 	ldhu	r2,-31936(gp)
    8488:	18ffffcc 	andi	r3,r3,65535
    848c:	10bfffcc 	andi	r2,r2,65535
    8490:	18801326 	beq	r3,r2,84e0 <IsrUart2+0x104>
{
IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_2[TxTail_2]);
    8494:	d0a0d08b 	ldhu	r2,-31934(gp)
    8498:	10bfffcc 	andi	r2,r2,65535
    849c:	00c00074 	movhi	r3,1
    84a0:	18ee9b04 	addi	r3,r3,-17812
    84a4:	1885883a 	add	r2,r3,r2
    84a8:	10800003 	ldbu	r2,0(r2)
    84ac:	10c03fcc 	andi	r3,r2,255
    84b0:	00800074 	movhi	r2,1
    84b4:	10850104 	addi	r2,r2,5124
    84b8:	10c00035 	stwio	r3,0(r2)
if (++TxTail_2 > (TX_BUFFER_SIZE_2 -1)) TxTail_2 = 0;
    84bc:	d0a0d08b 	ldhu	r2,-31934(gp)
    84c0:	10800044 	addi	r2,r2,1
    84c4:	d0a0d08d 	sth	r2,-31934(gp)
    84c8:	d0a0d08b 	ldhu	r2,-31934(gp)
    84cc:	10bfffcc 	andi	r2,r2,65535
    84d0:	10810030 	cmpltui	r2,r2,1024
    84d4:	1000061e 	bne	r2,zero,84f0 <IsrUart2+0x114>
    84d8:	d020d08d 	sth	zero,-31934(gp)
    84dc:	00000406 	br	84f0 <IsrUart2+0x114>
}
else IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    84e0:	00c02004 	movi	r3,128
    84e4:	00800074 	movhi	r2,1
    84e8:	10850304 	addi	r2,r2,5132
    84ec:	10c00035 	stwio	r3,0(r2)
}
}
}
    84f0:	e037883a 	mov	sp,fp
    84f4:	df000017 	ldw	fp,0(sp)
    84f8:	dec00104 	addi	sp,sp,4
    84fc:	f800283a 	ret

00008500 <EmptyUart1>:
 
unsigned char EmptyUart1()
{
    8500:	deffff04 	addi	sp,sp,-4
    8504:	df000015 	stw	fp,0(sp)
    8508:	d839883a 	mov	fp,sp
if(RxHead_1 == RxTail_1) return 1;
    850c:	d0e0cf0b 	ldhu	r3,-31940(gp)
    8510:	d0a0cf8b 	ldhu	r2,-31938(gp)
    8514:	18ffffcc 	andi	r3,r3,65535
    8518:	10bfffcc 	andi	r2,r2,65535
    851c:	1880021e 	bne	r3,r2,8528 <EmptyUart1+0x28>
    8520:	00800044 	movi	r2,1
    8524:	00000106 	br	852c <EmptyUart1+0x2c>
return 0;
    8528:	0005883a 	mov	r2,zero
} 
    852c:	e037883a 	mov	sp,fp
    8530:	df000017 	ldw	fp,0(sp)
    8534:	dec00104 	addi	sp,sp,4
    8538:	f800283a 	ret

0000853c <EmptyUart2>:
 
unsigned char EmptyUart2()
{
    853c:	deffff04 	addi	sp,sp,-4
    8540:	df000015 	stw	fp,0(sp)
    8544:	d839883a 	mov	fp,sp
    if(RxHead_2 == RxTail_2) 
    8548:	d0e0d10b 	ldhu	r3,-31932(gp)
    854c:	d0a0d18b 	ldhu	r2,-31930(gp)
    8550:	18ffffcc 	andi	r3,r3,65535
    8554:	10bfffcc 	andi	r2,r2,65535
    8558:	1880021e 	bne	r3,r2,8564 <EmptyUart2+0x28>
        return 1;
    855c:	00800044 	movi	r2,1
    8560:	00000106 	br	8568 <EmptyUart2+0x2c>

    return 0;
    8564:	0005883a 	mov	r2,zero
} 
    8568:	e037883a 	mov	sp,fp
    856c:	df000017 	ldw	fp,0(sp)
    8570:	dec00104 	addi	sp,sp,4
    8574:	f800283a 	ret

00008578 <GetUart1>:
    
unsigned char GetUart1(void)
{
    8578:	defffe04 	addi	sp,sp,-8
    857c:	df000115 	stw	fp,4(sp)
    8580:	df000104 	addi	fp,sp,4
    unsigned char rxChar; 
    
    /* buffer is empty */
    
    rxChar=rx_buffer_1[RxTail_1];
    8584:	d0a0cf8b 	ldhu	r2,-31938(gp)
    8588:	10bfffcc 	andi	r2,r2,65535
    858c:	00c00074 	movhi	r3,1
    8590:	18ef9b04 	addi	r3,r3,-16788
    8594:	1885883a 	add	r2,r3,r2
    8598:	10800003 	ldbu	r2,0(r2)
    859c:	e0bfff05 	stb	r2,-4(fp)
    if (++RxTail_1 > (RX_BUFFER_SIZE_1-1)) RxTail_1=0;
    85a0:	d0a0cf8b 	ldhu	r2,-31938(gp)
    85a4:	10800044 	addi	r2,r2,1
    85a8:	d0a0cf8d 	sth	r2,-31938(gp)
    85ac:	d0a0cf8b 	ldhu	r2,-31938(gp)
    85b0:	10bfffcc 	andi	r2,r2,65535
    85b4:	10810030 	cmpltui	r2,r2,1024
    85b8:	1000011e 	bne	r2,zero,85c0 <GetUart1+0x48>
    85bc:	d020cf8d 	sth	zero,-31938(gp)
    
    return rxChar;
    85c0:	e0bfff03 	ldbu	r2,-4(fp)
}
    85c4:	e037883a 	mov	sp,fp
    85c8:	df000017 	ldw	fp,0(sp)
    85cc:	dec00104 	addi	sp,sp,4
    85d0:	f800283a 	ret

000085d4 <GetUart2>:
 
unsigned char GetUart2(void)
{
    85d4:	defffe04 	addi	sp,sp,-8
    85d8:	df000115 	stw	fp,4(sp)
    85dc:	df000104 	addi	fp,sp,4
    unsigned char rxChar; 
    
    /* buffer is empty */
    
    rxChar=rx_buffer_2[RxTail_2];
    85e0:	d0a0d18b 	ldhu	r2,-31930(gp)
    85e4:	10bfffcc 	andi	r2,r2,65535
    85e8:	00c00074 	movhi	r3,1
    85ec:	18ed9b04 	addi	r3,r3,-18836
    85f0:	1885883a 	add	r2,r3,r2
    85f4:	10800003 	ldbu	r2,0(r2)
    85f8:	e0bfff05 	stb	r2,-4(fp)
    if (++RxTail_2 > (RX_BUFFER_SIZE_2-1)) 
    85fc:	d0a0d18b 	ldhu	r2,-31930(gp)
    8600:	10800044 	addi	r2,r2,1
    8604:	d0a0d18d 	sth	r2,-31930(gp)
    8608:	d0a0d18b 	ldhu	r2,-31930(gp)
    860c:	10bfffcc 	andi	r2,r2,65535
    8610:	10810030 	cmpltui	r2,r2,1024
    8614:	1000011e 	bne	r2,zero,861c <GetUart2+0x48>
        RxTail_2=0;
    8618:	d020d18d 	sth	zero,-31930(gp)
    
    return rxChar;
    861c:	e0bfff03 	ldbu	r2,-4(fp)
}
    8620:	e037883a 	mov	sp,fp
    8624:	df000017 	ldw	fp,0(sp)
    8628:	dec00104 	addi	sp,sp,4
    862c:	f800283a 	ret

00008630 <PutUart1>:
 
unsigned char PutUart1(unsigned char in_char)
{
    8630:	defffc04 	addi	sp,sp,-16
    8634:	df000315 	stw	fp,12(sp)
    8638:	df000304 	addi	fp,sp,12
    863c:	2005883a 	mov	r2,r4
    8640:	e0bfff05 	stb	r2,-4(fp)
    unsigned short size;
    unsigned int z;
    
    z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
    8644:	00800074 	movhi	r2,1
    8648:	10850204 	addi	r2,r2,5128
    864c:	10800037 	ldwio	r2,0(r2)
    8650:	1080100c 	andi	r2,r2,64
    8654:	e0bffe15 	stw	r2,-8(fp)
    
    if ((TxHead_1==TxTail_1) && z) 
    8658:	d0e0ce0b 	ldhu	r3,-31944(gp)
    865c:	d0a0ce8b 	ldhu	r2,-31942(gp)
    8660:	18ffffcc 	andi	r3,r3,65535
    8664:	10bfffcc 	andi	r2,r2,65535
    8668:	1880071e 	bne	r3,r2,8688 <PutUart1+0x58>
    866c:	e0bffe17 	ldw	r2,-8(fp)
    8670:	10000526 	beq	r2,zero,8688 <PutUart1+0x58>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
    8674:	e0ffff03 	ldbu	r3,-4(fp)
    8678:	00800074 	movhi	r2,1
    867c:	10850104 	addi	r2,r2,5124
    8680:	10c00035 	stwio	r3,0(r2)
    8684:	00002c06 	br	8738 <PutUart1+0x108>
    else
    {
        if (TxHead_1 >= TxTail_1) 
    8688:	d0e0ce0b 	ldhu	r3,-31944(gp)
    868c:	d0a0ce8b 	ldhu	r2,-31942(gp)
    8690:	18ffffcc 	andi	r3,r3,65535
    8694:	10bfffcc 	andi	r2,r2,65535
    8698:	18800536 	bltu	r3,r2,86b0 <PutUart1+0x80>
            size = TxHead_1 - TxTail_1;
    869c:	d0e0ce0b 	ldhu	r3,-31944(gp)
    86a0:	d0a0ce8b 	ldhu	r2,-31942(gp)
    86a4:	1885c83a 	sub	r2,r3,r2
    86a8:	e0bffd0d 	sth	r2,-12(fp)
    86ac:	00000506 	br	86c4 <PutUart1+0x94>
        else 
            size = ((TX_BUFFER_SIZE_1-1) - TxTail_1) + TxHead_1;
    86b0:	d0e0ce0b 	ldhu	r3,-31944(gp)
    86b4:	d0a0ce8b 	ldhu	r2,-31942(gp)
    86b8:	1885c83a 	sub	r2,r3,r2
    86bc:	1080ffc4 	addi	r2,r2,1023
    86c0:	e0bffd0d 	sth	r2,-12(fp)

        if (size > (TX_BUFFER_SIZE_1 - 3)) 
    86c4:	e0bffd0b 	ldhu	r2,-12(fp)
    86c8:	1080ffb0 	cmpltui	r2,r2,1022
    86cc:	1000021e 	bne	r2,zero,86d8 <PutUart1+0xa8>
            return (-1);
    86d0:	00bfffc4 	movi	r2,-1
    86d4:	00001906 	br	873c <PutUart1+0x10c>
        
        tx_buffer_1[TxHead_1] = in_char;
    86d8:	d0a0ce0b 	ldhu	r2,-31944(gp)
    86dc:	10bfffcc 	andi	r2,r2,65535
    86e0:	00c00074 	movhi	r3,1
    86e4:	18f09b04 	addi	r3,r3,-15764
    86e8:	1885883a 	add	r2,r3,r2
    86ec:	e0ffff03 	ldbu	r3,-4(fp)
    86f0:	10c00005 	stb	r3,0(r2)

        if (++TxHead_1 > (TX_BUFFER_SIZE_1-1)) 
    86f4:	d0a0ce0b 	ldhu	r2,-31944(gp)
    86f8:	10800044 	addi	r2,r2,1
    86fc:	d0a0ce0d 	sth	r2,-31944(gp)
    8700:	d0a0ce0b 	ldhu	r2,-31944(gp)
    8704:	10bfffcc 	andi	r2,r2,65535
    8708:	10810030 	cmpltui	r2,r2,1024
    870c:	1000011e 	bne	r2,zero,8714 <PutUart1+0xe4>
            TxHead_1 = 0;
    8710:	d020ce0d 	sth	zero,-31944(gp)

        z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    8714:	00800074 	movhi	r2,1
    8718:	10850304 	addi	r2,r2,5132
    871c:	10800037 	ldwio	r2,0(r2)
    8720:	10801014 	ori	r2,r2,64
    8724:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
    8728:	e0fffe17 	ldw	r3,-8(fp)
    872c:	00800074 	movhi	r2,1
    8730:	10850304 	addi	r2,r2,5132
    8734:	10c00035 	stwio	r3,0(r2)
    }
    return(1);
    8738:	00800044 	movi	r2,1
}
    873c:	e037883a 	mov	sp,fp
    8740:	df000017 	ldw	fp,0(sp)
    8744:	dec00104 	addi	sp,sp,4
    8748:	f800283a 	ret

0000874c <PutUart2>:
 
unsigned char PutUart2(unsigned char in_char)
{
    874c:	defffc04 	addi	sp,sp,-16
    8750:	df000315 	stw	fp,12(sp)
    8754:	df000304 	addi	fp,sp,12
    8758:	2005883a 	mov	r2,r4
    875c:	e0bfff05 	stb	r2,-4(fp)
    unsigned short size;
    unsigned int z;
    
    z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
    8760:	00800074 	movhi	r2,1
    8764:	10850204 	addi	r2,r2,5128
    8768:	10800037 	ldwio	r2,0(r2)
    876c:	1080100c 	andi	r2,r2,64
    8770:	e0bffe15 	stw	r2,-8(fp)
    
    if ((TxHead_2==TxTail_2) && z) 
    8774:	d0e0d00b 	ldhu	r3,-31936(gp)
    8778:	d0a0d08b 	ldhu	r2,-31934(gp)
    877c:	18ffffcc 	andi	r3,r3,65535
    8780:	10bfffcc 	andi	r2,r2,65535
    8784:	1880071e 	bne	r3,r2,87a4 <PutUart2+0x58>
    8788:	e0bffe17 	ldw	r2,-8(fp)
    878c:	10000526 	beq	r2,zero,87a4 <PutUart2+0x58>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
    8790:	e0ffff03 	ldbu	r3,-4(fp)
    8794:	00800074 	movhi	r2,1
    8798:	10850104 	addi	r2,r2,5124
    879c:	10c00035 	stwio	r3,0(r2)
    87a0:	00002c06 	br	8854 <PutUart2+0x108>
    else
    {
        if (TxHead_2 >= TxTail_2) 
    87a4:	d0e0d00b 	ldhu	r3,-31936(gp)
    87a8:	d0a0d08b 	ldhu	r2,-31934(gp)
    87ac:	18ffffcc 	andi	r3,r3,65535
    87b0:	10bfffcc 	andi	r2,r2,65535
    87b4:	18800536 	bltu	r3,r2,87cc <PutUart2+0x80>
            size = TxHead_2 - TxTail_2;
    87b8:	d0e0d00b 	ldhu	r3,-31936(gp)
    87bc:	d0a0d08b 	ldhu	r2,-31934(gp)
    87c0:	1885c83a 	sub	r2,r3,r2
    87c4:	e0bffd0d 	sth	r2,-12(fp)
    87c8:	00000506 	br	87e0 <PutUart2+0x94>
        else 
            size = ((TX_BUFFER_SIZE_2-1) - TxTail_2) + TxHead_2;
    87cc:	d0e0d00b 	ldhu	r3,-31936(gp)
    87d0:	d0a0d08b 	ldhu	r2,-31934(gp)
    87d4:	1885c83a 	sub	r2,r3,r2
    87d8:	1080ffc4 	addi	r2,r2,1023
    87dc:	e0bffd0d 	sth	r2,-12(fp)

        if (size > (TX_BUFFER_SIZE_2 - 3)) 
    87e0:	e0bffd0b 	ldhu	r2,-12(fp)
    87e4:	1080ffb0 	cmpltui	r2,r2,1022
    87e8:	1000021e 	bne	r2,zero,87f4 <PutUart2+0xa8>
            return (-1);
    87ec:	00bfffc4 	movi	r2,-1
    87f0:	00001906 	br	8858 <PutUart2+0x10c>

        tx_buffer_2[TxHead_2] = in_char;
    87f4:	d0a0d00b 	ldhu	r2,-31936(gp)
    87f8:	10bfffcc 	andi	r2,r2,65535
    87fc:	00c00074 	movhi	r3,1
    8800:	18ee9b04 	addi	r3,r3,-17812
    8804:	1885883a 	add	r2,r3,r2
    8808:	e0ffff03 	ldbu	r3,-4(fp)
    880c:	10c00005 	stb	r3,0(r2)

        if (++TxHead_2 > (TX_BUFFER_SIZE_2-1)) 
    8810:	d0a0d00b 	ldhu	r2,-31936(gp)
    8814:	10800044 	addi	r2,r2,1
    8818:	d0a0d00d 	sth	r2,-31936(gp)
    881c:	d0a0d00b 	ldhu	r2,-31936(gp)
    8820:	10bfffcc 	andi	r2,r2,65535
    8824:	10810030 	cmpltui	r2,r2,1024
    8828:	1000011e 	bne	r2,zero,8830 <PutUart2+0xe4>
            TxHead_2 = 0;
    882c:	d020d00d 	sth	zero,-31936(gp)

        z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    8830:	00800074 	movhi	r2,1
    8834:	10850304 	addi	r2,r2,5132
    8838:	10800037 	ldwio	r2,0(r2)
    883c:	10801014 	ori	r2,r2,64
    8840:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
    8844:	e0fffe17 	ldw	r3,-8(fp)
    8848:	00800074 	movhi	r2,1
    884c:	10850304 	addi	r2,r2,5132
    8850:	10c00035 	stwio	r3,0(r2)
    }
    return(1);
    8854:	00800044 	movi	r2,1
}
    8858:	e037883a 	mov	sp,fp
    885c:	df000017 	ldw	fp,0(sp)
    8860:	dec00104 	addi	sp,sp,4
    8864:	f800283a 	ret

00008868 <InitUart>:

#define BAUD_RATE_0 115200
#define BAUD_RATE_1 115200

void InitUart()
{
    8868:	defff904 	addi	sp,sp,-28
    886c:	dfc00615 	stw	ra,24(sp)
    8870:	df000515 	stw	fp,20(sp)
    8874:	df000504 	addi	fp,sp,20
    int context_uart1,context_uart2;

    InitUart1(BAUD_RATE_0);
    8878:	010000b4 	movhi	r4,2
    887c:	21308004 	addi	r4,r4,-15872
    8880:	00081f80 	call	81f8 <InitUart1>
    //InitUart2(BAUD_RATE_1);

    //alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ,&context_uart1,IsrUart1,NULL); // install UART1 ISR
    alt_irq_register(UART_0_IRQ,&context_uart1,IsrUart1 ); // install UART1 ISR
    8884:	e0bfff04 	addi	r2,fp,-4
    8888:	0009883a 	mov	r4,zero
    888c:	100b883a 	mov	r5,r2
    8890:	01800074 	movhi	r6,1
    8894:	31a0ae04 	addi	r6,r6,-32072
    8898:	00094c80 	call	94c8 <alt_irq_register>
    889c:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    88a0:	0005303a 	rdctl	r2,status
    88a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    88a8:	e0fffc17 	ldw	r3,-16(fp)
    88ac:	00bfff84 	movi	r2,-2
    88b0:	1884703a 	and	r2,r3,r2
    88b4:	1001703a 	wrctl	status,r2
  
  return context;
    88b8:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    88bc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    88c0:	e0bffb17 	ldw	r2,-20(fp)
    88c4:	00c00044 	movi	r3,1
    88c8:	1884983a 	sll	r2,r3,r2
    88cc:	1007883a 	mov	r3,r2
    88d0:	00800074 	movhi	r2,1
    88d4:	10ad9504 	addi	r2,r2,-18860
    88d8:	10800017 	ldw	r2,0(r2)
    88dc:	1886b03a 	or	r3,r3,r2
    88e0:	00800074 	movhi	r2,1
    88e4:	10ad9504 	addi	r2,r2,-18860
    88e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    88ec:	00800074 	movhi	r2,1
    88f0:	10ad9504 	addi	r2,r2,-18860
    88f4:	10800017 	ldw	r2,0(r2)
    88f8:	100170fa 	wrctl	ienable,r2
    88fc:	e0bffd17 	ldw	r2,-12(fp)
    8900:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8904:	e0bffe17 	ldw	r2,-8(fp)
    8908:	1001703a 	wrctl	status,r2

    //alt_ic_irq_enable (UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ);
    alt_irq_enable (UART_0_IRQ);
}
    890c:	e037883a 	mov	sp,fp
    8910:	dfc00117 	ldw	ra,4(sp)
    8914:	df000017 	ldw	fp,0(sp)
    8918:	dec00204 	addi	sp,sp,8
    891c:	f800283a 	ret

00008920 <main>:


int main()
{
    8920:	defffd04 	addi	sp,sp,-12
    8924:	dfc00215 	stw	ra,8(sp)
    8928:	df000115 	stw	fp,4(sp)
    892c:	df000104 	addi	fp,sp,4
unsigned char ch;
printf("\n\nHello NiosII!!!!!\n");
    8930:	01000074 	movhi	r4,1
    8934:	212bf104 	addi	r4,r4,-20540
    8938:	0008bc00 	call	8bc0 <puts>

InitUart();
    893c:	00088680 	call	8868 <InitUart>
    8940:	00000106 	br	8948 <main+0x28>
    }
    if(!EmptyUart2()) {
        ch = GetUart2();
        PutUart1(ch);
    }*/
} //while
    8944:	0001883a 	nop

InitUart();

while(1) {
	//IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, 'A');
	PutUart1('a');
    8948:	01001844 	movi	r4,97
    894c:	00086300 	call	8630 <PutUart1>
	usleep(10000);
    8950:	0109c404 	movi	r4,10000
    8954:	00097cc0 	call	97cc <usleep>
	if(!EmptyUart1()){
    8958:	00085000 	call	8500 <EmptyUart1>
    895c:	10803fcc 	andi	r2,r2,255
    8960:	103ff81e 	bne	r2,zero,8944 <main+0x24>
		printf("received message");
    8964:	01000074 	movhi	r4,1
    8968:	212bf604 	addi	r4,r4,-20520
    896c:	0008af40 	call	8af4 <printf>
		ch = GetUart1();
    8970:	00085780 	call	8578 <GetUart1>
    8974:	e0bfff05 	stb	r2,-4(fp)
		PutUart1(ch);
    8978:	e0bfff03 	ldbu	r2,-4(fp)
    897c:	1009883a 	mov	r4,r2
    8980:	00086300 	call	8630 <PutUart1>
    }
    if(!EmptyUart2()) {
        ch = GetUart2();
        PutUart1(ch);
    }*/
} //while
    8984:	003fef06 	br	8944 <main+0x24>

00008988 <udivmodsi4>:
    8988:	2005883a 	mov	r2,r4
    898c:	2900182e 	bgeu	r5,r4,89f0 <udivmodsi4+0x68>
    8990:	28001716 	blt	r5,zero,89f0 <udivmodsi4+0x68>
    8994:	01000804 	movi	r4,32
    8998:	00c00044 	movi	r3,1
    899c:	00000206 	br	89a8 <udivmodsi4+0x20>
    89a0:	20001126 	beq	r4,zero,89e8 <udivmodsi4+0x60>
    89a4:	28000516 	blt	r5,zero,89bc <udivmodsi4+0x34>
    89a8:	294b883a 	add	r5,r5,r5
    89ac:	213fffc4 	addi	r4,r4,-1
    89b0:	18c7883a 	add	r3,r3,r3
    89b4:	28bffa36 	bltu	r5,r2,89a0 <udivmodsi4+0x18>
    89b8:	18000b26 	beq	r3,zero,89e8 <udivmodsi4+0x60>
    89bc:	0009883a 	mov	r4,zero
    89c0:	11400236 	bltu	r2,r5,89cc <udivmodsi4+0x44>
    89c4:	1145c83a 	sub	r2,r2,r5
    89c8:	20c8b03a 	or	r4,r4,r3
    89cc:	1806d07a 	srli	r3,r3,1
    89d0:	280ad07a 	srli	r5,r5,1
    89d4:	183ffa1e 	bne	r3,zero,89c0 <udivmodsi4+0x38>
    89d8:	3000021e 	bne	r6,zero,89e4 <udivmodsi4+0x5c>
    89dc:	2005883a 	mov	r2,r4
    89e0:	f800283a 	ret
    89e4:	f800283a 	ret
    89e8:	0009883a 	mov	r4,zero
    89ec:	003ffa06 	br	89d8 <udivmodsi4+0x50>
    89f0:	00c00044 	movi	r3,1
    89f4:	0009883a 	mov	r4,zero
    89f8:	003ff106 	br	89c0 <udivmodsi4+0x38>

000089fc <__divsi3>:
    89fc:	defffe04 	addi	sp,sp,-8
    8a00:	dfc00115 	stw	ra,4(sp)
    8a04:	dc000015 	stw	r16,0(sp)
    8a08:	20000a16 	blt	r4,zero,8a34 <__divsi3+0x38>
    8a0c:	0021883a 	mov	r16,zero
    8a10:	28000b16 	blt	r5,zero,8a40 <__divsi3+0x44>
    8a14:	000d883a 	mov	r6,zero
    8a18:	00089880 	call	8988 <udivmodsi4>
    8a1c:	80000126 	beq	r16,zero,8a24 <__divsi3+0x28>
    8a20:	0085c83a 	sub	r2,zero,r2
    8a24:	dfc00117 	ldw	ra,4(sp)
    8a28:	dc000017 	ldw	r16,0(sp)
    8a2c:	dec00204 	addi	sp,sp,8
    8a30:	f800283a 	ret
    8a34:	0109c83a 	sub	r4,zero,r4
    8a38:	04000044 	movi	r16,1
    8a3c:	283ff50e 	bge	r5,zero,8a14 <__divsi3+0x18>
    8a40:	014bc83a 	sub	r5,zero,r5
    8a44:	8400005c 	xori	r16,r16,1
    8a48:	003ff206 	br	8a14 <__divsi3+0x18>

00008a4c <__modsi3>:
    8a4c:	deffff04 	addi	sp,sp,-4
    8a50:	dfc00015 	stw	ra,0(sp)
    8a54:	20000516 	blt	r4,zero,8a6c <__modsi3+0x20>
    8a58:	28000c16 	blt	r5,zero,8a8c <__modsi3+0x40>
    8a5c:	01800044 	movi	r6,1
    8a60:	dfc00017 	ldw	ra,0(sp)
    8a64:	dec00104 	addi	sp,sp,4
    8a68:	00089881 	jmpi	8988 <udivmodsi4>
    8a6c:	0109c83a 	sub	r4,zero,r4
    8a70:	28000b16 	blt	r5,zero,8aa0 <__modsi3+0x54>
    8a74:	01800044 	movi	r6,1
    8a78:	00089880 	call	8988 <udivmodsi4>
    8a7c:	0085c83a 	sub	r2,zero,r2
    8a80:	dfc00017 	ldw	ra,0(sp)
    8a84:	dec00104 	addi	sp,sp,4
    8a88:	f800283a 	ret
    8a8c:	014bc83a 	sub	r5,zero,r5
    8a90:	01800044 	movi	r6,1
    8a94:	dfc00017 	ldw	ra,0(sp)
    8a98:	dec00104 	addi	sp,sp,4
    8a9c:	00089881 	jmpi	8988 <udivmodsi4>
    8aa0:	014bc83a 	sub	r5,zero,r5
    8aa4:	003ff306 	br	8a74 <__modsi3+0x28>

00008aa8 <__udivsi3>:
    8aa8:	000d883a 	mov	r6,zero
    8aac:	00089881 	jmpi	8988 <udivmodsi4>

00008ab0 <__umodsi3>:
    8ab0:	01800044 	movi	r6,1
    8ab4:	00089881 	jmpi	8988 <udivmodsi4>

00008ab8 <_printf_r>:
    8ab8:	defffd04 	addi	sp,sp,-12
    8abc:	dfc00015 	stw	ra,0(sp)
    8ac0:	d9800115 	stw	r6,4(sp)
    8ac4:	d9c00215 	stw	r7,8(sp)
    8ac8:	20800217 	ldw	r2,8(r4)
    8acc:	00c00074 	movhi	r3,1
    8ad0:	18e4d504 	addi	r3,r3,-27820
    8ad4:	280d883a 	mov	r6,r5
    8ad8:	10c00115 	stw	r3,4(r2)
    8adc:	100b883a 	mov	r5,r2
    8ae0:	d9c00104 	addi	r7,sp,4
    8ae4:	0008bfc0 	call	8bfc <___vfprintf_internal_r>
    8ae8:	dfc00017 	ldw	ra,0(sp)
    8aec:	dec00304 	addi	sp,sp,12
    8af0:	f800283a 	ret

00008af4 <printf>:
    8af4:	defffc04 	addi	sp,sp,-16
    8af8:	dfc00015 	stw	ra,0(sp)
    8afc:	d9400115 	stw	r5,4(sp)
    8b00:	d9800215 	stw	r6,8(sp)
    8b04:	d9c00315 	stw	r7,12(sp)
    8b08:	00800074 	movhi	r2,1
    8b0c:	10acc304 	addi	r2,r2,-19700
    8b10:	10800017 	ldw	r2,0(r2)
    8b14:	00c00074 	movhi	r3,1
    8b18:	18e4d504 	addi	r3,r3,-27820
    8b1c:	200b883a 	mov	r5,r4
    8b20:	10800217 	ldw	r2,8(r2)
    8b24:	d9800104 	addi	r6,sp,4
    8b28:	10c00115 	stw	r3,4(r2)
    8b2c:	1009883a 	mov	r4,r2
    8b30:	00093300 	call	9330 <__vfprintf_internal>
    8b34:	dfc00017 	ldw	ra,0(sp)
    8b38:	dec00404 	addi	sp,sp,16
    8b3c:	f800283a 	ret

00008b40 <_puts_r>:
    8b40:	defffd04 	addi	sp,sp,-12
    8b44:	dc000015 	stw	r16,0(sp)
    8b48:	2021883a 	mov	r16,r4
    8b4c:	2809883a 	mov	r4,r5
    8b50:	dfc00215 	stw	ra,8(sp)
    8b54:	dc400115 	stw	r17,4(sp)
    8b58:	2823883a 	mov	r17,r5
    8b5c:	0008bd40 	call	8bd4 <strlen>
    8b60:	81400217 	ldw	r5,8(r16)
    8b64:	00c00074 	movhi	r3,1
    8b68:	18e4d504 	addi	r3,r3,-27820
    8b6c:	880d883a 	mov	r6,r17
    8b70:	8009883a 	mov	r4,r16
    8b74:	28c00115 	stw	r3,4(r5)
    8b78:	100f883a 	mov	r7,r2
    8b7c:	183ee83a 	callr	r3
    8b80:	047fffc4 	movi	r17,-1
    8b84:	14400926 	beq	r2,r17,8bac <_puts_r+0x6c>
    8b88:	81400217 	ldw	r5,8(r16)
    8b8c:	8009883a 	mov	r4,r16
    8b90:	01800074 	movhi	r6,1
    8b94:	31abfb04 	addi	r6,r6,-20500
    8b98:	28800117 	ldw	r2,4(r5)
    8b9c:	01c00044 	movi	r7,1
    8ba0:	103ee83a 	callr	r2
    8ba4:	14400126 	beq	r2,r17,8bac <_puts_r+0x6c>
    8ba8:	0005883a 	mov	r2,zero
    8bac:	dfc00217 	ldw	ra,8(sp)
    8bb0:	dc400117 	ldw	r17,4(sp)
    8bb4:	dc000017 	ldw	r16,0(sp)
    8bb8:	dec00304 	addi	sp,sp,12
    8bbc:	f800283a 	ret

00008bc0 <puts>:
    8bc0:	00800074 	movhi	r2,1
    8bc4:	10acc304 	addi	r2,r2,-19700
    8bc8:	200b883a 	mov	r5,r4
    8bcc:	11000017 	ldw	r4,0(r2)
    8bd0:	0008b401 	jmpi	8b40 <_puts_r>

00008bd4 <strlen>:
    8bd4:	20800007 	ldb	r2,0(r4)
    8bd8:	10000626 	beq	r2,zero,8bf4 <strlen+0x20>
    8bdc:	2005883a 	mov	r2,r4
    8be0:	10800044 	addi	r2,r2,1
    8be4:	10c00007 	ldb	r3,0(r2)
    8be8:	183ffd1e 	bne	r3,zero,8be0 <strlen+0xc>
    8bec:	1105c83a 	sub	r2,r2,r4
    8bf0:	f800283a 	ret
    8bf4:	0005883a 	mov	r2,zero
    8bf8:	f800283a 	ret

00008bfc <___vfprintf_internal_r>:
    8bfc:	deffe004 	addi	sp,sp,-128
    8c00:	d8c00804 	addi	r3,sp,32
    8c04:	ddc01d15 	stw	r23,116(sp)
    8c08:	dd401b15 	stw	r21,108(sp)
    8c0c:	dd001a15 	stw	r20,104(sp)
    8c10:	dcc01915 	stw	r19,100(sp)
    8c14:	dc801815 	stw	r18,96(sp)
    8c18:	dc001615 	stw	r16,88(sp)
    8c1c:	dfc01f15 	stw	ra,124(sp)
    8c20:	df001e15 	stw	fp,120(sp)
    8c24:	dd801c15 	stw	r22,112(sp)
    8c28:	dc401715 	stw	r17,92(sp)
    8c2c:	d9000f15 	stw	r4,60(sp)
    8c30:	d9c00e15 	stw	r7,56(sp)
    8c34:	3021883a 	mov	r16,r6
    8c38:	0025883a 	mov	r18,zero
    8c3c:	d8001415 	stw	zero,80(sp)
    8c40:	d8000d15 	stw	zero,52(sp)
    8c44:	0029883a 	mov	r20,zero
    8c48:	d8000b15 	stw	zero,44(sp)
    8c4c:	d8000c15 	stw	zero,48(sp)
    8c50:	d8001315 	stw	zero,76(sp)
    8c54:	d8001015 	stw	zero,64(sp)
    8c58:	002b883a 	mov	r21,zero
    8c5c:	04c00044 	movi	r19,1
    8c60:	d8c00a15 	stw	r3,40(sp)
    8c64:	282f883a 	mov	r23,r5
    8c68:	80c00003 	ldbu	r3,0(r16)
    8c6c:	84000044 	addi	r16,r16,1
    8c70:	18803fcc 	andi	r2,r3,255
    8c74:	1080201c 	xori	r2,r2,128
    8c78:	10bfe004 	addi	r2,r2,-128
    8c7c:	10001426 	beq	r2,zero,8cd0 <___vfprintf_internal_r+0xd4>
    8c80:	acc03026 	beq	r21,r19,8d44 <___vfprintf_internal_r+0x148>
    8c84:	9d401f16 	blt	r19,r21,8d04 <___vfprintf_internal_r+0x108>
    8c88:	a83ff71e 	bne	r21,zero,8c68 <___vfprintf_internal_r+0x6c>
    8c8c:	01000944 	movi	r4,37
    8c90:	1100d926 	beq	r2,r4,8ff8 <___vfprintf_internal_r+0x3fc>
    8c94:	b8800117 	ldw	r2,4(r23)
    8c98:	d9000f17 	ldw	r4,60(sp)
    8c9c:	d8c00905 	stb	r3,36(sp)
    8ca0:	b80b883a 	mov	r5,r23
    8ca4:	d9800904 	addi	r6,sp,36
    8ca8:	01c00044 	movi	r7,1
    8cac:	103ee83a 	callr	r2
    8cb0:	1000a31e 	bne	r2,zero,8f40 <___vfprintf_internal_r+0x344>
    8cb4:	80c00003 	ldbu	r3,0(r16)
    8cb8:	94800044 	addi	r18,r18,1
    8cbc:	84000044 	addi	r16,r16,1
    8cc0:	18803fcc 	andi	r2,r3,255
    8cc4:	1080201c 	xori	r2,r2,128
    8cc8:	10bfe004 	addi	r2,r2,-128
    8ccc:	103fec1e 	bne	r2,zero,8c80 <___vfprintf_internal_r+0x84>
    8cd0:	9005883a 	mov	r2,r18
    8cd4:	dfc01f17 	ldw	ra,124(sp)
    8cd8:	df001e17 	ldw	fp,120(sp)
    8cdc:	ddc01d17 	ldw	r23,116(sp)
    8ce0:	dd801c17 	ldw	r22,112(sp)
    8ce4:	dd401b17 	ldw	r21,108(sp)
    8ce8:	dd001a17 	ldw	r20,104(sp)
    8cec:	dcc01917 	ldw	r19,100(sp)
    8cf0:	dc801817 	ldw	r18,96(sp)
    8cf4:	dc401717 	ldw	r17,92(sp)
    8cf8:	dc001617 	ldw	r16,88(sp)
    8cfc:	dec02004 	addi	sp,sp,128
    8d00:	f800283a 	ret
    8d04:	01000084 	movi	r4,2
    8d08:	a9001226 	beq	r21,r4,8d54 <___vfprintf_internal_r+0x158>
    8d0c:	010000c4 	movi	r4,3
    8d10:	a93fd51e 	bne	r21,r4,8c68 <___vfprintf_internal_r+0x6c>
    8d14:	1c7ff404 	addi	r17,r3,-48
    8d18:	8c403fcc 	andi	r17,r17,255
    8d1c:	01000244 	movi	r4,9
    8d20:	24401b36 	bltu	r4,r17,8d90 <___vfprintf_internal_r+0x194>
    8d24:	d9000b17 	ldw	r4,44(sp)
    8d28:	00bfffc4 	movi	r2,-1
    8d2c:	2080ea26 	beq	r4,r2,90d8 <___vfprintf_internal_r+0x4dc>
    8d30:	01400284 	movi	r5,10
    8d34:	00094a00 	call	94a0 <__mulsi3>
    8d38:	88a3883a 	add	r17,r17,r2
    8d3c:	dc400b15 	stw	r17,44(sp)
    8d40:	003fc906 	br	8c68 <___vfprintf_internal_r+0x6c>
    8d44:	01000c04 	movi	r4,48
    8d48:	1100de26 	beq	r2,r4,90c4 <___vfprintf_internal_r+0x4c8>
    8d4c:	01000944 	movi	r4,37
    8d50:	1100fd26 	beq	r2,r4,9148 <___vfprintf_internal_r+0x54c>
    8d54:	1c7ff404 	addi	r17,r3,-48
    8d58:	8c403fcc 	andi	r17,r17,255
    8d5c:	01000244 	movi	r4,9
    8d60:	24400936 	bltu	r4,r17,8d88 <___vfprintf_internal_r+0x18c>
    8d64:	d9000c17 	ldw	r4,48(sp)
    8d68:	00bfffc4 	movi	r2,-1
    8d6c:	2080d826 	beq	r4,r2,90d0 <___vfprintf_internal_r+0x4d4>
    8d70:	01400284 	movi	r5,10
    8d74:	00094a00 	call	94a0 <__mulsi3>
    8d78:	88a3883a 	add	r17,r17,r2
    8d7c:	dc400c15 	stw	r17,48(sp)
    8d80:	05400084 	movi	r21,2
    8d84:	003fb806 	br	8c68 <___vfprintf_internal_r+0x6c>
    8d88:	01000b84 	movi	r4,46
    8d8c:	1100a726 	beq	r2,r4,902c <___vfprintf_internal_r+0x430>
    8d90:	01401b04 	movi	r5,108
    8d94:	1140a326 	beq	r2,r5,9024 <___vfprintf_internal_r+0x428>
    8d98:	d9000b17 	ldw	r4,44(sp)
    8d9c:	00bfffc4 	movi	r2,-1
    8da0:	2080e626 	beq	r4,r2,913c <___vfprintf_internal_r+0x540>
    8da4:	d8001015 	stw	zero,64(sp)
    8da8:	18ffea04 	addi	r3,r3,-88
    8dac:	18c03fcc 	andi	r3,r3,255
    8db0:	00800804 	movi	r2,32
    8db4:	10c0022e 	bgeu	r2,r3,8dc0 <___vfprintf_internal_r+0x1c4>
    8db8:	002b883a 	mov	r21,zero
    8dbc:	003faa06 	br	8c68 <___vfprintf_internal_r+0x6c>
    8dc0:	18c7883a 	add	r3,r3,r3
    8dc4:	18c7883a 	add	r3,r3,r3
    8dc8:	01400074 	movhi	r5,1
    8dcc:	29637704 	addi	r5,r5,-29220
    8dd0:	1947883a 	add	r3,r3,r5
    8dd4:	18800017 	ldw	r2,0(r3)
    8dd8:	1000683a 	jmp	r2
    8ddc:	00009174 	movhi	zero,581
    8de0:	00008db8 	rdprs	zero,zero,566
    8de4:	00008db8 	rdprs	zero,zero,566
    8de8:	00008db8 	rdprs	zero,zero,566
    8dec:	00008db8 	rdprs	zero,zero,566
    8df0:	00008db8 	rdprs	zero,zero,566
    8df4:	00008db8 	rdprs	zero,zero,566
    8df8:	00008db8 	rdprs	zero,zero,566
    8dfc:	00008db8 	rdprs	zero,zero,566
    8e00:	00008db8 	rdprs	zero,zero,566
    8e04:	00008db8 	rdprs	zero,zero,566
    8e08:	00009184 	movi	zero,582
    8e0c:	00008e60 	cmpeqi	zero,zero,569
    8e10:	00008db8 	rdprs	zero,zero,566
    8e14:	00008db8 	rdprs	zero,zero,566
    8e18:	00008db8 	rdprs	zero,zero,566
    8e1c:	00008db8 	rdprs	zero,zero,566
    8e20:	00008e60 	cmpeqi	zero,zero,569
    8e24:	00008db8 	rdprs	zero,zero,566
    8e28:	00008db8 	rdprs	zero,zero,566
    8e2c:	00008db8 	rdprs	zero,zero,566
    8e30:	00008db8 	rdprs	zero,zero,566
    8e34:	00008db8 	rdprs	zero,zero,566
    8e38:	00008f48 	cmpgei	zero,zero,573
    8e3c:	00008db8 	rdprs	zero,zero,566
    8e40:	00008db8 	rdprs	zero,zero,566
    8e44:	00008db8 	rdprs	zero,zero,566
    8e48:	000091d0 	cmplti	zero,zero,583
    8e4c:	00008db8 	rdprs	zero,zero,566
    8e50:	00008f4c 	andi	zero,zero,573
    8e54:	00008db8 	rdprs	zero,zero,566
    8e58:	00008db8 	rdprs	zero,zero,566
    8e5c:	0000917c 	xorhi	zero,zero,581
    8e60:	d8c00d17 	ldw	r3,52(sp)
    8e64:	18003926 	beq	r3,zero,8f4c <___vfprintf_internal_r+0x350>
    8e68:	d9000e17 	ldw	r4,56(sp)
    8e6c:	00c00044 	movi	r3,1
    8e70:	25400017 	ldw	r21,0(r4)
    8e74:	21000104 	addi	r4,r4,4
    8e78:	d9000e15 	stw	r4,56(sp)
    8e7c:	d8c00d15 	stw	r3,52(sp)
    8e80:	a8012116 	blt	r21,zero,9308 <___vfprintf_internal_r+0x70c>
    8e84:	d8001215 	stw	zero,72(sp)
    8e88:	d823883a 	mov	r17,sp
    8e8c:	a800371e 	bne	r21,zero,8f6c <___vfprintf_internal_r+0x370>
    8e90:	d9400b17 	ldw	r5,44(sp)
    8e94:	d809883a 	mov	r4,sp
    8e98:	01400b0e 	bge	zero,r5,8ec8 <___vfprintf_internal_r+0x2cc>
    8e9c:	d8800b17 	ldw	r2,44(sp)
    8ea0:	d823883a 	mov	r17,sp
    8ea4:	00c00c04 	movi	r3,48
    8ea8:	00000206 	br	8eb4 <___vfprintf_internal_r+0x2b8>
    8eac:	d9400a17 	ldw	r5,40(sp)
    8eb0:	89400426 	beq	r17,r5,8ec4 <___vfprintf_internal_r+0x2c8>
    8eb4:	88c00005 	stb	r3,0(r17)
    8eb8:	10bfffc4 	addi	r2,r2,-1
    8ebc:	8c400044 	addi	r17,r17,1
    8ec0:	103ffa1e 	bne	r2,zero,8eac <___vfprintf_internal_r+0x2b0>
    8ec4:	892bc83a 	sub	r21,r17,r4
    8ec8:	d8c01217 	ldw	r3,72(sp)
    8ecc:	d9000c17 	ldw	r4,48(sp)
    8ed0:	a8c5883a 	add	r2,r21,r3
    8ed4:	d8c01017 	ldw	r3,64(sp)
    8ed8:	2085c83a 	sub	r2,r4,r2
    8edc:	d8801115 	stw	r2,68(sp)
    8ee0:	18007f26 	beq	r3,zero,90e0 <___vfprintf_internal_r+0x4e4>
    8ee4:	d8c01217 	ldw	r3,72(sp)
    8ee8:	1800fa1e 	bne	r3,zero,92d4 <___vfprintf_internal_r+0x6d8>
    8eec:	d8c01117 	ldw	r3,68(sp)
    8ef0:	00c0620e 	bge	zero,r3,907c <___vfprintf_internal_r+0x480>
    8ef4:	00800c04 	movi	r2,48
    8ef8:	d88008c5 	stb	r2,35(sp)
    8efc:	b805883a 	mov	r2,r23
    8f00:	dc001215 	stw	r16,72(sp)
    8f04:	882f883a 	mov	r23,r17
    8f08:	1f3fffc4 	addi	fp,r3,-1
    8f0c:	05bfffc4 	movi	r22,-1
    8f10:	dc000f17 	ldw	r16,60(sp)
    8f14:	1023883a 	mov	r17,r2
    8f18:	00000206 	br	8f24 <___vfprintf_internal_r+0x328>
    8f1c:	e73fffc4 	addi	fp,fp,-1
    8f20:	e580fc26 	beq	fp,r22,9314 <___vfprintf_internal_r+0x718>
    8f24:	88800117 	ldw	r2,4(r17)
    8f28:	8009883a 	mov	r4,r16
    8f2c:	880b883a 	mov	r5,r17
    8f30:	d98008c4 	addi	r6,sp,35
    8f34:	01c00044 	movi	r7,1
    8f38:	103ee83a 	callr	r2
    8f3c:	103ff726 	beq	r2,zero,8f1c <___vfprintf_internal_r+0x320>
    8f40:	04bfffc4 	movi	r18,-1
    8f44:	003f6206 	br	8cd0 <___vfprintf_internal_r+0xd4>
    8f48:	05000204 	movi	r20,8
    8f4c:	d9400e17 	ldw	r5,56(sp)
    8f50:	2d400017 	ldw	r21,0(r5)
    8f54:	29400104 	addi	r5,r5,4
    8f58:	d9400e15 	stw	r5,56(sp)
    8f5c:	d8000d15 	stw	zero,52(sp)
    8f60:	d8001215 	stw	zero,72(sp)
    8f64:	d823883a 	mov	r17,sp
    8f68:	a83fc926 	beq	r21,zero,8e90 <___vfprintf_internal_r+0x294>
    8f6c:	05800244 	movi	r22,9
    8f70:	dc001115 	stw	r16,68(sp)
    8f74:	df001417 	ldw	fp,80(sp)
    8f78:	00000506 	br	8f90 <___vfprintf_internal_r+0x394>
    8f7c:	15400c04 	addi	r21,r2,48
    8f80:	8d400005 	stb	r21,0(r17)
    8f84:	802b883a 	mov	r21,r16
    8f88:	8c400044 	addi	r17,r17,1
    8f8c:	80000f26 	beq	r16,zero,8fcc <___vfprintf_internal_r+0x3d0>
    8f90:	a809883a 	mov	r4,r21
    8f94:	a00b883a 	mov	r5,r20
    8f98:	0008aa80 	call	8aa8 <__udivsi3>
    8f9c:	a009883a 	mov	r4,r20
    8fa0:	100b883a 	mov	r5,r2
    8fa4:	1021883a 	mov	r16,r2
    8fa8:	00094a00 	call	94a0 <__mulsi3>
    8fac:	a885c83a 	sub	r2,r21,r2
    8fb0:	b0bff20e 	bge	r22,r2,8f7c <___vfprintf_internal_r+0x380>
    8fb4:	e0000e26 	beq	fp,zero,8ff0 <___vfprintf_internal_r+0x3f4>
    8fb8:	15400dc4 	addi	r21,r2,55
    8fbc:	8d400005 	stb	r21,0(r17)
    8fc0:	802b883a 	mov	r21,r16
    8fc4:	8c400044 	addi	r17,r17,1
    8fc8:	803ff11e 	bne	r16,zero,8f90 <___vfprintf_internal_r+0x394>
    8fcc:	d9000b17 	ldw	r4,44(sp)
    8fd0:	8eebc83a 	sub	r21,r17,sp
    8fd4:	dc001117 	ldw	r16,68(sp)
    8fd8:	2545c83a 	sub	r2,r4,r21
    8fdc:	d809883a 	mov	r4,sp
    8fe0:	00bfb90e 	bge	zero,r2,8ec8 <___vfprintf_internal_r+0x2cc>
    8fe4:	d8c00a17 	ldw	r3,40(sp)
    8fe8:	88ffae36 	bltu	r17,r3,8ea4 <___vfprintf_internal_r+0x2a8>
    8fec:	003fb606 	br	8ec8 <___vfprintf_internal_r+0x2cc>
    8ff0:	154015c4 	addi	r21,r2,87
    8ff4:	003fe206 	br	8f80 <___vfprintf_internal_r+0x384>
    8ff8:	00c00044 	movi	r3,1
    8ffc:	013fffc4 	movi	r4,-1
    9000:	d8c00d15 	stw	r3,52(sp)
    9004:	d9000b15 	stw	r4,44(sp)
    9008:	d8001415 	stw	zero,80(sp)
    900c:	05000284 	movi	r20,10
    9010:	d9000c15 	stw	r4,48(sp)
    9014:	d8001315 	stw	zero,76(sp)
    9018:	d8001015 	stw	zero,64(sp)
    901c:	182b883a 	mov	r21,r3
    9020:	003f1106 	br	8c68 <___vfprintf_internal_r+0x6c>
    9024:	00c00044 	movi	r3,1
    9028:	d8c01315 	stw	r3,76(sp)
    902c:	054000c4 	movi	r21,3
    9030:	003f0d06 	br	8c68 <___vfprintf_internal_r+0x6c>
    9034:	d8c01117 	ldw	r3,68(sp)
    9038:	dc001517 	ldw	r16,84(sp)
    903c:	8805883a 	mov	r2,r17
    9040:	90e5883a 	add	r18,r18,r3
    9044:	b823883a 	mov	r17,r23
    9048:	102f883a 	mov	r23,r2
    904c:	d8c01217 	ldw	r3,72(sp)
    9050:	18000a26 	beq	r3,zero,907c <___vfprintf_internal_r+0x480>
    9054:	b8800117 	ldw	r2,4(r23)
    9058:	d9000f17 	ldw	r4,60(sp)
    905c:	00c00b44 	movi	r3,45
    9060:	d8c00905 	stb	r3,36(sp)
    9064:	b80b883a 	mov	r5,r23
    9068:	d9800904 	addi	r6,sp,36
    906c:	01c00044 	movi	r7,1
    9070:	103ee83a 	callr	r2
    9074:	103fb21e 	bne	r2,zero,8f40 <___vfprintf_internal_r+0x344>
    9078:	94800044 	addi	r18,r18,1
    907c:	8d6dc83a 	sub	r22,r17,r21
    9080:	057f4d0e 	bge	zero,r21,8db8 <___vfprintf_internal_r+0x1bc>
    9084:	dd400f17 	ldw	r21,60(sp)
    9088:	00000206 	br	9094 <___vfprintf_internal_r+0x498>
    908c:	94800044 	addi	r18,r18,1
    9090:	8dbf4926 	beq	r17,r22,8db8 <___vfprintf_internal_r+0x1bc>
    9094:	8c7fffc4 	addi	r17,r17,-1
    9098:	88c00003 	ldbu	r3,0(r17)
    909c:	b8800117 	ldw	r2,4(r23)
    90a0:	a809883a 	mov	r4,r21
    90a4:	d8c00905 	stb	r3,36(sp)
    90a8:	b80b883a 	mov	r5,r23
    90ac:	d9800904 	addi	r6,sp,36
    90b0:	01c00044 	movi	r7,1
    90b4:	103ee83a 	callr	r2
    90b8:	103ff426 	beq	r2,zero,908c <___vfprintf_internal_r+0x490>
    90bc:	04bfffc4 	movi	r18,-1
    90c0:	003f0306 	br	8cd0 <___vfprintf_internal_r+0xd4>
    90c4:	dd401015 	stw	r21,64(sp)
    90c8:	05400084 	movi	r21,2
    90cc:	003ee606 	br	8c68 <___vfprintf_internal_r+0x6c>
    90d0:	0005883a 	mov	r2,zero
    90d4:	003f2806 	br	8d78 <___vfprintf_internal_r+0x17c>
    90d8:	0005883a 	mov	r2,zero
    90dc:	003f1606 	br	8d38 <___vfprintf_internal_r+0x13c>
    90e0:	d8c01117 	ldw	r3,68(sp)
    90e4:	00ffd90e 	bge	zero,r3,904c <___vfprintf_internal_r+0x450>
    90e8:	00800804 	movi	r2,32
    90ec:	d8800885 	stb	r2,34(sp)
    90f0:	b805883a 	mov	r2,r23
    90f4:	dc001515 	stw	r16,84(sp)
    90f8:	882f883a 	mov	r23,r17
    90fc:	1f3fffc4 	addi	fp,r3,-1
    9100:	05bfffc4 	movi	r22,-1
    9104:	dc000f17 	ldw	r16,60(sp)
    9108:	1023883a 	mov	r17,r2
    910c:	00000206 	br	9118 <___vfprintf_internal_r+0x51c>
    9110:	e73fffc4 	addi	fp,fp,-1
    9114:	e5bfc726 	beq	fp,r22,9034 <___vfprintf_internal_r+0x438>
    9118:	88800117 	ldw	r2,4(r17)
    911c:	8009883a 	mov	r4,r16
    9120:	880b883a 	mov	r5,r17
    9124:	d9800884 	addi	r6,sp,34
    9128:	01c00044 	movi	r7,1
    912c:	103ee83a 	callr	r2
    9130:	103ff726 	beq	r2,zero,9110 <___vfprintf_internal_r+0x514>
    9134:	04bfffc4 	movi	r18,-1
    9138:	003ee506 	br	8cd0 <___vfprintf_internal_r+0xd4>
    913c:	01000044 	movi	r4,1
    9140:	d9000b15 	stw	r4,44(sp)
    9144:	003f1806 	br	8da8 <___vfprintf_internal_r+0x1ac>
    9148:	b8c00117 	ldw	r3,4(r23)
    914c:	d9000f17 	ldw	r4,60(sp)
    9150:	d8800905 	stb	r2,36(sp)
    9154:	b80b883a 	mov	r5,r23
    9158:	d9800904 	addi	r6,sp,36
    915c:	a80f883a 	mov	r7,r21
    9160:	183ee83a 	callr	r3
    9164:	103f761e 	bne	r2,zero,8f40 <___vfprintf_internal_r+0x344>
    9168:	94800044 	addi	r18,r18,1
    916c:	002b883a 	mov	r21,zero
    9170:	003ebd06 	br	8c68 <___vfprintf_internal_r+0x6c>
    9174:	00c00044 	movi	r3,1
    9178:	d8c01415 	stw	r3,80(sp)
    917c:	05000404 	movi	r20,16
    9180:	003f7206 	br	8f4c <___vfprintf_internal_r+0x350>
    9184:	d9000c17 	ldw	r4,48(sp)
    9188:	9900420e 	bge	r19,r4,9294 <___vfprintf_internal_r+0x698>
    918c:	df000f17 	ldw	fp,60(sp)
    9190:	25bfffc4 	addi	r22,r4,-1
    9194:	00800804 	movi	r2,32
    9198:	d8800845 	stb	r2,33(sp)
    919c:	b023883a 	mov	r17,r22
    91a0:	057fffc4 	movi	r21,-1
    91a4:	8c7fffc4 	addi	r17,r17,-1
    91a8:	8d403926 	beq	r17,r21,9290 <___vfprintf_internal_r+0x694>
    91ac:	b8800117 	ldw	r2,4(r23)
    91b0:	e009883a 	mov	r4,fp
    91b4:	b80b883a 	mov	r5,r23
    91b8:	d9800844 	addi	r6,sp,33
    91bc:	01c00044 	movi	r7,1
    91c0:	103ee83a 	callr	r2
    91c4:	103ff726 	beq	r2,zero,91a4 <___vfprintf_internal_r+0x5a8>
    91c8:	04bfffc4 	movi	r18,-1
    91cc:	003ec006 	br	8cd0 <___vfprintf_internal_r+0xd4>
    91d0:	d9000e17 	ldw	r4,56(sp)
    91d4:	d8c00e17 	ldw	r3,56(sp)
    91d8:	21000017 	ldw	r4,0(r4)
    91dc:	18c00104 	addi	r3,r3,4
    91e0:	d8c00e15 	stw	r3,56(sp)
    91e4:	d9001215 	stw	r4,72(sp)
    91e8:	0008bd40 	call	8bd4 <strlen>
    91ec:	d9000c17 	ldw	r4,48(sp)
    91f0:	102d883a 	mov	r22,r2
    91f4:	20b9c83a 	sub	fp,r4,r2
    91f8:	07001b0e 	bge	zero,fp,9268 <___vfprintf_internal_r+0x66c>
    91fc:	00800804 	movi	r2,32
    9200:	d8800805 	stb	r2,32(sp)
    9204:	b805883a 	mov	r2,r23
    9208:	dc001115 	stw	r16,68(sp)
    920c:	b02f883a 	mov	r23,r22
    9210:	e47fffc4 	addi	r17,fp,-1
    9214:	902d883a 	mov	r22,r18
    9218:	057fffc4 	movi	r21,-1
    921c:	dc000f17 	ldw	r16,60(sp)
    9220:	1025883a 	mov	r18,r2
    9224:	00000206 	br	9230 <___vfprintf_internal_r+0x634>
    9228:	8c7fffc4 	addi	r17,r17,-1
    922c:	8d400826 	beq	r17,r21,9250 <___vfprintf_internal_r+0x654>
    9230:	90800117 	ldw	r2,4(r18)
    9234:	8009883a 	mov	r4,r16
    9238:	900b883a 	mov	r5,r18
    923c:	d9800804 	addi	r6,sp,32
    9240:	01c00044 	movi	r7,1
    9244:	103ee83a 	callr	r2
    9248:	103ff726 	beq	r2,zero,9228 <___vfprintf_internal_r+0x62c>
    924c:	003f3c06 	br	8f40 <___vfprintf_internal_r+0x344>
    9250:	dc001117 	ldw	r16,68(sp)
    9254:	9005883a 	mov	r2,r18
    9258:	b025883a 	mov	r18,r22
    925c:	9725883a 	add	r18,r18,fp
    9260:	b82d883a 	mov	r22,r23
    9264:	102f883a 	mov	r23,r2
    9268:	b8800117 	ldw	r2,4(r23)
    926c:	d9000f17 	ldw	r4,60(sp)
    9270:	d9801217 	ldw	r6,72(sp)
    9274:	b80b883a 	mov	r5,r23
    9278:	b00f883a 	mov	r7,r22
    927c:	103ee83a 	callr	r2
    9280:	103f2f1e 	bne	r2,zero,8f40 <___vfprintf_internal_r+0x344>
    9284:	95a5883a 	add	r18,r18,r22
    9288:	002b883a 	mov	r21,zero
    928c:	003e7606 	br	8c68 <___vfprintf_internal_r+0x6c>
    9290:	95a5883a 	add	r18,r18,r22
    9294:	d9400e17 	ldw	r5,56(sp)
    9298:	b8800117 	ldw	r2,4(r23)
    929c:	d9000f17 	ldw	r4,60(sp)
    92a0:	28c00017 	ldw	r3,0(r5)
    92a4:	d9800904 	addi	r6,sp,36
    92a8:	b80b883a 	mov	r5,r23
    92ac:	d8c00905 	stb	r3,36(sp)
    92b0:	d8c00e17 	ldw	r3,56(sp)
    92b4:	01c00044 	movi	r7,1
    92b8:	1c400104 	addi	r17,r3,4
    92bc:	103ee83a 	callr	r2
    92c0:	103f1f1e 	bne	r2,zero,8f40 <___vfprintf_internal_r+0x344>
    92c4:	94800044 	addi	r18,r18,1
    92c8:	dc400e15 	stw	r17,56(sp)
    92cc:	002b883a 	mov	r21,zero
    92d0:	003e6506 	br	8c68 <___vfprintf_internal_r+0x6c>
    92d4:	b8800117 	ldw	r2,4(r23)
    92d8:	d9000f17 	ldw	r4,60(sp)
    92dc:	00c00b44 	movi	r3,45
    92e0:	d8c00905 	stb	r3,36(sp)
    92e4:	b80b883a 	mov	r5,r23
    92e8:	d9800904 	addi	r6,sp,36
    92ec:	01c00044 	movi	r7,1
    92f0:	103ee83a 	callr	r2
    92f4:	103f121e 	bne	r2,zero,8f40 <___vfprintf_internal_r+0x344>
    92f8:	d8c01117 	ldw	r3,68(sp)
    92fc:	94800044 	addi	r18,r18,1
    9300:	00fefc16 	blt	zero,r3,8ef4 <___vfprintf_internal_r+0x2f8>
    9304:	003f5d06 	br	907c <___vfprintf_internal_r+0x480>
    9308:	056bc83a 	sub	r21,zero,r21
    930c:	d8c01215 	stw	r3,72(sp)
    9310:	003f1406 	br	8f64 <___vfprintf_internal_r+0x368>
    9314:	d8c01117 	ldw	r3,68(sp)
    9318:	8805883a 	mov	r2,r17
    931c:	dc001217 	ldw	r16,72(sp)
    9320:	b823883a 	mov	r17,r23
    9324:	90e5883a 	add	r18,r18,r3
    9328:	102f883a 	mov	r23,r2
    932c:	003f5306 	br	907c <___vfprintf_internal_r+0x480>

00009330 <__vfprintf_internal>:
    9330:	00800074 	movhi	r2,1
    9334:	10acc304 	addi	r2,r2,-19700
    9338:	2007883a 	mov	r3,r4
    933c:	11000017 	ldw	r4,0(r2)
    9340:	2805883a 	mov	r2,r5
    9344:	300f883a 	mov	r7,r6
    9348:	180b883a 	mov	r5,r3
    934c:	100d883a 	mov	r6,r2
    9350:	0008bfc1 	jmpi	8bfc <___vfprintf_internal_r>

00009354 <__sfvwrite_small_dev>:
    9354:	2880000b 	ldhu	r2,0(r5)
    9358:	defffa04 	addi	sp,sp,-24
    935c:	dcc00315 	stw	r19,12(sp)
    9360:	10c0020c 	andi	r3,r2,8
    9364:	18ffffcc 	andi	r3,r3,65535
    9368:	18e0001c 	xori	r3,r3,32768
    936c:	dc800215 	stw	r18,8(sp)
    9370:	dc400115 	stw	r17,4(sp)
    9374:	dfc00515 	stw	ra,20(sp)
    9378:	dd000415 	stw	r20,16(sp)
    937c:	dc000015 	stw	r16,0(sp)
    9380:	18e00004 	addi	r3,r3,-32768
    9384:	2825883a 	mov	r18,r5
    9388:	2027883a 	mov	r19,r4
    938c:	3023883a 	mov	r17,r6
    9390:	18002626 	beq	r3,zero,942c <__sfvwrite_small_dev+0xd8>
    9394:	2940008f 	ldh	r5,2(r5)
    9398:	28001016 	blt	r5,zero,93dc <__sfvwrite_small_dev+0x88>
    939c:	01c01a0e 	bge	zero,r7,9408 <__sfvwrite_small_dev+0xb4>
    93a0:	3821883a 	mov	r16,r7
    93a4:	05010004 	movi	r20,1024
    93a8:	00000306 	br	93b8 <__sfvwrite_small_dev+0x64>
    93ac:	88a3883a 	add	r17,r17,r2
    93b0:	0400150e 	bge	zero,r16,9408 <__sfvwrite_small_dev+0xb4>
    93b4:	9140008f 	ldh	r5,2(r18)
    93b8:	880d883a 	mov	r6,r17
    93bc:	9809883a 	mov	r4,r19
    93c0:	800f883a 	mov	r7,r16
    93c4:	a400010e 	bge	r20,r16,93cc <__sfvwrite_small_dev+0x78>
    93c8:	01c10004 	movi	r7,1024
    93cc:	00094340 	call	9434 <_write_r>
    93d0:	80a1c83a 	sub	r16,r16,r2
    93d4:	00bff516 	blt	zero,r2,93ac <__sfvwrite_small_dev+0x58>
    93d8:	9080000b 	ldhu	r2,0(r18)
    93dc:	10801014 	ori	r2,r2,64
    93e0:	9080000d 	sth	r2,0(r18)
    93e4:	00bfffc4 	movi	r2,-1
    93e8:	dfc00517 	ldw	ra,20(sp)
    93ec:	dd000417 	ldw	r20,16(sp)
    93f0:	dcc00317 	ldw	r19,12(sp)
    93f4:	dc800217 	ldw	r18,8(sp)
    93f8:	dc400117 	ldw	r17,4(sp)
    93fc:	dc000017 	ldw	r16,0(sp)
    9400:	dec00604 	addi	sp,sp,24
    9404:	f800283a 	ret
    9408:	0005883a 	mov	r2,zero
    940c:	dfc00517 	ldw	ra,20(sp)
    9410:	dd000417 	ldw	r20,16(sp)
    9414:	dcc00317 	ldw	r19,12(sp)
    9418:	dc800217 	ldw	r18,8(sp)
    941c:	dc400117 	ldw	r17,4(sp)
    9420:	dc000017 	ldw	r16,0(sp)
    9424:	dec00604 	addi	sp,sp,24
    9428:	f800283a 	ret
    942c:	00bfffc4 	movi	r2,-1
    9430:	003fed06 	br	93e8 <__sfvwrite_small_dev+0x94>

00009434 <_write_r>:
    9434:	defffd04 	addi	sp,sp,-12
    9438:	dc400115 	stw	r17,4(sp)
    943c:	dc000015 	stw	r16,0(sp)
    9440:	2023883a 	mov	r17,r4
    9444:	04000074 	movhi	r16,1
    9448:	842d9404 	addi	r16,r16,-18864
    944c:	2809883a 	mov	r4,r5
    9450:	300b883a 	mov	r5,r6
    9454:	380d883a 	mov	r6,r7
    9458:	dfc00215 	stw	ra,8(sp)
    945c:	80000015 	stw	zero,0(r16)
    9460:	000984c0 	call	984c <write>
    9464:	00ffffc4 	movi	r3,-1
    9468:	10c00526 	beq	r2,r3,9480 <_write_r+0x4c>
    946c:	dfc00217 	ldw	ra,8(sp)
    9470:	dc400117 	ldw	r17,4(sp)
    9474:	dc000017 	ldw	r16,0(sp)
    9478:	dec00304 	addi	sp,sp,12
    947c:	f800283a 	ret
    9480:	80c00017 	ldw	r3,0(r16)
    9484:	183ff926 	beq	r3,zero,946c <_write_r+0x38>
    9488:	88c00015 	stw	r3,0(r17)
    948c:	dfc00217 	ldw	ra,8(sp)
    9490:	dc400117 	ldw	r17,4(sp)
    9494:	dc000017 	ldw	r16,0(sp)
    9498:	dec00304 	addi	sp,sp,12
    949c:	f800283a 	ret

000094a0 <__mulsi3>:
    94a0:	0005883a 	mov	r2,zero
    94a4:	20000726 	beq	r4,zero,94c4 <__mulsi3+0x24>
    94a8:	20c0004c 	andi	r3,r4,1
    94ac:	2008d07a 	srli	r4,r4,1
    94b0:	18000126 	beq	r3,zero,94b8 <__mulsi3+0x18>
    94b4:	1145883a 	add	r2,r2,r5
    94b8:	294b883a 	add	r5,r5,r5
    94bc:	203ffa1e 	bne	r4,zero,94a8 <__mulsi3+0x8>
    94c0:	f800283a 	ret
    94c4:	f800283a 	ret

000094c8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    94c8:	defff004 	addi	sp,sp,-64
    94cc:	df000f15 	stw	fp,60(sp)
    94d0:	df000f04 	addi	fp,sp,60
    94d4:	e13ffd15 	stw	r4,-12(fp)
    94d8:	e17ffe15 	stw	r5,-8(fp)
    94dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    94e0:	00bffa84 	movi	r2,-22
    94e4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    94e8:	e0bffd17 	ldw	r2,-12(fp)
    94ec:	10800828 	cmpgeui	r2,r2,32
    94f0:	10005c1e 	bne	r2,zero,9664 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    94f4:	0005303a 	rdctl	r2,status
    94f8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    94fc:	e0fff317 	ldw	r3,-52(fp)
    9500:	00bfff84 	movi	r2,-2
    9504:	1884703a 	and	r2,r3,r2
    9508:	1001703a 	wrctl	status,r2
  
  return context;
    950c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    9510:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    9514:	00c00074 	movhi	r3,1
    9518:	18f19b04 	addi	r3,r3,-14740
    951c:	e0bffd17 	ldw	r2,-12(fp)
    9520:	100490fa 	slli	r2,r2,3
    9524:	1885883a 	add	r2,r3,r2
    9528:	e0ffff17 	ldw	r3,-4(fp)
    952c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    9530:	00c00074 	movhi	r3,1
    9534:	18f19b04 	addi	r3,r3,-14740
    9538:	e0bffd17 	ldw	r2,-12(fp)
    953c:	100490fa 	slli	r2,r2,3
    9540:	1885883a 	add	r2,r3,r2
    9544:	10800104 	addi	r2,r2,4
    9548:	e0fffe17 	ldw	r3,-8(fp)
    954c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    9550:	e0bfff17 	ldw	r2,-4(fp)
    9554:	10001f26 	beq	r2,zero,95d4 <alt_irq_register+0x10c>
    9558:	e0bffd17 	ldw	r2,-12(fp)
    955c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9560:	0005303a 	rdctl	r2,status
    9564:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9568:	e0fff517 	ldw	r3,-44(fp)
    956c:	00bfff84 	movi	r2,-2
    9570:	1884703a 	and	r2,r3,r2
    9574:	1001703a 	wrctl	status,r2
  
  return context;
    9578:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    957c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    9580:	e0bff417 	ldw	r2,-48(fp)
    9584:	00c00044 	movi	r3,1
    9588:	1884983a 	sll	r2,r3,r2
    958c:	1007883a 	mov	r3,r2
    9590:	00800074 	movhi	r2,1
    9594:	10ad9504 	addi	r2,r2,-18860
    9598:	10800017 	ldw	r2,0(r2)
    959c:	1886b03a 	or	r3,r3,r2
    95a0:	00800074 	movhi	r2,1
    95a4:	10ad9504 	addi	r2,r2,-18860
    95a8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    95ac:	00800074 	movhi	r2,1
    95b0:	10ad9504 	addi	r2,r2,-18860
    95b4:	10800017 	ldw	r2,0(r2)
    95b8:	100170fa 	wrctl	ienable,r2
    95bc:	e0bff617 	ldw	r2,-40(fp)
    95c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95c4:	e0bff717 	ldw	r2,-36(fp)
    95c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    95cc:	0005883a 	mov	r2,zero
    95d0:	00001f06 	br	9650 <alt_irq_register+0x188>
    95d4:	e0bffd17 	ldw	r2,-12(fp)
    95d8:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    95dc:	0005303a 	rdctl	r2,status
    95e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95e4:	e0fff917 	ldw	r3,-28(fp)
    95e8:	00bfff84 	movi	r2,-2
    95ec:	1884703a 	and	r2,r3,r2
    95f0:	1001703a 	wrctl	status,r2
  
  return context;
    95f4:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    95f8:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    95fc:	e0bff817 	ldw	r2,-32(fp)
    9600:	00c00044 	movi	r3,1
    9604:	1884983a 	sll	r2,r3,r2
    9608:	0084303a 	nor	r2,zero,r2
    960c:	1007883a 	mov	r3,r2
    9610:	00800074 	movhi	r2,1
    9614:	10ad9504 	addi	r2,r2,-18860
    9618:	10800017 	ldw	r2,0(r2)
    961c:	1886703a 	and	r3,r3,r2
    9620:	00800074 	movhi	r2,1
    9624:	10ad9504 	addi	r2,r2,-18860
    9628:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    962c:	00800074 	movhi	r2,1
    9630:	10ad9504 	addi	r2,r2,-18860
    9634:	10800017 	ldw	r2,0(r2)
    9638:	100170fa 	wrctl	ienable,r2
    963c:	e0bffa17 	ldw	r2,-24(fp)
    9640:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9644:	e0bffb17 	ldw	r2,-20(fp)
    9648:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    964c:	0005883a 	mov	r2,zero
    9650:	e0bff115 	stw	r2,-60(fp)
    9654:	e0bff217 	ldw	r2,-56(fp)
    9658:	e0bffc15 	stw	r2,-16(fp)
    965c:	e0bffc17 	ldw	r2,-16(fp)
    9660:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    9664:	e0bff117 	ldw	r2,-60(fp)
}
    9668:	e037883a 	mov	sp,fp
    966c:	df000017 	ldw	fp,0(sp)
    9670:	dec00104 	addi	sp,sp,4
    9674:	f800283a 	ret

00009678 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9678:	defffc04 	addi	sp,sp,-16
    967c:	df000315 	stw	fp,12(sp)
    9680:	df000304 	addi	fp,sp,12
    9684:	e13ffd15 	stw	r4,-12(fp)
    9688:	e17ffe15 	stw	r5,-8(fp)
    968c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9690:	e0fffe17 	ldw	r3,-8(fp)
    9694:	e0bffd17 	ldw	r2,-12(fp)
    9698:	18800e26 	beq	r3,r2,96d4 <alt_load_section+0x5c>
  {
    while( to != end )
    969c:	00000a06 	br	96c8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    96a0:	e0bffd17 	ldw	r2,-12(fp)
    96a4:	10c00017 	ldw	r3,0(r2)
    96a8:	e0bffe17 	ldw	r2,-8(fp)
    96ac:	10c00015 	stw	r3,0(r2)
    96b0:	e0bffe17 	ldw	r2,-8(fp)
    96b4:	10800104 	addi	r2,r2,4
    96b8:	e0bffe15 	stw	r2,-8(fp)
    96bc:	e0bffd17 	ldw	r2,-12(fp)
    96c0:	10800104 	addi	r2,r2,4
    96c4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    96c8:	e0fffe17 	ldw	r3,-8(fp)
    96cc:	e0bfff17 	ldw	r2,-4(fp)
    96d0:	18bff31e 	bne	r3,r2,96a0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    96d4:	e037883a 	mov	sp,fp
    96d8:	df000017 	ldw	fp,0(sp)
    96dc:	dec00104 	addi	sp,sp,4
    96e0:	f800283a 	ret

000096e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    96e4:	defffe04 	addi	sp,sp,-8
    96e8:	dfc00115 	stw	ra,4(sp)
    96ec:	df000015 	stw	fp,0(sp)
    96f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    96f4:	01000074 	movhi	r4,1
    96f8:	212ccd04 	addi	r4,r4,-19660
    96fc:	01400074 	movhi	r5,1
    9700:	296c0a04 	addi	r5,r5,-20440
    9704:	01800074 	movhi	r6,1
    9708:	31accd04 	addi	r6,r6,-19660
    970c:	00096780 	call	9678 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9710:	01000074 	movhi	r4,1
    9714:	21200804 	addi	r4,r4,-32736
    9718:	01400074 	movhi	r5,1
    971c:	29600804 	addi	r5,r5,-32736
    9720:	01800074 	movhi	r6,1
    9724:	31a06f04 	addi	r6,r6,-32324
    9728:	00096780 	call	9678 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    972c:	01000074 	movhi	r4,1
    9730:	212bf104 	addi	r4,r4,-20540
    9734:	01400074 	movhi	r5,1
    9738:	296bf104 	addi	r5,r5,-20540
    973c:	01800074 	movhi	r6,1
    9740:	31ac0a04 	addi	r6,r6,-20440
    9744:	00096780 	call	9678 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9748:	000a2b00 	call	a2b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    974c:	000a3e80 	call	a3e8 <alt_icache_flush_all>
}
    9750:	e037883a 	mov	sp,fp
    9754:	dfc00117 	ldw	ra,4(sp)
    9758:	df000017 	ldw	fp,0(sp)
    975c:	dec00204 	addi	sp,sp,8
    9760:	f800283a 	ret

00009764 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9764:	defffd04 	addi	sp,sp,-12
    9768:	dfc00215 	stw	ra,8(sp)
    976c:	df000115 	stw	fp,4(sp)
    9770:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9774:	0009883a 	mov	r4,zero
    9778:	00099740 	call	9974 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    977c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9780:	00099a80 	call	99a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9784:	01000074 	movhi	r4,1
    9788:	212bfc04 	addi	r4,r4,-20496
    978c:	01400074 	movhi	r5,1
    9790:	296bfc04 	addi	r5,r5,-20496
    9794:	01800074 	movhi	r6,1
    9798:	31abfc04 	addi	r6,r6,-20496
    979c:	000a4f80 	call	a4f8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    97a0:	d120d417 	ldw	r4,-31920(gp)
    97a4:	d0e0d517 	ldw	r3,-31916(gp)
    97a8:	d0a0d617 	ldw	r2,-31912(gp)
    97ac:	180b883a 	mov	r5,r3
    97b0:	100d883a 	mov	r6,r2
    97b4:	00089200 	call	8920 <main>
    97b8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    97bc:	01000044 	movi	r4,1
    97c0:	000a1e40 	call	a1e4 <close>
  exit (result);
    97c4:	e13fff17 	ldw	r4,-4(fp)
    97c8:	000ad480 	call	ad48 <exit>

000097cc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    97cc:	defffd04 	addi	sp,sp,-12
    97d0:	dfc00215 	stw	ra,8(sp)
    97d4:	df000115 	stw	fp,4(sp)
    97d8:	df000104 	addi	fp,sp,4
    97dc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    97e0:	e13fff17 	ldw	r4,-4(fp)
    97e4:	000a0400 	call	a040 <alt_busy_sleep>
}
    97e8:	e037883a 	mov	sp,fp
    97ec:	dfc00117 	ldw	ra,4(sp)
    97f0:	df000017 	ldw	fp,0(sp)
    97f4:	dec00204 	addi	sp,sp,8
    97f8:	f800283a 	ret

000097fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    97fc:	defffe04 	addi	sp,sp,-8
    9800:	dfc00115 	stw	ra,4(sp)
    9804:	df000015 	stw	fp,0(sp)
    9808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    980c:	00800074 	movhi	r2,1
    9810:	10acca04 	addi	r2,r2,-19672
    9814:	10800017 	ldw	r2,0(r2)
    9818:	10000526 	beq	r2,zero,9830 <alt_get_errno+0x34>
    981c:	00800074 	movhi	r2,1
    9820:	10acca04 	addi	r2,r2,-19672
    9824:	10800017 	ldw	r2,0(r2)
    9828:	103ee83a 	callr	r2
    982c:	00000206 	br	9838 <alt_get_errno+0x3c>
    9830:	00800074 	movhi	r2,1
    9834:	10ad9404 	addi	r2,r2,-18864
}
    9838:	e037883a 	mov	sp,fp
    983c:	dfc00117 	ldw	ra,4(sp)
    9840:	df000017 	ldw	fp,0(sp)
    9844:	dec00204 	addi	sp,sp,8
    9848:	f800283a 	ret

0000984c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    984c:	defff904 	addi	sp,sp,-28
    9850:	dfc00615 	stw	ra,24(sp)
    9854:	df000515 	stw	fp,20(sp)
    9858:	df000504 	addi	fp,sp,20
    985c:	e13ffd15 	stw	r4,-12(fp)
    9860:	e17ffe15 	stw	r5,-8(fp)
    9864:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9868:	e0bffd17 	ldw	r2,-12(fp)
    986c:	10000716 	blt	r2,zero,988c <write+0x40>
    9870:	e13ffd17 	ldw	r4,-12(fp)
    9874:	01400304 	movi	r5,12
    9878:	00094a00 	call	94a0 <__mulsi3>
    987c:	00c00074 	movhi	r3,1
    9880:	18ec6204 	addi	r3,r3,-20088
    9884:	10c5883a 	add	r2,r2,r3
    9888:	00000106 	br	9890 <write+0x44>
    988c:	0005883a 	mov	r2,zero
    9890:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9894:	e0bffb17 	ldw	r2,-20(fp)
    9898:	10001f26 	beq	r2,zero,9918 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    989c:	e0bffb17 	ldw	r2,-20(fp)
    98a0:	10800217 	ldw	r2,8(r2)
    98a4:	108000cc 	andi	r2,r2,3
    98a8:	10001726 	beq	r2,zero,9908 <write+0xbc>
    98ac:	e0bffb17 	ldw	r2,-20(fp)
    98b0:	10800017 	ldw	r2,0(r2)
    98b4:	10800617 	ldw	r2,24(r2)
    98b8:	10001326 	beq	r2,zero,9908 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    98bc:	e0bffb17 	ldw	r2,-20(fp)
    98c0:	10800017 	ldw	r2,0(r2)
    98c4:	10c00617 	ldw	r3,24(r2)
    98c8:	e0bfff17 	ldw	r2,-4(fp)
    98cc:	e13ffb17 	ldw	r4,-20(fp)
    98d0:	e17ffe17 	ldw	r5,-8(fp)
    98d4:	100d883a 	mov	r6,r2
    98d8:	183ee83a 	callr	r3
    98dc:	e0bffc15 	stw	r2,-16(fp)
    98e0:	e0bffc17 	ldw	r2,-16(fp)
    98e4:	1000060e 	bge	r2,zero,9900 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    98e8:	00097fc0 	call	97fc <alt_get_errno>
    98ec:	e0fffc17 	ldw	r3,-16(fp)
    98f0:	00c7c83a 	sub	r3,zero,r3
    98f4:	10c00015 	stw	r3,0(r2)
        return -1;
    98f8:	00bfffc4 	movi	r2,-1
    98fc:	00000a06 	br	9928 <write+0xdc>
      }
      return rval;
    9900:	e0bffc17 	ldw	r2,-16(fp)
    9904:	00000806 	br	9928 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9908:	00097fc0 	call	97fc <alt_get_errno>
    990c:	00c00344 	movi	r3,13
    9910:	10c00015 	stw	r3,0(r2)
    9914:	00000306 	br	9924 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9918:	00097fc0 	call	97fc <alt_get_errno>
    991c:	00c01444 	movi	r3,81
    9920:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    9924:	00bfffc4 	movi	r2,-1
}
    9928:	e037883a 	mov	sp,fp
    992c:	dfc00117 	ldw	ra,4(sp)
    9930:	df000017 	ldw	fp,0(sp)
    9934:	dec00204 	addi	sp,sp,8
    9938:	f800283a 	ret

0000993c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    993c:	defffd04 	addi	sp,sp,-12
    9940:	dfc00215 	stw	ra,8(sp)
    9944:	df000115 	stw	fp,4(sp)
    9948:	df000104 	addi	fp,sp,4
    994c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9950:	e13fff17 	ldw	r4,-4(fp)
    9954:	01400074 	movhi	r5,1
    9958:	296cc704 	addi	r5,r5,-19684
    995c:	000a3480 	call	a348 <alt_dev_llist_insert>
}
    9960:	e037883a 	mov	sp,fp
    9964:	dfc00117 	ldw	ra,4(sp)
    9968:	df000017 	ldw	fp,0(sp)
    996c:	dec00204 	addi	sp,sp,8
    9970:	f800283a 	ret

00009974 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9974:	defffd04 	addi	sp,sp,-12
    9978:	dfc00215 	stw	ra,8(sp)
    997c:	df000115 	stw	fp,4(sp)
    9980:	df000104 	addi	fp,sp,4
    9984:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    9988:	000aa240 	call	aa24 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    998c:	00800044 	movi	r2,1
    9990:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9994:	e037883a 	mov	sp,fp
    9998:	dfc00117 	ldw	ra,4(sp)
    999c:	df000017 	ldw	fp,0(sp)
    99a0:	dec00204 	addi	sp,sp,8
    99a4:	f800283a 	ret

000099a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    99a8:	defffe04 	addi	sp,sp,-8
    99ac:	dfc00115 	stw	ra,4(sp)
    99b0:	df000015 	stw	fp,0(sp)
    99b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLOCK_TIMER, sys_clock_timer);
    99b8:	01000074 	movhi	r4,1
    99bc:	21050804 	addi	r4,r4,5152
    99c0:	000b883a 	mov	r5,zero
    99c4:	01800044 	movi	r6,1
    99c8:	01c0fa04 	movi	r7,1000
    99cc:	0009cc40 	call	9cc4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    99d0:	01000074 	movhi	r4,1
    99d4:	212c4204 	addi	r4,r4,-20216
    99d8:	000993c0 	call	993c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    99dc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    99e0:	01000074 	movhi	r4,1
    99e4:	212c4d04 	addi	r4,r4,-20172
    99e8:	000993c0 	call	993c <alt_dev_reg>
}
    99ec:	e037883a 	mov	sp,fp
    99f0:	dfc00117 	ldw	ra,4(sp)
    99f4:	df000017 	ldw	fp,0(sp)
    99f8:	dec00204 	addi	sp,sp,8
    99fc:	f800283a 	ret

00009a00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9a00:	defffa04 	addi	sp,sp,-24
    9a04:	dfc00515 	stw	ra,20(sp)
    9a08:	df000415 	stw	fp,16(sp)
    9a0c:	df000404 	addi	fp,sp,16
    9a10:	e13ffd15 	stw	r4,-12(fp)
    9a14:	e17ffe15 	stw	r5,-8(fp)
    9a18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9a1c:	e0bffd17 	ldw	r2,-12(fp)
    9a20:	10800017 	ldw	r2,0(r2)
    9a24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9a28:	e0bffc17 	ldw	r2,-16(fp)
    9a2c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9a30:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9a34:	10800217 	ldw	r2,8(r2)
    9a38:	1809883a 	mov	r4,r3
    9a3c:	e17ffe17 	ldw	r5,-8(fp)
    9a40:	e1bfff17 	ldw	r6,-4(fp)
    9a44:	100f883a 	mov	r7,r2
    9a48:	0009ac00 	call	9ac0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9a4c:	e037883a 	mov	sp,fp
    9a50:	dfc00117 	ldw	ra,4(sp)
    9a54:	df000017 	ldw	fp,0(sp)
    9a58:	dec00204 	addi	sp,sp,8
    9a5c:	f800283a 	ret

00009a60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9a60:	defffa04 	addi	sp,sp,-24
    9a64:	dfc00515 	stw	ra,20(sp)
    9a68:	df000415 	stw	fp,16(sp)
    9a6c:	df000404 	addi	fp,sp,16
    9a70:	e13ffd15 	stw	r4,-12(fp)
    9a74:	e17ffe15 	stw	r5,-8(fp)
    9a78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9a7c:	e0bffd17 	ldw	r2,-12(fp)
    9a80:	10800017 	ldw	r2,0(r2)
    9a84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9a88:	e0bffc17 	ldw	r2,-16(fp)
    9a8c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9a90:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9a94:	10800217 	ldw	r2,8(r2)
    9a98:	1809883a 	mov	r4,r3
    9a9c:	e17ffe17 	ldw	r5,-8(fp)
    9aa0:	e1bfff17 	ldw	r6,-4(fp)
    9aa4:	100f883a 	mov	r7,r2
    9aa8:	0009bb40 	call	9bb4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9aac:	e037883a 	mov	sp,fp
    9ab0:	dfc00117 	ldw	ra,4(sp)
    9ab4:	df000017 	ldw	fp,0(sp)
    9ab8:	dec00204 	addi	sp,sp,8
    9abc:	f800283a 	ret

00009ac0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9ac0:	defff704 	addi	sp,sp,-36
    9ac4:	df000815 	stw	fp,32(sp)
    9ac8:	df000804 	addi	fp,sp,32
    9acc:	e13ffc15 	stw	r4,-16(fp)
    9ad0:	e17ffd15 	stw	r5,-12(fp)
    9ad4:	e1bffe15 	stw	r6,-8(fp)
    9ad8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9adc:	e0bffc17 	ldw	r2,-16(fp)
    9ae0:	10800017 	ldw	r2,0(r2)
    9ae4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    9ae8:	e0bffd17 	ldw	r2,-12(fp)
    9aec:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9af0:	e0bffe17 	ldw	r2,-8(fp)
    9af4:	e0fffd17 	ldw	r3,-12(fp)
    9af8:	1885883a 	add	r2,r3,r2
    9afc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9b00:	00001406 	br	9b54 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9b04:	e0bff917 	ldw	r2,-28(fp)
    9b08:	10800037 	ldwio	r2,0(r2)
    9b0c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9b10:	e0bffb17 	ldw	r2,-20(fp)
    9b14:	10a0000c 	andi	r2,r2,32768
    9b18:	10000826 	beq	r2,zero,9b3c <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9b1c:	e0bffb17 	ldw	r2,-20(fp)
    9b20:	1007883a 	mov	r3,r2
    9b24:	e0bff817 	ldw	r2,-32(fp)
    9b28:	10c00005 	stb	r3,0(r2)
    9b2c:	e0bff817 	ldw	r2,-32(fp)
    9b30:	10800044 	addi	r2,r2,1
    9b34:	e0bff815 	stw	r2,-32(fp)
    9b38:	00000606 	br	9b54 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    9b3c:	e0fff817 	ldw	r3,-32(fp)
    9b40:	e0bffd17 	ldw	r2,-12(fp)
    9b44:	1880071e 	bne	r3,r2,9b64 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    9b48:	e0bfff17 	ldw	r2,-4(fp)
    9b4c:	1090000c 	andi	r2,r2,16384
    9b50:	1000061e 	bne	r2,zero,9b6c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9b54:	e0fff817 	ldw	r3,-32(fp)
    9b58:	e0bffa17 	ldw	r2,-24(fp)
    9b5c:	18bfe936 	bltu	r3,r2,9b04 <altera_avalon_jtag_uart_read+0x44>
    9b60:	00000306 	br	9b70 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9b64:	0001883a 	nop
    9b68:	00000106 	br	9b70 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    9b6c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9b70:	e0fff817 	ldw	r3,-32(fp)
    9b74:	e0bffd17 	ldw	r2,-12(fp)
    9b78:	18800426 	beq	r3,r2,9b8c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    9b7c:	e0fff817 	ldw	r3,-32(fp)
    9b80:	e0bffd17 	ldw	r2,-12(fp)
    9b84:	1885c83a 	sub	r2,r3,r2
    9b88:	00000606 	br	9ba4 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    9b8c:	e0bfff17 	ldw	r2,-4(fp)
    9b90:	1090000c 	andi	r2,r2,16384
    9b94:	10000226 	beq	r2,zero,9ba0 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    9b98:	00bffd44 	movi	r2,-11
    9b9c:	00000106 	br	9ba4 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    9ba0:	00bffec4 	movi	r2,-5
}
    9ba4:	e037883a 	mov	sp,fp
    9ba8:	df000017 	ldw	fp,0(sp)
    9bac:	dec00104 	addi	sp,sp,4
    9bb0:	f800283a 	ret

00009bb4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9bb4:	defff904 	addi	sp,sp,-28
    9bb8:	df000615 	stw	fp,24(sp)
    9bbc:	df000604 	addi	fp,sp,24
    9bc0:	e13ffc15 	stw	r4,-16(fp)
    9bc4:	e17ffd15 	stw	r5,-12(fp)
    9bc8:	e1bffe15 	stw	r6,-8(fp)
    9bcc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9bd0:	e0bffc17 	ldw	r2,-16(fp)
    9bd4:	10800017 	ldw	r2,0(r2)
    9bd8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9bdc:	e0bffe17 	ldw	r2,-8(fp)
    9be0:	e0fffd17 	ldw	r3,-12(fp)
    9be4:	1885883a 	add	r2,r3,r2
    9be8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9bec:	00000f06 	br	9c2c <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9bf0:	e0bffa17 	ldw	r2,-24(fp)
    9bf4:	10800104 	addi	r2,r2,4
    9bf8:	10800037 	ldwio	r2,0(r2)
    9bfc:	10bfffec 	andhi	r2,r2,65535
    9c00:	10000a26 	beq	r2,zero,9c2c <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9c04:	e0bffa17 	ldw	r2,-24(fp)
    9c08:	e0fffd17 	ldw	r3,-12(fp)
    9c0c:	18c00003 	ldbu	r3,0(r3)
    9c10:	18c03fcc 	andi	r3,r3,255
    9c14:	18c0201c 	xori	r3,r3,128
    9c18:	18ffe004 	addi	r3,r3,-128
    9c1c:	e13ffd17 	ldw	r4,-12(fp)
    9c20:	21000044 	addi	r4,r4,1
    9c24:	e13ffd15 	stw	r4,-12(fp)
    9c28:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9c2c:	e0fffd17 	ldw	r3,-12(fp)
    9c30:	e0bffb17 	ldw	r2,-20(fp)
    9c34:	18bfee36 	bltu	r3,r2,9bf0 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9c38:	e0bffe17 	ldw	r2,-8(fp)
}
    9c3c:	e037883a 	mov	sp,fp
    9c40:	df000017 	ldw	fp,0(sp)
    9c44:	dec00104 	addi	sp,sp,4
    9c48:	f800283a 	ret

00009c4c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9c4c:	defff904 	addi	sp,sp,-28
    9c50:	dfc00615 	stw	ra,24(sp)
    9c54:	df000515 	stw	fp,20(sp)
    9c58:	df000504 	addi	fp,sp,20
    9c5c:	e13ffe15 	stw	r4,-8(fp)
    9c60:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9c64:	0007883a 	mov	r3,zero
    9c68:	e0bffe17 	ldw	r2,-8(fp)
    9c6c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9c70:	e0bffe17 	ldw	r2,-8(fp)
    9c74:	10800104 	addi	r2,r2,4
    9c78:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c7c:	0005303a 	rdctl	r2,status
    9c80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c84:	e0fffc17 	ldw	r3,-16(fp)
    9c88:	00bfff84 	movi	r2,-2
    9c8c:	1884703a 	and	r2,r3,r2
    9c90:	1001703a 	wrctl	status,r2
  
  return context;
    9c94:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9c98:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    9c9c:	000a9200 	call	a920 <alt_tick>
    9ca0:	e0bffb17 	ldw	r2,-20(fp)
    9ca4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ca8:	e0bffd17 	ldw	r2,-12(fp)
    9cac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    9cb0:	e037883a 	mov	sp,fp
    9cb4:	dfc00117 	ldw	ra,4(sp)
    9cb8:	df000017 	ldw	fp,0(sp)
    9cbc:	dec00204 	addi	sp,sp,8
    9cc0:	f800283a 	ret

00009cc4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9cc4:	defff904 	addi	sp,sp,-28
    9cc8:	dfc00615 	stw	ra,24(sp)
    9ccc:	df000515 	stw	fp,20(sp)
    9cd0:	df000504 	addi	fp,sp,20
    9cd4:	e13ffc15 	stw	r4,-16(fp)
    9cd8:	e17ffd15 	stw	r5,-12(fp)
    9cdc:	e1bffe15 	stw	r6,-8(fp)
    9ce0:	e1ffff15 	stw	r7,-4(fp)
    9ce4:	e0bfff17 	ldw	r2,-4(fp)
    9ce8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9cec:	00800074 	movhi	r2,1
    9cf0:	10ad9904 	addi	r2,r2,-18844
    9cf4:	10800017 	ldw	r2,0(r2)
    9cf8:	1000041e 	bne	r2,zero,9d0c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    9cfc:	00800074 	movhi	r2,1
    9d00:	10ad9904 	addi	r2,r2,-18844
    9d04:	e0fffb17 	ldw	r3,-20(fp)
    9d08:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9d0c:	e0bffc17 	ldw	r2,-16(fp)
    9d10:	10800104 	addi	r2,r2,4
    9d14:	00c001c4 	movi	r3,7
    9d18:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    9d1c:	e13ffe17 	ldw	r4,-8(fp)
    9d20:	e17ffc17 	ldw	r5,-16(fp)
    9d24:	01800074 	movhi	r6,1
    9d28:	31a71304 	addi	r6,r6,-25524
    9d2c:	00094c80 	call	94c8 <alt_irq_register>
#endif  
}
    9d30:	e037883a 	mov	sp,fp
    9d34:	dfc00117 	ldw	ra,4(sp)
    9d38:	df000017 	ldw	fp,0(sp)
    9d3c:	dec00204 	addi	sp,sp,8
    9d40:	f800283a 	ret

00009d44 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9d44:	defffa04 	addi	sp,sp,-24
    9d48:	dfc00515 	stw	ra,20(sp)
    9d4c:	df000415 	stw	fp,16(sp)
    9d50:	df000404 	addi	fp,sp,16
    9d54:	e13ffd15 	stw	r4,-12(fp)
    9d58:	e17ffe15 	stw	r5,-8(fp)
    9d5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    9d60:	e0bffd17 	ldw	r2,-12(fp)
    9d64:	10800017 	ldw	r2,0(r2)
    9d68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    9d6c:	e0bffc17 	ldw	r2,-16(fp)
    9d70:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9d74:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    9d78:	10800217 	ldw	r2,8(r2)
    9d7c:	1809883a 	mov	r4,r3
    9d80:	e17ffe17 	ldw	r5,-8(fp)
    9d84:	e1bfff17 	ldw	r6,-4(fp)
    9d88:	100f883a 	mov	r7,r2
    9d8c:	0009e540 	call	9e54 <altera_avalon_uart_read>
      fd->fd_flags);
}
    9d90:	e037883a 	mov	sp,fp
    9d94:	dfc00117 	ldw	ra,4(sp)
    9d98:	df000017 	ldw	fp,0(sp)
    9d9c:	dec00204 	addi	sp,sp,8
    9da0:	f800283a 	ret

00009da4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9da4:	defffa04 	addi	sp,sp,-24
    9da8:	dfc00515 	stw	ra,20(sp)
    9dac:	df000415 	stw	fp,16(sp)
    9db0:	df000404 	addi	fp,sp,16
    9db4:	e13ffd15 	stw	r4,-12(fp)
    9db8:	e17ffe15 	stw	r5,-8(fp)
    9dbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    9dc0:	e0bffd17 	ldw	r2,-12(fp)
    9dc4:	10800017 	ldw	r2,0(r2)
    9dc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    9dcc:	e0bffc17 	ldw	r2,-16(fp)
    9dd0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9dd4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    9dd8:	10800217 	ldw	r2,8(r2)
    9ddc:	1809883a 	mov	r4,r3
    9de0:	e17ffe17 	ldw	r5,-8(fp)
    9de4:	e1bfff17 	ldw	r6,-4(fp)
    9de8:	100f883a 	mov	r7,r2
    9dec:	0009f640 	call	9f64 <altera_avalon_uart_write>
      fd->fd_flags);
}
    9df0:	e037883a 	mov	sp,fp
    9df4:	dfc00117 	ldw	ra,4(sp)
    9df8:	df000017 	ldw	fp,0(sp)
    9dfc:	dec00204 	addi	sp,sp,8
    9e00:	f800283a 	ret

00009e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e04:	defffe04 	addi	sp,sp,-8
    9e08:	dfc00115 	stw	ra,4(sp)
    9e0c:	df000015 	stw	fp,0(sp)
    9e10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9e14:	00800074 	movhi	r2,1
    9e18:	10acca04 	addi	r2,r2,-19672
    9e1c:	10800017 	ldw	r2,0(r2)
    9e20:	10000526 	beq	r2,zero,9e38 <alt_get_errno+0x34>
    9e24:	00800074 	movhi	r2,1
    9e28:	10acca04 	addi	r2,r2,-19672
    9e2c:	10800017 	ldw	r2,0(r2)
    9e30:	103ee83a 	callr	r2
    9e34:	00000206 	br	9e40 <alt_get_errno+0x3c>
    9e38:	00800074 	movhi	r2,1
    9e3c:	10ad9404 	addi	r2,r2,-18864
}
    9e40:	e037883a 	mov	sp,fp
    9e44:	dfc00117 	ldw	ra,4(sp)
    9e48:	df000017 	ldw	fp,0(sp)
    9e4c:	dec00204 	addi	sp,sp,8
    9e50:	f800283a 	ret

00009e54 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    9e54:	defff804 	addi	sp,sp,-32
    9e58:	dfc00715 	stw	ra,28(sp)
    9e5c:	df000615 	stw	fp,24(sp)
    9e60:	df000604 	addi	fp,sp,24
    9e64:	e13ffc15 	stw	r4,-16(fp)
    9e68:	e17ffd15 	stw	r5,-12(fp)
    9e6c:	e1bffe15 	stw	r6,-8(fp)
    9e70:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    9e74:	e0bfff17 	ldw	r2,-4(fp)
    9e78:	1090000c 	andi	r2,r2,16384
    9e7c:	1005003a 	cmpeq	r2,r2,zero
    9e80:	10803fcc 	andi	r2,r2,255
    9e84:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    9e88:	e0bffc17 	ldw	r2,-16(fp)
    9e8c:	10800017 	ldw	r2,0(r2)
    9e90:	10800204 	addi	r2,r2,8
    9e94:	10800037 	ldwio	r2,0(r2)
    9e98:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    9e9c:	e0bffc17 	ldw	r2,-16(fp)
    9ea0:	10800017 	ldw	r2,0(r2)
    9ea4:	10800204 	addi	r2,r2,8
    9ea8:	0007883a 	mov	r3,zero
    9eac:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    9eb0:	e0bffb17 	ldw	r2,-20(fp)
    9eb4:	1080200c 	andi	r2,r2,128
    9eb8:	10000b26 	beq	r2,zero,9ee8 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    9ebc:	e0bffc17 	ldw	r2,-16(fp)
    9ec0:	10800017 	ldw	r2,0(r2)
    9ec4:	10800037 	ldwio	r2,0(r2)
    9ec8:	1007883a 	mov	r3,r2
    9ecc:	e0bffd17 	ldw	r2,-12(fp)
    9ed0:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    9ed4:	e0bffb17 	ldw	r2,-20(fp)
    9ed8:	108000cc 	andi	r2,r2,3
    9edc:	1000021e 	bne	r2,zero,9ee8 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    9ee0:	00800044 	movi	r2,1
    9ee4:	00000606 	br	9f00 <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    9ee8:	e0bffa17 	ldw	r2,-24(fp)
    9eec:	103fe61e 	bne	r2,zero,9e88 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
    9ef0:	0009e040 	call	9e04 <alt_get_errno>
    9ef4:	00c002c4 	movi	r3,11
    9ef8:	10c00015 	stw	r3,0(r2)
 
  return 0;
    9efc:	0005883a 	mov	r2,zero
}
    9f00:	e037883a 	mov	sp,fp
    9f04:	dfc00117 	ldw	ra,4(sp)
    9f08:	df000017 	ldw	fp,0(sp)
    9f0c:	dec00204 	addi	sp,sp,8
    9f10:	f800283a 	ret

00009f14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f14:	defffe04 	addi	sp,sp,-8
    9f18:	dfc00115 	stw	ra,4(sp)
    9f1c:	df000015 	stw	fp,0(sp)
    9f20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9f24:	00800074 	movhi	r2,1
    9f28:	10acca04 	addi	r2,r2,-19672
    9f2c:	10800017 	ldw	r2,0(r2)
    9f30:	10000526 	beq	r2,zero,9f48 <alt_get_errno+0x34>
    9f34:	00800074 	movhi	r2,1
    9f38:	10acca04 	addi	r2,r2,-19672
    9f3c:	10800017 	ldw	r2,0(r2)
    9f40:	103ee83a 	callr	r2
    9f44:	00000206 	br	9f50 <alt_get_errno+0x3c>
    9f48:	00800074 	movhi	r2,1
    9f4c:	10ad9404 	addi	r2,r2,-18864
}
    9f50:	e037883a 	mov	sp,fp
    9f54:	dfc00117 	ldw	ra,4(sp)
    9f58:	df000017 	ldw	fp,0(sp)
    9f5c:	dec00204 	addi	sp,sp,8
    9f60:	f800283a 	ret

00009f64 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    9f64:	defff704 	addi	sp,sp,-36
    9f68:	dfc00815 	stw	ra,32(sp)
    9f6c:	df000715 	stw	fp,28(sp)
    9f70:	df000704 	addi	fp,sp,28
    9f74:	e13ffc15 	stw	r4,-16(fp)
    9f78:	e17ffd15 	stw	r5,-12(fp)
    9f7c:	e1bffe15 	stw	r6,-8(fp)
    9f80:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    9f84:	e0bfff17 	ldw	r2,-4(fp)
    9f88:	1090000c 	andi	r2,r2,16384
    9f8c:	1005003a 	cmpeq	r2,r2,zero
    9f90:	10803fcc 	andi	r2,r2,255
    9f94:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    9f98:	e0bffe17 	ldw	r2,-8(fp)
    9f9c:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    9fa0:	e0bffc17 	ldw	r2,-16(fp)
    9fa4:	10800017 	ldw	r2,0(r2)
    9fa8:	10800204 	addi	r2,r2,8
    9fac:	10800037 	ldwio	r2,0(r2)
    9fb0:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    9fb4:	e0bffb17 	ldw	r2,-20(fp)
    9fb8:	1080100c 	andi	r2,r2,64
    9fbc:	10000f26 	beq	r2,zero,9ffc <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    9fc0:	e0bffc17 	ldw	r2,-16(fp)
    9fc4:	10800017 	ldw	r2,0(r2)
    9fc8:	10800104 	addi	r2,r2,4
    9fcc:	e0fffd17 	ldw	r3,-12(fp)
    9fd0:	18c00003 	ldbu	r3,0(r3)
    9fd4:	18c03fcc 	andi	r3,r3,255
    9fd8:	18c0201c 	xori	r3,r3,128
    9fdc:	18ffe004 	addi	r3,r3,-128
    9fe0:	e13ffd17 	ldw	r4,-12(fp)
    9fe4:	21000044 	addi	r4,r4,1
    9fe8:	e13ffd15 	stw	r4,-12(fp)
    9fec:	10c00035 	stwio	r3,0(r2)
      count--;
    9ff0:	e0bff917 	ldw	r2,-28(fp)
    9ff4:	10bfffc4 	addi	r2,r2,-1
    9ff8:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    9ffc:	e0bffa17 	ldw	r2,-24(fp)
    a000:	10000226 	beq	r2,zero,a00c <altera_avalon_uart_write+0xa8>
    a004:	e0bff917 	ldw	r2,-28(fp)
    a008:	103fe51e 	bne	r2,zero,9fa0 <altera_avalon_uart_write+0x3c>

  if (count)
    a00c:	e0bff917 	ldw	r2,-28(fp)
    a010:	10000326 	beq	r2,zero,a020 <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    a014:	0009f140 	call	9f14 <alt_get_errno>
    a018:	00c002c4 	movi	r3,11
    a01c:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    a020:	e0fffe17 	ldw	r3,-8(fp)
    a024:	e0bff917 	ldw	r2,-28(fp)
    a028:	1885c83a 	sub	r2,r3,r2
}
    a02c:	e037883a 	mov	sp,fp
    a030:	dfc00117 	ldw	ra,4(sp)
    a034:	df000017 	ldw	fp,0(sp)
    a038:	dec00204 	addi	sp,sp,8
    a03c:	f800283a 	ret

0000a040 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    a040:	defffa04 	addi	sp,sp,-24
    a044:	dfc00515 	stw	ra,20(sp)
    a048:	df000415 	stw	fp,16(sp)
    a04c:	df000404 	addi	fp,sp,16
    a050:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    a054:	008000c4 	movi	r2,3
    a058:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    a05c:	e13ffd17 	ldw	r4,-12(fp)
    a060:	014003f4 	movhi	r5,15
    a064:	29509004 	addi	r5,r5,16960
    a068:	00094a00 	call	94a0 <__mulsi3>
    a06c:	0100bef4 	movhi	r4,763
    a070:	213c2004 	addi	r4,r4,-3968
    a074:	100b883a 	mov	r5,r2
    a078:	0008aa80 	call	8aa8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    a07c:	01200034 	movhi	r4,32768
    a080:	213fffc4 	addi	r4,r4,-1
    a084:	100b883a 	mov	r5,r2
    a088:	0008aa80 	call	8aa8 <__udivsi3>
    a08c:	e13fff17 	ldw	r4,-4(fp)
    a090:	100b883a 	mov	r5,r2
    a094:	0008aa80 	call	8aa8 <__udivsi3>
    a098:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    a09c:	e0bffe17 	ldw	r2,-8(fp)
    a0a0:	10002926 	beq	r2,zero,a148 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    a0a4:	e03ffc15 	stw	zero,-16(fp)
    a0a8:	00001606 	br	a104 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    a0ac:	00a00034 	movhi	r2,32768
    a0b0:	10bfffc4 	addi	r2,r2,-1
    a0b4:	10bfffc4 	addi	r2,r2,-1
    a0b8:	103ffe1e 	bne	r2,zero,a0b4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    a0bc:	e13ffd17 	ldw	r4,-12(fp)
    a0c0:	014003f4 	movhi	r5,15
    a0c4:	29509004 	addi	r5,r5,16960
    a0c8:	00094a00 	call	94a0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    a0cc:	0100bef4 	movhi	r4,763
    a0d0:	213c2004 	addi	r4,r4,-3968
    a0d4:	100b883a 	mov	r5,r2
    a0d8:	0008aa80 	call	8aa8 <__udivsi3>
    a0dc:	01200034 	movhi	r4,32768
    a0e0:	213fffc4 	addi	r4,r4,-1
    a0e4:	100b883a 	mov	r5,r2
    a0e8:	0008aa80 	call	8aa8 <__udivsi3>
    a0ec:	e0ffff17 	ldw	r3,-4(fp)
    a0f0:	1885c83a 	sub	r2,r3,r2
    a0f4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    a0f8:	e0bffc17 	ldw	r2,-16(fp)
    a0fc:	10800044 	addi	r2,r2,1
    a100:	e0bffc15 	stw	r2,-16(fp)
    a104:	e0fffc17 	ldw	r3,-16(fp)
    a108:	e0bffe17 	ldw	r2,-8(fp)
    a10c:	18bfe716 	blt	r3,r2,a0ac <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    a110:	e13ffd17 	ldw	r4,-12(fp)
    a114:	014003f4 	movhi	r5,15
    a118:	29509004 	addi	r5,r5,16960
    a11c:	00094a00 	call	94a0 <__mulsi3>
    a120:	0100bef4 	movhi	r4,763
    a124:	213c2004 	addi	r4,r4,-3968
    a128:	100b883a 	mov	r5,r2
    a12c:	0008aa80 	call	8aa8 <__udivsi3>
    a130:	1009883a 	mov	r4,r2
    a134:	e17fff17 	ldw	r5,-4(fp)
    a138:	00094a00 	call	94a0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    a13c:	10bfffc4 	addi	r2,r2,-1
    a140:	103ffe1e 	bne	r2,zero,a13c <alt_busy_sleep+0xfc>
    a144:	00000d06 	br	a17c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    a148:	e13ffd17 	ldw	r4,-12(fp)
    a14c:	014003f4 	movhi	r5,15
    a150:	29509004 	addi	r5,r5,16960
    a154:	00094a00 	call	94a0 <__mulsi3>
    a158:	0100bef4 	movhi	r4,763
    a15c:	213c2004 	addi	r4,r4,-3968
    a160:	100b883a 	mov	r5,r2
    a164:	0008aa80 	call	8aa8 <__udivsi3>
    a168:	1009883a 	mov	r4,r2
    a16c:	e17fff17 	ldw	r5,-4(fp)
    a170:	00094a00 	call	94a0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    a174:	10bfffc4 	addi	r2,r2,-1
    a178:	00bffe16 	blt	zero,r2,a174 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    a17c:	0005883a 	mov	r2,zero
}
    a180:	e037883a 	mov	sp,fp
    a184:	dfc00117 	ldw	ra,4(sp)
    a188:	df000017 	ldw	fp,0(sp)
    a18c:	dec00204 	addi	sp,sp,8
    a190:	f800283a 	ret

0000a194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a194:	defffe04 	addi	sp,sp,-8
    a198:	dfc00115 	stw	ra,4(sp)
    a19c:	df000015 	stw	fp,0(sp)
    a1a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a1a4:	00800074 	movhi	r2,1
    a1a8:	10acca04 	addi	r2,r2,-19672
    a1ac:	10800017 	ldw	r2,0(r2)
    a1b0:	10000526 	beq	r2,zero,a1c8 <alt_get_errno+0x34>
    a1b4:	00800074 	movhi	r2,1
    a1b8:	10acca04 	addi	r2,r2,-19672
    a1bc:	10800017 	ldw	r2,0(r2)
    a1c0:	103ee83a 	callr	r2
    a1c4:	00000206 	br	a1d0 <alt_get_errno+0x3c>
    a1c8:	00800074 	movhi	r2,1
    a1cc:	10ad9404 	addi	r2,r2,-18864
}
    a1d0:	e037883a 	mov	sp,fp
    a1d4:	dfc00117 	ldw	ra,4(sp)
    a1d8:	df000017 	ldw	fp,0(sp)
    a1dc:	dec00204 	addi	sp,sp,8
    a1e0:	f800283a 	ret

0000a1e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a1e4:	defffb04 	addi	sp,sp,-20
    a1e8:	dfc00415 	stw	ra,16(sp)
    a1ec:	df000315 	stw	fp,12(sp)
    a1f0:	df000304 	addi	fp,sp,12
    a1f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a1f8:	e0bfff17 	ldw	r2,-4(fp)
    a1fc:	10000716 	blt	r2,zero,a21c <close+0x38>
    a200:	e13fff17 	ldw	r4,-4(fp)
    a204:	01400304 	movi	r5,12
    a208:	00094a00 	call	94a0 <__mulsi3>
    a20c:	00c00074 	movhi	r3,1
    a210:	18ec6204 	addi	r3,r3,-20088
    a214:	10c5883a 	add	r2,r2,r3
    a218:	00000106 	br	a220 <close+0x3c>
    a21c:	0005883a 	mov	r2,zero
    a220:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    a224:	e0bffd17 	ldw	r2,-12(fp)
    a228:	10001826 	beq	r2,zero,a28c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a22c:	e0bffd17 	ldw	r2,-12(fp)
    a230:	10800017 	ldw	r2,0(r2)
    a234:	10800417 	ldw	r2,16(r2)
    a238:	10000626 	beq	r2,zero,a254 <close+0x70>
    a23c:	e0bffd17 	ldw	r2,-12(fp)
    a240:	10800017 	ldw	r2,0(r2)
    a244:	10800417 	ldw	r2,16(r2)
    a248:	e13ffd17 	ldw	r4,-12(fp)
    a24c:	103ee83a 	callr	r2
    a250:	00000106 	br	a258 <close+0x74>
    a254:	0005883a 	mov	r2,zero
    a258:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a25c:	e13fff17 	ldw	r4,-4(fp)
    a260:	000a8080 	call	a808 <alt_release_fd>
    if (rval < 0)
    a264:	e0bffe17 	ldw	r2,-8(fp)
    a268:	1000060e 	bge	r2,zero,a284 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    a26c:	000a1940 	call	a194 <alt_get_errno>
    a270:	e0fffe17 	ldw	r3,-8(fp)
    a274:	00c7c83a 	sub	r3,zero,r3
    a278:	10c00015 	stw	r3,0(r2)
      return -1;
    a27c:	00bfffc4 	movi	r2,-1
    a280:	00000606 	br	a29c <close+0xb8>
    }
    return 0;
    a284:	0005883a 	mov	r2,zero
    a288:	00000406 	br	a29c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a28c:	000a1940 	call	a194 <alt_get_errno>
    a290:	00c01444 	movi	r3,81
    a294:	10c00015 	stw	r3,0(r2)
    return -1;
    a298:	00bfffc4 	movi	r2,-1
  }
}
    a29c:	e037883a 	mov	sp,fp
    a2a0:	dfc00117 	ldw	ra,4(sp)
    a2a4:	df000017 	ldw	fp,0(sp)
    a2a8:	dec00204 	addi	sp,sp,8
    a2ac:	f800283a 	ret

0000a2b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    a2b0:	deffff04 	addi	sp,sp,-4
    a2b4:	df000015 	stw	fp,0(sp)
    a2b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    a2bc:	e037883a 	mov	sp,fp
    a2c0:	df000017 	ldw	fp,0(sp)
    a2c4:	dec00104 	addi	sp,sp,4
    a2c8:	f800283a 	ret

0000a2cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a2cc:	defffc04 	addi	sp,sp,-16
    a2d0:	df000315 	stw	fp,12(sp)
    a2d4:	df000304 	addi	fp,sp,12
    a2d8:	e13ffd15 	stw	r4,-12(fp)
    a2dc:	e17ffe15 	stw	r5,-8(fp)
    a2e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a2e4:	e0bfff17 	ldw	r2,-4(fp)
}
    a2e8:	e037883a 	mov	sp,fp
    a2ec:	df000017 	ldw	fp,0(sp)
    a2f0:	dec00104 	addi	sp,sp,4
    a2f4:	f800283a 	ret

0000a2f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a2f8:	defffe04 	addi	sp,sp,-8
    a2fc:	dfc00115 	stw	ra,4(sp)
    a300:	df000015 	stw	fp,0(sp)
    a304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a308:	00800074 	movhi	r2,1
    a30c:	10acca04 	addi	r2,r2,-19672
    a310:	10800017 	ldw	r2,0(r2)
    a314:	10000526 	beq	r2,zero,a32c <alt_get_errno+0x34>
    a318:	00800074 	movhi	r2,1
    a31c:	10acca04 	addi	r2,r2,-19672
    a320:	10800017 	ldw	r2,0(r2)
    a324:	103ee83a 	callr	r2
    a328:	00000206 	br	a334 <alt_get_errno+0x3c>
    a32c:	00800074 	movhi	r2,1
    a330:	10ad9404 	addi	r2,r2,-18864
}
    a334:	e037883a 	mov	sp,fp
    a338:	dfc00117 	ldw	ra,4(sp)
    a33c:	df000017 	ldw	fp,0(sp)
    a340:	dec00204 	addi	sp,sp,8
    a344:	f800283a 	ret

0000a348 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    a348:	defffa04 	addi	sp,sp,-24
    a34c:	dfc00515 	stw	ra,20(sp)
    a350:	df000415 	stw	fp,16(sp)
    a354:	df000404 	addi	fp,sp,16
    a358:	e13ffe15 	stw	r4,-8(fp)
    a35c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    a360:	e0bffe17 	ldw	r2,-8(fp)
    a364:	10000326 	beq	r2,zero,a374 <alt_dev_llist_insert+0x2c>
    a368:	e0bffe17 	ldw	r2,-8(fp)
    a36c:	10800217 	ldw	r2,8(r2)
    a370:	1000051e 	bne	r2,zero,a388 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    a374:	000a2f80 	call	a2f8 <alt_get_errno>
    a378:	00c00584 	movi	r3,22
    a37c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    a380:	00bffa84 	movi	r2,-22
    a384:	00001306 	br	a3d4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    a388:	e0bffe17 	ldw	r2,-8(fp)
    a38c:	e0ffff17 	ldw	r3,-4(fp)
    a390:	e0fffc15 	stw	r3,-16(fp)
    a394:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a398:	e0bffd17 	ldw	r2,-12(fp)
    a39c:	e0fffc17 	ldw	r3,-16(fp)
    a3a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    a3a4:	e0bffc17 	ldw	r2,-16(fp)
    a3a8:	10c00017 	ldw	r3,0(r2)
    a3ac:	e0bffd17 	ldw	r2,-12(fp)
    a3b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a3b4:	e0bffc17 	ldw	r2,-16(fp)
    a3b8:	10800017 	ldw	r2,0(r2)
    a3bc:	e0fffd17 	ldw	r3,-12(fp)
    a3c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    a3c4:	e0bffc17 	ldw	r2,-16(fp)
    a3c8:	e0fffd17 	ldw	r3,-12(fp)
    a3cc:	10c00015 	stw	r3,0(r2)

  return 0;  
    a3d0:	0005883a 	mov	r2,zero
}
    a3d4:	e037883a 	mov	sp,fp
    a3d8:	dfc00117 	ldw	ra,4(sp)
    a3dc:	df000017 	ldw	fp,0(sp)
    a3e0:	dec00204 	addi	sp,sp,8
    a3e4:	f800283a 	ret

0000a3e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a3e8:	defffe04 	addi	sp,sp,-8
    a3ec:	dfc00115 	stw	ra,4(sp)
    a3f0:	df000015 	stw	fp,0(sp)
    a3f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    a3f8:	0009883a 	mov	r4,zero
    a3fc:	01420004 	movi	r5,2048
    a400:	000acbc0 	call	acbc <alt_icache_flush>
#endif
}
    a404:	e037883a 	mov	sp,fp
    a408:	dfc00117 	ldw	ra,4(sp)
    a40c:	df000017 	ldw	fp,0(sp)
    a410:	dec00204 	addi	sp,sp,8
    a414:	f800283a 	ret

0000a418 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a418:	defff804 	addi	sp,sp,-32
    a41c:	dfc00715 	stw	ra,28(sp)
    a420:	df000615 	stw	fp,24(sp)
    a424:	dc000515 	stw	r16,20(sp)
    a428:	df000504 	addi	fp,sp,20
    a42c:	e13ffc15 	stw	r4,-16(fp)
    a430:	e17ffd15 	stw	r5,-12(fp)
    a434:	e1bffe15 	stw	r6,-8(fp)
    a438:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    a43c:	e13ffd17 	ldw	r4,-12(fp)
    a440:	e17ffe17 	ldw	r5,-8(fp)
    a444:	e1bfff17 	ldw	r6,-4(fp)
    a448:	000a6b00 	call	a6b0 <open>
    a44c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    a450:	e0bffb17 	ldw	r2,-20(fp)
    a454:	10002216 	blt	r2,zero,a4e0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    a458:	04000074 	movhi	r16,1
    a45c:	842c6204 	addi	r16,r16,-20088
    a460:	e0bffb17 	ldw	r2,-20(fp)
    a464:	1009883a 	mov	r4,r2
    a468:	01400304 	movi	r5,12
    a46c:	00094a00 	call	94a0 <__mulsi3>
    a470:	8085883a 	add	r2,r16,r2
    a474:	10c00017 	ldw	r3,0(r2)
    a478:	e0bffc17 	ldw	r2,-16(fp)
    a47c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a480:	04000074 	movhi	r16,1
    a484:	842c6204 	addi	r16,r16,-20088
    a488:	e0bffb17 	ldw	r2,-20(fp)
    a48c:	1009883a 	mov	r4,r2
    a490:	01400304 	movi	r5,12
    a494:	00094a00 	call	94a0 <__mulsi3>
    a498:	8085883a 	add	r2,r16,r2
    a49c:	10800104 	addi	r2,r2,4
    a4a0:	10c00017 	ldw	r3,0(r2)
    a4a4:	e0bffc17 	ldw	r2,-16(fp)
    a4a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a4ac:	04000074 	movhi	r16,1
    a4b0:	842c6204 	addi	r16,r16,-20088
    a4b4:	e0bffb17 	ldw	r2,-20(fp)
    a4b8:	1009883a 	mov	r4,r2
    a4bc:	01400304 	movi	r5,12
    a4c0:	00094a00 	call	94a0 <__mulsi3>
    a4c4:	8085883a 	add	r2,r16,r2
    a4c8:	10800204 	addi	r2,r2,8
    a4cc:	10c00017 	ldw	r3,0(r2)
    a4d0:	e0bffc17 	ldw	r2,-16(fp)
    a4d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a4d8:	e13ffb17 	ldw	r4,-20(fp)
    a4dc:	000a8080 	call	a808 <alt_release_fd>
  }
} 
    a4e0:	e037883a 	mov	sp,fp
    a4e4:	dfc00217 	ldw	ra,8(sp)
    a4e8:	df000117 	ldw	fp,4(sp)
    a4ec:	dc000017 	ldw	r16,0(sp)
    a4f0:	dec00304 	addi	sp,sp,12
    a4f4:	f800283a 	ret

0000a4f8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a4f8:	defffb04 	addi	sp,sp,-20
    a4fc:	dfc00415 	stw	ra,16(sp)
    a500:	df000315 	stw	fp,12(sp)
    a504:	df000304 	addi	fp,sp,12
    a508:	e13ffd15 	stw	r4,-12(fp)
    a50c:	e17ffe15 	stw	r5,-8(fp)
    a510:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a514:	01000074 	movhi	r4,1
    a518:	212c6504 	addi	r4,r4,-20076
    a51c:	e17ffd17 	ldw	r5,-12(fp)
    a520:	01800044 	movi	r6,1
    a524:	01c07fc4 	movi	r7,511
    a528:	000a4180 	call	a418 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a52c:	01000074 	movhi	r4,1
    a530:	212c6204 	addi	r4,r4,-20088
    a534:	e17ffe17 	ldw	r5,-8(fp)
    a538:	000d883a 	mov	r6,zero
    a53c:	01c07fc4 	movi	r7,511
    a540:	000a4180 	call	a418 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a544:	01000074 	movhi	r4,1
    a548:	212c6804 	addi	r4,r4,-20064
    a54c:	e17fff17 	ldw	r5,-4(fp)
    a550:	01800044 	movi	r6,1
    a554:	01c07fc4 	movi	r7,511
    a558:	000a4180 	call	a418 <alt_open_fd>
}  
    a55c:	e037883a 	mov	sp,fp
    a560:	dfc00117 	ldw	ra,4(sp)
    a564:	df000017 	ldw	fp,0(sp)
    a568:	dec00204 	addi	sp,sp,8
    a56c:	f800283a 	ret

0000a570 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a570:	defffe04 	addi	sp,sp,-8
    a574:	dfc00115 	stw	ra,4(sp)
    a578:	df000015 	stw	fp,0(sp)
    a57c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a580:	00800074 	movhi	r2,1
    a584:	10acca04 	addi	r2,r2,-19672
    a588:	10800017 	ldw	r2,0(r2)
    a58c:	10000526 	beq	r2,zero,a5a4 <alt_get_errno+0x34>
    a590:	00800074 	movhi	r2,1
    a594:	10acca04 	addi	r2,r2,-19672
    a598:	10800017 	ldw	r2,0(r2)
    a59c:	103ee83a 	callr	r2
    a5a0:	00000206 	br	a5ac <alt_get_errno+0x3c>
    a5a4:	00800074 	movhi	r2,1
    a5a8:	10ad9404 	addi	r2,r2,-18864
}
    a5ac:	e037883a 	mov	sp,fp
    a5b0:	dfc00117 	ldw	ra,4(sp)
    a5b4:	df000017 	ldw	fp,0(sp)
    a5b8:	dec00204 	addi	sp,sp,8
    a5bc:	f800283a 	ret

0000a5c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a5c0:	defffb04 	addi	sp,sp,-20
    a5c4:	dfc00415 	stw	ra,16(sp)
    a5c8:	df000315 	stw	fp,12(sp)
    a5cc:	dc000215 	stw	r16,8(sp)
    a5d0:	df000204 	addi	fp,sp,8
    a5d4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a5d8:	e0bfff17 	ldw	r2,-4(fp)
    a5dc:	10800217 	ldw	r2,8(r2)
    a5e0:	10d00034 	orhi	r3,r2,16384
    a5e4:	e0bfff17 	ldw	r2,-4(fp)
    a5e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a5ec:	e03ffe15 	stw	zero,-8(fp)
    a5f0:	00002206 	br	a67c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a5f4:	04000074 	movhi	r16,1
    a5f8:	842c6204 	addi	r16,r16,-20088
    a5fc:	e0bffe17 	ldw	r2,-8(fp)
    a600:	1009883a 	mov	r4,r2
    a604:	01400304 	movi	r5,12
    a608:	00094a00 	call	94a0 <__mulsi3>
    a60c:	8085883a 	add	r2,r16,r2
    a610:	10c00017 	ldw	r3,0(r2)
    a614:	e0bfff17 	ldw	r2,-4(fp)
    a618:	10800017 	ldw	r2,0(r2)
    a61c:	1880141e 	bne	r3,r2,a670 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a620:	04000074 	movhi	r16,1
    a624:	842c6204 	addi	r16,r16,-20088
    a628:	e0bffe17 	ldw	r2,-8(fp)
    a62c:	1009883a 	mov	r4,r2
    a630:	01400304 	movi	r5,12
    a634:	00094a00 	call	94a0 <__mulsi3>
    a638:	8085883a 	add	r2,r16,r2
    a63c:	10800204 	addi	r2,r2,8
    a640:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a644:	10000a0e 	bge	r2,zero,a670 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a648:	e13ffe17 	ldw	r4,-8(fp)
    a64c:	01400304 	movi	r5,12
    a650:	00094a00 	call	94a0 <__mulsi3>
    a654:	00c00074 	movhi	r3,1
    a658:	18ec6204 	addi	r3,r3,-20088
    a65c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a660:	e0bfff17 	ldw	r2,-4(fp)
    a664:	18800226 	beq	r3,r2,a670 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a668:	00bffcc4 	movi	r2,-13
    a66c:	00000a06 	br	a698 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a670:	e0bffe17 	ldw	r2,-8(fp)
    a674:	10800044 	addi	r2,r2,1
    a678:	e0bffe15 	stw	r2,-8(fp)
    a67c:	00800074 	movhi	r2,1
    a680:	10acc904 	addi	r2,r2,-19676
    a684:	10800017 	ldw	r2,0(r2)
    a688:	1007883a 	mov	r3,r2
    a68c:	e0bffe17 	ldw	r2,-8(fp)
    a690:	18bfd82e 	bgeu	r3,r2,a5f4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a694:	0005883a 	mov	r2,zero
}
    a698:	e037883a 	mov	sp,fp
    a69c:	dfc00217 	ldw	ra,8(sp)
    a6a0:	df000117 	ldw	fp,4(sp)
    a6a4:	dc000017 	ldw	r16,0(sp)
    a6a8:	dec00304 	addi	sp,sp,12
    a6ac:	f800283a 	ret

0000a6b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a6b0:	defff604 	addi	sp,sp,-40
    a6b4:	dfc00915 	stw	ra,36(sp)
    a6b8:	df000815 	stw	fp,32(sp)
    a6bc:	df000804 	addi	fp,sp,32
    a6c0:	e13ffd15 	stw	r4,-12(fp)
    a6c4:	e17ffe15 	stw	r5,-8(fp)
    a6c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a6cc:	00bfffc4 	movi	r2,-1
    a6d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a6d4:	00bffb44 	movi	r2,-19
    a6d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a6dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a6e0:	e13ffd17 	ldw	r4,-12(fp)
    a6e4:	01400074 	movhi	r5,1
    a6e8:	296cc704 	addi	r5,r5,-19684
    a6ec:	000aa440 	call	aa44 <alt_find_dev>
    a6f0:	e0bff815 	stw	r2,-32(fp)
    a6f4:	e0bff817 	ldw	r2,-32(fp)
    a6f8:	1000051e 	bne	r2,zero,a710 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a6fc:	e13ffd17 	ldw	r4,-12(fp)
    a700:	000aad40 	call	aad4 <alt_find_file>
    a704:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a708:	00800044 	movi	r2,1
    a70c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a710:	e0bff817 	ldw	r2,-32(fp)
    a714:	10002a26 	beq	r2,zero,a7c0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a718:	e13ff817 	ldw	r4,-32(fp)
    a71c:	000abe80 	call	abe8 <alt_get_fd>
    a720:	e0bff915 	stw	r2,-28(fp)
    a724:	e0bff917 	ldw	r2,-28(fp)
    a728:	1000030e 	bge	r2,zero,a738 <open+0x88>
    {
      status = index;
    a72c:	e0bff917 	ldw	r2,-28(fp)
    a730:	e0bffa15 	stw	r2,-24(fp)
    a734:	00002406 	br	a7c8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    a738:	e13ff917 	ldw	r4,-28(fp)
    a73c:	01400304 	movi	r5,12
    a740:	00094a00 	call	94a0 <__mulsi3>
    a744:	00c00074 	movhi	r3,1
    a748:	18ec6204 	addi	r3,r3,-20088
    a74c:	10c5883a 	add	r2,r2,r3
    a750:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a754:	e0fffe17 	ldw	r3,-8(fp)
    a758:	00900034 	movhi	r2,16384
    a75c:	10bfffc4 	addi	r2,r2,-1
    a760:	1886703a 	and	r3,r3,r2
    a764:	e0bffc17 	ldw	r2,-16(fp)
    a768:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a76c:	e0bffb17 	ldw	r2,-20(fp)
    a770:	1000051e 	bne	r2,zero,a788 <open+0xd8>
    a774:	e13ffc17 	ldw	r4,-16(fp)
    a778:	000a5c00 	call	a5c0 <alt_file_locked>
    a77c:	e0bffa15 	stw	r2,-24(fp)
    a780:	e0bffa17 	ldw	r2,-24(fp)
    a784:	10001016 	blt	r2,zero,a7c8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a788:	e0bff817 	ldw	r2,-32(fp)
    a78c:	10800317 	ldw	r2,12(r2)
    a790:	10000826 	beq	r2,zero,a7b4 <open+0x104>
    a794:	e0bff817 	ldw	r2,-32(fp)
    a798:	10800317 	ldw	r2,12(r2)
    a79c:	e13ffc17 	ldw	r4,-16(fp)
    a7a0:	e17ffd17 	ldw	r5,-12(fp)
    a7a4:	e1bffe17 	ldw	r6,-8(fp)
    a7a8:	e1ffff17 	ldw	r7,-4(fp)
    a7ac:	103ee83a 	callr	r2
    a7b0:	00000106 	br	a7b8 <open+0x108>
    a7b4:	0005883a 	mov	r2,zero
    a7b8:	e0bffa15 	stw	r2,-24(fp)
    a7bc:	00000206 	br	a7c8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a7c0:	00bffb44 	movi	r2,-19
    a7c4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a7c8:	e0bffa17 	ldw	r2,-24(fp)
    a7cc:	1000080e 	bge	r2,zero,a7f0 <open+0x140>
  {
    alt_release_fd (index);  
    a7d0:	e13ff917 	ldw	r4,-28(fp)
    a7d4:	000a8080 	call	a808 <alt_release_fd>
    ALT_ERRNO = -status;
    a7d8:	000a5700 	call	a570 <alt_get_errno>
    a7dc:	e0fffa17 	ldw	r3,-24(fp)
    a7e0:	00c7c83a 	sub	r3,zero,r3
    a7e4:	10c00015 	stw	r3,0(r2)
    return -1;
    a7e8:	00bfffc4 	movi	r2,-1
    a7ec:	00000106 	br	a7f4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    a7f0:	e0bff917 	ldw	r2,-28(fp)
}
    a7f4:	e037883a 	mov	sp,fp
    a7f8:	dfc00117 	ldw	ra,4(sp)
    a7fc:	df000017 	ldw	fp,0(sp)
    a800:	dec00204 	addi	sp,sp,8
    a804:	f800283a 	ret

0000a808 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a808:	defffc04 	addi	sp,sp,-16
    a80c:	dfc00315 	stw	ra,12(sp)
    a810:	df000215 	stw	fp,8(sp)
    a814:	dc000115 	stw	r16,4(sp)
    a818:	df000104 	addi	fp,sp,4
    a81c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a820:	e0bfff17 	ldw	r2,-4(fp)
    a824:	108000d0 	cmplti	r2,r2,3
    a828:	1000111e 	bne	r2,zero,a870 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a82c:	04000074 	movhi	r16,1
    a830:	842c6204 	addi	r16,r16,-20088
    a834:	e0bfff17 	ldw	r2,-4(fp)
    a838:	1009883a 	mov	r4,r2
    a83c:	01400304 	movi	r5,12
    a840:	00094a00 	call	94a0 <__mulsi3>
    a844:	8085883a 	add	r2,r16,r2
    a848:	10800204 	addi	r2,r2,8
    a84c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a850:	04000074 	movhi	r16,1
    a854:	842c6204 	addi	r16,r16,-20088
    a858:	e0bfff17 	ldw	r2,-4(fp)
    a85c:	1009883a 	mov	r4,r2
    a860:	01400304 	movi	r5,12
    a864:	00094a00 	call	94a0 <__mulsi3>
    a868:	8085883a 	add	r2,r16,r2
    a86c:	10000015 	stw	zero,0(r2)
  }
}
    a870:	e037883a 	mov	sp,fp
    a874:	dfc00217 	ldw	ra,8(sp)
    a878:	df000117 	ldw	fp,4(sp)
    a87c:	dc000017 	ldw	r16,0(sp)
    a880:	dec00304 	addi	sp,sp,12
    a884:	f800283a 	ret

0000a888 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a888:	defffa04 	addi	sp,sp,-24
    a88c:	df000515 	stw	fp,20(sp)
    a890:	df000504 	addi	fp,sp,20
    a894:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a898:	0005303a 	rdctl	r2,status
    a89c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a8a0:	e0fffc17 	ldw	r3,-16(fp)
    a8a4:	00bfff84 	movi	r2,-2
    a8a8:	1884703a 	and	r2,r3,r2
    a8ac:	1001703a 	wrctl	status,r2
  
  return context;
    a8b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a8b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a8b8:	e0bfff17 	ldw	r2,-4(fp)
    a8bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a8c0:	e0bffd17 	ldw	r2,-12(fp)
    a8c4:	10800017 	ldw	r2,0(r2)
    a8c8:	e0fffd17 	ldw	r3,-12(fp)
    a8cc:	18c00117 	ldw	r3,4(r3)
    a8d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a8d4:	e0bffd17 	ldw	r2,-12(fp)
    a8d8:	10800117 	ldw	r2,4(r2)
    a8dc:	e0fffd17 	ldw	r3,-12(fp)
    a8e0:	18c00017 	ldw	r3,0(r3)
    a8e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a8e8:	e0bffd17 	ldw	r2,-12(fp)
    a8ec:	e0fffd17 	ldw	r3,-12(fp)
    a8f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a8f4:	e0bffd17 	ldw	r2,-12(fp)
    a8f8:	e0fffd17 	ldw	r3,-12(fp)
    a8fc:	10c00015 	stw	r3,0(r2)
    a900:	e0bffb17 	ldw	r2,-20(fp)
    a904:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a908:	e0bffe17 	ldw	r2,-8(fp)
    a90c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a910:	e037883a 	mov	sp,fp
    a914:	df000017 	ldw	fp,0(sp)
    a918:	dec00104 	addi	sp,sp,4
    a91c:	f800283a 	ret

0000a920 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a920:	defffb04 	addi	sp,sp,-20
    a924:	dfc00415 	stw	ra,16(sp)
    a928:	df000315 	stw	fp,12(sp)
    a92c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a930:	d0a00917 	ldw	r2,-32732(gp)
    a934:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a938:	d0a0d817 	ldw	r2,-31904(gp)
    a93c:	10800044 	addi	r2,r2,1
    a940:	d0a0d815 	stw	r2,-31904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a944:	00002e06 	br	aa00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a948:	e0bffd17 	ldw	r2,-12(fp)
    a94c:	10800017 	ldw	r2,0(r2)
    a950:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a954:	e0bffd17 	ldw	r2,-12(fp)
    a958:	10800403 	ldbu	r2,16(r2)
    a95c:	10803fcc 	andi	r2,r2,255
    a960:	10000426 	beq	r2,zero,a974 <alt_tick+0x54>
    a964:	d0a0d817 	ldw	r2,-31904(gp)
    a968:	1000021e 	bne	r2,zero,a974 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a96c:	e0bffd17 	ldw	r2,-12(fp)
    a970:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a974:	e0bffd17 	ldw	r2,-12(fp)
    a978:	10800217 	ldw	r2,8(r2)
    a97c:	d0e0d817 	ldw	r3,-31904(gp)
    a980:	18801d36 	bltu	r3,r2,a9f8 <alt_tick+0xd8>
    a984:	e0bffd17 	ldw	r2,-12(fp)
    a988:	10800403 	ldbu	r2,16(r2)
    a98c:	10803fcc 	andi	r2,r2,255
    a990:	1000191e 	bne	r2,zero,a9f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a994:	e0bffd17 	ldw	r2,-12(fp)
    a998:	10c00317 	ldw	r3,12(r2)
    a99c:	e0bffd17 	ldw	r2,-12(fp)
    a9a0:	10800517 	ldw	r2,20(r2)
    a9a4:	1009883a 	mov	r4,r2
    a9a8:	183ee83a 	callr	r3
    a9ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a9b0:	e0bfff17 	ldw	r2,-4(fp)
    a9b4:	1000031e 	bne	r2,zero,a9c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a9b8:	e13ffd17 	ldw	r4,-12(fp)
    a9bc:	000a8880 	call	a888 <alt_alarm_stop>
    a9c0:	00000d06 	br	a9f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a9c4:	e0bffd17 	ldw	r2,-12(fp)
    a9c8:	10c00217 	ldw	r3,8(r2)
    a9cc:	e0bfff17 	ldw	r2,-4(fp)
    a9d0:	1887883a 	add	r3,r3,r2
    a9d4:	e0bffd17 	ldw	r2,-12(fp)
    a9d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a9dc:	e0bffd17 	ldw	r2,-12(fp)
    a9e0:	10c00217 	ldw	r3,8(r2)
    a9e4:	d0a0d817 	ldw	r2,-31904(gp)
    a9e8:	1880032e 	bgeu	r3,r2,a9f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a9ec:	e0bffd17 	ldw	r2,-12(fp)
    a9f0:	00c00044 	movi	r3,1
    a9f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a9f8:	e0bffe17 	ldw	r2,-8(fp)
    a9fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    aa00:	e0fffd17 	ldw	r3,-12(fp)
    aa04:	d0a00904 	addi	r2,gp,-32732
    aa08:	18bfcf1e 	bne	r3,r2,a948 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    aa0c:	0001883a 	nop
}
    aa10:	e037883a 	mov	sp,fp
    aa14:	dfc00117 	ldw	ra,4(sp)
    aa18:	df000017 	ldw	fp,0(sp)
    aa1c:	dec00204 	addi	sp,sp,8
    aa20:	f800283a 	ret

0000aa24 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    aa24:	deffff04 	addi	sp,sp,-4
    aa28:	df000015 	stw	fp,0(sp)
    aa2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    aa30:	000170fa 	wrctl	ienable,zero
}
    aa34:	e037883a 	mov	sp,fp
    aa38:	df000017 	ldw	fp,0(sp)
    aa3c:	dec00104 	addi	sp,sp,4
    aa40:	f800283a 	ret

0000aa44 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    aa44:	defffa04 	addi	sp,sp,-24
    aa48:	dfc00515 	stw	ra,20(sp)
    aa4c:	df000415 	stw	fp,16(sp)
    aa50:	df000404 	addi	fp,sp,16
    aa54:	e13ffe15 	stw	r4,-8(fp)
    aa58:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    aa5c:	e0bfff17 	ldw	r2,-4(fp)
    aa60:	10800017 	ldw	r2,0(r2)
    aa64:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    aa68:	e13ffe17 	ldw	r4,-8(fp)
    aa6c:	0008bd40 	call	8bd4 <strlen>
    aa70:	10800044 	addi	r2,r2,1
    aa74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    aa78:	00000d06 	br	aab0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    aa7c:	e0bffc17 	ldw	r2,-16(fp)
    aa80:	10c00217 	ldw	r3,8(r2)
    aa84:	e0bffd17 	ldw	r2,-12(fp)
    aa88:	1809883a 	mov	r4,r3
    aa8c:	e17ffe17 	ldw	r5,-8(fp)
    aa90:	100d883a 	mov	r6,r2
    aa94:	000ad680 	call	ad68 <memcmp>
    aa98:	1000021e 	bne	r2,zero,aaa4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    aa9c:	e0bffc17 	ldw	r2,-16(fp)
    aaa0:	00000706 	br	aac0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    aaa4:	e0bffc17 	ldw	r2,-16(fp)
    aaa8:	10800017 	ldw	r2,0(r2)
    aaac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    aab0:	e0fffc17 	ldw	r3,-16(fp)
    aab4:	e0bfff17 	ldw	r2,-4(fp)
    aab8:	18bff01e 	bne	r3,r2,aa7c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    aabc:	0005883a 	mov	r2,zero
}
    aac0:	e037883a 	mov	sp,fp
    aac4:	dfc00117 	ldw	ra,4(sp)
    aac8:	df000017 	ldw	fp,0(sp)
    aacc:	dec00204 	addi	sp,sp,8
    aad0:	f800283a 	ret

0000aad4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    aad4:	defffb04 	addi	sp,sp,-20
    aad8:	dfc00415 	stw	ra,16(sp)
    aadc:	df000315 	stw	fp,12(sp)
    aae0:	df000304 	addi	fp,sp,12
    aae4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    aae8:	00800074 	movhi	r2,1
    aaec:	10acc504 	addi	r2,r2,-19692
    aaf0:	10800017 	ldw	r2,0(r2)
    aaf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    aaf8:	00003106 	br	abc0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    aafc:	e0bffd17 	ldw	r2,-12(fp)
    ab00:	10800217 	ldw	r2,8(r2)
    ab04:	1009883a 	mov	r4,r2
    ab08:	0008bd40 	call	8bd4 <strlen>
    ab0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ab10:	e0bffd17 	ldw	r2,-12(fp)
    ab14:	10c00217 	ldw	r3,8(r2)
    ab18:	e0bffe17 	ldw	r2,-8(fp)
    ab1c:	10bfffc4 	addi	r2,r2,-1
    ab20:	1885883a 	add	r2,r3,r2
    ab24:	10800003 	ldbu	r2,0(r2)
    ab28:	10803fcc 	andi	r2,r2,255
    ab2c:	1080201c 	xori	r2,r2,128
    ab30:	10bfe004 	addi	r2,r2,-128
    ab34:	10800bd8 	cmpnei	r2,r2,47
    ab38:	1000031e 	bne	r2,zero,ab48 <alt_find_file+0x74>
    {
      len -= 1;
    ab3c:	e0bffe17 	ldw	r2,-8(fp)
    ab40:	10bfffc4 	addi	r2,r2,-1
    ab44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ab48:	e0bffe17 	ldw	r2,-8(fp)
    ab4c:	e0ffff17 	ldw	r3,-4(fp)
    ab50:	1885883a 	add	r2,r3,r2
    ab54:	10800003 	ldbu	r2,0(r2)
    ab58:	10803fcc 	andi	r2,r2,255
    ab5c:	1080201c 	xori	r2,r2,128
    ab60:	10bfe004 	addi	r2,r2,-128
    ab64:	10800be0 	cmpeqi	r2,r2,47
    ab68:	1000081e 	bne	r2,zero,ab8c <alt_find_file+0xb8>
    ab6c:	e0bffe17 	ldw	r2,-8(fp)
    ab70:	e0ffff17 	ldw	r3,-4(fp)
    ab74:	1885883a 	add	r2,r3,r2
    ab78:	10800003 	ldbu	r2,0(r2)
    ab7c:	10803fcc 	andi	r2,r2,255
    ab80:	1080201c 	xori	r2,r2,128
    ab84:	10bfe004 	addi	r2,r2,-128
    ab88:	10000a1e 	bne	r2,zero,abb4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ab8c:	e0bffd17 	ldw	r2,-12(fp)
    ab90:	10c00217 	ldw	r3,8(r2)
    ab94:	e0bffe17 	ldw	r2,-8(fp)
    ab98:	1809883a 	mov	r4,r3
    ab9c:	e17fff17 	ldw	r5,-4(fp)
    aba0:	100d883a 	mov	r6,r2
    aba4:	000ad680 	call	ad68 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    aba8:	1000021e 	bne	r2,zero,abb4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    abac:	e0bffd17 	ldw	r2,-12(fp)
    abb0:	00000806 	br	abd4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    abb4:	e0bffd17 	ldw	r2,-12(fp)
    abb8:	10800017 	ldw	r2,0(r2)
    abbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    abc0:	e0fffd17 	ldw	r3,-12(fp)
    abc4:	00800074 	movhi	r2,1
    abc8:	10acc504 	addi	r2,r2,-19692
    abcc:	18bfcb1e 	bne	r3,r2,aafc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    abd0:	0005883a 	mov	r2,zero
}
    abd4:	e037883a 	mov	sp,fp
    abd8:	dfc00117 	ldw	ra,4(sp)
    abdc:	df000017 	ldw	fp,0(sp)
    abe0:	dec00204 	addi	sp,sp,8
    abe4:	f800283a 	ret

0000abe8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    abe8:	defffa04 	addi	sp,sp,-24
    abec:	dfc00515 	stw	ra,20(sp)
    abf0:	df000415 	stw	fp,16(sp)
    abf4:	dc000315 	stw	r16,12(sp)
    abf8:	df000304 	addi	fp,sp,12
    abfc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    ac00:	00bffa04 	movi	r2,-24
    ac04:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ac08:	e03ffd15 	stw	zero,-12(fp)
    ac0c:	00002106 	br	ac94 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    ac10:	04000074 	movhi	r16,1
    ac14:	842c6204 	addi	r16,r16,-20088
    ac18:	e0bffd17 	ldw	r2,-12(fp)
    ac1c:	1009883a 	mov	r4,r2
    ac20:	01400304 	movi	r5,12
    ac24:	00094a00 	call	94a0 <__mulsi3>
    ac28:	8085883a 	add	r2,r16,r2
    ac2c:	10800017 	ldw	r2,0(r2)
    ac30:	1000151e 	bne	r2,zero,ac88 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    ac34:	04000074 	movhi	r16,1
    ac38:	842c6204 	addi	r16,r16,-20088
    ac3c:	e0bffd17 	ldw	r2,-12(fp)
    ac40:	1009883a 	mov	r4,r2
    ac44:	01400304 	movi	r5,12
    ac48:	00094a00 	call	94a0 <__mulsi3>
    ac4c:	8085883a 	add	r2,r16,r2
    ac50:	e0ffff17 	ldw	r3,-4(fp)
    ac54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    ac58:	00800074 	movhi	r2,1
    ac5c:	10acc904 	addi	r2,r2,-19676
    ac60:	10c00017 	ldw	r3,0(r2)
    ac64:	e0bffd17 	ldw	r2,-12(fp)
    ac68:	1880040e 	bge	r3,r2,ac7c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    ac6c:	00800074 	movhi	r2,1
    ac70:	10acc904 	addi	r2,r2,-19676
    ac74:	e0fffd17 	ldw	r3,-12(fp)
    ac78:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    ac7c:	e0bffd17 	ldw	r2,-12(fp)
    ac80:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    ac84:	00000606 	br	aca0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ac88:	e0bffd17 	ldw	r2,-12(fp)
    ac8c:	10800044 	addi	r2,r2,1
    ac90:	e0bffd15 	stw	r2,-12(fp)
    ac94:	e0bffd17 	ldw	r2,-12(fp)
    ac98:	10800810 	cmplti	r2,r2,32
    ac9c:	103fdc1e 	bne	r2,zero,ac10 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    aca0:	e0bffe17 	ldw	r2,-8(fp)
}
    aca4:	e037883a 	mov	sp,fp
    aca8:	dfc00217 	ldw	ra,8(sp)
    acac:	df000117 	ldw	fp,4(sp)
    acb0:	dc000017 	ldw	r16,0(sp)
    acb4:	dec00304 	addi	sp,sp,12
    acb8:	f800283a 	ret

0000acbc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    acbc:	defffb04 	addi	sp,sp,-20
    acc0:	df000415 	stw	fp,16(sp)
    acc4:	df000404 	addi	fp,sp,16
    acc8:	e13ffe15 	stw	r4,-8(fp)
    accc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    acd0:	e0bfff17 	ldw	r2,-4(fp)
    acd4:	10820070 	cmpltui	r2,r2,2049
    acd8:	1000021e 	bne	r2,zero,ace4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    acdc:	00820004 	movi	r2,2048
    ace0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    ace4:	e0fffe17 	ldw	r3,-8(fp)
    ace8:	e0bfff17 	ldw	r2,-4(fp)
    acec:	1885883a 	add	r2,r3,r2
    acf0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    acf4:	e0bffe17 	ldw	r2,-8(fp)
    acf8:	e0bffc15 	stw	r2,-16(fp)
    acfc:	00000506 	br	ad14 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    ad00:	e0bffc17 	ldw	r2,-16(fp)
    ad04:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ad08:	e0bffc17 	ldw	r2,-16(fp)
    ad0c:	10800804 	addi	r2,r2,32
    ad10:	e0bffc15 	stw	r2,-16(fp)
    ad14:	e0fffc17 	ldw	r3,-16(fp)
    ad18:	e0bffd17 	ldw	r2,-12(fp)
    ad1c:	18bff836 	bltu	r3,r2,ad00 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ad20:	e0bffe17 	ldw	r2,-8(fp)
    ad24:	108007cc 	andi	r2,r2,31
    ad28:	10000226 	beq	r2,zero,ad34 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    ad2c:	e0bffc17 	ldw	r2,-16(fp)
    ad30:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    ad34:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    ad38:	e037883a 	mov	sp,fp
    ad3c:	df000017 	ldw	fp,0(sp)
    ad40:	dec00104 	addi	sp,sp,4
    ad44:	f800283a 	ret

0000ad48 <exit>:
    ad48:	defffe04 	addi	sp,sp,-8
    ad4c:	000b883a 	mov	r5,zero
    ad50:	dc000015 	stw	r16,0(sp)
    ad54:	dfc00115 	stw	ra,4(sp)
    ad58:	2021883a 	mov	r16,r4
    ad5c:	000adb00 	call	adb0 <__call_exitprocs>
    ad60:	8009883a 	mov	r4,r16
    ad64:	000af880 	call	af88 <_exit>

0000ad68 <memcmp>:
    ad68:	30000d26 	beq	r6,zero,ada0 <memcmp+0x38>
    ad6c:	20c00003 	ldbu	r3,0(r4)
    ad70:	28800003 	ldbu	r2,0(r5)
    ad74:	18800c1e 	bne	r3,r2,ada8 <memcmp+0x40>
    ad78:	31bfff84 	addi	r6,r6,-2
    ad7c:	01ffffc4 	movi	r7,-1
    ad80:	00000406 	br	ad94 <memcmp+0x2c>
    ad84:	20c00003 	ldbu	r3,0(r4)
    ad88:	28800003 	ldbu	r2,0(r5)
    ad8c:	31bfffc4 	addi	r6,r6,-1
    ad90:	1880051e 	bne	r3,r2,ada8 <memcmp+0x40>
    ad94:	21000044 	addi	r4,r4,1
    ad98:	29400044 	addi	r5,r5,1
    ad9c:	31fff91e 	bne	r6,r7,ad84 <memcmp+0x1c>
    ada0:	0005883a 	mov	r2,zero
    ada4:	f800283a 	ret
    ada8:	1885c83a 	sub	r2,r3,r2
    adac:	f800283a 	ret

0000adb0 <__call_exitprocs>:
    adb0:	00800074 	movhi	r2,1
    adb4:	10acc204 	addi	r2,r2,-19704
    adb8:	10800017 	ldw	r2,0(r2)
    adbc:	defff204 	addi	sp,sp,-56
    adc0:	df000c15 	stw	fp,48(sp)
    adc4:	d8800015 	stw	r2,0(sp)
    adc8:	10800c04 	addi	r2,r2,48
    adcc:	dd400915 	stw	r21,36(sp)
    add0:	dfc00d15 	stw	ra,52(sp)
    add4:	ddc00b15 	stw	r23,44(sp)
    add8:	dd800a15 	stw	r22,40(sp)
    addc:	dd000815 	stw	r20,32(sp)
    ade0:	dcc00715 	stw	r19,28(sp)
    ade4:	dc800615 	stw	r18,24(sp)
    ade8:	dc400515 	stw	r17,20(sp)
    adec:	dc000415 	stw	r16,16(sp)
    adf0:	d9000115 	stw	r4,4(sp)
    adf4:	2839883a 	mov	fp,r5
    adf8:	d8800215 	stw	r2,8(sp)
    adfc:	057fffc4 	movi	r21,-1
    ae00:	d8800017 	ldw	r2,0(sp)
    ae04:	dd800217 	ldw	r22,8(sp)
    ae08:	15c00c17 	ldw	r23,48(r2)
    ae0c:	b8001b26 	beq	r23,zero,ae7c <__call_exitprocs+0xcc>
    ae10:	b9000117 	ldw	r4,4(r23)
    ae14:	bd002217 	ldw	r20,136(r23)
    ae18:	243fffc4 	addi	r16,r4,-1
    ae1c:	80001416 	blt	r16,zero,ae70 <__call_exitprocs+0xc0>
    ae20:	244007c4 	addi	r17,r4,31
    ae24:	21000044 	addi	r4,r4,1
    ae28:	8c63883a 	add	r17,r17,r17
    ae2c:	8427883a 	add	r19,r16,r16
    ae30:	2109883a 	add	r4,r4,r4
    ae34:	8c63883a 	add	r17,r17,r17
    ae38:	9ce7883a 	add	r19,r19,r19
    ae3c:	2109883a 	add	r4,r4,r4
    ae40:	a463883a 	add	r17,r20,r17
    ae44:	a4e7883a 	add	r19,r20,r19
    ae48:	b925883a 	add	r18,r23,r4
    ae4c:	e0001726 	beq	fp,zero,aeac <__call_exitprocs+0xfc>
    ae50:	a0000226 	beq	r20,zero,ae5c <__call_exitprocs+0xac>
    ae54:	89400017 	ldw	r5,0(r17)
    ae58:	2f001426 	beq	r5,fp,aeac <__call_exitprocs+0xfc>
    ae5c:	843fffc4 	addi	r16,r16,-1
    ae60:	8c7fff04 	addi	r17,r17,-4
    ae64:	9cffff04 	addi	r19,r19,-4
    ae68:	94bfff04 	addi	r18,r18,-4
    ae6c:	857ff71e 	bne	r16,r21,ae4c <__call_exitprocs+0x9c>
    ae70:	00800034 	movhi	r2,0
    ae74:	10800004 	addi	r2,r2,0
    ae78:	1000311e 	bne	r2,zero,af40 <__call_exitprocs+0x190>
    ae7c:	dfc00d17 	ldw	ra,52(sp)
    ae80:	df000c17 	ldw	fp,48(sp)
    ae84:	ddc00b17 	ldw	r23,44(sp)
    ae88:	dd800a17 	ldw	r22,40(sp)
    ae8c:	dd400917 	ldw	r21,36(sp)
    ae90:	dd000817 	ldw	r20,32(sp)
    ae94:	dcc00717 	ldw	r19,28(sp)
    ae98:	dc800617 	ldw	r18,24(sp)
    ae9c:	dc400517 	ldw	r17,20(sp)
    aea0:	dc000417 	ldw	r16,16(sp)
    aea4:	dec00e04 	addi	sp,sp,56
    aea8:	f800283a 	ret
    aeac:	b9000117 	ldw	r4,4(r23)
    aeb0:	92000017 	ldw	r8,0(r18)
    aeb4:	213fffc4 	addi	r4,r4,-1
    aeb8:	24001a26 	beq	r4,r16,af24 <__call_exitprocs+0x174>
    aebc:	90000015 	stw	zero,0(r18)
    aec0:	403fe626 	beq	r8,zero,ae5c <__call_exitprocs+0xac>
    aec4:	ba400117 	ldw	r9,4(r23)
    aec8:	a0001226 	beq	r20,zero,af14 <__call_exitprocs+0x164>
    aecc:	00800044 	movi	r2,1
    aed0:	1408983a 	sll	r4,r2,r16
    aed4:	a1404017 	ldw	r5,256(r20)
    aed8:	214a703a 	and	r5,r4,r5
    aedc:	28000d26 	beq	r5,zero,af14 <__call_exitprocs+0x164>
    aee0:	a1404117 	ldw	r5,260(r20)
    aee4:	2148703a 	and	r4,r4,r5
    aee8:	2000101e 	bne	r4,zero,af2c <__call_exitprocs+0x17c>
    aeec:	99400017 	ldw	r5,0(r19)
    aef0:	d9000117 	ldw	r4,4(sp)
    aef4:	da400315 	stw	r9,12(sp)
    aef8:	403ee83a 	callr	r8
    aefc:	da400317 	ldw	r9,12(sp)
    af00:	b9000117 	ldw	r4,4(r23)
    af04:	227fbe1e 	bne	r4,r9,ae00 <__call_exitprocs+0x50>
    af08:	b1000017 	ldw	r4,0(r22)
    af0c:	25ffd326 	beq	r4,r23,ae5c <__call_exitprocs+0xac>
    af10:	003fbb06 	br	ae00 <__call_exitprocs+0x50>
    af14:	da400315 	stw	r9,12(sp)
    af18:	403ee83a 	callr	r8
    af1c:	da400317 	ldw	r9,12(sp)
    af20:	003ff706 	br	af00 <__call_exitprocs+0x150>
    af24:	bc000115 	stw	r16,4(r23)
    af28:	003fe506 	br	aec0 <__call_exitprocs+0x110>
    af2c:	99000017 	ldw	r4,0(r19)
    af30:	da400315 	stw	r9,12(sp)
    af34:	403ee83a 	callr	r8
    af38:	da400317 	ldw	r9,12(sp)
    af3c:	003ff006 	br	af00 <__call_exitprocs+0x150>
    af40:	b9000117 	ldw	r4,4(r23)
    af44:	20000e1e 	bne	r4,zero,af80 <__call_exitprocs+0x1d0>
    af48:	b9000017 	ldw	r4,0(r23)
    af4c:	20000826 	beq	r4,zero,af70 <__call_exitprocs+0x1c0>
    af50:	b1000015 	stw	r4,0(r22)
    af54:	a0000226 	beq	r20,zero,af60 <__call_exitprocs+0x1b0>
    af58:	a009883a 	mov	r4,r20
    af5c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    af60:	b809883a 	mov	r4,r23
    af64:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    af68:	b5c00017 	ldw	r23,0(r22)
    af6c:	003fa706 	br	ae0c <__call_exitprocs+0x5c>
    af70:	0007883a 	mov	r3,zero
    af74:	b82d883a 	mov	r22,r23
    af78:	182f883a 	mov	r23,r3
    af7c:	003fa306 	br	ae0c <__call_exitprocs+0x5c>
    af80:	b8c00017 	ldw	r3,0(r23)
    af84:	003ffb06 	br	af74 <__call_exitprocs+0x1c4>

0000af88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    af88:	defffc04 	addi	sp,sp,-16
    af8c:	df000315 	stw	fp,12(sp)
    af90:	df000304 	addi	fp,sp,12
    af94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    af98:	0001883a 	nop
    af9c:	e0bfff17 	ldw	r2,-4(fp)
    afa0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    afa4:	e0bffd17 	ldw	r2,-12(fp)
    afa8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    afac:	e0bffe17 	ldw	r2,-8(fp)
    afb0:	10000226 	beq	r2,zero,afbc <_exit+0x34>
    ALT_SIM_FAIL();
    afb4:	002af070 	cmpltui	zero,zero,43969
    afb8:	00000106 	br	afc0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    afbc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    afc0:	003fff06 	br	afc0 <_exit+0x38>
