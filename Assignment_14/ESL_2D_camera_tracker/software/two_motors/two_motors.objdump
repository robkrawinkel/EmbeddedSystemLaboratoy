
two_motors.elf:     file format elf32-littlenios2
two_motors.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00005d0c memsz 0x00005d0c flags r-x
    LOAD off    0x00006d2c vaddr 0x0000dd2c paddr 0x0000e074 align 2**12
         filesz 0x00000348 memsz 0x00000348 flags rw-
    LOAD off    0x000073bc vaddr 0x0000e3bc paddr 0x0000e3bc align 2**12
         filesz 0x00000000 memsz 0x00000b04 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005950  000081bc  000081bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000220  0000db0c  0000db0c  00006b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000348  0000dd2c  0000e074  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b04  0000e3bc  0000e3bc  000073bc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000920  00000000  00000000  00007098  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c760  00000000  00000000  000079b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a86  00000000  00000000  00014118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000045a7  00000000  00000000  00018b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001070  00000000  00000000  0001d148  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021f6  00000000  00000000  0001e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003fcb  00000000  00000000  000203ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0002437c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000480  00000000  00000000  000243a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000270a8  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000270ab  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000270ae  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000270af  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000270b0  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000270b4  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000270b8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000270bc  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000270c5  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000270ce  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  000270d7  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  000270e9  2**0
                  CONTENTS, READONLY
 28 .jdi          00005585  00000000  00000000  0002713a  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003c04b  00000000  00000000  0002c6bf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081bc l    d  .text	00000000 .text
0000db0c l    d  .rodata	00000000 .rodata
0000dd2c l    d  .rwdata	00000000 .rwdata
0000e3bc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../two_motors_bsp//obj/HAL/src/crt0.o
000081f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 InterruptHandlerForUart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pan_funcs.c
00000000 l    df *ABS*	00000000 pan_integ.c
00000000 l    df *ABS*	00000000 pan_model.c
00000000 l    df *ABS*	00000000 pan_submod.c
00000000 l    df *ABS*	00000000 tilt_integ.c
00000000 l    df *ABS*	00000000 tilt_model.c
00000000 l    df *ABS*	00000000 tilt_submod.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000a48c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000aff8 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000dd2c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000c344 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000c498 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000c5d8 l     F .text	00000038 alt_dev_reg
0000de0c l     O .rwdata	0000002c jtag_uart
0000de38 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c8e8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000caa0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000cbb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
0000ccdc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000ce14 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ce40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000cf60 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000d0b8 l     F .text	00000050 alt_get_errno
0000d108 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000c430 g     F .text	00000068 alt_main
0000b748 g     F .text	00000044 __ashldi3
0000b834 g     F .text	00000080 _puts_r
0000edc0 g     O .bss	00000100 alt_irq
0000e3c0 g     O .bss	00000002 RxHead_0
0000e074 g       *ABS*	00000000 __flash_rwdata_start
0000ece0 g     O .bss	00000018 tilt_I
0000b7e8 g     F .text	0000004c printf
00009664 g     F .text	0000005c pan_CalculateOutput
0000e3c2 g     O .bss	00000002 RxTail_0
0000ad2c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00009078 g     F .text	000005ec pan_CalculateDynamic
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000e3f4 g     O .bss	00000004 errno
000081f8 g     F .text	00000060 InitUart0
0000ecf8 g     O .bss	00000018 tilt_R
00009ab8 g     F .text	0000004c tilt_ModelInitialize_initialvalues
0000e400 g     O .bss	00000004 alt_argv
0001600c g       *ABS*	00000000 _gp
0000de8c g     O .rwdata	00000180 alt_fd_list
0000d58c g     F .text	00000090 alt_find_dev
0000e3be g     O .bss	00000002 TxTail_0
0000ae50 g     F .text	000000d4 __floatsidf
0000d040 g     F .text	00000078 alt_io_redirect
0000adf4 g     F .text	0000005c __ltdf2
0000b8b4 g     F .text	00000014 puts
0000c75c g     F .text	000000f4 altera_avalon_jtag_uart_read
0000b7ac g     F .text	0000003c _printf_r
0000a2fc g     F .text	0000003c tilt_CopyVariablesToOutputs
0000b118 g     F .text	00000008 __udivsi3
0000e024 g     O .rwdata	00000004 pan_number_of_inputs
0000e03d g     O .rwdata	00000001 tilt_major
0000d804 g     F .text	0000008c alt_icache_flush
00008d54 g     F .text	0000002c pan_DiscreteInitialize
0000ec10 g     O .bss	00000018 pan_I
0000e064 g     O .rwdata	00000004 alt_max_fd
0000b530 g     F .text	00000104 __unpack_d
0000837c g     F .text	0000003c EmptyUart0
0000c194 g     F .text	000001b0 alt_irq_register
0000900c g     F .text	00000038 pan_ModelInitialize_variables
0000a7e0 g     F .text	00000054 __adddf3
0000e3f0 g     O .bss	00000001 tilt_stop_simulation
0000e048 g     O .rwdata	00000004 _global_impure_ptr
0000eec0 g       *ABS*	00000000 __bss_end
0000986c g     F .text	0000005c pan_TerminateSubmodel
0000e3c4 g     O .bss	00000008 pan_start_time
0000d468 g     F .text	00000104 alt_tick
00008f44 g     F .text	0000004c pan_ModelInitialize_initialvalues
0000d3d0 g     F .text	00000098 alt_alarm_stop
0000e3f8 g     O .bss	00000004 alt_irq_active
0000ec28 g     O .bss	00000038 pan_P
000099d8 g     F .text	000000e0 tilt_ModelInitialize_parameters
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000d0 alt_irq_handler
0000de64 g     O .rwdata	00000028 alt_dev_null
0000ec60 g     O .bss	00000018 pan_s
00009808 g     F .text	00000064 pan_CalculateSubmodel
00008258 g     F .text	00000124 IsrUart0
0000e03c g     O .rwdata	00000001 tilt_initialize
0000cdf8 g     F .text	0000001c alt_dcache_flush_all
0000af24 g     F .text	000000d4 __fixdfsi
0000e020 g     O .rwdata	00000001 pan_initialize
0000e074 g       *ABS*	00000000 __ram_rwdata_end
0000e05c g     O .rwdata	00000008 alt_dev_list
0000c4e8 g     F .text	000000f0 write
0000ed10 g     O .bss	00000060 tilt_V
000098c8 g     F .text	0000002c tilt_DiscreteInitialize
0000dd2c g       *ABS*	00000000 __ram_rodata_end
0000b704 g     F .text	00000044 __lshrdi3
0000a3cc g     F .text	00000064 tilt_CalculateSubmodel
0000b120 g     F .text	00000008 __umodsi3
0000e010 g     O .rwdata	00000008 pan_finish_time
0000a430 g     F .text	0000005c tilt_TerminateSubmodel
0000eec0 g       *ABS*	00000000 end
0000a338 g     F .text	00000094 tilt_InitializeSubmodel
0000e3cc g     O .bss	00000008 pan_time
0000cc00 g     F .text	000000dc altera_avalon_uart_write
0000ed70 g     O .bss	00000038 tilt_P
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009b80 g     F .text	00000038 tilt_ModelInitialize_variables
0000c960 g     F .text	00000080 alt_avalon_timer_sc_init
0000ca40 g     F .text	00000060 altera_avalon_uart_write_fd
0000b260 g     F .text	000000ac __clzsi2
0000c850 g     F .text	00000098 altera_avalon_jtag_uart_write
0000b8f0 g     F .text	00000734 ___vfprintf_internal_r
0000d8f8 g     F .text	000001d8 __call_exitprocs
000081bc g     F .text	0000003c _start
0000e408 g     O .bss	00000004 _alt_tick_rate
00009b04 g     F .text	0000007c tilt_ModelInitialize_states
0000e40c g     O .bss	00000004 _alt_nticks
0000c644 g     F .text	00000058 alt_sys_init
00008e64 g     F .text	000000e0 pan_ModelInitialize_parameters
000083b8 g     F .text	0000005c GetUart0
0000e040 g     O .rwdata	00000004 tilt_number_of_inputs
00008cdc g     F .text	00000040 pan_String2Double
0000e00c g     O .rwdata	00000002 maxStepCount0
0000b128 g     F .text	00000028 __mulsi3
0000dd2c g       *ABS*	00000000 __ram_rwdata_start
0000db0c g       *ABS*	00000000 __ram_rodata_start
0000c69c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000d730 g     F .text	000000d4 alt_get_fd
00008414 g     F .text	0000011c PutUart0
0000b634 g     F .text	000000d0 __fpcmp_parts_d
00008d80 g     F .text	000000e4 pan_DiscreteStep
0000d8b0 g     F .text	00000048 memcmp
0000eec0 g       *ABS*	00000000 __alt_stack_base
0000e021 g     O .rwdata	00000001 pan_major
0000ab78 g     F .text	000001b4 __divdf3
0000e3e4 g     O .bss	00000008 tilt_time
0000a894 g     F .text	000002e4 __muldf3
0000d61c g     F .text	00000114 alt_find_file
0000ce90 g     F .text	000000a0 alt_dev_llist_insert
0000e02c g     O .rwdata	00000008 tilt_finish_time
0000c048 g     F .text	000000e0 __sfvwrite_small_dev
0000e3bc g       *ABS*	00000000 __bss_start
0000b78c g     F .text	00000020 memset
000087e8 g     F .text	000004f4 main
0000e404 g     O .bss	00000004 alt_envp
0000c6fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e00e g     O .rwdata	00000002 maxStepCount1
00009718 g     F .text	0000005c pan_CopyVariablesToOutputs
0000e068 g     O .rwdata	00000004 alt_errno
0000ec78 g     O .bss	00000050 pan_V
0000a288 g     F .text	00000074 tilt_CopyInputsToVariables
0000e3ec g     O .bss	00000004 tilt_steps
0000e3d4 g     O .bss	00000004 pan_steps
0000b06c g     F .text	00000050 __divsi3
0000dbdc g     O .rodata	00000014 __thenan_df
0000e3bc g     O .bss	00000002 TxHead_0
0000db0c g       *ABS*	00000000 __flash_rodata_start
0000e3d8 g     O .bss	00000001 pan_stop_simulation
0000c610 g     F .text	00000034 alt_irq_init
0000d350 g     F .text	00000080 alt_release_fd
0000dbf0 g     O .rodata	00000100 __clz_tab
0000c128 g     F .text	0000006c _write_r
0000e410 g     O .bss	00000400 rx_buffer_0
0000e018 g     O .rwdata	00000008 pan_step_size
00008f90 g     F .text	0000007c pan_ModelInitialize_states
0000e04c g     O .rwdata	00000004 _impure_ptr
0000e3fc g     O .bss	00000004 alt_argc
00008530 g     F .text	000000b8 InitUart
00008020 g       .exceptions	00000000 alt_irq_entry
0000e054 g     O .rwdata	00000008 alt_fs_list
000096c0 g     F .text	00000058 pan_CopyInputsToVariables
00009bb8 g     F .text	00000034 tilt_ModelInitialize
00008d1c g     F .text	00000038 pan_Double2String
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009774 g     F .text	00000094 pan_InitializeSubmodel
000086e8 g     F .text	00000100 Stepcount0ToSI
0000e074 g       *ABS*	00000000 _edata
0000c9e0 g     F .text	00000060 altera_avalon_uart_read_fd
0000eec0 g       *ABS*	00000000 _end
000081bc g       *ABS*	00000000 __ram_exceptions_end
0000e028 g     O .rwdata	00000004 pan_number_of_outputs
0000eda8 g     O .bss	00000018 tilt_s
0000d56c g     F .text	00000020 altera_nios2_qsys_irq_init
0000d890 g     F .text	00000020 exit
0000b0bc g     F .text	0000005c __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009bec g     F .text	00000660 tilt_CalculateDynamic
0000dad0 g     F .text	0000003c _exit
0000e034 g     O .rwdata	00000008 tilt_step_size
0000e3dc g     O .bss	00000008 tilt_start_time
0000b150 g     F .text	00000110 __muldi3
0000a24c g     F .text	0000003c tilt_CalculateOutput
0000b8c8 g     F .text	00000028 strlen
0000d1f8 g     F .text	00000158 open
0000ad90 g     F .text	00000064 __gedf2
0000e044 g     O .rwdata	00000004 tilt_number_of_outputs
0000cf30 g     F .text	00000030 alt_icache_flush_all
0000e050 g     O .rwdata	00000004 alt_priority_mask
0000ecc8 g     O .bss	00000018 pan_R
0000c024 g     F .text	00000024 __vfprintf_internal
0000caf0 g     F .text	000000c0 altera_avalon_uart_read
00009044 g     F .text	00000034 pan_ModelInitialize
0000a834 g     F .text	00000060 __subdf3
000085e8 g     F .text	00000100 Stepcount1ToSI
0000e06c g     O .rwdata	00000008 alt_alarm_list
0000e810 g     O .bss	00000400 tx_buffer_0
0000cd2c g     F .text	000000cc close
0000c3b0 g     F .text	00000080 alt_load
0000b30c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
000098f4 g     F .text	000000e4 tilt_DiscreteStep



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606f14 	ori	at,at,33212
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001826 	beq	r2,zero,818c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
    812c:	00c00074 	movhi	r3,1
    8130:	18fb7004 	addi	r3,r3,-4672
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	213b7004 	addi	r4,r4,-4672
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	e17ffd17 	ldw	r5,-12(fp)
    8168:	183ee83a 	callr	r3
#endif
        break;
    816c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8178:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    817c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    8180:	e0bffb17 	ldw	r2,-20(fp)
    8184:	103fe21e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8188:	00000706 	br	81a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fdd06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a8:	e037883a 	mov	sp,fp
    81ac:	dfc00117 	ldw	ra,4(sp)
    81b0:	df000017 	ldw	fp,0(sp)
    81b4:	dec00204 	addi	sp,sp,8
    81b8:	f800283a 	ret

Disassembly of section .text:

000081bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81bc:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c8:	d6980314 	ori	gp,gp,24588
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81cc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81d0:	10b8ef14 	ori	r2,r2,58300

    movhi r3, %hi(__bss_end)
    81d4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d8:	18fbb014 	ori	r3,r3,61120

    beq r2, r3, 1f
    81dc:	10c00326 	beq	r2,r3,81ec <_start+0x30>

0:
    stw zero, (r2)
    81e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e8:	10fffd36 	bltu	r2,r3,81e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81ec:	000c3b00 	call	c3b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81f0:	000c4300 	call	c430 <alt_main>

000081f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f4:	003fff06 	br	81f4 <alt_after_alt_main>

000081f8 <InitUart0>:
unsigned short RxHead_0=0;
unsigned short RxTail_0=0;
unsigned char rx_buffer_0[RX_BUFFER_SIZE_0];
 
void InitUart0(unsigned int BaudRate)
{
    81f8:	defffc04 	addi	sp,sp,-16
    81fc:	dfc00315 	stw	ra,12(sp)
    8200:	df000215 	stw	fp,8(sp)
    8204:	df000204 	addi	fp,sp,8
    8208:	e13fff15 	stw	r4,-4(fp)
    unsigned int divisor;
    
    divisor = (ALT_CPU_FREQ/BaudRate) + 1;
    820c:	0100bef4 	movhi	r4,763
    8210:	213c2004 	addi	r4,r4,-3968
    8214:	e17fff17 	ldw	r5,-4(fp)
    8218:	000b1180 	call	b118 <__udivsi3>
    821c:	10800044 	addi	r2,r2,1
    8220:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
    8224:	e0fffe17 	ldw	r3,-8(fp)
    8228:	00800074 	movhi	r2,1
    822c:	10850404 	addi	r2,r2,5136
    8230:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    8234:	00c02004 	movi	r3,128
    8238:	00800074 	movhi	r2,1
    823c:	10850304 	addi	r2,r2,5132
    8240:	10c00035 	stwio	r3,0(r2)
}
    8244:	e037883a 	mov	sp,fp
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	df000017 	ldw	fp,0(sp)
    8250:	dec00204 	addi	sp,sp,8
    8254:	f800283a 	ret

00008258 <IsrUart0>:
 
void IsrUart0(void* context, unsigned int id)
{
    8258:	defffc04 	addi	sp,sp,-16
    825c:	df000315 	stw	fp,12(sp)
    8260:	df000304 	addi	fp,sp,12
    8264:	e13ffe15 	stw	r4,-8(fp)
    8268:	e17fff15 	stw	r5,-4(fp)
    int sr;
    
    sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    826c:	00800074 	movhi	r2,1
    8270:	10850204 	addi	r2,r2,5128
    8274:	10800037 	ldwio	r2,0(r2)
    8278:	e0bffd15 	stw	r2,-12(fp)

    if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
    827c:	e0bffd17 	ldw	r2,-12(fp)
    8280:	1080200c 	andi	r2,r2,128
    8284:	10001526 	beq	r2,zero,82dc <IsrUart0+0x84>
        rx_buffer_0[RxHead_0] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8288:	d0a0ed0b 	ldhu	r2,-31820(gp)
    828c:	10bfffcc 	andi	r2,r2,65535
    8290:	00c00074 	movhi	r3,1
    8294:	18c50004 	addi	r3,r3,5120
    8298:	18c00037 	ldwio	r3,0(r3)
    829c:	01000074 	movhi	r4,1
    82a0:	21390404 	addi	r4,r4,-7152
    82a4:	2085883a 	add	r2,r4,r2
    82a8:	10c00005 	stb	r3,0(r2)
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
    82ac:	0007883a 	mov	r3,zero
    82b0:	00800074 	movhi	r2,1
    82b4:	10850204 	addi	r2,r2,5128
    82b8:	10c00035 	stwio	r3,0(r2)
        if (++RxHead_0 > (RX_BUFFER_SIZE_0 - 1)) {
    82bc:	d0a0ed0b 	ldhu	r2,-31820(gp)
    82c0:	10800044 	addi	r2,r2,1
    82c4:	d0a0ed0d 	sth	r2,-31820(gp)
    82c8:	d0a0ed0b 	ldhu	r2,-31820(gp)
    82cc:	10bfffcc 	andi	r2,r2,65535
    82d0:	10810030 	cmpltui	r2,r2,1024
    82d4:	1000011e 	bne	r2,zero,82dc <IsrUart0+0x84>
            RxHead_0 = 0;
    82d8:	d020ed0d 	sth	zero,-31820(gp)
        }
    }

    if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
    82dc:	e0bffd17 	ldw	r2,-12(fp)
    82e0:	1080100c 	andi	r2,r2,64
    82e4:	10002126 	beq	r2,zero,836c <IsrUart0+0x114>
        if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK) {
    82e8:	00800074 	movhi	r2,1
    82ec:	10850304 	addi	r2,r2,5132
    82f0:	10800037 	ldwio	r2,0(r2)
    82f4:	1080100c 	andi	r2,r2,64
    82f8:	10001c26 	beq	r2,zero,836c <IsrUart0+0x114>
            if (TxTail_0 != TxHead_0) {
    82fc:	d0e0ec8b 	ldhu	r3,-31822(gp)
    8300:	d0a0ec0b 	ldhu	r2,-31824(gp)
    8304:	18ffffcc 	andi	r3,r3,65535
    8308:	10bfffcc 	andi	r2,r2,65535
    830c:	18801326 	beq	r3,r2,835c <IsrUart0+0x104>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_0[TxTail_0]);
    8310:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8314:	10bfffcc 	andi	r2,r2,65535
    8318:	00c00074 	movhi	r3,1
    831c:	18fa0404 	addi	r3,r3,-6128
    8320:	1885883a 	add	r2,r3,r2
    8324:	10800003 	ldbu	r2,0(r2)
    8328:	10c03fcc 	andi	r3,r2,255
    832c:	00800074 	movhi	r2,1
    8330:	10850104 	addi	r2,r2,5124
    8334:	10c00035 	stwio	r3,0(r2)
                if (++TxTail_0 > (TX_BUFFER_SIZE_0 - 1)) {
    8338:	d0a0ec8b 	ldhu	r2,-31822(gp)
    833c:	10800044 	addi	r2,r2,1
    8340:	d0a0ec8d 	sth	r2,-31822(gp)
    8344:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8348:	10bfffcc 	andi	r2,r2,65535
    834c:	10810030 	cmpltui	r2,r2,1024
    8350:	1000061e 	bne	r2,zero,836c <IsrUart0+0x114>
                    TxTail_0 = 0;
    8354:	d020ec8d 	sth	zero,-31822(gp)
    8358:	00000406 	br	836c <IsrUart0+0x114>
                }
            }
            else {
                IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    835c:	00c02004 	movi	r3,128
    8360:	00800074 	movhi	r2,1
    8364:	10850304 	addi	r2,r2,5132
    8368:	10c00035 	stwio	r3,0(r2)
            }
        }
    }
}
    836c:	e037883a 	mov	sp,fp
    8370:	df000017 	ldw	fp,0(sp)
    8374:	dec00104 	addi	sp,sp,4
    8378:	f800283a 	ret

0000837c <EmptyUart0>:
 
unsigned char EmptyUart0()
{
    837c:	deffff04 	addi	sp,sp,-4
    8380:	df000015 	stw	fp,0(sp)
    8384:	d839883a 	mov	fp,sp
    if(RxHead_0 == RxTail_0) {
    8388:	d0e0ed0b 	ldhu	r3,-31820(gp)
    838c:	d0a0ed8b 	ldhu	r2,-31818(gp)
    8390:	18ffffcc 	andi	r3,r3,65535
    8394:	10bfffcc 	andi	r2,r2,65535
    8398:	1880021e 	bne	r3,r2,83a4 <EmptyUart0+0x28>
        return 1;
    839c:	00800044 	movi	r2,1
    83a0:	00000106 	br	83a8 <EmptyUart0+0x2c>
    }
    
    return 0;
    83a4:	0005883a 	mov	r2,zero
} 
    83a8:	e037883a 	mov	sp,fp
    83ac:	df000017 	ldw	fp,0(sp)
    83b0:	dec00104 	addi	sp,sp,4
    83b4:	f800283a 	ret

000083b8 <GetUart0>:
    
unsigned char GetUart0(void)
{
    83b8:	defffe04 	addi	sp,sp,-8
    83bc:	df000115 	stw	fp,4(sp)
    83c0:	df000104 	addi	fp,sp,4
    unsigned char rxChar; 
    
    /* buffer is empty */
    
    rxChar=rx_buffer_0[RxTail_0];
    83c4:	d0a0ed8b 	ldhu	r2,-31818(gp)
    83c8:	10bfffcc 	andi	r2,r2,65535
    83cc:	00c00074 	movhi	r3,1
    83d0:	18f90404 	addi	r3,r3,-7152
    83d4:	1885883a 	add	r2,r3,r2
    83d8:	10800003 	ldbu	r2,0(r2)
    83dc:	e0bfff05 	stb	r2,-4(fp)
    if (++RxTail_0 > (RX_BUFFER_SIZE_0 - 1)) {
    83e0:	d0a0ed8b 	ldhu	r2,-31818(gp)
    83e4:	10800044 	addi	r2,r2,1
    83e8:	d0a0ed8d 	sth	r2,-31818(gp)
    83ec:	d0a0ed8b 	ldhu	r2,-31818(gp)
    83f0:	10bfffcc 	andi	r2,r2,65535
    83f4:	10810030 	cmpltui	r2,r2,1024
    83f8:	1000011e 	bne	r2,zero,8400 <GetUart0+0x48>
        RxTail_0 = 0;
    83fc:	d020ed8d 	sth	zero,-31818(gp)
    }
    
    return rxChar;
    8400:	e0bfff03 	ldbu	r2,-4(fp)
}
    8404:	e037883a 	mov	sp,fp
    8408:	df000017 	ldw	fp,0(sp)
    840c:	dec00104 	addi	sp,sp,4
    8410:	f800283a 	ret

00008414 <PutUart0>:
 
unsigned char PutUart0(unsigned char in_char)
{
    8414:	defffc04 	addi	sp,sp,-16
    8418:	df000315 	stw	fp,12(sp)
    841c:	df000304 	addi	fp,sp,12
    8420:	2005883a 	mov	r2,r4
    8424:	e0bfff05 	stb	r2,-4(fp)
    unsigned short size;
    unsigned int z;
    
    z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
    8428:	00800074 	movhi	r2,1
    842c:	10850204 	addi	r2,r2,5128
    8430:	10800037 	ldwio	r2,0(r2)
    8434:	1080100c 	andi	r2,r2,64
    8438:	e0bffe15 	stw	r2,-8(fp)
    
    if ((TxHead_0==TxTail_0) && z) {
    843c:	d0e0ec0b 	ldhu	r3,-31824(gp)
    8440:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8444:	18ffffcc 	andi	r3,r3,65535
    8448:	10bfffcc 	andi	r2,r2,65535
    844c:	1880071e 	bne	r3,r2,846c <PutUart0+0x58>
    8450:	e0bffe17 	ldw	r2,-8(fp)
    8454:	10000526 	beq	r2,zero,846c <PutUart0+0x58>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
    8458:	e0ffff03 	ldbu	r3,-4(fp)
    845c:	00800074 	movhi	r2,1
    8460:	10850104 	addi	r2,r2,5124
    8464:	10c00035 	stwio	r3,0(r2)
    8468:	00002c06 	br	851c <PutUart0+0x108>
    } else {
        if (TxHead_0 >= TxTail_0) {
    846c:	d0e0ec0b 	ldhu	r3,-31824(gp)
    8470:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8474:	18ffffcc 	andi	r3,r3,65535
    8478:	10bfffcc 	andi	r2,r2,65535
    847c:	18800536 	bltu	r3,r2,8494 <PutUart0+0x80>
            size = TxHead_0 - TxTail_0;
    8480:	d0e0ec0b 	ldhu	r3,-31824(gp)
    8484:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8488:	1885c83a 	sub	r2,r3,r2
    848c:	e0bffd0d 	sth	r2,-12(fp)
    8490:	00000506 	br	84a8 <PutUart0+0x94>
        } else {
            size = ((TX_BUFFER_SIZE_0 - 1) - TxTail_0) + TxHead_0;
    8494:	d0e0ec0b 	ldhu	r3,-31824(gp)
    8498:	d0a0ec8b 	ldhu	r2,-31822(gp)
    849c:	1885c83a 	sub	r2,r3,r2
    84a0:	1080ffc4 	addi	r2,r2,1023
    84a4:	e0bffd0d 	sth	r2,-12(fp)
        }

        if (size > (TX_BUFFER_SIZE_0 - 3)) {
    84a8:	e0bffd0b 	ldhu	r2,-12(fp)
    84ac:	1080ffb0 	cmpltui	r2,r2,1022
    84b0:	1000021e 	bne	r2,zero,84bc <PutUart0+0xa8>
            return (-1);
    84b4:	00bfffc4 	movi	r2,-1
    84b8:	00001906 	br	8520 <PutUart0+0x10c>
        }
        
        tx_buffer_0[TxHead_0] = in_char;
    84bc:	d0a0ec0b 	ldhu	r2,-31824(gp)
    84c0:	10bfffcc 	andi	r2,r2,65535
    84c4:	00c00074 	movhi	r3,1
    84c8:	18fa0404 	addi	r3,r3,-6128
    84cc:	1885883a 	add	r2,r3,r2
    84d0:	e0ffff03 	ldbu	r3,-4(fp)
    84d4:	10c00005 	stb	r3,0(r2)

        if (++TxHead_0 > (TX_BUFFER_SIZE_0-1)) {
    84d8:	d0a0ec0b 	ldhu	r2,-31824(gp)
    84dc:	10800044 	addi	r2,r2,1
    84e0:	d0a0ec0d 	sth	r2,-31824(gp)
    84e4:	d0a0ec0b 	ldhu	r2,-31824(gp)
    84e8:	10bfffcc 	andi	r2,r2,65535
    84ec:	10810030 	cmpltui	r2,r2,1024
    84f0:	1000011e 	bne	r2,zero,84f8 <PutUart0+0xe4>
            TxHead_0 = 0;
    84f4:	d020ec0d 	sth	zero,-31824(gp)
        }

        z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    84f8:	00800074 	movhi	r2,1
    84fc:	10850304 	addi	r2,r2,5132
    8500:	10800037 	ldwio	r2,0(r2)
    8504:	10801014 	ori	r2,r2,64
    8508:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
    850c:	e0fffe17 	ldw	r3,-8(fp)
    8510:	00800074 	movhi	r2,1
    8514:	10850304 	addi	r2,r2,5132
    8518:	10c00035 	stwio	r3,0(r2)
    }

    return(1);
    851c:	00800044 	movi	r2,1
}
    8520:	e037883a 	mov	sp,fp
    8524:	df000017 	ldw	fp,0(sp)
    8528:	dec00104 	addi	sp,sp,4
    852c:	f800283a 	ret

00008530 <InitUart>:

uint16_t maxStepCount0 = 1115;
uint16_t maxStepCount1 = 221;

void InitUart()
{
    8530:	defff904 	addi	sp,sp,-28
    8534:	dfc00615 	stw	ra,24(sp)
    8538:	df000515 	stw	fp,20(sp)
    853c:	df000504 	addi	fp,sp,20
    int context_uart0;

    InitUart0(BAUD_RATE_0);
    8540:	010000b4 	movhi	r4,2
    8544:	21308004 	addi	r4,r4,-15872
    8548:	00081f80 	call	81f8 <InitUart0>

    //alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ,&context_uart1,IsrUart1,NULL); // install UART1 ISR
    alt_irq_register(UART_0_IRQ,&context_uart0,IsrUart0); // install UART0 ISR
    854c:	e0bfff04 	addi	r2,fp,-4
    8550:	0009883a 	mov	r4,zero
    8554:	100b883a 	mov	r5,r2
    8558:	01800074 	movhi	r6,1
    855c:	31a09604 	addi	r6,r6,-32168
    8560:	000c1940 	call	c194 <alt_irq_register>
    8564:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8568:	0005303a 	rdctl	r2,status
    856c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8570:	e0fffc17 	ldw	r3,-16(fp)
    8574:	00bfff84 	movi	r2,-2
    8578:	1884703a 	and	r2,r3,r2
    857c:	1001703a 	wrctl	status,r2
  
  return context;
    8580:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8584:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8588:	e0bffb17 	ldw	r2,-20(fp)
    858c:	00c00044 	movi	r3,1
    8590:	1884983a 	sll	r2,r3,r2
    8594:	1007883a 	mov	r3,r2
    8598:	00800074 	movhi	r2,1
    859c:	10b8fe04 	addi	r2,r2,-7176
    85a0:	10800017 	ldw	r2,0(r2)
    85a4:	1886b03a 	or	r3,r3,r2
    85a8:	00800074 	movhi	r2,1
    85ac:	10b8fe04 	addi	r2,r2,-7176
    85b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    85b4:	00800074 	movhi	r2,1
    85b8:	10b8fe04 	addi	r2,r2,-7176
    85bc:	10800017 	ldw	r2,0(r2)
    85c0:	100170fa 	wrctl	ienable,r2
    85c4:	e0bffd17 	ldw	r2,-12(fp)
    85c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    85cc:	e0bffe17 	ldw	r2,-8(fp)
    85d0:	1001703a 	wrctl	status,r2

    //alt_ic_irq_enable (UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ);
    alt_irq_enable (UART_0_IRQ);
}
    85d4:	e037883a 	mov	sp,fp
    85d8:	dfc00117 	ldw	ra,4(sp)
    85dc:	df000017 	ldw	fp,0(sp)
    85e0:	dec00204 	addi	sp,sp,8
    85e4:	f800283a 	ret

000085e8 <Stepcount1ToSI>:

double Stepcount1ToSI(int16_t steps)
{
    85e8:	defffb04 	addi	sp,sp,-20
    85ec:	dfc00415 	stw	ra,16(sp)
    85f0:	df000315 	stw	fp,12(sp)
    85f4:	df000304 	addi	fp,sp,12
    85f8:	2005883a 	mov	r2,r4
    85fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount1/170*360;
    8600:	d0a0008b 	ldhu	r2,-32766(gp)
    8604:	10bfffcc 	andi	r2,r2,65535
    8608:	1009883a 	mov	r4,r2
    860c:	01402a84 	movi	r5,170
    8610:	000b1180 	call	b118 <__udivsi3>
    8614:	10bfffcc 	andi	r2,r2,65535
    8618:	1009883a 	mov	r4,r2
    861c:	01405a04 	movi	r5,360
    8620:	000b1280 	call	b128 <__mulsi3>
    8624:	1009883a 	mov	r4,r2
    8628:	000ae500 	call	ae50 <__floatsidf>
    862c:	1009883a 	mov	r4,r2
    8630:	180b883a 	mov	r5,r3
    8634:	e13ffd15 	stw	r4,-12(fp)
    8638:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    863c:	e0bfff0f 	ldh	r2,-4(fp)
    8640:	1009883a 	mov	r4,r2
    8644:	000ae500 	call	ae50 <__floatsidf>
    8648:	100b883a 	mov	r5,r2
    864c:	180d883a 	mov	r6,r3
    8650:	2809883a 	mov	r4,r5
    8654:	300b883a 	mov	r5,r6
    8658:	e1bffd17 	ldw	r6,-12(fp)
    865c:	e1fffe17 	ldw	r7,-8(fp)
    8660:	000ab780 	call	ab78 <__divdf3>
    8664:	1009883a 	mov	r4,r2
    8668:	180b883a 	mov	r5,r3
    866c:	2005883a 	mov	r2,r4
    8670:	2807883a 	mov	r3,r5
    8674:	1009883a 	mov	r4,r2
    8678:	180b883a 	mov	r5,r3
    867c:	100d883a 	mov	r6,r2
    8680:	180f883a 	mov	r7,r3
    8684:	000a7e00 	call	a7e0 <__adddf3>
    8688:	1009883a 	mov	r4,r2
    868c:	180b883a 	mov	r5,r3
    8690:	2005883a 	mov	r2,r4
    8694:	2807883a 	mov	r3,r5
    8698:	1009883a 	mov	r4,r2
    869c:	180b883a 	mov	r5,r3
    86a0:	01b020f4 	movhi	r6,49283
    86a4:	31849bc4 	addi	r6,r6,4719
    86a8:	01d00274 	movhi	r7,16393
    86ac:	39c87284 	addi	r7,r7,8650
    86b0:	000a8940 	call	a894 <__muldf3>
    86b4:	100f883a 	mov	r7,r2
    86b8:	1811883a 	mov	r8,r3
    86bc:	380b883a 	mov	r5,r7
    86c0:	400d883a 	mov	r6,r8
    86c4:	2807883a 	mov	r3,r5
    86c8:	3009883a 	mov	r4,r6

}
    86cc:	1805883a 	mov	r2,r3
    86d0:	2007883a 	mov	r3,r4
    86d4:	e037883a 	mov	sp,fp
    86d8:	dfc00117 	ldw	ra,4(sp)
    86dc:	df000017 	ldw	fp,0(sp)
    86e0:	dec00204 	addi	sp,sp,8
    86e4:	f800283a 	ret

000086e8 <Stepcount0ToSI>:

double Stepcount0ToSI(int16_t steps)
{
    86e8:	defffb04 	addi	sp,sp,-20
    86ec:	dfc00415 	stw	ra,16(sp)
    86f0:	df000315 	stw	fp,12(sp)
    86f4:	df000304 	addi	fp,sp,12
    86f8:	2005883a 	mov	r2,r4
    86fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount0/325*360;
    8700:	d0a0000b 	ldhu	r2,-32768(gp)
    8704:	10bfffcc 	andi	r2,r2,65535
    8708:	1009883a 	mov	r4,r2
    870c:	01405144 	movi	r5,325
    8710:	000b1180 	call	b118 <__udivsi3>
    8714:	10bfffcc 	andi	r2,r2,65535
    8718:	1009883a 	mov	r4,r2
    871c:	01405a04 	movi	r5,360
    8720:	000b1280 	call	b128 <__mulsi3>
    8724:	1009883a 	mov	r4,r2
    8728:	000ae500 	call	ae50 <__floatsidf>
    872c:	1009883a 	mov	r4,r2
    8730:	180b883a 	mov	r5,r3
    8734:	e13ffd15 	stw	r4,-12(fp)
    8738:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    873c:	e0bfff0f 	ldh	r2,-4(fp)
    8740:	1009883a 	mov	r4,r2
    8744:	000ae500 	call	ae50 <__floatsidf>
    8748:	100b883a 	mov	r5,r2
    874c:	180d883a 	mov	r6,r3
    8750:	2809883a 	mov	r4,r5
    8754:	300b883a 	mov	r5,r6
    8758:	e1bffd17 	ldw	r6,-12(fp)
    875c:	e1fffe17 	ldw	r7,-8(fp)
    8760:	000ab780 	call	ab78 <__divdf3>
    8764:	1009883a 	mov	r4,r2
    8768:	180b883a 	mov	r5,r3
    876c:	2005883a 	mov	r2,r4
    8770:	2807883a 	mov	r3,r5
    8774:	1009883a 	mov	r4,r2
    8778:	180b883a 	mov	r5,r3
    877c:	100d883a 	mov	r6,r2
    8780:	180f883a 	mov	r7,r3
    8784:	000a7e00 	call	a7e0 <__adddf3>
    8788:	1009883a 	mov	r4,r2
    878c:	180b883a 	mov	r5,r3
    8790:	2005883a 	mov	r2,r4
    8794:	2807883a 	mov	r3,r5
    8798:	1009883a 	mov	r4,r2
    879c:	180b883a 	mov	r5,r3
    87a0:	01b020f4 	movhi	r6,49283
    87a4:	31849bc4 	addi	r6,r6,4719
    87a8:	01d00274 	movhi	r7,16393
    87ac:	39c87284 	addi	r7,r7,8650
    87b0:	000a8940 	call	a894 <__muldf3>
    87b4:	100f883a 	mov	r7,r2
    87b8:	1811883a 	mov	r8,r3
    87bc:	380b883a 	mov	r5,r7
    87c0:	400d883a 	mov	r6,r8
    87c4:	2807883a 	mov	r3,r5
    87c8:	3009883a 	mov	r4,r6
}
    87cc:	1805883a 	mov	r2,r3
    87d0:	2007883a 	mov	r3,r4
    87d4:	e037883a 	mov	sp,fp
    87d8:	dfc00117 	ldw	ra,4(sp)
    87dc:	df000017 	ldw	fp,0(sp)
    87e0:	dec00204 	addi	sp,sp,8
    87e4:	f800283a 	ret

000087e8 <main>:

int main()
{
    87e8:	deffde04 	addi	sp,sp,-136
    87ec:	dfc02115 	stw	ra,132(sp)
    87f0:	df002015 	stw	fp,128(sp)
    87f4:	df002004 	addi	fp,sp,128
	unsigned char ch;
	printf("\n\nHello NiosII!!!!!\n");
    87f8:	01000074 	movhi	r4,1
    87fc:	2136c304 	addi	r4,r4,-9460
    8800:	000b8b40 	call	b8b4 <puts>

	InitUart();
    8804:	00085300 	call	8530 <InitUart>
	double pan_y [1 + 1];
	double tilt_u[3 + 1];
	double tilt_y[1 + 1];

	/* Initialize the inputs and outputs with correct initial values */
	pan_u[0] = 0.0;		/* corr */
    8808:	e03fe815 	stw	zero,-96(fp)
    880c:	e03fe915 	stw	zero,-92(fp)
	pan_u[1] = 0.0;		/* in */
    8810:	e03fea15 	stw	zero,-88(fp)
    8814:	e03feb15 	stw	zero,-84(fp)
	pan_u[2] = 0.0;		/* position */
    8818:	e03fec15 	stw	zero,-80(fp)
    881c:	e03fed15 	stw	zero,-76(fp)

	pan_y[0] = 0.0;		/* out */
    8820:	e03ff015 	stw	zero,-64(fp)
    8824:	e03ff115 	stw	zero,-60(fp)
	
	tilt_u[0] = 0.0;		/* corr */
    8828:	e03ff415 	stw	zero,-48(fp)
    882c:	e03ff515 	stw	zero,-44(fp)
	tilt_u[1] = 0.0;		/* in */
    8830:	e03ff615 	stw	zero,-40(fp)
    8834:	e03ff715 	stw	zero,-36(fp)
	tilt_u[2] = 0.0;		/* position */
    8838:	e03ff815 	stw	zero,-32(fp)
    883c:	e03ff915 	stw	zero,-28(fp)

	tilt_y[0] = 0.0;		/* out */
    8840:	e03ffc15 	stw	zero,-16(fp)
    8844:	e03ffd15 	stw	zero,-12(fp)




	/* Initialize the submodel itself */
	pan_InitializeSubmodel (&pan_u, &pan_y, pan_time);
    8848:	01000074 	movhi	r4,1
    884c:	2138f304 	addi	r4,r4,-7220
    8850:	20800017 	ldw	r2,0(r4)
    8854:	20c00117 	ldw	r3,4(r4)
    8858:	e13fe804 	addi	r4,fp,-96
    885c:	e17ff004 	addi	r5,fp,-64
    8860:	100d883a 	mov	r6,r2
    8864:	180f883a 	mov	r7,r3
    8868:	00097740 	call	9774 <pan_InitializeSubmodel>
	tilt_InitializeSubmodel(&tilt_u, &tilt_y, pan_time);
    886c:	01000074 	movhi	r4,1
    8870:	2138f304 	addi	r4,r4,-7220
    8874:	20800017 	ldw	r2,0(r4)
    8878:	20c00117 	ldw	r3,4(r4)
    887c:	e13ff404 	addi	r4,fp,-48
    8880:	e17ffc04 	addi	r5,fp,-16
    8884:	100d883a 	mov	r6,r2
    8888:	180f883a 	mov	r7,r3
    888c:	000a3380 	call	a338 <tilt_InitializeSubmodel>
	
	//reset calibration
	IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000001000000000000000);
    8890:	00e00014 	movui	r3,32768
    8894:	00800074 	movhi	r2,1
    8898:	10840004 	addi	r2,r2,4096
    889c:	10c00035 	stwio	r3,0(r2)
	IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000000000000000000000);
    88a0:	0007883a 	mov	r3,zero
    88a4:	00800074 	movhi	r2,1
    88a8:	10840004 	addi	r2,r2,4096
    88ac:	10c00035 	stwio	r3,0(r2)
	
	
	//variables
	uint32_t nReadOut = 0;
    88b0:	e03fe215 	stw	zero,-120(fp)
	uint16_t stepCount0 = 0;
    88b4:	e03fe00d 	sth	zero,-128(fp)
	uint16_t stepCount1 = 0;
    88b8:	e03fe08d 	sth	zero,-126(fp)
	uint16_t stepCount0Old = 0;
    88bc:	e03fe10d 	sth	zero,-124(fp)
	uint16_t stepCount1Old = 0;
    88c0:	e03fe18d 	sth	zero,-122(fp)
	int8_t PWM0 = 0;
    88c4:	e03fe305 	stb	zero,-116(fp)
	int8_t PWM1 = 0;
    88c8:	e03fe345 	stb	zero,-115(fp)
	uint32_t avalondSend = 0;
    88cc:	e03fe415 	stw	zero,-112(fp)
	while( (pan_stop_simulation == 0) ) {
    88d0:	0000e306 	br	8c60 <main+0x478>

		//avalon bus communication
		nReadOut = IORD(ESL_NIOS_II_IP_0_BASE, 0x00);
    88d4:	00800074 	movhi	r2,1
    88d8:	10840004 	addi	r2,r2,4096
    88dc:	10800037 	ldwio	r2,0(r2)
    88e0:	e0bfe215 	stw	r2,-120(fp)
		unsigned int readID = nReadOut >> 29;
    88e4:	e0bfe217 	ldw	r2,-120(fp)
    88e8:	1004d77a 	srli	r2,r2,29
    88ec:	e0bfe515 	stw	r2,-108(fp)
		nReadOut = nReadOut << 3;
    88f0:	e0bfe217 	ldw	r2,-120(fp)
    88f4:	100490fa 	slli	r2,r2,3
    88f8:	e0bfe215 	stw	r2,-120(fp)
		uint32_t temp32;

		switch(readID) {
    88fc:	e0bfe517 	ldw	r2,-108(fp)
    8900:	10c00060 	cmpeqi	r3,r2,1
    8904:	1800031e 	bne	r3,zero,8914 <main+0x12c>
    8908:	108000a0 	cmpeqi	r2,r2,2
    890c:	10000b1e 	bne	r2,zero,893c <main+0x154>
    8910:	00002006 	br	8994 <main+0x1ac>
			case 1:
				stepCount0 = nReadOut >> (32-11);
    8914:	e0bfe217 	ldw	r2,-120(fp)
    8918:	1004d57a 	srli	r2,r2,21
    891c:	e0bfe00d 	sth	r2,-128(fp)

				temp32 = nReadOut << 11;
    8920:	e0bfe217 	ldw	r2,-120(fp)
    8924:	100492fa 	slli	r2,r2,11
    8928:	e0bfe615 	stw	r2,-104(fp)
				stepCount1 = temp32 >> (32-11);
    892c:	e0bfe617 	ldw	r2,-104(fp)
    8930:	1004d57a 	srli	r2,r2,21
    8934:	e0bfe08d 	sth	r2,-126(fp)
				break;
    8938:	00001a06 	br	89a4 <main+0x1bc>
			case 2:
				maxStepCount0 = nReadOut >> (32-11);
    893c:	e0bfe217 	ldw	r2,-120(fp)
    8940:	1004d57a 	srli	r2,r2,21
    8944:	d0a0000d 	sth	r2,-32768(gp)
				temp32 = nReadOut << 11;
    8948:	e0bfe217 	ldw	r2,-120(fp)
    894c:	100492fa 	slli	r2,r2,11
    8950:	e0bfe615 	stw	r2,-104(fp)
				maxStepCount1 = temp32 >> (32-11);
    8954:	e0bfe617 	ldw	r2,-104(fp)
    8958:	1004d57a 	srli	r2,r2,21
    895c:	d0a0008d 	sth	r2,-32766(gp)
				printf(".....................Received new calibration values!:\t");
    8960:	01000074 	movhi	r4,1
    8964:	2136c804 	addi	r4,r4,-9440
    8968:	000b7e80 	call	b7e8 <printf>
				printf("stepCount0_max: %d\t stepCount1_max: %d \n\r", maxStepCount0, maxStepCount1);
    896c:	d0a0000b 	ldhu	r2,-32768(gp)
    8970:	10ffffcc 	andi	r3,r2,65535
    8974:	d0a0008b 	ldhu	r2,-32766(gp)
    8978:	10bfffcc 	andi	r2,r2,65535
    897c:	01000074 	movhi	r4,1
    8980:	2136d604 	addi	r4,r4,-9384
    8984:	180b883a 	mov	r5,r3
    8988:	100d883a 	mov	r6,r2
    898c:	000b7e80 	call	b7e8 <printf>
				break;
    8990:	00000406 	br	89a4 <main+0x1bc>
			default:
				// default statements
				printf("Received incorrect message");
    8994:	01000074 	movhi	r4,1
    8998:	2136e104 	addi	r4,r4,-9340
    899c:	000b7e80 	call	b7e8 <printf>
				break;
    89a0:	0001883a 	nop
		}
		
		
		

		if(stepCount0 != stepCount0Old || stepCount1 != stepCount1Old)
    89a4:	e0ffe00b 	ldhu	r3,-128(fp)
    89a8:	e0bfe10b 	ldhu	r2,-124(fp)
    89ac:	1880031e 	bne	r3,r2,89bc <main+0x1d4>
    89b0:	e0ffe08b 	ldhu	r3,-126(fp)
    89b4:	e0bfe18b 	ldhu	r2,-122(fp)
    89b8:	18800726 	beq	r3,r2,89d8 <main+0x1f0>
			printf("stepCount0: %d\t stepCount1: %d \n\r", stepCount0, stepCount1);
    89bc:	e0ffe00b 	ldhu	r3,-128(fp)
    89c0:	e0bfe08b 	ldhu	r2,-126(fp)
    89c4:	01000074 	movhi	r4,1
    89c8:	2136e804 	addi	r4,r4,-9312
    89cc:	180b883a 	mov	r5,r3
    89d0:	100d883a 	mov	r6,r2
    89d4:	000b7e80 	call	b7e8 <printf>
		
		//generate inputs
		pan_u[1] = 0;
    89d8:	e03fea15 	stw	zero,-88(fp)
    89dc:	e03feb15 	stw	zero,-84(fp)
		if(pan_time >= 1){
    89e0:	01000074 	movhi	r4,1
    89e4:	2138f304 	addi	r4,r4,-7220
    89e8:	20800017 	ldw	r2,0(r4)
    89ec:	20c00117 	ldw	r3,4(r4)
    89f0:	1009883a 	mov	r4,r2
    89f4:	180b883a 	mov	r5,r3
    89f8:	000d883a 	mov	r6,zero
    89fc:	01cffc34 	movhi	r7,16368
    8a00:	000ad900 	call	ad90 <__gedf2>
    8a04:	10000616 	blt	r2,zero,8a20 <main+0x238>
			pan_u[1] = 0.5*pi;
    8a08:	00b020f4 	movhi	r2,49283
    8a0c:	10849bc4 	addi	r2,r2,4719
    8a10:	e0bfea15 	stw	r2,-88(fp)
    8a14:	008ffe74 	movhi	r2,16377
    8a18:	10887284 	addi	r2,r2,8650
    8a1c:	e0bfeb15 	stw	r2,-84(fp)

		}
		if(pan_time >= 5){
    8a20:	01000074 	movhi	r4,1
    8a24:	2138f304 	addi	r4,r4,-7220
    8a28:	20800017 	ldw	r2,0(r4)
    8a2c:	20c00117 	ldw	r3,4(r4)
    8a30:	1009883a 	mov	r4,r2
    8a34:	180b883a 	mov	r5,r3
    8a38:	000d883a 	mov	r6,zero
    8a3c:	01d00534 	movhi	r7,16404
    8a40:	000ad900 	call	ad90 <__gedf2>
    8a44:	10000616 	blt	r2,zero,8a60 <main+0x278>
			pan_u[1] = 1.5*pi;
    8a48:	008418b4 	movhi	r2,4194
    8a4c:	109374c4 	addi	r2,r2,19923
    8a50:	e0bfea15 	stw	r2,-88(fp)
    8a54:	009004f4 	movhi	r2,16403
    8a58:	10b65604 	addi	r2,r2,-9896
    8a5c:	e0bfeb15 	stw	r2,-84(fp)

		}
		if(pan_time >= 10){
    8a60:	01000074 	movhi	r4,1
    8a64:	2138f304 	addi	r4,r4,-7220
    8a68:	20800017 	ldw	r2,0(r4)
    8a6c:	20c00117 	ldw	r3,4(r4)
    8a70:	1009883a 	mov	r4,r2
    8a74:	180b883a 	mov	r5,r3
    8a78:	000d883a 	mov	r6,zero
    8a7c:	01d00934 	movhi	r7,16420
    8a80:	000ad900 	call	ad90 <__gedf2>
    8a84:	10000616 	blt	r2,zero,8aa0 <main+0x2b8>

			pan_u[1] = 0.5*pi;
    8a88:	00b020f4 	movhi	r2,49283
    8a8c:	10849bc4 	addi	r2,r2,4719
    8a90:	e0bfea15 	stw	r2,-88(fp)
    8a94:	008ffe74 	movhi	r2,16377
    8a98:	10887284 	addi	r2,r2,8650
    8a9c:	e0bfeb15 	stw	r2,-84(fp)

		}
		
		
		/* Call the 20-sim submodel to calculate the output */
		pan_u[2] = Stepcount0ToSI(stepCount0);
    8aa0:	e0bfe00b 	ldhu	r2,-128(fp)
    8aa4:	10bfffcc 	andi	r2,r2,65535
    8aa8:	10a0001c 	xori	r2,r2,32768
    8aac:	10a00004 	addi	r2,r2,-32768
    8ab0:	1009883a 	mov	r4,r2
    8ab4:	00086e80 	call	86e8 <Stepcount0ToSI>
    8ab8:	1009883a 	mov	r4,r2
    8abc:	180b883a 	mov	r5,r3
    8ac0:	e13fec15 	stw	r4,-80(fp)
    8ac4:	e17fed15 	stw	r5,-76(fp)
		

		pan_CalculateSubmodel (&pan_u, &pan_y, pan_time);
    8ac8:	01000074 	movhi	r4,1
    8acc:	2138f304 	addi	r4,r4,-7220
    8ad0:	20800017 	ldw	r2,0(r4)
    8ad4:	20c00117 	ldw	r3,4(r4)
    8ad8:	e13fe804 	addi	r4,fp,-96
    8adc:	e17ff004 	addi	r5,fp,-64
    8ae0:	100d883a 	mov	r6,r2
    8ae4:	180f883a 	mov	r7,r3
    8ae8:	00098080 	call	9808 <pan_CalculateSubmodel>
		tilt_CalculateSubmodel(&tilt_u, &tilt_y,pan_time);
    8aec:	01000074 	movhi	r4,1
    8af0:	2138f304 	addi	r4,r4,-7220
    8af4:	20800017 	ldw	r2,0(r4)
    8af8:	20c00117 	ldw	r3,4(r4)
    8afc:	e13ff404 	addi	r4,fp,-48
    8b00:	e17ffc04 	addi	r5,fp,-16
    8b04:	100d883a 	mov	r6,r2
    8b08:	180f883a 	mov	r7,r3
    8b0c:	000a3cc0 	call	a3cc <tilt_CalculateSubmodel>
		PWM0 = pan_y[0]*maxPWMPan;
    8b10:	e0bff017 	ldw	r2,-64(fp)
    8b14:	e0fff117 	ldw	r3,-60(fp)
    8b18:	1009883a 	mov	r4,r2
    8b1c:	180b883a 	mov	r5,r3
    8b20:	000d883a 	mov	r6,zero
    8b24:	01d014b4 	movhi	r7,16466
    8b28:	39e00004 	addi	r7,r7,-32768
    8b2c:	000a8940 	call	a894 <__muldf3>
    8b30:	1009883a 	mov	r4,r2
    8b34:	180b883a 	mov	r5,r3
    8b38:	2005883a 	mov	r2,r4
    8b3c:	2807883a 	mov	r3,r5
    8b40:	1009883a 	mov	r4,r2
    8b44:	180b883a 	mov	r5,r3
    8b48:	000af240 	call	af24 <__fixdfsi>
    8b4c:	e0bfe305 	stb	r2,-116(fp)
		PWM1 = tilt_y[0]*maxPWMTilt;
    8b50:	e0bffc17 	ldw	r2,-16(fp)
    8b54:	e0fffd17 	ldw	r3,-12(fp)
    8b58:	1009883a 	mov	r4,r2
    8b5c:	180b883a 	mov	r5,r3
    8b60:	000d883a 	mov	r6,zero
    8b64:	01d00fb4 	movhi	r7,16446
    8b68:	000a8940 	call	a894 <__muldf3>
    8b6c:	1009883a 	mov	r4,r2
    8b70:	180b883a 	mov	r5,r3
    8b74:	2005883a 	mov	r2,r4
    8b78:	2807883a 	mov	r3,r5
    8b7c:	1009883a 	mov	r4,r2
    8b80:	180b883a 	mov	r5,r3
    8b84:	000af240 	call	af24 <__fixdfsi>
    8b88:	e0bfe345 	stb	r2,-115(fp)
		int16_t temp16 = 0;
    8b8c:	e03fe70d 	sth	zero,-100(fp)
		avalondSend = PWM0 << 24 | PWM1 <<16 | temp16;
    8b90:	e0bfe307 	ldb	r2,-116(fp)
    8b94:	1006963a 	slli	r3,r2,24
    8b98:	e0bfe347 	ldb	r2,-115(fp)
    8b9c:	1004943a 	slli	r2,r2,16
    8ba0:	1886b03a 	or	r3,r3,r2
    8ba4:	e0bfe70f 	ldh	r2,-100(fp)
    8ba8:	1884b03a 	or	r2,r3,r2
    8bac:	e0bfe415 	stw	r2,-112(fp)
		//printf("%x\n",avalondSend);
		IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,avalondSend);
    8bb0:	e0ffe417 	ldw	r3,-112(fp)
    8bb4:	00800074 	movhi	r2,1
    8bb8:	10840004 	addi	r2,r2,4096
    8bbc:	10c00035 	stwio	r3,0(r2)
		
		if(!EmptyUart0()){
    8bc0:	000837c0 	call	837c <EmptyUart0>
    8bc4:	10803fcc 	andi	r2,r2,255
    8bc8:	10000e1e 	bne	r2,zero,8c04 <main+0x41c>
			ch = GetUart0();
    8bcc:	00083b80 	call	83b8 <GetUart0>
    8bd0:	e0bfe785 	stb	r2,-98(fp)
			printf("received message: %c\n",ch);
    8bd4:	e0bfe783 	ldbu	r2,-98(fp)
    8bd8:	01000074 	movhi	r4,1
    8bdc:	2136f104 	addi	r4,r4,-9276
    8be0:	100b883a 	mov	r5,r2
    8be4:	000b7e80 	call	b7e8 <printf>
			PutUart0(ch);
    8be8:	e0bfe783 	ldbu	r2,-98(fp)
    8bec:	1009883a 	mov	r4,r2
    8bf0:	00084140 	call	8414 <PutUart0>
			PutUart0('\r');
    8bf4:	01000344 	movi	r4,13
    8bf8:	00084140 	call	8414 <PutUart0>
			PutUart0('\n');
    8bfc:	01000284 	movi	r4,10
    8c00:	00084140 	call	8414 <PutUart0>
			
			
		}
		
		stepCount0Old = stepCount0;
    8c04:	e0bfe00b 	ldhu	r2,-128(fp)
    8c08:	e0bfe10d 	sth	r2,-124(fp)
		stepCount1Old = stepCount1;
    8c0c:	e0bfe08b 	ldhu	r2,-126(fp)
    8c10:	e0bfe18d 	sth	r2,-122(fp)
		pan_time+=0.0013;
    8c14:	01000074 	movhi	r4,1
    8c18:	2138f304 	addi	r4,r4,-7220
    8c1c:	20800017 	ldw	r2,0(r4)
    8c20:	20c00117 	ldw	r3,4(r4)
    8c24:	1009883a 	mov	r4,r2
    8c28:	180b883a 	mov	r5,r3
    8c2c:	0197c1f4 	movhi	r6,24327
    8c30:	31bda504 	addi	r6,r6,-2412
    8c34:	01cfd574 	movhi	r7,16213
    8c38:	39d32604 	addi	r7,r7,19608
    8c3c:	000a7e00 	call	a7e0 <__adddf3>
    8c40:	1009883a 	mov	r4,r2
    8c44:	180b883a 	mov	r5,r3
    8c48:	2005883a 	mov	r2,r4
    8c4c:	2807883a 	mov	r3,r5
    8c50:	01000074 	movhi	r4,1
    8c54:	2138f304 	addi	r4,r4,-7220
    8c58:	20800015 	stw	r2,0(r4)
    8c5c:	20c00115 	stw	r3,4(r4)
	uint16_t stepCount0Old = 0;
	uint16_t stepCount1Old = 0;
	int8_t PWM0 = 0;
	int8_t PWM1 = 0;
	uint32_t avalondSend = 0;
	while( (pan_stop_simulation == 0) ) {
    8c60:	00800074 	movhi	r2,1
    8c64:	10b8f604 	addi	r2,r2,-7208
    8c68:	10800003 	ldbu	r2,0(r2)
    8c6c:	10803fcc 	andi	r2,r2,255
    8c70:	1080201c 	xori	r2,r2,128
    8c74:	10bfe004 	addi	r2,r2,-128
    8c78:	103f1626 	beq	r2,zero,88d4 <main+0xec>
		stepCount1Old = stepCount1;
		pan_time+=0.0013;
	} 

	/* Perform the final 20-sim calculations */
	pan_TerminateSubmodel (&pan_u, &pan_y, pan_time);
    8c7c:	01000074 	movhi	r4,1
    8c80:	2138f304 	addi	r4,r4,-7220
    8c84:	20800017 	ldw	r2,0(r4)
    8c88:	20c00117 	ldw	r3,4(r4)
    8c8c:	e13fe804 	addi	r4,fp,-96
    8c90:	e17ff004 	addi	r5,fp,-64
    8c94:	100d883a 	mov	r6,r2
    8c98:	180f883a 	mov	r7,r3
    8c9c:	000986c0 	call	986c <pan_TerminateSubmodel>
	tilt_TerminateSubmodel(&tilt_u,&tilt_y,pan_time);
    8ca0:	01000074 	movhi	r4,1
    8ca4:	2138f304 	addi	r4,r4,-7220
    8ca8:	20800017 	ldw	r2,0(r4)
    8cac:	20c00117 	ldw	r3,4(r4)
    8cb0:	e13ff404 	addi	r4,fp,-48
    8cb4:	e17ffc04 	addi	r5,fp,-16
    8cb8:	100d883a 	mov	r6,r2
    8cbc:	180f883a 	mov	r7,r3
    8cc0:	000a4300 	call	a430 <tilt_TerminateSubmodel>

return 0;
    8cc4:	0005883a 	mov	r2,zero

}
    8cc8:	e037883a 	mov	sp,fp
    8ccc:	dfc00117 	ldw	ra,4(sp)
    8cd0:	df000017 	ldw	fp,0(sp)
    8cd4:	dec00204 	addi	sp,sp,8
    8cd8:	f800283a 	ret

00008cdc <pan_String2Double>:
	double m_double;
	const char* m_char;
}str2dbl;

double pan_String2Double(const char* argument)
{
    8cdc:	defffc04 	addi	sp,sp,-16
    8ce0:	df000315 	stw	fp,12(sp)
    8ce4:	df000304 	addi	fp,sp,12
    8ce8:	e13fff15 	stw	r4,-4(fp)
	str2dbl myConversion;
	myConversion.m_char = argument;
    8cec:	e0bfff17 	ldw	r2,-4(fp)
    8cf0:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_double;
    8cf4:	e17ffd17 	ldw	r5,-12(fp)
    8cf8:	e1bffe17 	ldw	r6,-8(fp)
    8cfc:	2807883a 	mov	r3,r5
    8d00:	3009883a 	mov	r4,r6

}
    8d04:	1805883a 	mov	r2,r3
    8d08:	2007883a 	mov	r3,r4
    8d0c:	e037883a 	mov	sp,fp
    8d10:	df000017 	ldw	fp,0(sp)
    8d14:	dec00104 	addi	sp,sp,4
    8d18:	f800283a 	ret

00008d1c <pan_Double2String>:

const char* pan_Double2String(double argument)
{
    8d1c:	defffb04 	addi	sp,sp,-20
    8d20:	df000415 	stw	fp,16(sp)
    8d24:	df000404 	addi	fp,sp,16
    8d28:	e13ffe15 	stw	r4,-8(fp)
    8d2c:	e17fff15 	stw	r5,-4(fp)
	str2dbl myConversion;
	myConversion.m_double = argument;
    8d30:	e0bffe17 	ldw	r2,-8(fp)
    8d34:	e0bffc15 	stw	r2,-16(fp)
    8d38:	e0bfff17 	ldw	r2,-4(fp)
    8d3c:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_char;
    8d40:	e0bffc17 	ldw	r2,-16(fp)
}
    8d44:	e037883a 	mov	sp,fp
    8d48:	df000017 	ldw	fp,0(sp)
    8d4c:	dec00104 	addi	sp,sp,4
    8d50:	f800283a 	ret

00008d54 <pan_DiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void pan_DiscreteInitialize (void)
{
    8d54:	deffff04 	addi	sp,sp,-4
    8d58:	df000015 	stw	fp,0(sp)
    8d5c:	d839883a 	mov	fp,sp
	/* nothing to be done */
	pan_major = 1;
    8d60:	00800074 	movhi	r2,1
    8d64:	10b80844 	addi	r2,r2,-8159
    8d68:	00c00044 	movi	r3,1
    8d6c:	10c00005 	stb	r3,0(r2)
}
    8d70:	e037883a 	mov	sp,fp
    8d74:	df000017 	ldw	fp,0(sp)
    8d78:	dec00104 	addi	sp,sp,4
    8d7c:	f800283a 	ret

00008d80 <pan_DiscreteStep>:

/* the Discrete integration method itself */
void pan_DiscreteStep (void)
{
    8d80:	defffd04 	addi	sp,sp,-12
    8d84:	dfc00215 	stw	ra,8(sp)
    8d88:	df000115 	stw	fp,4(sp)
    8d8c:	df000104 	addi	fp,sp,4
	int index;
	/* for each of the supplied states */
	for (index = 0; index < pan_STATE_SIZE; index++)
    8d90:	e03fff15 	stw	zero,-4(fp)
    8d94:	00001106 	br	8ddc <pan_DiscreteStep+0x5c>
	{
		/* just a move of the new state */
		pan_s [index] = pan_R [index];
    8d98:	00c00074 	movhi	r3,1
    8d9c:	18fb3204 	addi	r3,r3,-4920
    8da0:	e0bfff17 	ldw	r2,-4(fp)
    8da4:	100490fa 	slli	r2,r2,3
    8da8:	1889883a 	add	r4,r3,r2
    8dac:	20800017 	ldw	r2,0(r4)
    8db0:	20c00117 	ldw	r3,4(r4)
    8db4:	01400074 	movhi	r5,1
    8db8:	297b1804 	addi	r5,r5,-5024
    8dbc:	e13fff17 	ldw	r4,-4(fp)
    8dc0:	200890fa 	slli	r4,r4,3
    8dc4:	2909883a 	add	r4,r5,r4
    8dc8:	20800015 	stw	r2,0(r4)
    8dcc:	20c00115 	stw	r3,4(r4)
/* the Discrete integration method itself */
void pan_DiscreteStep (void)
{
	int index;
	/* for each of the supplied states */
	for (index = 0; index < pan_STATE_SIZE; index++)
    8dd0:	e0bfff17 	ldw	r2,-4(fp)
    8dd4:	10800044 	addi	r2,r2,1
    8dd8:	e0bfff15 	stw	r2,-4(fp)
    8ddc:	e0bfff17 	ldw	r2,-4(fp)
    8de0:	108000d0 	cmplti	r2,r2,3
    8de4:	103fec1e 	bne	r2,zero,8d98 <pan_DiscreteStep+0x18>
	{
		/* just a move of the new state */
		pan_s [index] = pan_R [index];
	}
	/* increment the simulation time */
	pan_time += pan_step_size;
    8de8:	00800074 	movhi	r2,1
    8dec:	10b8f304 	addi	r2,r2,-7220
    8df0:	11400017 	ldw	r5,0(r2)
    8df4:	11800117 	ldw	r6,4(r2)
    8df8:	01000074 	movhi	r4,1
    8dfc:	21380604 	addi	r4,r4,-8168
    8e00:	20800017 	ldw	r2,0(r4)
    8e04:	20c00117 	ldw	r3,4(r4)
    8e08:	2809883a 	mov	r4,r5
    8e0c:	300b883a 	mov	r5,r6
    8e10:	100d883a 	mov	r6,r2
    8e14:	180f883a 	mov	r7,r3
    8e18:	000a7e00 	call	a7e0 <__adddf3>
    8e1c:	1009883a 	mov	r4,r2
    8e20:	180b883a 	mov	r5,r3
    8e24:	2005883a 	mov	r2,r4
    8e28:	2807883a 	mov	r3,r5
    8e2c:	01000074 	movhi	r4,1
    8e30:	2138f304 	addi	r4,r4,-7220
    8e34:	20800015 	stw	r2,0(r4)
    8e38:	20c00115 	stw	r3,4(r4)

	pan_major = 1;
    8e3c:	00800074 	movhi	r2,1
    8e40:	10b80844 	addi	r2,r2,-8159
    8e44:	00c00044 	movi	r3,1
    8e48:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	pan_CalculateDynamic ();
    8e4c:	00090780 	call	9078 <pan_CalculateDynamic>
}
    8e50:	e037883a 	mov	sp,fp
    8e54:	dfc00117 	ldw	ra,4(sp)
    8e58:	df000017 	ldw	fp,0(sp)
    8e5c:	dec00204 	addi	sp,sp,8
    8e60:	f800283a 	ret

00008e64 <pan_ModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void pan_ModelInitialize_parameters(void)
{
    8e64:	deffff04 	addi	sp,sp,-4
    8e68:	df000015 	stw	fp,0(sp)
    8e6c:	d839883a 	mov	fp,sp
	/* set the parameters */
	pan_P[0] = 0.0;		/* corrGain\K */
    8e70:	00800074 	movhi	r2,1
    8e74:	10bb0a04 	addi	r2,r2,-5080
    8e78:	10000015 	stw	zero,0(r2)
    8e7c:	10000115 	stw	zero,4(r2)
	pan_P[1] = 2.6;		/* PID1\kp */
    8e80:	00800074 	movhi	r2,1
    8e84:	10bb0a04 	addi	r2,r2,-5080
    8e88:	00f33374 	movhi	r3,52429
    8e8c:	18f33344 	addi	r3,r3,-13107
    8e90:	10c00215 	stw	r3,8(r2)
    8e94:	00d00174 	movhi	r3,16389
    8e98:	18f33304 	addi	r3,r3,-13108
    8e9c:	10c00315 	stw	r3,12(r2)
	pan_P[2] = 0.05;		/* PID1\tauD */
    8ea0:	00800074 	movhi	r2,1
    8ea4:	10bb0a04 	addi	r2,r2,-5080
    8ea8:	00e666b4 	movhi	r3,39322
    8eac:	18e66684 	addi	r3,r3,-26214
    8eb0:	10c00415 	stw	r3,16(r2)
    8eb4:	00cfeab4 	movhi	r3,16298
    8eb8:	18e66644 	addi	r3,r3,-26215
    8ebc:	10c00515 	stw	r3,20(r2)
	pan_P[3] = 0.17;		/* PID1\beta */
    8ec0:	00800074 	movhi	r2,1
    8ec4:	10bb0a04 	addi	r2,r2,-5080
    8ec8:	00d70a74 	movhi	r3,23593
    8ecc:	18fd70c4 	addi	r3,r3,-2621
    8ed0:	10c00615 	stw	r3,24(r2)
    8ed4:	00cff1b4 	movhi	r3,16326
    8ed8:	18f0a3c4 	addi	r3,r3,-15729
    8edc:	10c00715 	stw	r3,28(r2)
	pan_P[4] = 9.0;		/* PID1\tauI */
    8ee0:	00800074 	movhi	r2,1
    8ee4:	10bb0a04 	addi	r2,r2,-5080
    8ee8:	10000815 	stw	zero,32(r2)
    8eec:	00d008b4 	movhi	r3,16418
    8ef0:	10c00915 	stw	r3,36(r2)
	pan_P[5] = -0.99;		/* SignalLimiter2\minimum */
    8ef4:	00800074 	movhi	r2,1
    8ef8:	10bb0a04 	addi	r2,r2,-5080
    8efc:	00deb874 	movhi	r3,31457
    8f00:	18d1eb84 	addi	r3,r3,18350
    8f04:	10c00a15 	stw	r3,40(r2)
    8f08:	00effc34 	movhi	r3,49136
    8f0c:	18eb8504 	addi	r3,r3,-20972
    8f10:	10c00b15 	stw	r3,44(r2)
	pan_P[6] = 0.99;		/* SignalLimiter2\maximum */
    8f14:	00800074 	movhi	r2,1
    8f18:	10bb0a04 	addi	r2,r2,-5080
    8f1c:	00deb874 	movhi	r3,31457
    8f20:	18d1eb84 	addi	r3,r3,18350
    8f24:	10c00c15 	stw	r3,48(r2)
    8f28:	00cffc34 	movhi	r3,16368
    8f2c:	18eb8504 	addi	r3,r3,-20972
    8f30:	10c00d15 	stw	r3,52(r2)

}
    8f34:	e037883a 	mov	sp,fp
    8f38:	df000017 	ldw	fp,0(sp)
    8f3c:	dec00104 	addi	sp,sp,4
    8f40:	f800283a 	ret

00008f44 <pan_ModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void pan_ModelInitialize_initialvalues(void)
{
    8f44:	deffff04 	addi	sp,sp,-4
    8f48:	df000015 	stw	fp,0(sp)
    8f4c:	d839883a 	mov	fp,sp
	/* set the initial values */
	pan_I[0] = 0.0;		/* PID1\uD_previous_initial */
    8f50:	00800074 	movhi	r2,1
    8f54:	10bb0404 	addi	r2,r2,-5104
    8f58:	10000015 	stw	zero,0(r2)
    8f5c:	10000115 	stw	zero,4(r2)
	pan_I[1] = 0.0;		/* PID1\error_previous_initial */
    8f60:	00800074 	movhi	r2,1
    8f64:	10bb0404 	addi	r2,r2,-5104
    8f68:	10000215 	stw	zero,8(r2)
    8f6c:	10000315 	stw	zero,12(r2)
	pan_I[2] = 0.0;		/* PID1\uI_previous_initial */
    8f70:	00800074 	movhi	r2,1
    8f74:	10bb0404 	addi	r2,r2,-5104
    8f78:	10000415 	stw	zero,16(r2)
    8f7c:	10000515 	stw	zero,20(r2)

}
    8f80:	e037883a 	mov	sp,fp
    8f84:	df000017 	ldw	fp,0(sp)
    8f88:	dec00104 	addi	sp,sp,4
    8f8c:	f800283a 	ret

00008f90 <pan_ModelInitialize_states>:

void pan_ModelInitialize_states(void)
{
    8f90:	deffff04 	addi	sp,sp,-4
    8f94:	df000015 	stw	fp,0(sp)
    8f98:	d839883a 	mov	fp,sp
	/* set the states */
	pan_s[0] = pan_I[0];		/* PID1\uD_previous */
    8f9c:	01000074 	movhi	r4,1
    8fa0:	213b0404 	addi	r4,r4,-5104
    8fa4:	20800017 	ldw	r2,0(r4)
    8fa8:	20c00117 	ldw	r3,4(r4)
    8fac:	01000074 	movhi	r4,1
    8fb0:	213b1804 	addi	r4,r4,-5024
    8fb4:	20800015 	stw	r2,0(r4)
    8fb8:	20c00115 	stw	r3,4(r4)
	pan_s[1] = pan_I[1];		/* PID1\error_previous */
    8fbc:	01000074 	movhi	r4,1
    8fc0:	213b0404 	addi	r4,r4,-5104
    8fc4:	20800217 	ldw	r2,8(r4)
    8fc8:	20c00317 	ldw	r3,12(r4)
    8fcc:	01000074 	movhi	r4,1
    8fd0:	213b1804 	addi	r4,r4,-5024
    8fd4:	20800215 	stw	r2,8(r4)
    8fd8:	20c00315 	stw	r3,12(r4)
	pan_s[2] = pan_I[2];		/* PID1\uI_previous */
    8fdc:	01000074 	movhi	r4,1
    8fe0:	213b0404 	addi	r4,r4,-5104
    8fe4:	20800417 	ldw	r2,16(r4)
    8fe8:	20c00517 	ldw	r3,20(r4)
    8fec:	01000074 	movhi	r4,1
    8ff0:	213b1804 	addi	r4,r4,-5024
    8ff4:	20800415 	stw	r2,16(r4)
    8ff8:	20c00515 	stw	r3,20(r4)

}
    8ffc:	e037883a 	mov	sp,fp
    9000:	df000017 	ldw	fp,0(sp)
    9004:	dec00104 	addi	sp,sp,4
    9008:	f800283a 	ret

0000900c <pan_ModelInitialize_variables>:

void pan_ModelInitialize_variables(void)
{
    900c:	defffe04 	addi	sp,sp,-8
    9010:	dfc00115 	stw	ra,4(sp)
    9014:	df000015 	stw	fp,0(sp)
    9018:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(pan_V, 0, pan_variables_size * sizeof(double));
    901c:	01000074 	movhi	r4,1
    9020:	213b1e04 	addi	r4,r4,-5000
    9024:	000b883a 	mov	r5,zero
    9028:	01801404 	movi	r6,80
    902c:	000b78c0 	call	b78c <memset>
}
    9030:	e037883a 	mov	sp,fp
    9034:	dfc00117 	ldw	ra,4(sp)
    9038:	df000017 	ldw	fp,0(sp)
    903c:	dec00204 	addi	sp,sp,8
    9040:	f800283a 	ret

00009044 <pan_ModelInitialize>:

/* this method is called before calculation is possible */
void pan_ModelInitialize (void)
{
    9044:	defffe04 	addi	sp,sp,-8
    9048:	dfc00115 	stw	ra,4(sp)
    904c:	df000015 	stw	fp,0(sp)
    9050:	d839883a 	mov	fp,sp
	pan_ModelInitialize_parameters();
    9054:	0008e640 	call	8e64 <pan_ModelInitialize_parameters>
	pan_ModelInitialize_variables();
    9058:	000900c0 	call	900c <pan_ModelInitialize_variables>
	pan_ModelInitialize_initialvalues();
    905c:	0008f440 	call	8f44 <pan_ModelInitialize_initialvalues>
	pan_ModelInitialize_states();
    9060:	0008f900 	call	8f90 <pan_ModelInitialize_states>
}
    9064:	e037883a 	mov	sp,fp
    9068:	dfc00117 	ldw	ra,4(sp)
    906c:	df000017 	ldw	fp,0(sp)
    9070:	dec00204 	addi	sp,sp,8
    9074:	f800283a 	ret

00009078 <pan_CalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void pan_CalculateDynamic (void)
{
    9078:	defff804 	addi	sp,sp,-32
    907c:	dfc00715 	stw	ra,28(sp)
    9080:	df000615 	stw	fp,24(sp)
    9084:	dd400515 	stw	r21,20(sp)
    9088:	dd000415 	stw	r20,16(sp)
    908c:	dcc00315 	stw	r19,12(sp)
    9090:	dc800215 	stw	r18,8(sp)
    9094:	dc400115 	stw	r17,4(sp)
    9098:	dc000015 	stw	r16,0(sp)
    909c:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	pan_V[2] = 1.0 / (pan_step_size + pan_P[2] * pan_P[3]);
    90a0:	00800074 	movhi	r2,1
    90a4:	10bb0a04 	addi	r2,r2,-5080
    90a8:	11400417 	ldw	r5,16(r2)
    90ac:	11800517 	ldw	r6,20(r2)
    90b0:	01000074 	movhi	r4,1
    90b4:	213b0a04 	addi	r4,r4,-5080
    90b8:	20800617 	ldw	r2,24(r4)
    90bc:	20c00717 	ldw	r3,28(r4)
    90c0:	2809883a 	mov	r4,r5
    90c4:	300b883a 	mov	r5,r6
    90c8:	100d883a 	mov	r6,r2
    90cc:	180f883a 	mov	r7,r3
    90d0:	000a8940 	call	a894 <__muldf3>
    90d4:	100f883a 	mov	r7,r2
    90d8:	1811883a 	mov	r8,r3
    90dc:	380b883a 	mov	r5,r7
    90e0:	400d883a 	mov	r6,r8
    90e4:	d0a00317 	ldw	r2,-32756(gp)
    90e8:	01000074 	movhi	r4,1
    90ec:	21380704 	addi	r4,r4,-8164
    90f0:	20c00017 	ldw	r3,0(r4)
    90f4:	2809883a 	mov	r4,r5
    90f8:	300b883a 	mov	r5,r6
    90fc:	100d883a 	mov	r6,r2
    9100:	180f883a 	mov	r7,r3
    9104:	000a7e00 	call	a7e0 <__adddf3>
    9108:	1009883a 	mov	r4,r2
    910c:	180b883a 	mov	r5,r3
    9110:	2005883a 	mov	r2,r4
    9114:	2807883a 	mov	r3,r5
    9118:	0009883a 	mov	r4,zero
    911c:	014ffc34 	movhi	r5,16368
    9120:	100d883a 	mov	r6,r2
    9124:	180f883a 	mov	r7,r3
    9128:	000ab780 	call	ab78 <__divdf3>
    912c:	1009883a 	mov	r4,r2
    9130:	180b883a 	mov	r5,r3
    9134:	2005883a 	mov	r2,r4
    9138:	2807883a 	mov	r3,r5
    913c:	01000074 	movhi	r4,1
    9140:	213b1e04 	addi	r4,r4,-5000
    9144:	20800415 	stw	r2,16(r4)
    9148:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\plus1 = in; */
	pan_V[3] = pan_V[7];
    914c:	01000074 	movhi	r4,1
    9150:	213b1e04 	addi	r4,r4,-5000
    9154:	20800e17 	ldw	r2,56(r4)
    9158:	20c00f17 	ldw	r3,60(r4)
    915c:	01000074 	movhi	r4,1
    9160:	213b1e04 	addi	r4,r4,-5000
    9164:	20800615 	stw	r2,24(r4)
    9168:	20c00715 	stw	r3,28(r4)

	/* Splitter1\input = position; */
	pan_V[5] = pan_V[8];
    916c:	01000074 	movhi	r4,1
    9170:	213b1e04 	addi	r4,r4,-5000
    9174:	20801017 	ldw	r2,64(r4)
    9178:	20c01117 	ldw	r3,68(r4)
    917c:	01000074 	movhi	r4,1
    9180:	213b1e04 	addi	r4,r4,-5000
    9184:	20800a15 	stw	r2,40(r4)
    9188:	20c00b15 	stw	r3,44(r4)

	/* corrGain\corr = corrGain\K * Splitter1\input; */
	pan_V[0] = pan_P[0] * pan_V[5];
    918c:	00800074 	movhi	r2,1
    9190:	10bb0a04 	addi	r2,r2,-5080
    9194:	11400017 	ldw	r5,0(r2)
    9198:	11800117 	ldw	r6,4(r2)
    919c:	01000074 	movhi	r4,1
    91a0:	213b1e04 	addi	r4,r4,-5000
    91a4:	20800a17 	ldw	r2,40(r4)
    91a8:	20c00b17 	ldw	r3,44(r4)
    91ac:	2809883a 	mov	r4,r5
    91b0:	300b883a 	mov	r5,r6
    91b4:	100d883a 	mov	r6,r2
    91b8:	180f883a 	mov	r7,r3
    91bc:	000a8940 	call	a894 <__muldf3>
    91c0:	1009883a 	mov	r4,r2
    91c4:	180b883a 	mov	r5,r3
    91c8:	2005883a 	mov	r2,r4
    91cc:	2807883a 	mov	r3,r5
    91d0:	01000074 	movhi	r4,1
    91d4:	213b1e04 	addi	r4,r4,-5000
    91d8:	20800015 	stw	r2,0(r4)
    91dc:	20c00115 	stw	r3,4(r4)

	/* PID1\error = PlusMinus1\plus1 - Splitter1\input; */
	pan_R[1] = pan_V[3] - pan_V[5];
    91e0:	00800074 	movhi	r2,1
    91e4:	10bb1e04 	addi	r2,r2,-5000
    91e8:	11400617 	ldw	r5,24(r2)
    91ec:	11800717 	ldw	r6,28(r2)
    91f0:	01000074 	movhi	r4,1
    91f4:	213b1e04 	addi	r4,r4,-5000
    91f8:	20800a17 	ldw	r2,40(r4)
    91fc:	20c00b17 	ldw	r3,44(r4)
    9200:	2809883a 	mov	r4,r5
    9204:	300b883a 	mov	r5,r6
    9208:	100d883a 	mov	r6,r2
    920c:	180f883a 	mov	r7,r3
    9210:	000a8340 	call	a834 <__subdf3>
    9214:	1009883a 	mov	r4,r2
    9218:	180b883a 	mov	r5,r3
    921c:	2005883a 	mov	r2,r4
    9220:	2807883a 	mov	r3,r5
    9224:	01000074 	movhi	r4,1
    9228:	213b3204 	addi	r4,r4,-4920
    922c:	20800215 	stw	r2,8(r4)
    9230:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	pan_R[0] = pan_V[2] * (((pan_P[2] * pan_s[0]) * pan_P[3] + (pan_P[2] * pan_P[1]) * (pan_R[1] - pan_s[1])) + (pan_step_size * pan_P[1]) * pan_R[1]);
    9234:	00800074 	movhi	r2,1
    9238:	10bb1e04 	addi	r2,r2,-5000
    923c:	14000417 	ldw	r16,16(r2)
    9240:	14400517 	ldw	r17,20(r2)
    9244:	00800074 	movhi	r2,1
    9248:	10bb0a04 	addi	r2,r2,-5080
    924c:	11400417 	ldw	r5,16(r2)
    9250:	11800517 	ldw	r6,20(r2)
    9254:	01000074 	movhi	r4,1
    9258:	213b1804 	addi	r4,r4,-5024
    925c:	20800017 	ldw	r2,0(r4)
    9260:	20c00117 	ldw	r3,4(r4)
    9264:	2809883a 	mov	r4,r5
    9268:	300b883a 	mov	r5,r6
    926c:	100d883a 	mov	r6,r2
    9270:	180f883a 	mov	r7,r3
    9274:	000a8940 	call	a894 <__muldf3>
    9278:	100f883a 	mov	r7,r2
    927c:	1811883a 	mov	r8,r3
    9280:	380b883a 	mov	r5,r7
    9284:	400d883a 	mov	r6,r8
    9288:	01000074 	movhi	r4,1
    928c:	213b0a04 	addi	r4,r4,-5080
    9290:	20800617 	ldw	r2,24(r4)
    9294:	20c00717 	ldw	r3,28(r4)
    9298:	2809883a 	mov	r4,r5
    929c:	300b883a 	mov	r5,r6
    92a0:	100d883a 	mov	r6,r2
    92a4:	180f883a 	mov	r7,r3
    92a8:	000a8940 	call	a894 <__muldf3>
    92ac:	1009883a 	mov	r4,r2
    92b0:	180b883a 	mov	r5,r3
    92b4:	2025883a 	mov	r18,r4
    92b8:	2827883a 	mov	r19,r5
    92bc:	00800074 	movhi	r2,1
    92c0:	10bb0a04 	addi	r2,r2,-5080
    92c4:	11400417 	ldw	r5,16(r2)
    92c8:	11800517 	ldw	r6,20(r2)
    92cc:	01000074 	movhi	r4,1
    92d0:	213b0a04 	addi	r4,r4,-5080
    92d4:	20800217 	ldw	r2,8(r4)
    92d8:	20c00317 	ldw	r3,12(r4)
    92dc:	2809883a 	mov	r4,r5
    92e0:	300b883a 	mov	r5,r6
    92e4:	100d883a 	mov	r6,r2
    92e8:	180f883a 	mov	r7,r3
    92ec:	000a8940 	call	a894 <__muldf3>
    92f0:	1009883a 	mov	r4,r2
    92f4:	180b883a 	mov	r5,r3
    92f8:	2029883a 	mov	r20,r4
    92fc:	282b883a 	mov	r21,r5
    9300:	00800074 	movhi	r2,1
    9304:	10bb3204 	addi	r2,r2,-4920
    9308:	11400217 	ldw	r5,8(r2)
    930c:	11800317 	ldw	r6,12(r2)
    9310:	01000074 	movhi	r4,1
    9314:	213b1804 	addi	r4,r4,-5024
    9318:	20800217 	ldw	r2,8(r4)
    931c:	20c00317 	ldw	r3,12(r4)
    9320:	2809883a 	mov	r4,r5
    9324:	300b883a 	mov	r5,r6
    9328:	100d883a 	mov	r6,r2
    932c:	180f883a 	mov	r7,r3
    9330:	000a8340 	call	a834 <__subdf3>
    9334:	1009883a 	mov	r4,r2
    9338:	180b883a 	mov	r5,r3
    933c:	2005883a 	mov	r2,r4
    9340:	2807883a 	mov	r3,r5
    9344:	a009883a 	mov	r4,r20
    9348:	a80b883a 	mov	r5,r21
    934c:	100d883a 	mov	r6,r2
    9350:	180f883a 	mov	r7,r3
    9354:	000a8940 	call	a894 <__muldf3>
    9358:	1009883a 	mov	r4,r2
    935c:	180b883a 	mov	r5,r3
    9360:	2005883a 	mov	r2,r4
    9364:	2807883a 	mov	r3,r5
    9368:	9009883a 	mov	r4,r18
    936c:	980b883a 	mov	r5,r19
    9370:	100d883a 	mov	r6,r2
    9374:	180f883a 	mov	r7,r3
    9378:	000a7e00 	call	a7e0 <__adddf3>
    937c:	1009883a 	mov	r4,r2
    9380:	180b883a 	mov	r5,r3
    9384:	2025883a 	mov	r18,r4
    9388:	2827883a 	mov	r19,r5
    938c:	00800074 	movhi	r2,1
    9390:	10bb0a04 	addi	r2,r2,-5080
    9394:	11400217 	ldw	r5,8(r2)
    9398:	11800317 	ldw	r6,12(r2)
    939c:	d0a00317 	ldw	r2,-32756(gp)
    93a0:	01000074 	movhi	r4,1
    93a4:	21380704 	addi	r4,r4,-8164
    93a8:	20c00017 	ldw	r3,0(r4)
    93ac:	2809883a 	mov	r4,r5
    93b0:	300b883a 	mov	r5,r6
    93b4:	100d883a 	mov	r6,r2
    93b8:	180f883a 	mov	r7,r3
    93bc:	000a8940 	call	a894 <__muldf3>
    93c0:	100f883a 	mov	r7,r2
    93c4:	1811883a 	mov	r8,r3
    93c8:	380b883a 	mov	r5,r7
    93cc:	400d883a 	mov	r6,r8
    93d0:	01000074 	movhi	r4,1
    93d4:	213b3204 	addi	r4,r4,-4920
    93d8:	20800217 	ldw	r2,8(r4)
    93dc:	20c00317 	ldw	r3,12(r4)
    93e0:	2809883a 	mov	r4,r5
    93e4:	300b883a 	mov	r5,r6
    93e8:	100d883a 	mov	r6,r2
    93ec:	180f883a 	mov	r7,r3
    93f0:	000a8940 	call	a894 <__muldf3>
    93f4:	1009883a 	mov	r4,r2
    93f8:	180b883a 	mov	r5,r3
    93fc:	2005883a 	mov	r2,r4
    9400:	2807883a 	mov	r3,r5
    9404:	9009883a 	mov	r4,r18
    9408:	980b883a 	mov	r5,r19
    940c:	100d883a 	mov	r6,r2
    9410:	180f883a 	mov	r7,r3
    9414:	000a7e00 	call	a7e0 <__adddf3>
    9418:	1009883a 	mov	r4,r2
    941c:	180b883a 	mov	r5,r3
    9420:	2005883a 	mov	r2,r4
    9424:	2807883a 	mov	r3,r5
    9428:	8009883a 	mov	r4,r16
    942c:	880b883a 	mov	r5,r17
    9430:	100d883a 	mov	r6,r2
    9434:	180f883a 	mov	r7,r3
    9438:	000a8940 	call	a894 <__muldf3>
    943c:	1009883a 	mov	r4,r2
    9440:	180b883a 	mov	r5,r3
    9444:	2005883a 	mov	r2,r4
    9448:	2807883a 	mov	r3,r5
    944c:	01000074 	movhi	r4,1
    9450:	213b3204 	addi	r4,r4,-4920
    9454:	20800015 	stw	r2,0(r4)
    9458:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	pan_R[2] = pan_s[2] + (pan_step_size * pan_R[0]) / pan_P[4];
    945c:	00800074 	movhi	r2,1
    9460:	10bb1804 	addi	r2,r2,-5024
    9464:	14000417 	ldw	r16,16(r2)
    9468:	14400517 	ldw	r17,20(r2)
    946c:	00800074 	movhi	r2,1
    9470:	10bb3204 	addi	r2,r2,-4920
    9474:	11400017 	ldw	r5,0(r2)
    9478:	11800117 	ldw	r6,4(r2)
    947c:	d0a00317 	ldw	r2,-32756(gp)
    9480:	01000074 	movhi	r4,1
    9484:	21380704 	addi	r4,r4,-8164
    9488:	20c00017 	ldw	r3,0(r4)
    948c:	2809883a 	mov	r4,r5
    9490:	300b883a 	mov	r5,r6
    9494:	100d883a 	mov	r6,r2
    9498:	180f883a 	mov	r7,r3
    949c:	000a8940 	call	a894 <__muldf3>
    94a0:	100f883a 	mov	r7,r2
    94a4:	1811883a 	mov	r8,r3
    94a8:	380b883a 	mov	r5,r7
    94ac:	400d883a 	mov	r6,r8
    94b0:	01000074 	movhi	r4,1
    94b4:	213b0a04 	addi	r4,r4,-5080
    94b8:	20800817 	ldw	r2,32(r4)
    94bc:	20c00917 	ldw	r3,36(r4)
    94c0:	2809883a 	mov	r4,r5
    94c4:	300b883a 	mov	r5,r6
    94c8:	100d883a 	mov	r6,r2
    94cc:	180f883a 	mov	r7,r3
    94d0:	000ab780 	call	ab78 <__divdf3>
    94d4:	1009883a 	mov	r4,r2
    94d8:	180b883a 	mov	r5,r3
    94dc:	2005883a 	mov	r2,r4
    94e0:	2807883a 	mov	r3,r5
    94e4:	8009883a 	mov	r4,r16
    94e8:	880b883a 	mov	r5,r17
    94ec:	100d883a 	mov	r6,r2
    94f0:	180f883a 	mov	r7,r3
    94f4:	000a7e00 	call	a7e0 <__adddf3>
    94f8:	1009883a 	mov	r4,r2
    94fc:	180b883a 	mov	r5,r3
    9500:	2005883a 	mov	r2,r4
    9504:	2807883a 	mov	r3,r5
    9508:	01000074 	movhi	r4,1
    950c:	213b3204 	addi	r4,r4,-4920
    9510:	20800415 	stw	r2,16(r4)
    9514:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	pan_V[1] = pan_R[2] + pan_R[0];
    9518:	00800074 	movhi	r2,1
    951c:	10bb3204 	addi	r2,r2,-4920
    9520:	11400417 	ldw	r5,16(r2)
    9524:	11800517 	ldw	r6,20(r2)
    9528:	01000074 	movhi	r4,1
    952c:	213b3204 	addi	r4,r4,-4920
    9530:	20800017 	ldw	r2,0(r4)
    9534:	20c00117 	ldw	r3,4(r4)
    9538:	2809883a 	mov	r4,r5
    953c:	300b883a 	mov	r5,r6
    9540:	100d883a 	mov	r6,r2
    9544:	180f883a 	mov	r7,r3
    9548:	000a7e00 	call	a7e0 <__adddf3>
    954c:	1009883a 	mov	r4,r2
    9550:	180b883a 	mov	r5,r3
    9554:	2005883a 	mov	r2,r4
    9558:	2807883a 	mov	r3,r5
    955c:	01000074 	movhi	r4,1
    9560:	213b1e04 	addi	r4,r4,-5000
    9564:	20800215 	stw	r2,8(r4)
    9568:	20c00315 	stw	r3,12(r4)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
    956c:	00800074 	movhi	r2,1
    9570:	10bb1e04 	addi	r2,r2,-5000
    9574:	11400217 	ldw	r5,8(r2)
    9578:	11800317 	ldw	r6,12(r2)
    957c:	01000074 	movhi	r4,1
    9580:	213b0a04 	addi	r4,r4,-5080
    9584:	20800a17 	ldw	r2,40(r4)
    9588:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		pan_P[5]
	:
    958c:	2809883a 	mov	r4,r5
    9590:	300b883a 	mov	r5,r6
    9594:	100d883a 	mov	r6,r2
    9598:	180f883a 	mov	r7,r3
    959c:	000adf40 	call	adf4 <__ltdf2>
    95a0:	1000050e 	bge	r2,zero,95b8 <pan_CalculateDynamic+0x540>
    95a4:	01000074 	movhi	r4,1
    95a8:	213b0a04 	addi	r4,r4,-5080
    95ac:	20800a17 	ldw	r2,40(r4)
    95b0:	20c00b17 	ldw	r3,44(r4)
    95b4:	00001906 	br	961c <pan_CalculateDynamic+0x5a4>
		/* (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) */
		((pan_V[1] > pan_P[6]) ? 
    95b8:	00800074 	movhi	r2,1
    95bc:	10bb1e04 	addi	r2,r2,-5000
    95c0:	11400217 	ldw	r5,8(r2)
    95c4:	11800317 	ldw	r6,12(r2)
    95c8:	01000074 	movhi	r4,1
    95cc:	213b0a04 	addi	r4,r4,-5080
    95d0:	20800c17 	ldw	r2,48(r4)
    95d4:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			pan_P[6]
		:
    95d8:	2809883a 	mov	r4,r5
    95dc:	300b883a 	mov	r5,r6
    95e0:	100d883a 	mov	r6,r2
    95e4:	180f883a 	mov	r7,r3
    95e8:	000ad2c0 	call	ad2c <__gtdf2>
    95ec:	0080050e 	bge	zero,r2,9604 <pan_CalculateDynamic+0x58c>
    95f0:	00800074 	movhi	r2,1
    95f4:	10bb0a04 	addi	r2,r2,-5080
    95f8:	11000c17 	ldw	r4,48(r2)
    95fc:	11400d17 	ldw	r5,52(r2)
    9600:	00000406 	br	9614 <pan_CalculateDynamic+0x59c>
    9604:	00800074 	movhi	r2,1
    9608:	10bb1e04 	addi	r2,r2,-5000
    960c:	11000217 	ldw	r4,8(r2)
    9610:	11400317 	ldw	r5,12(r2)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
		/* SignalLimiter2\minimum */
		pan_P[5]
	:
    9614:	2005883a 	mov	r2,r4
    9618:	2807883a 	mov	r3,r5

	/* PID1\output = PID1\uI + PID1\uD; */
	pan_V[1] = pan_R[2] + pan_R[0];

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
    961c:	01000074 	movhi	r4,1
    9620:	213b1e04 	addi	r4,r4,-5000
    9624:	20800815 	stw	r2,32(r4)
    9628:	20c00915 	stw	r3,36(r4)
		)
	);


	/* increment the step counter */
	pan_steps++;
    962c:	d0a0f217 	ldw	r2,-31800(gp)
    9630:	10800044 	addi	r2,r2,1
    9634:	d0a0f215 	stw	r2,-31800(gp)
}
    9638:	e037883a 	mov	sp,fp
    963c:	dfc00717 	ldw	ra,28(sp)
    9640:	df000617 	ldw	fp,24(sp)
    9644:	dd400517 	ldw	r21,20(sp)
    9648:	dd000417 	ldw	r20,16(sp)
    964c:	dcc00317 	ldw	r19,12(sp)
    9650:	dc800217 	ldw	r18,8(sp)
    9654:	dc400117 	ldw	r17,4(sp)
    9658:	dc000017 	ldw	r16,0(sp)
    965c:	dec00804 	addi	sp,sp,32
    9660:	f800283a 	ret

00009664 <pan_CalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void pan_CalculateOutput (void)
{
    9664:	deffff04 	addi	sp,sp,-4
    9668:	df000015 	stw	fp,0(sp)
    966c:	d839883a 	mov	fp,sp
	/* corr = corrGain\corr; */
	pan_V[6] = pan_V[0];
    9670:	01000074 	movhi	r4,1
    9674:	213b1e04 	addi	r4,r4,-5000
    9678:	20800017 	ldw	r2,0(r4)
    967c:	20c00117 	ldw	r3,4(r4)
    9680:	01000074 	movhi	r4,1
    9684:	213b1e04 	addi	r4,r4,-5000
    9688:	20800c15 	stw	r2,48(r4)
    968c:	20c00d15 	stw	r3,52(r4)

	/* out = SignalLimiter2\output; */
	pan_V[9] = pan_V[4];
    9690:	01000074 	movhi	r4,1
    9694:	213b1e04 	addi	r4,r4,-5000
    9698:	20800817 	ldw	r2,32(r4)
    969c:	20c00917 	ldw	r3,36(r4)
    96a0:	01000074 	movhi	r4,1
    96a4:	213b1e04 	addi	r4,r4,-5000
    96a8:	20801215 	stw	r2,72(r4)
    96ac:	20c01315 	stw	r3,76(r4)

}
    96b0:	e037883a 	mov	sp,fp
    96b4:	df000017 	ldw	fp,0(sp)
    96b8:	dec00104 	addi	sp,sp,4
    96bc:	f800283a 	ret

000096c0 <pan_CopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void pan_CopyInputsToVariables (double *u)
{
    96c0:	defffe04 	addi	sp,sp,-8
    96c4:	df000115 	stw	fp,4(sp)
    96c8:	df000104 	addi	fp,sp,4
    96cc:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	pan_V[7] = u[0];		/* in */
    96d0:	e13fff17 	ldw	r4,-4(fp)
    96d4:	20800017 	ldw	r2,0(r4)
    96d8:	20c00117 	ldw	r3,4(r4)
    96dc:	01000074 	movhi	r4,1
    96e0:	213b1e04 	addi	r4,r4,-5000
    96e4:	20800e15 	stw	r2,56(r4)
    96e8:	20c00f15 	stw	r3,60(r4)
	pan_V[8] = u[1];		/* position */
    96ec:	e13fff17 	ldw	r4,-4(fp)
    96f0:	20800217 	ldw	r2,8(r4)
    96f4:	20c00317 	ldw	r3,12(r4)
    96f8:	01000074 	movhi	r4,1
    96fc:	213b1e04 	addi	r4,r4,-5000
    9700:	20801015 	stw	r2,64(r4)
    9704:	20c01115 	stw	r3,68(r4)

}
    9708:	e037883a 	mov	sp,fp
    970c:	df000017 	ldw	fp,0(sp)
    9710:	dec00104 	addi	sp,sp,4
    9714:	f800283a 	ret

00009718 <pan_CopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void pan_CopyVariablesToOutputs (double *y)
{
    9718:	defffe04 	addi	sp,sp,-8
    971c:	df000115 	stw	fp,4(sp)
    9720:	df000104 	addi	fp,sp,4
    9724:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	pan_V[6];		/* corr */
    9728:	01000074 	movhi	r4,1
    972c:	213b1e04 	addi	r4,r4,-5000
    9730:	20800c17 	ldw	r2,48(r4)
    9734:	20c00d17 	ldw	r3,52(r4)
    9738:	e13fff17 	ldw	r4,-4(fp)
    973c:	20800015 	stw	r2,0(r4)
    9740:	20c00115 	stw	r3,4(r4)
	y[1] = 	pan_V[9];		/* out */
    9744:	e0bfff17 	ldw	r2,-4(fp)
    9748:	11000204 	addi	r4,r2,8
    974c:	01400074 	movhi	r5,1
    9750:	297b1e04 	addi	r5,r5,-5000
    9754:	28801217 	ldw	r2,72(r5)
    9758:	28c01317 	ldw	r3,76(r5)
    975c:	20800015 	stw	r2,0(r4)
    9760:	20c00115 	stw	r3,4(r4)

}
    9764:	e037883a 	mov	sp,fp
    9768:	df000017 	ldw	fp,0(sp)
    976c:	dec00104 	addi	sp,sp,4
    9770:	f800283a 	ret

00009774 <pan_InitializeSubmodel>:

/* The initialization function for submodel */
void pan_InitializeSubmodel (double *u, double *y, double t)
{
    9774:	defffa04 	addi	sp,sp,-24
    9778:	dfc00515 	stw	ra,20(sp)
    977c:	df000415 	stw	fp,16(sp)
    9780:	df000404 	addi	fp,sp,16
    9784:	e13ffc15 	stw	r4,-16(fp)
    9788:	e17ffd15 	stw	r5,-12(fp)
    978c:	e1bffe15 	stw	r6,-8(fp)
    9790:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	pan_initialize = 1;
    9794:	00800074 	movhi	r2,1
    9798:	10b80804 	addi	r2,r2,-8160
    979c:	00c00044 	movi	r3,1
    97a0:	10c00005 	stb	r3,0(r2)
	pan_steps = 0;
    97a4:	00800074 	movhi	r2,1
    97a8:	10b8f504 	addi	r2,r2,-7212
    97ac:	10000015 	stw	zero,0(r2)
	pan_ModelInitialize ();
    97b0:	00090440 	call	9044 <pan_ModelInitialize>
	pan_DiscreteInitialize ();
    97b4:	0008d540 	call	8d54 <pan_DiscreteInitialize>

	/* Copy the inputs */
	pan_time = t;
    97b8:	00800074 	movhi	r2,1
    97bc:	10b8f304 	addi	r2,r2,-7220
    97c0:	e0fffe17 	ldw	r3,-8(fp)
    97c4:	10c00015 	stw	r3,0(r2)
    97c8:	e0ffff17 	ldw	r3,-4(fp)
    97cc:	10c00115 	stw	r3,4(r2)
	pan_CopyInputsToVariables (u);
    97d0:	e13ffc17 	ldw	r4,-16(fp)
    97d4:	00096c00 	call	96c0 <pan_CopyInputsToVariables>

	/* Calculate the model for the first time */
	pan_CalculateDynamic ();
    97d8:	00090780 	call	9078 <pan_CalculateDynamic>
	pan_CalculateOutput ();
    97dc:	00096640 	call	9664 <pan_CalculateOutput>

	/* Set the outputs */
	pan_CopyVariablesToOutputs (y);
    97e0:	e13ffd17 	ldw	r4,-12(fp)
    97e4:	00097180 	call	9718 <pan_CopyVariablesToOutputs>

	/* End of initialization phase */
	pan_initialize = 0;
    97e8:	00800074 	movhi	r2,1
    97ec:	10b80804 	addi	r2,r2,-8160
    97f0:	10000005 	stb	zero,0(r2)
}
    97f4:	e037883a 	mov	sp,fp
    97f8:	dfc00117 	ldw	ra,4(sp)
    97fc:	df000017 	ldw	fp,0(sp)
    9800:	dec00204 	addi	sp,sp,8
    9804:	f800283a 	ret

00009808 <pan_CalculateSubmodel>:

/* The function that calculates the submodel */
void pan_CalculateSubmodel (double *u, double *y, double t)
{
    9808:	defffa04 	addi	sp,sp,-24
    980c:	dfc00515 	stw	ra,20(sp)
    9810:	df000415 	stw	fp,16(sp)
    9814:	df000404 	addi	fp,sp,16
    9818:	e13ffc15 	stw	r4,-16(fp)
    981c:	e17ffd15 	stw	r5,-12(fp)
    9820:	e1bffe15 	stw	r6,-8(fp)
    9824:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	pan_time = t;
    9828:	00800074 	movhi	r2,1
    982c:	10b8f304 	addi	r2,r2,-7220
    9830:	e0fffe17 	ldw	r3,-8(fp)
    9834:	10c00015 	stw	r3,0(r2)
    9838:	e0ffff17 	ldw	r3,-4(fp)
    983c:	10c00115 	stw	r3,4(r2)
	pan_CopyInputsToVariables (u);
    9840:	e13ffc17 	ldw	r4,-16(fp)
    9844:	00096c00 	call	96c0 <pan_CopyInputsToVariables>

	/* Calculate the model */
	pan_DiscreteStep ();
    9848:	0008d800 	call	8d80 <pan_DiscreteStep>
	pan_CalculateOutput ();
    984c:	00096640 	call	9664 <pan_CalculateOutput>

	/* Copy the outputs */
	pan_CopyVariablesToOutputs (y);
    9850:	e13ffd17 	ldw	r4,-12(fp)
    9854:	00097180 	call	9718 <pan_CopyVariablesToOutputs>
}
    9858:	e037883a 	mov	sp,fp
    985c:	dfc00117 	ldw	ra,4(sp)
    9860:	df000017 	ldw	fp,0(sp)
    9864:	dec00204 	addi	sp,sp,8
    9868:	f800283a 	ret

0000986c <pan_TerminateSubmodel>:

/* The termination function for submodel */
void pan_TerminateSubmodel (double *u, double *y, double t)
{
    986c:	defffa04 	addi	sp,sp,-24
    9870:	dfc00515 	stw	ra,20(sp)
    9874:	df000415 	stw	fp,16(sp)
    9878:	df000404 	addi	fp,sp,16
    987c:	e13ffc15 	stw	r4,-16(fp)
    9880:	e17ffd15 	stw	r5,-12(fp)
    9884:	e1bffe15 	stw	r6,-8(fp)
    9888:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	pan_time = t;
    988c:	00800074 	movhi	r2,1
    9890:	10b8f304 	addi	r2,r2,-7220
    9894:	e0fffe17 	ldw	r3,-8(fp)
    9898:	10c00015 	stw	r3,0(r2)
    989c:	e0ffff17 	ldw	r3,-4(fp)
    98a0:	10c00115 	stw	r3,4(r2)
	pan_CopyInputsToVariables (u);
    98a4:	e13ffc17 	ldw	r4,-16(fp)
    98a8:	00096c00 	call	96c0 <pan_CopyInputsToVariables>

	/* Set the outputs */
	pan_CopyVariablesToOutputs (y);
    98ac:	e13ffd17 	ldw	r4,-12(fp)
    98b0:	00097180 	call	9718 <pan_CopyVariablesToOutputs>

}
    98b4:	e037883a 	mov	sp,fp
    98b8:	dfc00117 	ldw	ra,4(sp)
    98bc:	df000017 	ldw	fp,0(sp)
    98c0:	dec00204 	addi	sp,sp,8
    98c4:	f800283a 	ret

000098c8 <tilt_DiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void tilt_DiscreteInitialize (void)
{
    98c8:	deffff04 	addi	sp,sp,-4
    98cc:	df000015 	stw	fp,0(sp)
    98d0:	d839883a 	mov	fp,sp
	/* nothing to be done */
	tilt_major = 1;
    98d4:	00800074 	movhi	r2,1
    98d8:	10b80f44 	addi	r2,r2,-8131
    98dc:	00c00044 	movi	r3,1
    98e0:	10c00005 	stb	r3,0(r2)
}
    98e4:	e037883a 	mov	sp,fp
    98e8:	df000017 	ldw	fp,0(sp)
    98ec:	dec00104 	addi	sp,sp,4
    98f0:	f800283a 	ret

000098f4 <tilt_DiscreteStep>:

/* the Discrete integration method itself */
void tilt_DiscreteStep (void)
{
    98f4:	defffd04 	addi	sp,sp,-12
    98f8:	dfc00215 	stw	ra,8(sp)
    98fc:	df000115 	stw	fp,4(sp)
    9900:	df000104 	addi	fp,sp,4
	int index;

	/* for each of the supplied states */
	for (index = 0; index < tilt_STATE_SIZE; index++)
    9904:	e03fff15 	stw	zero,-4(fp)
    9908:	00001106 	br	9950 <tilt_DiscreteStep+0x5c>
	{
		/* just a move of the new state */
		tilt_s [index] = tilt_R [index];
    990c:	00c00074 	movhi	r3,1
    9910:	18fb3e04 	addi	r3,r3,-4872
    9914:	e0bfff17 	ldw	r2,-4(fp)
    9918:	100490fa 	slli	r2,r2,3
    991c:	1889883a 	add	r4,r3,r2
    9920:	20800017 	ldw	r2,0(r4)
    9924:	20c00117 	ldw	r3,4(r4)
    9928:	01400074 	movhi	r5,1
    992c:	297b6a04 	addi	r5,r5,-4696
    9930:	e13fff17 	ldw	r4,-4(fp)
    9934:	200890fa 	slli	r4,r4,3
    9938:	2909883a 	add	r4,r5,r4
    993c:	20800015 	stw	r2,0(r4)
    9940:	20c00115 	stw	r3,4(r4)
void tilt_DiscreteStep (void)
{
	int index;

	/* for each of the supplied states */
	for (index = 0; index < tilt_STATE_SIZE; index++)
    9944:	e0bfff17 	ldw	r2,-4(fp)
    9948:	10800044 	addi	r2,r2,1
    994c:	e0bfff15 	stw	r2,-4(fp)
    9950:	e0bfff17 	ldw	r2,-4(fp)
    9954:	108000d0 	cmplti	r2,r2,3
    9958:	103fec1e 	bne	r2,zero,990c <tilt_DiscreteStep+0x18>
	{
		/* just a move of the new state */
		tilt_s [index] = tilt_R [index];
	}
	/* increment the simulation time */
	tilt_time += tilt_step_size;
    995c:	00800074 	movhi	r2,1
    9960:	10b8f904 	addi	r2,r2,-7196
    9964:	11400017 	ldw	r5,0(r2)
    9968:	11800117 	ldw	r6,4(r2)
    996c:	01000074 	movhi	r4,1
    9970:	21380d04 	addi	r4,r4,-8140
    9974:	20800017 	ldw	r2,0(r4)
    9978:	20c00117 	ldw	r3,4(r4)
    997c:	2809883a 	mov	r4,r5
    9980:	300b883a 	mov	r5,r6
    9984:	100d883a 	mov	r6,r2
    9988:	180f883a 	mov	r7,r3
    998c:	000a7e00 	call	a7e0 <__adddf3>
    9990:	1009883a 	mov	r4,r2
    9994:	180b883a 	mov	r5,r3
    9998:	2005883a 	mov	r2,r4
    999c:	2807883a 	mov	r3,r5
    99a0:	01000074 	movhi	r4,1
    99a4:	2138f904 	addi	r4,r4,-7196
    99a8:	20800015 	stw	r2,0(r4)
    99ac:	20c00115 	stw	r3,4(r4)

	tilt_major = 1;
    99b0:	00800074 	movhi	r2,1
    99b4:	10b80f44 	addi	r2,r2,-8131
    99b8:	00c00044 	movi	r3,1
    99bc:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	tilt_CalculateDynamic ();
    99c0:	0009bec0 	call	9bec <tilt_CalculateDynamic>
}
    99c4:	e037883a 	mov	sp,fp
    99c8:	dfc00117 	ldw	ra,4(sp)
    99cc:	df000017 	ldw	fp,0(sp)
    99d0:	dec00204 	addi	sp,sp,8
    99d4:	f800283a 	ret

000099d8 <tilt_ModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void tilt_ModelInitialize_parameters(void)
{
    99d8:	deffff04 	addi	sp,sp,-4
    99dc:	df000015 	stw	fp,0(sp)
    99e0:	d839883a 	mov	fp,sp
	/* set the parameters */
	tilt_P[0] = 0.0;		/* corrGain\K */
    99e4:	00800074 	movhi	r2,1
    99e8:	10bb5c04 	addi	r2,r2,-4752
    99ec:	10000015 	stw	zero,0(r2)
    99f0:	10000115 	stw	zero,4(r2)
	tilt_P[1] = 1.6;		/* PID1\kp */
    99f4:	00800074 	movhi	r2,1
    99f8:	10bb5c04 	addi	r2,r2,-4752
    99fc:	00e666b4 	movhi	r3,39322
    9a00:	18e66684 	addi	r3,r3,-26214
    9a04:	10c00215 	stw	r3,8(r2)
    9a08:	00cffeb4 	movhi	r3,16378
    9a0c:	18e66644 	addi	r3,r3,-26215
    9a10:	10c00315 	stw	r3,12(r2)
	tilt_P[2] = 0.05;		/* PID1\tauD */
    9a14:	00800074 	movhi	r2,1
    9a18:	10bb5c04 	addi	r2,r2,-4752
    9a1c:	00e666b4 	movhi	r3,39322
    9a20:	18e66684 	addi	r3,r3,-26214
    9a24:	10c00415 	stw	r3,16(r2)
    9a28:	00cfeab4 	movhi	r3,16298
    9a2c:	18e66644 	addi	r3,r3,-26215
    9a30:	10c00515 	stw	r3,20(r2)
	tilt_P[3] = 0.001;		/* PID1\beta */
    9a34:	00800074 	movhi	r2,1
    9a38:	10bb5c04 	addi	r2,r2,-4752
    9a3c:	00f4bcb4 	movhi	r3,54002
    9a40:	18ea7f04 	addi	r3,r3,-22020
    9a44:	10c00615 	stw	r3,24(r2)
    9a48:	00cfd434 	movhi	r3,16208
    9a4c:	18d89344 	addi	r3,r3,25165
    9a50:	10c00715 	stw	r3,28(r2)
	tilt_P[4] = 10.5;		/* PID1\tauI */
    9a54:	00800074 	movhi	r2,1
    9a58:	10bb5c04 	addi	r2,r2,-4752
    9a5c:	10000815 	stw	zero,32(r2)
    9a60:	00d00974 	movhi	r3,16421
    9a64:	10c00915 	stw	r3,36(r2)
	tilt_P[5] = -0.99;		/* SignalLimiter2\minimum */
    9a68:	00800074 	movhi	r2,1
    9a6c:	10bb5c04 	addi	r2,r2,-4752
    9a70:	00deb874 	movhi	r3,31457
    9a74:	18d1eb84 	addi	r3,r3,18350
    9a78:	10c00a15 	stw	r3,40(r2)
    9a7c:	00effc34 	movhi	r3,49136
    9a80:	18eb8504 	addi	r3,r3,-20972
    9a84:	10c00b15 	stw	r3,44(r2)
	tilt_P[6] = 0.99;		/* SignalLimiter2\maximum */
    9a88:	00800074 	movhi	r2,1
    9a8c:	10bb5c04 	addi	r2,r2,-4752
    9a90:	00deb874 	movhi	r3,31457
    9a94:	18d1eb84 	addi	r3,r3,18350
    9a98:	10c00c15 	stw	r3,48(r2)
    9a9c:	00cffc34 	movhi	r3,16368
    9aa0:	18eb8504 	addi	r3,r3,-20972
    9aa4:	10c00d15 	stw	r3,52(r2)

}
    9aa8:	e037883a 	mov	sp,fp
    9aac:	df000017 	ldw	fp,0(sp)
    9ab0:	dec00104 	addi	sp,sp,4
    9ab4:	f800283a 	ret

00009ab8 <tilt_ModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void tilt_ModelInitialize_initialvalues(void)
{
    9ab8:	deffff04 	addi	sp,sp,-4
    9abc:	df000015 	stw	fp,0(sp)
    9ac0:	d839883a 	mov	fp,sp
	/* set the initial values */
	tilt_I[0] = 0.0;		/* PID1\uD_previous_initial */
    9ac4:	00800074 	movhi	r2,1
    9ac8:	10bb3804 	addi	r2,r2,-4896
    9acc:	10000015 	stw	zero,0(r2)
    9ad0:	10000115 	stw	zero,4(r2)
	tilt_I[1] = 0.0;		/* PID1\error_previous_initial */
    9ad4:	00800074 	movhi	r2,1
    9ad8:	10bb3804 	addi	r2,r2,-4896
    9adc:	10000215 	stw	zero,8(r2)
    9ae0:	10000315 	stw	zero,12(r2)
	tilt_I[2] = 0.0;		/* PID1\uI_previous_initial */
    9ae4:	00800074 	movhi	r2,1
    9ae8:	10bb3804 	addi	r2,r2,-4896
    9aec:	10000415 	stw	zero,16(r2)
    9af0:	10000515 	stw	zero,20(r2)

}
    9af4:	e037883a 	mov	sp,fp
    9af8:	df000017 	ldw	fp,0(sp)
    9afc:	dec00104 	addi	sp,sp,4
    9b00:	f800283a 	ret

00009b04 <tilt_ModelInitialize_states>:

void tilt_ModelInitialize_states(void)
{
    9b04:	deffff04 	addi	sp,sp,-4
    9b08:	df000015 	stw	fp,0(sp)
    9b0c:	d839883a 	mov	fp,sp
	/* set the states */
	tilt_s[0] = tilt_I[0];		/* PID1\uD_previous */
    9b10:	01000074 	movhi	r4,1
    9b14:	213b3804 	addi	r4,r4,-4896
    9b18:	20800017 	ldw	r2,0(r4)
    9b1c:	20c00117 	ldw	r3,4(r4)
    9b20:	01000074 	movhi	r4,1
    9b24:	213b6a04 	addi	r4,r4,-4696
    9b28:	20800015 	stw	r2,0(r4)
    9b2c:	20c00115 	stw	r3,4(r4)
	tilt_s[1] = tilt_I[1];		/* PID1\error_previous */
    9b30:	01000074 	movhi	r4,1
    9b34:	213b3804 	addi	r4,r4,-4896
    9b38:	20800217 	ldw	r2,8(r4)
    9b3c:	20c00317 	ldw	r3,12(r4)
    9b40:	01000074 	movhi	r4,1
    9b44:	213b6a04 	addi	r4,r4,-4696
    9b48:	20800215 	stw	r2,8(r4)
    9b4c:	20c00315 	stw	r3,12(r4)
	tilt_s[2] = tilt_I[2];		/* PID1\uI_previous */
    9b50:	01000074 	movhi	r4,1
    9b54:	213b3804 	addi	r4,r4,-4896
    9b58:	20800417 	ldw	r2,16(r4)
    9b5c:	20c00517 	ldw	r3,20(r4)
    9b60:	01000074 	movhi	r4,1
    9b64:	213b6a04 	addi	r4,r4,-4696
    9b68:	20800415 	stw	r2,16(r4)
    9b6c:	20c00515 	stw	r3,20(r4)

}
    9b70:	e037883a 	mov	sp,fp
    9b74:	df000017 	ldw	fp,0(sp)
    9b78:	dec00104 	addi	sp,sp,4
    9b7c:	f800283a 	ret

00009b80 <tilt_ModelInitialize_variables>:

void tilt_ModelInitialize_variables(void)
{
    9b80:	defffe04 	addi	sp,sp,-8
    9b84:	dfc00115 	stw	ra,4(sp)
    9b88:	df000015 	stw	fp,0(sp)
    9b8c:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(tilt_V, 0, tilt_variables_size * sizeof(double));
    9b90:	01000074 	movhi	r4,1
    9b94:	213b4404 	addi	r4,r4,-4848
    9b98:	000b883a 	mov	r5,zero
    9b9c:	01801804 	movi	r6,96
    9ba0:	000b78c0 	call	b78c <memset>
}
    9ba4:	e037883a 	mov	sp,fp
    9ba8:	dfc00117 	ldw	ra,4(sp)
    9bac:	df000017 	ldw	fp,0(sp)
    9bb0:	dec00204 	addi	sp,sp,8
    9bb4:	f800283a 	ret

00009bb8 <tilt_ModelInitialize>:

/* this method is called before calculation is possible */
void tilt_ModelInitialize (void)
{
    9bb8:	defffe04 	addi	sp,sp,-8
    9bbc:	dfc00115 	stw	ra,4(sp)
    9bc0:	df000015 	stw	fp,0(sp)
    9bc4:	d839883a 	mov	fp,sp
	tilt_ModelInitialize_parameters();
    9bc8:	00099d80 	call	99d8 <tilt_ModelInitialize_parameters>
	tilt_ModelInitialize_variables();
    9bcc:	0009b800 	call	9b80 <tilt_ModelInitialize_variables>
	tilt_ModelInitialize_initialvalues();
    9bd0:	0009ab80 	call	9ab8 <tilt_ModelInitialize_initialvalues>
	tilt_ModelInitialize_states();
    9bd4:	0009b040 	call	9b04 <tilt_ModelInitialize_states>
}
    9bd8:	e037883a 	mov	sp,fp
    9bdc:	dfc00117 	ldw	ra,4(sp)
    9be0:	df000017 	ldw	fp,0(sp)
    9be4:	dec00204 	addi	sp,sp,8
    9be8:	f800283a 	ret

00009bec <tilt_CalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void tilt_CalculateDynamic (void)
{
    9bec:	defff804 	addi	sp,sp,-32
    9bf0:	dfc00715 	stw	ra,28(sp)
    9bf4:	df000615 	stw	fp,24(sp)
    9bf8:	dd400515 	stw	r21,20(sp)
    9bfc:	dd000415 	stw	r20,16(sp)
    9c00:	dcc00315 	stw	r19,12(sp)
    9c04:	dc800215 	stw	r18,8(sp)
    9c08:	dc400115 	stw	r17,4(sp)
    9c0c:	dc000015 	stw	r16,0(sp)
    9c10:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	tilt_V[3] = 1.0 / (tilt_step_size + tilt_P[2] * tilt_P[3]);
    9c14:	00800074 	movhi	r2,1
    9c18:	10bb5c04 	addi	r2,r2,-4752
    9c1c:	11400417 	ldw	r5,16(r2)
    9c20:	11800517 	ldw	r6,20(r2)
    9c24:	01000074 	movhi	r4,1
    9c28:	213b5c04 	addi	r4,r4,-4752
    9c2c:	20800617 	ldw	r2,24(r4)
    9c30:	20c00717 	ldw	r3,28(r4)
    9c34:	2809883a 	mov	r4,r5
    9c38:	300b883a 	mov	r5,r6
    9c3c:	100d883a 	mov	r6,r2
    9c40:	180f883a 	mov	r7,r3
    9c44:	000a8940 	call	a894 <__muldf3>
    9c48:	100f883a 	mov	r7,r2
    9c4c:	1811883a 	mov	r8,r3
    9c50:	380b883a 	mov	r5,r7
    9c54:	400d883a 	mov	r6,r8
    9c58:	d0a00a17 	ldw	r2,-32728(gp)
    9c5c:	01000074 	movhi	r4,1
    9c60:	21380e04 	addi	r4,r4,-8136
    9c64:	20c00017 	ldw	r3,0(r4)
    9c68:	2809883a 	mov	r4,r5
    9c6c:	300b883a 	mov	r5,r6
    9c70:	100d883a 	mov	r6,r2
    9c74:	180f883a 	mov	r7,r3
    9c78:	000a7e00 	call	a7e0 <__adddf3>
    9c7c:	1009883a 	mov	r4,r2
    9c80:	180b883a 	mov	r5,r3
    9c84:	2005883a 	mov	r2,r4
    9c88:	2807883a 	mov	r3,r5
    9c8c:	0009883a 	mov	r4,zero
    9c90:	014ffc34 	movhi	r5,16368
    9c94:	100d883a 	mov	r6,r2
    9c98:	180f883a 	mov	r7,r3
    9c9c:	000ab780 	call	ab78 <__divdf3>
    9ca0:	1009883a 	mov	r4,r2
    9ca4:	180b883a 	mov	r5,r3
    9ca8:	2005883a 	mov	r2,r4
    9cac:	2807883a 	mov	r3,r5
    9cb0:	01000074 	movhi	r4,1
    9cb4:	213b4404 	addi	r4,r4,-4848
    9cb8:	20800615 	stw	r2,24(r4)
    9cbc:	20c00715 	stw	r3,28(r4)

	/* corrGain\input = corr; */
	tilt_V[0] = tilt_V[8];
    9cc0:	01000074 	movhi	r4,1
    9cc4:	213b4404 	addi	r4,r4,-4848
    9cc8:	20801017 	ldw	r2,64(r4)
    9ccc:	20c01117 	ldw	r3,68(r4)
    9cd0:	01000074 	movhi	r4,1
    9cd4:	213b4404 	addi	r4,r4,-4848
    9cd8:	20800015 	stw	r2,0(r4)
    9cdc:	20c00115 	stw	r3,4(r4)

	/* PlusMinus2\plus1 = in; */
	tilt_V[5] = tilt_V[9];
    9ce0:	01000074 	movhi	r4,1
    9ce4:	213b4404 	addi	r4,r4,-4848
    9ce8:	20801217 	ldw	r2,72(r4)
    9cec:	20c01317 	ldw	r3,76(r4)
    9cf0:	01000074 	movhi	r4,1
    9cf4:	213b4404 	addi	r4,r4,-4848
    9cf8:	20800a15 	stw	r2,40(r4)
    9cfc:	20c00b15 	stw	r3,44(r4)

	/* PlusMinus2\minus1 = position; */
	tilt_V[6] = tilt_V[10];
    9d00:	01000074 	movhi	r4,1
    9d04:	213b4404 	addi	r4,r4,-4848
    9d08:	20801417 	ldw	r2,80(r4)
    9d0c:	20c01517 	ldw	r3,84(r4)
    9d10:	01000074 	movhi	r4,1
    9d14:	213b4404 	addi	r4,r4,-4848
    9d18:	20800c15 	stw	r2,48(r4)
    9d1c:	20c00d15 	stw	r3,52(r4)

	/* corrGain\output = corrGain\K * corrGain\input; */
	tilt_V[1] = tilt_P[0] * tilt_V[0];
    9d20:	00800074 	movhi	r2,1
    9d24:	10bb5c04 	addi	r2,r2,-4752
    9d28:	11400017 	ldw	r5,0(r2)
    9d2c:	11800117 	ldw	r6,4(r2)
    9d30:	01000074 	movhi	r4,1
    9d34:	213b4404 	addi	r4,r4,-4848
    9d38:	20800017 	ldw	r2,0(r4)
    9d3c:	20c00117 	ldw	r3,4(r4)
    9d40:	2809883a 	mov	r4,r5
    9d44:	300b883a 	mov	r5,r6
    9d48:	100d883a 	mov	r6,r2
    9d4c:	180f883a 	mov	r7,r3
    9d50:	000a8940 	call	a894 <__muldf3>
    9d54:	1009883a 	mov	r4,r2
    9d58:	180b883a 	mov	r5,r3
    9d5c:	2005883a 	mov	r2,r4
    9d60:	2807883a 	mov	r3,r5
    9d64:	01000074 	movhi	r4,1
    9d68:	213b4404 	addi	r4,r4,-4848
    9d6c:	20800215 	stw	r2,8(r4)
    9d70:	20c00315 	stw	r3,12(r4)

	/* PID1\error = PlusMinus2\plus1 - PlusMinus2\minus1; */
	tilt_R[1] = tilt_V[5] - tilt_V[6];
    9d74:	00800074 	movhi	r2,1
    9d78:	10bb4404 	addi	r2,r2,-4848
    9d7c:	11400a17 	ldw	r5,40(r2)
    9d80:	11800b17 	ldw	r6,44(r2)
    9d84:	01000074 	movhi	r4,1
    9d88:	213b4404 	addi	r4,r4,-4848
    9d8c:	20800c17 	ldw	r2,48(r4)
    9d90:	20c00d17 	ldw	r3,52(r4)
    9d94:	2809883a 	mov	r4,r5
    9d98:	300b883a 	mov	r5,r6
    9d9c:	100d883a 	mov	r6,r2
    9da0:	180f883a 	mov	r7,r3
    9da4:	000a8340 	call	a834 <__subdf3>
    9da8:	1009883a 	mov	r4,r2
    9dac:	180b883a 	mov	r5,r3
    9db0:	2005883a 	mov	r2,r4
    9db4:	2807883a 	mov	r3,r5
    9db8:	01000074 	movhi	r4,1
    9dbc:	213b3e04 	addi	r4,r4,-4872
    9dc0:	20800215 	stw	r2,8(r4)
    9dc4:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	tilt_R[0] = tilt_V[3] * (((tilt_P[2] * tilt_s[0]) * tilt_P[3] + (tilt_P[2] * tilt_P[1]) * (tilt_R[1] - tilt_s[1])) + (tilt_step_size * tilt_P[1]) * tilt_R[1]);
    9dc8:	00800074 	movhi	r2,1
    9dcc:	10bb4404 	addi	r2,r2,-4848
    9dd0:	14000617 	ldw	r16,24(r2)
    9dd4:	14400717 	ldw	r17,28(r2)
    9dd8:	00800074 	movhi	r2,1
    9ddc:	10bb5c04 	addi	r2,r2,-4752
    9de0:	11400417 	ldw	r5,16(r2)
    9de4:	11800517 	ldw	r6,20(r2)
    9de8:	01000074 	movhi	r4,1
    9dec:	213b6a04 	addi	r4,r4,-4696
    9df0:	20800017 	ldw	r2,0(r4)
    9df4:	20c00117 	ldw	r3,4(r4)
    9df8:	2809883a 	mov	r4,r5
    9dfc:	300b883a 	mov	r5,r6
    9e00:	100d883a 	mov	r6,r2
    9e04:	180f883a 	mov	r7,r3
    9e08:	000a8940 	call	a894 <__muldf3>
    9e0c:	100f883a 	mov	r7,r2
    9e10:	1811883a 	mov	r8,r3
    9e14:	380b883a 	mov	r5,r7
    9e18:	400d883a 	mov	r6,r8
    9e1c:	01000074 	movhi	r4,1
    9e20:	213b5c04 	addi	r4,r4,-4752
    9e24:	20800617 	ldw	r2,24(r4)
    9e28:	20c00717 	ldw	r3,28(r4)
    9e2c:	2809883a 	mov	r4,r5
    9e30:	300b883a 	mov	r5,r6
    9e34:	100d883a 	mov	r6,r2
    9e38:	180f883a 	mov	r7,r3
    9e3c:	000a8940 	call	a894 <__muldf3>
    9e40:	1009883a 	mov	r4,r2
    9e44:	180b883a 	mov	r5,r3
    9e48:	2025883a 	mov	r18,r4
    9e4c:	2827883a 	mov	r19,r5
    9e50:	00800074 	movhi	r2,1
    9e54:	10bb5c04 	addi	r2,r2,-4752
    9e58:	11400417 	ldw	r5,16(r2)
    9e5c:	11800517 	ldw	r6,20(r2)
    9e60:	01000074 	movhi	r4,1
    9e64:	213b5c04 	addi	r4,r4,-4752
    9e68:	20800217 	ldw	r2,8(r4)
    9e6c:	20c00317 	ldw	r3,12(r4)
    9e70:	2809883a 	mov	r4,r5
    9e74:	300b883a 	mov	r5,r6
    9e78:	100d883a 	mov	r6,r2
    9e7c:	180f883a 	mov	r7,r3
    9e80:	000a8940 	call	a894 <__muldf3>
    9e84:	1009883a 	mov	r4,r2
    9e88:	180b883a 	mov	r5,r3
    9e8c:	2029883a 	mov	r20,r4
    9e90:	282b883a 	mov	r21,r5
    9e94:	00800074 	movhi	r2,1
    9e98:	10bb3e04 	addi	r2,r2,-4872
    9e9c:	11400217 	ldw	r5,8(r2)
    9ea0:	11800317 	ldw	r6,12(r2)
    9ea4:	01000074 	movhi	r4,1
    9ea8:	213b6a04 	addi	r4,r4,-4696
    9eac:	20800217 	ldw	r2,8(r4)
    9eb0:	20c00317 	ldw	r3,12(r4)
    9eb4:	2809883a 	mov	r4,r5
    9eb8:	300b883a 	mov	r5,r6
    9ebc:	100d883a 	mov	r6,r2
    9ec0:	180f883a 	mov	r7,r3
    9ec4:	000a8340 	call	a834 <__subdf3>
    9ec8:	1009883a 	mov	r4,r2
    9ecc:	180b883a 	mov	r5,r3
    9ed0:	2005883a 	mov	r2,r4
    9ed4:	2807883a 	mov	r3,r5
    9ed8:	a009883a 	mov	r4,r20
    9edc:	a80b883a 	mov	r5,r21
    9ee0:	100d883a 	mov	r6,r2
    9ee4:	180f883a 	mov	r7,r3
    9ee8:	000a8940 	call	a894 <__muldf3>
    9eec:	1009883a 	mov	r4,r2
    9ef0:	180b883a 	mov	r5,r3
    9ef4:	2005883a 	mov	r2,r4
    9ef8:	2807883a 	mov	r3,r5
    9efc:	9009883a 	mov	r4,r18
    9f00:	980b883a 	mov	r5,r19
    9f04:	100d883a 	mov	r6,r2
    9f08:	180f883a 	mov	r7,r3
    9f0c:	000a7e00 	call	a7e0 <__adddf3>
    9f10:	1009883a 	mov	r4,r2
    9f14:	180b883a 	mov	r5,r3
    9f18:	2025883a 	mov	r18,r4
    9f1c:	2827883a 	mov	r19,r5
    9f20:	00800074 	movhi	r2,1
    9f24:	10bb5c04 	addi	r2,r2,-4752
    9f28:	11400217 	ldw	r5,8(r2)
    9f2c:	11800317 	ldw	r6,12(r2)
    9f30:	d0a00a17 	ldw	r2,-32728(gp)
    9f34:	01000074 	movhi	r4,1
    9f38:	21380e04 	addi	r4,r4,-8136
    9f3c:	20c00017 	ldw	r3,0(r4)
    9f40:	2809883a 	mov	r4,r5
    9f44:	300b883a 	mov	r5,r6
    9f48:	100d883a 	mov	r6,r2
    9f4c:	180f883a 	mov	r7,r3
    9f50:	000a8940 	call	a894 <__muldf3>
    9f54:	100f883a 	mov	r7,r2
    9f58:	1811883a 	mov	r8,r3
    9f5c:	380b883a 	mov	r5,r7
    9f60:	400d883a 	mov	r6,r8
    9f64:	01000074 	movhi	r4,1
    9f68:	213b3e04 	addi	r4,r4,-4872
    9f6c:	20800217 	ldw	r2,8(r4)
    9f70:	20c00317 	ldw	r3,12(r4)
    9f74:	2809883a 	mov	r4,r5
    9f78:	300b883a 	mov	r5,r6
    9f7c:	100d883a 	mov	r6,r2
    9f80:	180f883a 	mov	r7,r3
    9f84:	000a8940 	call	a894 <__muldf3>
    9f88:	1009883a 	mov	r4,r2
    9f8c:	180b883a 	mov	r5,r3
    9f90:	2005883a 	mov	r2,r4
    9f94:	2807883a 	mov	r3,r5
    9f98:	9009883a 	mov	r4,r18
    9f9c:	980b883a 	mov	r5,r19
    9fa0:	100d883a 	mov	r6,r2
    9fa4:	180f883a 	mov	r7,r3
    9fa8:	000a7e00 	call	a7e0 <__adddf3>
    9fac:	1009883a 	mov	r4,r2
    9fb0:	180b883a 	mov	r5,r3
    9fb4:	2005883a 	mov	r2,r4
    9fb8:	2807883a 	mov	r3,r5
    9fbc:	8009883a 	mov	r4,r16
    9fc0:	880b883a 	mov	r5,r17
    9fc4:	100d883a 	mov	r6,r2
    9fc8:	180f883a 	mov	r7,r3
    9fcc:	000a8940 	call	a894 <__muldf3>
    9fd0:	1009883a 	mov	r4,r2
    9fd4:	180b883a 	mov	r5,r3
    9fd8:	2005883a 	mov	r2,r4
    9fdc:	2807883a 	mov	r3,r5
    9fe0:	01000074 	movhi	r4,1
    9fe4:	213b3e04 	addi	r4,r4,-4872
    9fe8:	20800015 	stw	r2,0(r4)
    9fec:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	tilt_R[2] = tilt_s[2] + (tilt_step_size * tilt_R[0]) / tilt_P[4];
    9ff0:	00800074 	movhi	r2,1
    9ff4:	10bb6a04 	addi	r2,r2,-4696
    9ff8:	14000417 	ldw	r16,16(r2)
    9ffc:	14400517 	ldw	r17,20(r2)
    a000:	00800074 	movhi	r2,1
    a004:	10bb3e04 	addi	r2,r2,-4872
    a008:	11400017 	ldw	r5,0(r2)
    a00c:	11800117 	ldw	r6,4(r2)
    a010:	d0a00a17 	ldw	r2,-32728(gp)
    a014:	01000074 	movhi	r4,1
    a018:	21380e04 	addi	r4,r4,-8136
    a01c:	20c00017 	ldw	r3,0(r4)
    a020:	2809883a 	mov	r4,r5
    a024:	300b883a 	mov	r5,r6
    a028:	100d883a 	mov	r6,r2
    a02c:	180f883a 	mov	r7,r3
    a030:	000a8940 	call	a894 <__muldf3>
    a034:	100f883a 	mov	r7,r2
    a038:	1811883a 	mov	r8,r3
    a03c:	380b883a 	mov	r5,r7
    a040:	400d883a 	mov	r6,r8
    a044:	01000074 	movhi	r4,1
    a048:	213b5c04 	addi	r4,r4,-4752
    a04c:	20800817 	ldw	r2,32(r4)
    a050:	20c00917 	ldw	r3,36(r4)
    a054:	2809883a 	mov	r4,r5
    a058:	300b883a 	mov	r5,r6
    a05c:	100d883a 	mov	r6,r2
    a060:	180f883a 	mov	r7,r3
    a064:	000ab780 	call	ab78 <__divdf3>
    a068:	1009883a 	mov	r4,r2
    a06c:	180b883a 	mov	r5,r3
    a070:	2005883a 	mov	r2,r4
    a074:	2807883a 	mov	r3,r5
    a078:	8009883a 	mov	r4,r16
    a07c:	880b883a 	mov	r5,r17
    a080:	100d883a 	mov	r6,r2
    a084:	180f883a 	mov	r7,r3
    a088:	000a7e00 	call	a7e0 <__adddf3>
    a08c:	1009883a 	mov	r4,r2
    a090:	180b883a 	mov	r5,r3
    a094:	2005883a 	mov	r2,r4
    a098:	2807883a 	mov	r3,r5
    a09c:	01000074 	movhi	r4,1
    a0a0:	213b3e04 	addi	r4,r4,-4872
    a0a4:	20800415 	stw	r2,16(r4)
    a0a8:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	tilt_V[2] = tilt_R[2] + tilt_R[0];
    a0ac:	00800074 	movhi	r2,1
    a0b0:	10bb3e04 	addi	r2,r2,-4872
    a0b4:	11400417 	ldw	r5,16(r2)
    a0b8:	11800517 	ldw	r6,20(r2)
    a0bc:	01000074 	movhi	r4,1
    a0c0:	213b3e04 	addi	r4,r4,-4872
    a0c4:	20800017 	ldw	r2,0(r4)
    a0c8:	20c00117 	ldw	r3,4(r4)
    a0cc:	2809883a 	mov	r4,r5
    a0d0:	300b883a 	mov	r5,r6
    a0d4:	100d883a 	mov	r6,r2
    a0d8:	180f883a 	mov	r7,r3
    a0dc:	000a7e00 	call	a7e0 <__adddf3>
    a0e0:	1009883a 	mov	r4,r2
    a0e4:	180b883a 	mov	r5,r3
    a0e8:	2005883a 	mov	r2,r4
    a0ec:	2807883a 	mov	r3,r5
    a0f0:	01000074 	movhi	r4,1
    a0f4:	213b4404 	addi	r4,r4,-4848
    a0f8:	20800415 	stw	r2,16(r4)
    a0fc:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	tilt_V[4] = tilt_V[1] + tilt_V[2];
    a100:	00800074 	movhi	r2,1
    a104:	10bb4404 	addi	r2,r2,-4848
    a108:	11400217 	ldw	r5,8(r2)
    a10c:	11800317 	ldw	r6,12(r2)
    a110:	01000074 	movhi	r4,1
    a114:	213b4404 	addi	r4,r4,-4848
    a118:	20800417 	ldw	r2,16(r4)
    a11c:	20c00517 	ldw	r3,20(r4)
    a120:	2809883a 	mov	r4,r5
    a124:	300b883a 	mov	r5,r6
    a128:	100d883a 	mov	r6,r2
    a12c:	180f883a 	mov	r7,r3
    a130:	000a7e00 	call	a7e0 <__adddf3>
    a134:	1009883a 	mov	r4,r2
    a138:	180b883a 	mov	r5,r3
    a13c:	2005883a 	mov	r2,r4
    a140:	2807883a 	mov	r3,r5
    a144:	01000074 	movhi	r4,1
    a148:	213b4404 	addi	r4,r4,-4848
    a14c:	20800815 	stw	r2,32(r4)
    a150:	20c00915 	stw	r3,36(r4)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	tilt_V[7] = ((tilt_V[4] < tilt_P[5]) ? 
    a154:	00800074 	movhi	r2,1
    a158:	10bb4404 	addi	r2,r2,-4848
    a15c:	11400817 	ldw	r5,32(r2)
    a160:	11800917 	ldw	r6,36(r2)
    a164:	01000074 	movhi	r4,1
    a168:	213b5c04 	addi	r4,r4,-4752
    a16c:	20800a17 	ldw	r2,40(r4)
    a170:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		tilt_P[5]
	:
    a174:	2809883a 	mov	r4,r5
    a178:	300b883a 	mov	r5,r6
    a17c:	100d883a 	mov	r6,r2
    a180:	180f883a 	mov	r7,r3
    a184:	000adf40 	call	adf4 <__ltdf2>
    a188:	1000050e 	bge	r2,zero,a1a0 <tilt_CalculateDynamic+0x5b4>
    a18c:	01000074 	movhi	r4,1
    a190:	213b5c04 	addi	r4,r4,-4752
    a194:	20800a17 	ldw	r2,40(r4)
    a198:	20c00b17 	ldw	r3,44(r4)
    a19c:	00001906 	br	a204 <tilt_CalculateDynamic+0x618>
		/* (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) */
		((tilt_V[4] > tilt_P[6]) ? 
    a1a0:	00800074 	movhi	r2,1
    a1a4:	10bb4404 	addi	r2,r2,-4848
    a1a8:	11400817 	ldw	r5,32(r2)
    a1ac:	11800917 	ldw	r6,36(r2)
    a1b0:	01000074 	movhi	r4,1
    a1b4:	213b5c04 	addi	r4,r4,-4752
    a1b8:	20800c17 	ldw	r2,48(r4)
    a1bc:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			tilt_P[6]
		:
    a1c0:	2809883a 	mov	r4,r5
    a1c4:	300b883a 	mov	r5,r6
    a1c8:	100d883a 	mov	r6,r2
    a1cc:	180f883a 	mov	r7,r3
    a1d0:	000ad2c0 	call	ad2c <__gtdf2>
    a1d4:	0080050e 	bge	zero,r2,a1ec <tilt_CalculateDynamic+0x600>
    a1d8:	00800074 	movhi	r2,1
    a1dc:	10bb5c04 	addi	r2,r2,-4752
    a1e0:	11000c17 	ldw	r4,48(r2)
    a1e4:	11400d17 	ldw	r5,52(r2)
    a1e8:	00000406 	br	a1fc <tilt_CalculateDynamic+0x610>
    a1ec:	00800074 	movhi	r2,1
    a1f0:	10bb4404 	addi	r2,r2,-4848
    a1f4:	11000817 	ldw	r4,32(r2)
    a1f8:	11400917 	ldw	r5,36(r2)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	tilt_V[7] = ((tilt_V[4] < tilt_P[5]) ? 
		/* SignalLimiter2\minimum */
		tilt_P[5]
	:
    a1fc:	2005883a 	mov	r2,r4
    a200:	2807883a 	mov	r3,r5

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	tilt_V[4] = tilt_V[1] + tilt_V[2];

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	tilt_V[7] = ((tilt_V[4] < tilt_P[5]) ? 
    a204:	01000074 	movhi	r4,1
    a208:	213b4404 	addi	r4,r4,-4848
    a20c:	20800e15 	stw	r2,56(r4)
    a210:	20c00f15 	stw	r3,60(r4)
		)
	);


	/* increment the step counter */
	tilt_steps++;
    a214:	d0a0f817 	ldw	r2,-31776(gp)
    a218:	10800044 	addi	r2,r2,1
    a21c:	d0a0f815 	stw	r2,-31776(gp)
}
    a220:	e037883a 	mov	sp,fp
    a224:	dfc00717 	ldw	ra,28(sp)
    a228:	df000617 	ldw	fp,24(sp)
    a22c:	dd400517 	ldw	r21,20(sp)
    a230:	dd000417 	ldw	r20,16(sp)
    a234:	dcc00317 	ldw	r19,12(sp)
    a238:	dc800217 	ldw	r18,8(sp)
    a23c:	dc400117 	ldw	r17,4(sp)
    a240:	dc000017 	ldw	r16,0(sp)
    a244:	dec00804 	addi	sp,sp,32
    a248:	f800283a 	ret

0000a24c <tilt_CalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void tilt_CalculateOutput (void)
{
    a24c:	deffff04 	addi	sp,sp,-4
    a250:	df000015 	stw	fp,0(sp)
    a254:	d839883a 	mov	fp,sp
	/* out = SignalLimiter2\output; */
	tilt_V[11] = tilt_V[7];
    a258:	01000074 	movhi	r4,1
    a25c:	213b4404 	addi	r4,r4,-4848
    a260:	20800e17 	ldw	r2,56(r4)
    a264:	20c00f17 	ldw	r3,60(r4)
    a268:	01000074 	movhi	r4,1
    a26c:	213b4404 	addi	r4,r4,-4848
    a270:	20801615 	stw	r2,88(r4)
    a274:	20c01715 	stw	r3,92(r4)

}
    a278:	e037883a 	mov	sp,fp
    a27c:	df000017 	ldw	fp,0(sp)
    a280:	dec00104 	addi	sp,sp,4
    a284:	f800283a 	ret

0000a288 <tilt_CopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void tilt_CopyInputsToVariables (double *u)
{
    a288:	defffe04 	addi	sp,sp,-8
    a28c:	df000115 	stw	fp,4(sp)
    a290:	df000104 	addi	fp,sp,4
    a294:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	tilt_V[8] = u[0];		/* corr */
    a298:	e13fff17 	ldw	r4,-4(fp)
    a29c:	20800017 	ldw	r2,0(r4)
    a2a0:	20c00117 	ldw	r3,4(r4)
    a2a4:	01000074 	movhi	r4,1
    a2a8:	213b4404 	addi	r4,r4,-4848
    a2ac:	20801015 	stw	r2,64(r4)
    a2b0:	20c01115 	stw	r3,68(r4)
	tilt_V[9] = u[1];		/* in */
    a2b4:	e13fff17 	ldw	r4,-4(fp)
    a2b8:	20800217 	ldw	r2,8(r4)
    a2bc:	20c00317 	ldw	r3,12(r4)
    a2c0:	01000074 	movhi	r4,1
    a2c4:	213b4404 	addi	r4,r4,-4848
    a2c8:	20801215 	stw	r2,72(r4)
    a2cc:	20c01315 	stw	r3,76(r4)
	tilt_V[10] = u[2];		/* position */
    a2d0:	e13fff17 	ldw	r4,-4(fp)
    a2d4:	20800417 	ldw	r2,16(r4)
    a2d8:	20c00517 	ldw	r3,20(r4)
    a2dc:	01000074 	movhi	r4,1
    a2e0:	213b4404 	addi	r4,r4,-4848
    a2e4:	20801415 	stw	r2,80(r4)
    a2e8:	20c01515 	stw	r3,84(r4)

}
    a2ec:	e037883a 	mov	sp,fp
    a2f0:	df000017 	ldw	fp,0(sp)
    a2f4:	dec00104 	addi	sp,sp,4
    a2f8:	f800283a 	ret

0000a2fc <tilt_CopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void tilt_CopyVariablesToOutputs (double *y)
{
    a2fc:	defffe04 	addi	sp,sp,-8
    a300:	df000115 	stw	fp,4(sp)
    a304:	df000104 	addi	fp,sp,4
    a308:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	tilt_V[11];		/* out */
    a30c:	01000074 	movhi	r4,1
    a310:	213b4404 	addi	r4,r4,-4848
    a314:	20801617 	ldw	r2,88(r4)
    a318:	20c01717 	ldw	r3,92(r4)
    a31c:	e13fff17 	ldw	r4,-4(fp)
    a320:	20800015 	stw	r2,0(r4)
    a324:	20c00115 	stw	r3,4(r4)

}
    a328:	e037883a 	mov	sp,fp
    a32c:	df000017 	ldw	fp,0(sp)
    a330:	dec00104 	addi	sp,sp,4
    a334:	f800283a 	ret

0000a338 <tilt_InitializeSubmodel>:

/* The initialization function for submodel */
void tilt_InitializeSubmodel (double *u, double *y, double t)
{
    a338:	defffa04 	addi	sp,sp,-24
    a33c:	dfc00515 	stw	ra,20(sp)
    a340:	df000415 	stw	fp,16(sp)
    a344:	df000404 	addi	fp,sp,16
    a348:	e13ffc15 	stw	r4,-16(fp)
    a34c:	e17ffd15 	stw	r5,-12(fp)
    a350:	e1bffe15 	stw	r6,-8(fp)
    a354:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	tilt_initialize = 1;
    a358:	00800074 	movhi	r2,1
    a35c:	10b80f04 	addi	r2,r2,-8132
    a360:	00c00044 	movi	r3,1
    a364:	10c00005 	stb	r3,0(r2)
	tilt_steps = 0;
    a368:	00800074 	movhi	r2,1
    a36c:	10b8fb04 	addi	r2,r2,-7188
    a370:	10000015 	stw	zero,0(r2)
	tilt_ModelInitialize ();
    a374:	0009bb80 	call	9bb8 <tilt_ModelInitialize>
	tilt_DiscreteInitialize ();
    a378:	00098c80 	call	98c8 <tilt_DiscreteInitialize>

	/* Copy the inputs */
	tilt_time = t;
    a37c:	00800074 	movhi	r2,1
    a380:	10b8f904 	addi	r2,r2,-7196
    a384:	e0fffe17 	ldw	r3,-8(fp)
    a388:	10c00015 	stw	r3,0(r2)
    a38c:	e0ffff17 	ldw	r3,-4(fp)
    a390:	10c00115 	stw	r3,4(r2)
	tilt_CopyInputsToVariables (u);
    a394:	e13ffc17 	ldw	r4,-16(fp)
    a398:	000a2880 	call	a288 <tilt_CopyInputsToVariables>

	/* Calculate the model for the first time */
	tilt_CalculateDynamic ();
    a39c:	0009bec0 	call	9bec <tilt_CalculateDynamic>
	tilt_CalculateOutput ();
    a3a0:	000a24c0 	call	a24c <tilt_CalculateOutput>

	/* Set the outputs */
	tilt_CopyVariablesToOutputs (y);
    a3a4:	e13ffd17 	ldw	r4,-12(fp)
    a3a8:	000a2fc0 	call	a2fc <tilt_CopyVariablesToOutputs>

	/* End of initialization phase */
	tilt_initialize = 0;
    a3ac:	00800074 	movhi	r2,1
    a3b0:	10b80f04 	addi	r2,r2,-8132
    a3b4:	10000005 	stb	zero,0(r2)
}
    a3b8:	e037883a 	mov	sp,fp
    a3bc:	dfc00117 	ldw	ra,4(sp)
    a3c0:	df000017 	ldw	fp,0(sp)
    a3c4:	dec00204 	addi	sp,sp,8
    a3c8:	f800283a 	ret

0000a3cc <tilt_CalculateSubmodel>:

/* The function that calculates the submodel */
void tilt_CalculateSubmodel (double *u, double *y, double t)
{
    a3cc:	defffa04 	addi	sp,sp,-24
    a3d0:	dfc00515 	stw	ra,20(sp)
    a3d4:	df000415 	stw	fp,16(sp)
    a3d8:	df000404 	addi	fp,sp,16
    a3dc:	e13ffc15 	stw	r4,-16(fp)
    a3e0:	e17ffd15 	stw	r5,-12(fp)
    a3e4:	e1bffe15 	stw	r6,-8(fp)
    a3e8:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	tilt_time = t;
    a3ec:	00800074 	movhi	r2,1
    a3f0:	10b8f904 	addi	r2,r2,-7196
    a3f4:	e0fffe17 	ldw	r3,-8(fp)
    a3f8:	10c00015 	stw	r3,0(r2)
    a3fc:	e0ffff17 	ldw	r3,-4(fp)
    a400:	10c00115 	stw	r3,4(r2)
	tilt_CopyInputsToVariables (u);
    a404:	e13ffc17 	ldw	r4,-16(fp)
    a408:	000a2880 	call	a288 <tilt_CopyInputsToVariables>

	/* Calculate the model */
	tilt_DiscreteStep ();
    a40c:	00098f40 	call	98f4 <tilt_DiscreteStep>
	tilt_CalculateOutput ();
    a410:	000a24c0 	call	a24c <tilt_CalculateOutput>

	/* Copy the outputs */
	tilt_CopyVariablesToOutputs (y);
    a414:	e13ffd17 	ldw	r4,-12(fp)
    a418:	000a2fc0 	call	a2fc <tilt_CopyVariablesToOutputs>
}
    a41c:	e037883a 	mov	sp,fp
    a420:	dfc00117 	ldw	ra,4(sp)
    a424:	df000017 	ldw	fp,0(sp)
    a428:	dec00204 	addi	sp,sp,8
    a42c:	f800283a 	ret

0000a430 <tilt_TerminateSubmodel>:

/* The termination function for submodel */
void tilt_TerminateSubmodel (double *u, double *y, double t)
{
    a430:	defffa04 	addi	sp,sp,-24
    a434:	dfc00515 	stw	ra,20(sp)
    a438:	df000415 	stw	fp,16(sp)
    a43c:	df000404 	addi	fp,sp,16
    a440:	e13ffc15 	stw	r4,-16(fp)
    a444:	e17ffd15 	stw	r5,-12(fp)
    a448:	e1bffe15 	stw	r6,-8(fp)
    a44c:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	tilt_time = t;
    a450:	00800074 	movhi	r2,1
    a454:	10b8f904 	addi	r2,r2,-7196
    a458:	e0fffe17 	ldw	r3,-8(fp)
    a45c:	10c00015 	stw	r3,0(r2)
    a460:	e0ffff17 	ldw	r3,-4(fp)
    a464:	10c00115 	stw	r3,4(r2)
	tilt_CopyInputsToVariables (u);
    a468:	e13ffc17 	ldw	r4,-16(fp)
    a46c:	000a2880 	call	a288 <tilt_CopyInputsToVariables>

	/* Set the outputs */
	tilt_CopyVariablesToOutputs (y);
    a470:	e13ffd17 	ldw	r4,-12(fp)
    a474:	000a2fc0 	call	a2fc <tilt_CopyVariablesToOutputs>
}
    a478:	e037883a 	mov	sp,fp
    a47c:	dfc00117 	ldw	ra,4(sp)
    a480:	df000017 	ldw	fp,0(sp)
    a484:	dec00204 	addi	sp,sp,8
    a488:	f800283a 	ret

0000a48c <_fpadd_parts>:
    a48c:	2005883a 	mov	r2,r4
    a490:	21000017 	ldw	r4,0(r4)
    a494:	01c00044 	movi	r7,1
    a498:	3900622e 	bgeu	r7,r4,a624 <_fpadd_parts+0x198>
    a49c:	28c00017 	ldw	r3,0(r5)
    a4a0:	38c05f2e 	bgeu	r7,r3,a620 <_fpadd_parts+0x194>
    a4a4:	01c00104 	movi	r7,4
    a4a8:	21c0c626 	beq	r4,r7,a7c4 <_fpadd_parts+0x338>
    a4ac:	19c05c26 	beq	r3,r7,a620 <_fpadd_parts+0x194>
    a4b0:	01c00084 	movi	r7,2
    a4b4:	19c06b26 	beq	r3,r7,a664 <_fpadd_parts+0x1d8>
    a4b8:	21c05926 	beq	r4,r7,a620 <_fpadd_parts+0x194>
    a4bc:	11c00217 	ldw	r7,8(r2)
    a4c0:	2ac00217 	ldw	r11,8(r5)
    a4c4:	13000317 	ldw	r12,12(r2)
    a4c8:	13400417 	ldw	r13,16(r2)
    a4cc:	3ac9c83a 	sub	r4,r7,r11
    a4d0:	2a000317 	ldw	r8,12(r5)
    a4d4:	2a400417 	ldw	r9,16(r5)
    a4d8:	2015883a 	mov	r10,r4
    a4dc:	20007516 	blt	r4,zero,a6b4 <_fpadd_parts+0x228>
    a4e0:	00c00fc4 	movi	r3,63
    a4e4:	1a805016 	blt	r3,r10,a628 <_fpadd_parts+0x19c>
    a4e8:	0100870e 	bge	zero,r4,a708 <_fpadd_parts+0x27c>
    a4ec:	50fff804 	addi	r3,r10,-32
    a4f0:	18009916 	blt	r3,zero,a758 <_fpadd_parts+0x2cc>
    a4f4:	48d6d83a 	srl	r11,r9,r3
    a4f8:	001d883a 	mov	r14,zero
    a4fc:	18009e16 	blt	r3,zero,a778 <_fpadd_parts+0x2ec>
    a500:	01000044 	movi	r4,1
    a504:	20c6983a 	sll	r3,r4,r3
    a508:	0015883a 	mov	r10,zero
    a50c:	513fffc4 	addi	r4,r10,-1
    a510:	2295403a 	cmpgeu	r10,r4,r10
    a514:	1a87c83a 	sub	r3,r3,r10
    a518:	1a52703a 	and	r9,r3,r9
    a51c:	2210703a 	and	r8,r4,r8
    a520:	4250b03a 	or	r8,r8,r9
    a524:	4010c03a 	cmpne	r8,r8,zero
    a528:	42d0b03a 	or	r8,r8,r11
    a52c:	7013883a 	mov	r9,r14
    a530:	11000117 	ldw	r4,4(r2)
    a534:	28800117 	ldw	r2,4(r5)
    a538:	20804126 	beq	r4,r2,a640 <_fpadd_parts+0x1b4>
    a53c:	20006326 	beq	r4,zero,a6cc <_fpadd_parts+0x240>
    a540:	4305c83a 	sub	r2,r8,r12
    a544:	4091803a 	cmpltu	r8,r8,r2
    a548:	4b47c83a 	sub	r3,r9,r13
    a54c:	1a07c83a 	sub	r3,r3,r8
    a550:	18006316 	blt	r3,zero,a6e0 <_fpadd_parts+0x254>
    a554:	30000115 	stw	zero,4(r6)
    a558:	31c00215 	stw	r7,8(r6)
    a55c:	30800315 	stw	r2,12(r6)
    a560:	30c00415 	stw	r3,16(r6)
    a564:	11ffffc4 	addi	r7,r2,-1
    a568:	388b403a 	cmpgeu	r5,r7,r2
    a56c:	194bc83a 	sub	r5,r3,r5
    a570:	01040034 	movhi	r4,4096
    a574:	213fffc4 	addi	r4,r4,-1
    a578:	21401736 	bltu	r4,r5,a5d8 <_fpadd_parts+0x14c>
    a57c:	29008226 	beq	r5,r4,a788 <_fpadd_parts+0x2fc>
    a580:	31400217 	ldw	r5,8(r6)
    a584:	02840034 	movhi	r10,4096
    a588:	52bfffc4 	addi	r10,r10,-1
    a58c:	033fff84 	movi	r12,-2
    a590:	297fffc4 	addi	r5,r5,-1
    a594:	00000106 	br	a59c <_fpadd_parts+0x110>
    a598:	3a804a26 	beq	r7,r10,a6c4 <_fpadd_parts+0x238>
    a59c:	1089883a 	add	r4,r2,r2
    a5a0:	2091803a 	cmpltu	r8,r4,r2
    a5a4:	18c7883a 	add	r3,r3,r3
    a5a8:	227fffc4 	addi	r9,r4,-1
    a5ac:	40d1883a 	add	r8,r8,r3
    a5b0:	490f403a 	cmpgeu	r7,r9,r4
    a5b4:	41cfc83a 	sub	r7,r8,r7
    a5b8:	2817883a 	mov	r11,r5
    a5bc:	2005883a 	mov	r2,r4
    a5c0:	4007883a 	mov	r3,r8
    a5c4:	297fffc4 	addi	r5,r5,-1
    a5c8:	51fff32e 	bgeu	r10,r7,a598 <_fpadd_parts+0x10c>
    a5cc:	31000315 	stw	r4,12(r6)
    a5d0:	32000415 	stw	r8,16(r6)
    a5d4:	32c00215 	stw	r11,8(r6)
    a5d8:	010000c4 	movi	r4,3
    a5dc:	31000015 	stw	r4,0(r6)
    a5e0:	01080034 	movhi	r4,8192
    a5e4:	213fffc4 	addi	r4,r4,-1
    a5e8:	20c00b2e 	bgeu	r4,r3,a618 <_fpadd_parts+0x18c>
    a5ec:	180e97fa 	slli	r7,r3,31
    a5f0:	1008d07a 	srli	r4,r2,1
    a5f4:	31400217 	ldw	r5,8(r6)
    a5f8:	1806d07a 	srli	r3,r3,1
    a5fc:	1080004c 	andi	r2,r2,1
    a600:	3908b03a 	or	r4,r7,r4
    a604:	1108b03a 	or	r4,r2,r4
    a608:	29400044 	addi	r5,r5,1
    a60c:	31000315 	stw	r4,12(r6)
    a610:	30c00415 	stw	r3,16(r6)
    a614:	31400215 	stw	r5,8(r6)
    a618:	3005883a 	mov	r2,r6
    a61c:	f800283a 	ret
    a620:	2805883a 	mov	r2,r5
    a624:	f800283a 	ret
    a628:	59c01e0e 	bge	r11,r7,a6a4 <_fpadd_parts+0x218>
    a62c:	11000117 	ldw	r4,4(r2)
    a630:	28800117 	ldw	r2,4(r5)
    a634:	0011883a 	mov	r8,zero
    a638:	0013883a 	mov	r9,zero
    a63c:	20bfbf1e 	bne	r4,r2,a53c <_fpadd_parts+0xb0>
    a640:	4305883a 	add	r2,r8,r12
    a644:	1207803a 	cmpltu	r3,r2,r8
    a648:	4b53883a 	add	r9,r9,r13
    a64c:	1a47883a 	add	r3,r3,r9
    a650:	31000115 	stw	r4,4(r6)
    a654:	31c00215 	stw	r7,8(r6)
    a658:	30800315 	stw	r2,12(r6)
    a65c:	30c00415 	stw	r3,16(r6)
    a660:	003fdd06 	br	a5d8 <_fpadd_parts+0x14c>
    a664:	20ffef1e 	bne	r4,r3,a624 <_fpadd_parts+0x198>
    a668:	31000015 	stw	r4,0(r6)
    a66c:	10c00117 	ldw	r3,4(r2)
    a670:	30c00115 	stw	r3,4(r6)
    a674:	10c00217 	ldw	r3,8(r2)
    a678:	11000117 	ldw	r4,4(r2)
    a67c:	29400117 	ldw	r5,4(r5)
    a680:	30c00215 	stw	r3,8(r6)
    a684:	10c00317 	ldw	r3,12(r2)
    a688:	2908703a 	and	r4,r5,r4
    a68c:	30c00315 	stw	r3,12(r6)
    a690:	10c00417 	ldw	r3,16(r2)
    a694:	31000115 	stw	r4,4(r6)
    a698:	3005883a 	mov	r2,r6
    a69c:	30c00415 	stw	r3,16(r6)
    a6a0:	f800283a 	ret
    a6a4:	580f883a 	mov	r7,r11
    a6a8:	0019883a 	mov	r12,zero
    a6ac:	001b883a 	mov	r13,zero
    a6b0:	003f9f06 	br	a530 <_fpadd_parts+0xa4>
    a6b4:	0115c83a 	sub	r10,zero,r4
    a6b8:	00c00fc4 	movi	r3,63
    a6bc:	1abfda16 	blt	r3,r10,a628 <_fpadd_parts+0x19c>
    a6c0:	003f8906 	br	a4e8 <_fpadd_parts+0x5c>
    a6c4:	627fb52e 	bgeu	r12,r9,a59c <_fpadd_parts+0x110>
    a6c8:	003fc006 	br	a5cc <_fpadd_parts+0x140>
    a6cc:	6205c83a 	sub	r2,r12,r8
    a6d0:	6099803a 	cmpltu	r12,r12,r2
    a6d4:	6a47c83a 	sub	r3,r13,r9
    a6d8:	1b07c83a 	sub	r3,r3,r12
    a6dc:	183f9d0e 	bge	r3,zero,a554 <_fpadd_parts+0xc8>
    a6e0:	0085c83a 	sub	r2,zero,r2
    a6e4:	1008c03a 	cmpne	r4,r2,zero
    a6e8:	00c7c83a 	sub	r3,zero,r3
    a6ec:	1907c83a 	sub	r3,r3,r4
    a6f0:	01000044 	movi	r4,1
    a6f4:	31000115 	stw	r4,4(r6)
    a6f8:	31c00215 	stw	r7,8(r6)
    a6fc:	30800315 	stw	r2,12(r6)
    a700:	30c00415 	stw	r3,16(r6)
    a704:	003f9706 	br	a564 <_fpadd_parts+0xd8>
    a708:	203f8926 	beq	r4,zero,a530 <_fpadd_parts+0xa4>
    a70c:	50fff804 	addi	r3,r10,-32
    a710:	3a8f883a 	add	r7,r7,r10
    a714:	18002316 	blt	r3,zero,a7a4 <_fpadd_parts+0x318>
    a718:	68d6d83a 	srl	r11,r13,r3
    a71c:	001d883a 	mov	r14,zero
    a720:	18001c16 	blt	r3,zero,a794 <_fpadd_parts+0x308>
    a724:	01000044 	movi	r4,1
    a728:	20c6983a 	sll	r3,r4,r3
    a72c:	0015883a 	mov	r10,zero
    a730:	513fffc4 	addi	r4,r10,-1
    a734:	2295403a 	cmpgeu	r10,r4,r10
    a738:	1a87c83a 	sub	r3,r3,r10
    a73c:	1b5a703a 	and	r13,r3,r13
    a740:	2318703a 	and	r12,r4,r12
    a744:	6358b03a 	or	r12,r12,r13
    a748:	6018c03a 	cmpne	r12,r12,zero
    a74c:	62d8b03a 	or	r12,r12,r11
    a750:	701b883a 	mov	r13,r14
    a754:	003f7606 	br	a530 <_fpadd_parts+0xa4>
    a758:	4808907a 	slli	r4,r9,1
    a75c:	02c007c4 	movi	r11,31
    a760:	5a97c83a 	sub	r11,r11,r10
    a764:	22c8983a 	sll	r4,r4,r11
    a768:	4296d83a 	srl	r11,r8,r10
    a76c:	4a9cd83a 	srl	r14,r9,r10
    a770:	22d6b03a 	or	r11,r4,r11
    a774:	003f6106 	br	a4fc <_fpadd_parts+0x70>
    a778:	00c00044 	movi	r3,1
    a77c:	1a94983a 	sll	r10,r3,r10
    a780:	0007883a 	mov	r3,zero
    a784:	003f6106 	br	a50c <_fpadd_parts+0x80>
    a788:	013fff84 	movi	r4,-2
    a78c:	21ff7c2e 	bgeu	r4,r7,a580 <_fpadd_parts+0xf4>
    a790:	003f9106 	br	a5d8 <_fpadd_parts+0x14c>
    a794:	00c00044 	movi	r3,1
    a798:	1a94983a 	sll	r10,r3,r10
    a79c:	0007883a 	mov	r3,zero
    a7a0:	003fe306 	br	a730 <_fpadd_parts+0x2a4>
    a7a4:	6816907a 	slli	r11,r13,1
    a7a8:	010007c4 	movi	r4,31
    a7ac:	2289c83a 	sub	r4,r4,r10
    a7b0:	5908983a 	sll	r4,r11,r4
    a7b4:	6296d83a 	srl	r11,r12,r10
    a7b8:	6a9cd83a 	srl	r14,r13,r10
    a7bc:	22d6b03a 	or	r11,r4,r11
    a7c0:	003fd706 	br	a720 <_fpadd_parts+0x294>
    a7c4:	193f971e 	bne	r3,r4,a624 <_fpadd_parts+0x198>
    a7c8:	11000117 	ldw	r4,4(r2)
    a7cc:	28c00117 	ldw	r3,4(r5)
    a7d0:	20ff9426 	beq	r4,r3,a624 <_fpadd_parts+0x198>
    a7d4:	00800074 	movhi	r2,1
    a7d8:	10b6f704 	addi	r2,r2,-9252
    a7dc:	f800283a 	ret

0000a7e0 <__adddf3>:
    a7e0:	deffec04 	addi	sp,sp,-80
    a7e4:	d9001115 	stw	r4,68(sp)
    a7e8:	d9401215 	stw	r5,72(sp)
    a7ec:	d9001104 	addi	r4,sp,68
    a7f0:	d9400a04 	addi	r5,sp,40
    a7f4:	dfc01315 	stw	ra,76(sp)
    a7f8:	d9c01015 	stw	r7,64(sp)
    a7fc:	d9800f15 	stw	r6,60(sp)
    a800:	000b5300 	call	b530 <__unpack_d>
    a804:	d9000f04 	addi	r4,sp,60
    a808:	d9400504 	addi	r5,sp,20
    a80c:	000b5300 	call	b530 <__unpack_d>
    a810:	d9000a04 	addi	r4,sp,40
    a814:	d9400504 	addi	r5,sp,20
    a818:	d80d883a 	mov	r6,sp
    a81c:	000a48c0 	call	a48c <_fpadd_parts>
    a820:	1009883a 	mov	r4,r2
    a824:	000b30c0 	call	b30c <__pack_d>
    a828:	dfc01317 	ldw	ra,76(sp)
    a82c:	dec01404 	addi	sp,sp,80
    a830:	f800283a 	ret

0000a834 <__subdf3>:
    a834:	deffec04 	addi	sp,sp,-80
    a838:	d9001115 	stw	r4,68(sp)
    a83c:	d9401215 	stw	r5,72(sp)
    a840:	d9001104 	addi	r4,sp,68
    a844:	d9400a04 	addi	r5,sp,40
    a848:	dfc01315 	stw	ra,76(sp)
    a84c:	d9c01015 	stw	r7,64(sp)
    a850:	d9800f15 	stw	r6,60(sp)
    a854:	000b5300 	call	b530 <__unpack_d>
    a858:	d9000f04 	addi	r4,sp,60
    a85c:	d9400504 	addi	r5,sp,20
    a860:	000b5300 	call	b530 <__unpack_d>
    a864:	d8800617 	ldw	r2,24(sp)
    a868:	d9000a04 	addi	r4,sp,40
    a86c:	d9400504 	addi	r5,sp,20
    a870:	d80d883a 	mov	r6,sp
    a874:	1080005c 	xori	r2,r2,1
    a878:	d8800615 	stw	r2,24(sp)
    a87c:	000a48c0 	call	a48c <_fpadd_parts>
    a880:	1009883a 	mov	r4,r2
    a884:	000b30c0 	call	b30c <__pack_d>
    a888:	dfc01317 	ldw	ra,76(sp)
    a88c:	dec01404 	addi	sp,sp,80
    a890:	f800283a 	ret

0000a894 <__muldf3>:
    a894:	deffe404 	addi	sp,sp,-112
    a898:	d9001115 	stw	r4,68(sp)
    a89c:	d9401215 	stw	r5,72(sp)
    a8a0:	d9001104 	addi	r4,sp,68
    a8a4:	d9400a04 	addi	r5,sp,40
    a8a8:	dfc01b15 	stw	ra,108(sp)
    a8ac:	d9800f15 	stw	r6,60(sp)
    a8b0:	d9c01015 	stw	r7,64(sp)
    a8b4:	ddc01a15 	stw	r23,104(sp)
    a8b8:	dd801915 	stw	r22,100(sp)
    a8bc:	dd401815 	stw	r21,96(sp)
    a8c0:	dd001715 	stw	r20,92(sp)
    a8c4:	dcc01615 	stw	r19,88(sp)
    a8c8:	dc801515 	stw	r18,84(sp)
    a8cc:	dc401415 	stw	r17,80(sp)
    a8d0:	dc001315 	stw	r16,76(sp)
    a8d4:	000b5300 	call	b530 <__unpack_d>
    a8d8:	d9000f04 	addi	r4,sp,60
    a8dc:	d9400504 	addi	r5,sp,20
    a8e0:	000b5300 	call	b530 <__unpack_d>
    a8e4:	d8c00a17 	ldw	r3,40(sp)
    a8e8:	00800044 	movi	r2,1
    a8ec:	10c01136 	bltu	r2,r3,a934 <__muldf3+0xa0>
    a8f0:	d8c00b17 	ldw	r3,44(sp)
    a8f4:	d8800617 	ldw	r2,24(sp)
    a8f8:	d9000a04 	addi	r4,sp,40
    a8fc:	1884c03a 	cmpne	r2,r3,r2
    a900:	d8800b15 	stw	r2,44(sp)
    a904:	000b30c0 	call	b30c <__pack_d>
    a908:	dfc01b17 	ldw	ra,108(sp)
    a90c:	ddc01a17 	ldw	r23,104(sp)
    a910:	dd801917 	ldw	r22,100(sp)
    a914:	dd401817 	ldw	r21,96(sp)
    a918:	dd001717 	ldw	r20,92(sp)
    a91c:	dcc01617 	ldw	r19,88(sp)
    a920:	dc801517 	ldw	r18,84(sp)
    a924:	dc401417 	ldw	r17,80(sp)
    a928:	dc001317 	ldw	r16,76(sp)
    a92c:	dec01c04 	addi	sp,sp,112
    a930:	f800283a 	ret
    a934:	d9000517 	ldw	r4,20(sp)
    a938:	11000636 	bltu	r2,r4,a954 <__muldf3+0xc0>
    a93c:	d8800617 	ldw	r2,24(sp)
    a940:	d8c00b17 	ldw	r3,44(sp)
    a944:	d9000504 	addi	r4,sp,20
    a948:	1884c03a 	cmpne	r2,r3,r2
    a94c:	d8800615 	stw	r2,24(sp)
    a950:	003fec06 	br	a904 <__muldf3+0x70>
    a954:	00800104 	movi	r2,4
    a958:	1880051e 	bne	r3,r2,a970 <__muldf3+0xdc>
    a95c:	00800084 	movi	r2,2
    a960:	20bfe31e 	bne	r4,r2,a8f0 <__muldf3+0x5c>
    a964:	01000074 	movhi	r4,1
    a968:	2136f704 	addi	r4,r4,-9252
    a96c:	003fe506 	br	a904 <__muldf3+0x70>
    a970:	2080031e 	bne	r4,r2,a980 <__muldf3+0xec>
    a974:	00800084 	movi	r2,2
    a978:	18bffa26 	beq	r3,r2,a964 <__muldf3+0xd0>
    a97c:	003fef06 	br	a93c <__muldf3+0xa8>
    a980:	00800084 	movi	r2,2
    a984:	18bfda26 	beq	r3,r2,a8f0 <__muldf3+0x5c>
    a988:	20bfec26 	beq	r4,r2,a93c <__muldf3+0xa8>
    a98c:	dc000d17 	ldw	r16,52(sp)
    a990:	dd000817 	ldw	r20,32(sp)
    a994:	dc800917 	ldw	r18,36(sp)
    a998:	8009883a 	mov	r4,r16
    a99c:	000b883a 	mov	r5,zero
    a9a0:	a00d883a 	mov	r6,r20
    a9a4:	000f883a 	mov	r7,zero
    a9a8:	000b1500 	call	b150 <__muldi3>
    a9ac:	dc400e17 	ldw	r17,56(sp)
    a9b0:	9009883a 	mov	r4,r18
    a9b4:	800d883a 	mov	r6,r16
    a9b8:	000b883a 	mov	r5,zero
    a9bc:	000f883a 	mov	r7,zero
    a9c0:	102f883a 	mov	r23,r2
    a9c4:	1827883a 	mov	r19,r3
    a9c8:	000b1500 	call	b150 <__muldi3>
    a9cc:	900d883a 	mov	r6,r18
    a9d0:	8809883a 	mov	r4,r17
    a9d4:	000b883a 	mov	r5,zero
    a9d8:	000f883a 	mov	r7,zero
    a9dc:	102b883a 	mov	r21,r2
    a9e0:	1821883a 	mov	r16,r3
    a9e4:	000b1500 	call	b150 <__muldi3>
    a9e8:	8809883a 	mov	r4,r17
    a9ec:	000b883a 	mov	r5,zero
    a9f0:	a00d883a 	mov	r6,r20
    a9f4:	000f883a 	mov	r7,zero
    a9f8:	102d883a 	mov	r22,r2
    a9fc:	1825883a 	mov	r18,r3
    aa00:	000b1500 	call	b150 <__muldi3>
    aa04:	154b883a 	add	r5,r2,r21
    aa08:	2889803a 	cmpltu	r4,r5,r2
    aa0c:	1c07883a 	add	r3,r3,r16
    aa10:	20c9883a 	add	r4,r4,r3
    aa14:	24004b36 	bltu	r4,r16,ab44 <__muldf3+0x2b0>
    aa18:	8100011e 	bne	r16,r4,aa20 <__muldf3+0x18c>
    aa1c:	2d404936 	bltu	r5,r21,ab44 <__muldf3+0x2b0>
    aa20:	0011883a 	mov	r8,zero
    aa24:	0007883a 	mov	r3,zero
    aa28:	2ccb883a 	add	r5,r5,r19
    aa2c:	b80d883a 	mov	r6,r23
    aa30:	2cc0012e 	bgeu	r5,r19,aa38 <__muldf3+0x1a4>
    aa34:	02000044 	movi	r8,1
    aa38:	258f883a 	add	r7,r4,r22
    aa3c:	3909803a 	cmpltu	r4,r7,r4
    aa40:	da400c17 	ldw	r9,48(sp)
    aa44:	2489883a 	add	r4,r4,r18
    aa48:	d8800717 	ldw	r2,28(sp)
    aa4c:	20c9883a 	add	r4,r4,r3
    aa50:	da800b17 	ldw	r10,44(sp)
    aa54:	d8c00617 	ldw	r3,24(sp)
    aa58:	3a11883a 	add	r8,r7,r8
    aa5c:	4885883a 	add	r2,r9,r2
    aa60:	50c6c03a 	cmpne	r3,r10,r3
    aa64:	41cf803a 	cmpltu	r7,r8,r7
    aa68:	12400104 	addi	r9,r2,4
    aa6c:	d8c00115 	stw	r3,4(sp)
    aa70:	3909883a 	add	r4,r7,r4
    aa74:	da400215 	stw	r9,8(sp)
    aa78:	03480034 	movhi	r13,8192
    aa7c:	6b7fffc4 	addi	r13,r13,-1
    aa80:	4007883a 	mov	r3,r8
    aa84:	6900102e 	bgeu	r13,r4,aac8 <__muldf3+0x234>
    aa88:	10800144 	addi	r2,r2,5
    aa8c:	180ed07a 	srli	r7,r3,1
    aa90:	18c0004c 	andi	r3,r3,1
    aa94:	201097fa 	slli	r8,r4,31
    aa98:	281697fa 	slli	r11,r5,31
    aa9c:	2008d07a 	srli	r4,r4,1
    aaa0:	3014d07a 	srli	r10,r6,1
    aaa4:	2812d07a 	srli	r9,r5,1
    aaa8:	1019883a 	mov	r12,r2
    aaac:	18000226 	beq	r3,zero,aab8 <__muldf3+0x224>
    aab0:	5a8cb03a 	or	r6,r11,r10
    aab4:	49600034 	orhi	r5,r9,32768
    aab8:	41c6b03a 	or	r3,r8,r7
    aabc:	10800044 	addi	r2,r2,1
    aac0:	693ff236 	bltu	r13,r4,aa8c <__muldf3+0x1f8>
    aac4:	db000215 	stw	r12,8(sp)
    aac8:	03440034 	movhi	r13,4096
    aacc:	6b7fffc4 	addi	r13,r13,-1
    aad0:	69001336 	bltu	r13,r4,ab20 <__muldf3+0x28c>
    aad4:	d8800217 	ldw	r2,8(sp)
    aad8:	10bfffc4 	addi	r2,r2,-1
    aadc:	18d3883a 	add	r9,r3,r3
    aae0:	48c7803a 	cmpltu	r3,r9,r3
    aae4:	2109883a 	add	r4,r4,r4
    aae8:	190f883a 	add	r7,r3,r4
    aaec:	3191883a 	add	r8,r6,r6
    aaf0:	4197803a 	cmpltu	r11,r8,r6
    aaf4:	2955883a 	add	r10,r5,r5
    aaf8:	1019883a 	mov	r12,r2
    aafc:	4807883a 	mov	r3,r9
    ab00:	3809883a 	mov	r4,r7
    ab04:	2800010e 	bge	r5,zero,ab0c <__muldf3+0x278>
    ab08:	48c00054 	ori	r3,r9,1
    ab0c:	400d883a 	mov	r6,r8
    ab10:	5a8b883a 	add	r5,r11,r10
    ab14:	10bfffc4 	addi	r2,r2,-1
    ab18:	69fff02e 	bgeu	r13,r7,aadc <__muldf3+0x248>
    ab1c:	db000215 	stw	r12,8(sp)
    ab20:	18803fcc 	andi	r2,r3,255
    ab24:	01c02004 	movi	r7,128
    ab28:	11c00926 	beq	r2,r7,ab50 <__muldf3+0x2bc>
    ab2c:	008000c4 	movi	r2,3
    ab30:	d9000415 	stw	r4,16(sp)
    ab34:	d8c00315 	stw	r3,12(sp)
    ab38:	d8800015 	stw	r2,0(sp)
    ab3c:	d809883a 	mov	r4,sp
    ab40:	003f7006 	br	a904 <__muldf3+0x70>
    ab44:	0011883a 	mov	r8,zero
    ab48:	00c00044 	movi	r3,1
    ab4c:	003fb606 	br	aa28 <__muldf3+0x194>
    ab50:	19c0400c 	andi	r7,r3,256
    ab54:	383ff51e 	bne	r7,zero,ab2c <__muldf3+0x298>
    ab58:	314ab03a 	or	r5,r6,r5
    ab5c:	283ff326 	beq	r5,zero,ab2c <__muldf3+0x298>
    ab60:	1885883a 	add	r2,r3,r2
    ab64:	10cb803a 	cmpltu	r5,r2,r3
    ab68:	00ffc004 	movi	r3,-256
    ab6c:	10c6703a 	and	r3,r2,r3
    ab70:	2909883a 	add	r4,r5,r4
    ab74:	003fed06 	br	ab2c <__muldf3+0x298>

0000ab78 <__divdf3>:
    ab78:	defff104 	addi	sp,sp,-60
    ab7c:	d9000c15 	stw	r4,48(sp)
    ab80:	d9400d15 	stw	r5,52(sp)
    ab84:	d9000c04 	addi	r4,sp,48
    ab88:	d9400504 	addi	r5,sp,20
    ab8c:	dfc00e15 	stw	ra,56(sp)
    ab90:	d9800a15 	stw	r6,40(sp)
    ab94:	d9c00b15 	stw	r7,44(sp)
    ab98:	000b5300 	call	b530 <__unpack_d>
    ab9c:	d9000a04 	addi	r4,sp,40
    aba0:	d80b883a 	mov	r5,sp
    aba4:	000b5300 	call	b530 <__unpack_d>
    aba8:	d8c00517 	ldw	r3,20(sp)
    abac:	00800044 	movi	r2,1
    abb0:	10c00536 	bltu	r2,r3,abc8 <__divdf3+0x50>
    abb4:	d9000504 	addi	r4,sp,20
    abb8:	000b30c0 	call	b30c <__pack_d>
    abbc:	dfc00e17 	ldw	ra,56(sp)
    abc0:	dec00f04 	addi	sp,sp,60
    abc4:	f800283a 	ret
    abc8:	d9000017 	ldw	r4,0(sp)
    abcc:	11000536 	bltu	r2,r4,abe4 <__divdf3+0x6c>
    abd0:	d809883a 	mov	r4,sp
    abd4:	000b30c0 	call	b30c <__pack_d>
    abd8:	dfc00e17 	ldw	ra,56(sp)
    abdc:	dec00f04 	addi	sp,sp,60
    abe0:	f800283a 	ret
    abe4:	d9800617 	ldw	r6,24(sp)
    abe8:	d9400117 	ldw	r5,4(sp)
    abec:	00800104 	movi	r2,4
    abf0:	314af03a 	xor	r5,r6,r5
    abf4:	d9400615 	stw	r5,24(sp)
    abf8:	18800226 	beq	r3,r2,ac04 <__divdf3+0x8c>
    abfc:	01400084 	movi	r5,2
    ac00:	1940041e 	bne	r3,r5,ac14 <__divdf3+0x9c>
    ac04:	193feb1e 	bne	r3,r4,abb4 <__divdf3+0x3c>
    ac08:	01000074 	movhi	r4,1
    ac0c:	2136f704 	addi	r4,r4,-9252
    ac10:	003fe906 	br	abb8 <__divdf3+0x40>
    ac14:	20803326 	beq	r4,r2,ace4 <__divdf3+0x16c>
    ac18:	21403726 	beq	r4,r5,acf8 <__divdf3+0x180>
    ac1c:	d8800217 	ldw	r2,8(sp)
    ac20:	d9000717 	ldw	r4,28(sp)
    ac24:	d8c00917 	ldw	r3,36(sp)
    ac28:	da000417 	ldw	r8,16(sp)
    ac2c:	2089c83a 	sub	r4,r4,r2
    ac30:	d9000715 	stw	r4,28(sp)
    ac34:	d8800817 	ldw	r2,32(sp)
    ac38:	dbc00317 	ldw	r15,12(sp)
    ac3c:	1a000236 	bltu	r3,r8,ac48 <__divdf3+0xd0>
    ac40:	40c0081e 	bne	r8,r3,ac64 <__divdf3+0xec>
    ac44:	13c0072e 	bgeu	r2,r15,ac64 <__divdf3+0xec>
    ac48:	108b883a 	add	r5,r2,r2
    ac4c:	288d803a 	cmpltu	r6,r5,r2
    ac50:	18c7883a 	add	r3,r3,r3
    ac54:	213fffc4 	addi	r4,r4,-1
    ac58:	2805883a 	mov	r2,r5
    ac5c:	30c7883a 	add	r3,r6,r3
    ac60:	d9000715 	stw	r4,28(sp)
    ac64:	01400f44 	movi	r5,61
    ac68:	000f883a 	mov	r7,zero
    ac6c:	01040034 	movhi	r4,4096
    ac70:	0019883a 	mov	r12,zero
    ac74:	001b883a 	mov	r13,zero
    ac78:	201697fa 	slli	r11,r4,31
    ac7c:	3814d07a 	srli	r10,r7,1
    ac80:	297fffc4 	addi	r5,r5,-1
    ac84:	1a000936 	bltu	r3,r8,acac <__divdf3+0x134>
    ac88:	13cdc83a 	sub	r6,r2,r15
    ac8c:	1193803a 	cmpltu	r9,r2,r6
    ac90:	1a1dc83a 	sub	r14,r3,r8
    ac94:	40c0011e 	bne	r8,r3,ac9c <__divdf3+0x124>
    ac98:	13c00436 	bltu	r2,r15,acac <__divdf3+0x134>
    ac9c:	3005883a 	mov	r2,r6
    aca0:	7247c83a 	sub	r3,r14,r9
    aca4:	61d8b03a 	or	r12,r12,r7
    aca8:	691ab03a 	or	r13,r13,r4
    acac:	108d883a 	add	r6,r2,r2
    acb0:	3093803a 	cmpltu	r9,r6,r2
    acb4:	18c7883a 	add	r3,r3,r3
    acb8:	5a8eb03a 	or	r7,r11,r10
    acbc:	2008d07a 	srli	r4,r4,1
    acc0:	3005883a 	mov	r2,r6
    acc4:	48c7883a 	add	r3,r9,r3
    acc8:	283feb1e 	bne	r5,zero,ac78 <__divdf3+0x100>
    accc:	61003fcc 	andi	r4,r12,255
    acd0:	01402004 	movi	r5,128
    acd4:	21400b26 	beq	r4,r5,ad04 <__divdf3+0x18c>
    acd8:	db000815 	stw	r12,32(sp)
    acdc:	db400915 	stw	r13,36(sp)
    ace0:	003fb406 	br	abb4 <__divdf3+0x3c>
    ace4:	d8000815 	stw	zero,32(sp)
    ace8:	d8000915 	stw	zero,36(sp)
    acec:	d8000715 	stw	zero,28(sp)
    acf0:	d9000504 	addi	r4,sp,20
    acf4:	003fb006 	br	abb8 <__divdf3+0x40>
    acf8:	d8800515 	stw	r2,20(sp)
    acfc:	d9000504 	addi	r4,sp,20
    ad00:	003fad06 	br	abb8 <__divdf3+0x40>
    ad04:	6140400c 	andi	r5,r12,256
    ad08:	283ff31e 	bne	r5,zero,acd8 <__divdf3+0x160>
    ad0c:	30c4b03a 	or	r2,r6,r3
    ad10:	103ff126 	beq	r2,zero,acd8 <__divdf3+0x160>
    ad14:	6109883a 	add	r4,r12,r4
    ad18:	2305803a 	cmpltu	r2,r4,r12
    ad1c:	033fc004 	movi	r12,-256
    ad20:	2318703a 	and	r12,r4,r12
    ad24:	135b883a 	add	r13,r2,r13
    ad28:	003feb06 	br	acd8 <__divdf3+0x160>

0000ad2c <__gtdf2>:
    ad2c:	defff104 	addi	sp,sp,-60
    ad30:	d9000c15 	stw	r4,48(sp)
    ad34:	d9400d15 	stw	r5,52(sp)
    ad38:	d9000c04 	addi	r4,sp,48
    ad3c:	d9400504 	addi	r5,sp,20
    ad40:	dfc00e15 	stw	ra,56(sp)
    ad44:	d9800a15 	stw	r6,40(sp)
    ad48:	d9c00b15 	stw	r7,44(sp)
    ad4c:	000b5300 	call	b530 <__unpack_d>
    ad50:	d9000a04 	addi	r4,sp,40
    ad54:	d80b883a 	mov	r5,sp
    ad58:	000b5300 	call	b530 <__unpack_d>
    ad5c:	d8c00517 	ldw	r3,20(sp)
    ad60:	00800044 	movi	r2,1
    ad64:	10c0082e 	bgeu	r2,r3,ad88 <__gtdf2+0x5c>
    ad68:	d8c00017 	ldw	r3,0(sp)
    ad6c:	10c0062e 	bgeu	r2,r3,ad88 <__gtdf2+0x5c>
    ad70:	d9000504 	addi	r4,sp,20
    ad74:	d80b883a 	mov	r5,sp
    ad78:	000b6340 	call	b634 <__fpcmp_parts_d>
    ad7c:	dfc00e17 	ldw	ra,56(sp)
    ad80:	dec00f04 	addi	sp,sp,60
    ad84:	f800283a 	ret
    ad88:	00bfffc4 	movi	r2,-1
    ad8c:	003ffb06 	br	ad7c <__gtdf2+0x50>

0000ad90 <__gedf2>:
    ad90:	defff104 	addi	sp,sp,-60
    ad94:	d9000c15 	stw	r4,48(sp)
    ad98:	d9400d15 	stw	r5,52(sp)
    ad9c:	d9000c04 	addi	r4,sp,48
    ada0:	d9400504 	addi	r5,sp,20
    ada4:	dfc00e15 	stw	ra,56(sp)
    ada8:	d9800a15 	stw	r6,40(sp)
    adac:	d9c00b15 	stw	r7,44(sp)
    adb0:	000b5300 	call	b530 <__unpack_d>
    adb4:	d9000a04 	addi	r4,sp,40
    adb8:	d80b883a 	mov	r5,sp
    adbc:	000b5300 	call	b530 <__unpack_d>
    adc0:	d8c00517 	ldw	r3,20(sp)
    adc4:	00800044 	movi	r2,1
    adc8:	10c0082e 	bgeu	r2,r3,adec <__gedf2+0x5c>
    adcc:	d8c00017 	ldw	r3,0(sp)
    add0:	10c0062e 	bgeu	r2,r3,adec <__gedf2+0x5c>
    add4:	d9000504 	addi	r4,sp,20
    add8:	d80b883a 	mov	r5,sp
    addc:	000b6340 	call	b634 <__fpcmp_parts_d>
    ade0:	dfc00e17 	ldw	ra,56(sp)
    ade4:	dec00f04 	addi	sp,sp,60
    ade8:	f800283a 	ret
    adec:	00bfffc4 	movi	r2,-1
    adf0:	003ffb06 	br	ade0 <__gedf2+0x50>

0000adf4 <__ltdf2>:
    adf4:	defff104 	addi	sp,sp,-60
    adf8:	d9000c15 	stw	r4,48(sp)
    adfc:	d9400d15 	stw	r5,52(sp)
    ae00:	d9000c04 	addi	r4,sp,48
    ae04:	d9400504 	addi	r5,sp,20
    ae08:	dfc00e15 	stw	ra,56(sp)
    ae0c:	d9800a15 	stw	r6,40(sp)
    ae10:	d9c00b15 	stw	r7,44(sp)
    ae14:	000b5300 	call	b530 <__unpack_d>
    ae18:	d9000a04 	addi	r4,sp,40
    ae1c:	d80b883a 	mov	r5,sp
    ae20:	000b5300 	call	b530 <__unpack_d>
    ae24:	d8c00517 	ldw	r3,20(sp)
    ae28:	00800044 	movi	r2,1
    ae2c:	10c0052e 	bgeu	r2,r3,ae44 <__ltdf2+0x50>
    ae30:	d8c00017 	ldw	r3,0(sp)
    ae34:	10c0032e 	bgeu	r2,r3,ae44 <__ltdf2+0x50>
    ae38:	d9000504 	addi	r4,sp,20
    ae3c:	d80b883a 	mov	r5,sp
    ae40:	000b6340 	call	b634 <__fpcmp_parts_d>
    ae44:	dfc00e17 	ldw	ra,56(sp)
    ae48:	dec00f04 	addi	sp,sp,60
    ae4c:	f800283a 	ret

0000ae50 <__floatsidf>:
    ae50:	2004d7fa 	srli	r2,r4,31
    ae54:	defff904 	addi	sp,sp,-28
    ae58:	00c000c4 	movi	r3,3
    ae5c:	dfc00615 	stw	ra,24(sp)
    ae60:	dc000515 	stw	r16,20(sp)
    ae64:	d8c00015 	stw	r3,0(sp)
    ae68:	d8800115 	stw	r2,4(sp)
    ae6c:	2000081e 	bne	r4,zero,ae90 <__floatsidf+0x40>
    ae70:	00800084 	movi	r2,2
    ae74:	d8800015 	stw	r2,0(sp)
    ae78:	d809883a 	mov	r4,sp
    ae7c:	000b30c0 	call	b30c <__pack_d>
    ae80:	dfc00617 	ldw	ra,24(sp)
    ae84:	dc000517 	ldw	r16,20(sp)
    ae88:	dec00704 	addi	sp,sp,28
    ae8c:	f800283a 	ret
    ae90:	00c00f04 	movi	r3,60
    ae94:	d8c00215 	stw	r3,8(sp)
    ae98:	10000f1e 	bne	r2,zero,aed8 <__floatsidf+0x88>
    ae9c:	2021883a 	mov	r16,r4
    aea0:	8009883a 	mov	r4,r16
    aea4:	000b2600 	call	b260 <__clzsi2>
    aea8:	11000744 	addi	r4,r2,29
    aeac:	0100110e 	bge	zero,r4,aef4 <__floatsidf+0xa4>
    aeb0:	10ffff44 	addi	r3,r2,-3
    aeb4:	18001216 	blt	r3,zero,af00 <__floatsidf+0xb0>
    aeb8:	80c6983a 	sll	r3,r16,r3
    aebc:	0009883a 	mov	r4,zero
    aec0:	014007c4 	movi	r5,31
    aec4:	2885c83a 	sub	r2,r5,r2
    aec8:	d9000315 	stw	r4,12(sp)
    aecc:	d8c00415 	stw	r3,16(sp)
    aed0:	d8800215 	stw	r2,8(sp)
    aed4:	003fe806 	br	ae78 <__floatsidf+0x28>
    aed8:	00a00034 	movhi	r2,32768
    aedc:	20800e26 	beq	r4,r2,af18 <__floatsidf+0xc8>
    aee0:	0121c83a 	sub	r16,zero,r4
    aee4:	8009883a 	mov	r4,r16
    aee8:	000b2600 	call	b260 <__clzsi2>
    aeec:	11000744 	addi	r4,r2,29
    aef0:	013fef16 	blt	zero,r4,aeb0 <__floatsidf+0x60>
    aef4:	dc000315 	stw	r16,12(sp)
    aef8:	d8000415 	stw	zero,16(sp)
    aefc:	003fde06 	br	ae78 <__floatsidf+0x28>
    af00:	800ad07a 	srli	r5,r16,1
    af04:	00c007c4 	movi	r3,31
    af08:	1907c83a 	sub	r3,r3,r4
    af0c:	28c6d83a 	srl	r3,r5,r3
    af10:	8108983a 	sll	r4,r16,r4
    af14:	003fea06 	br	aec0 <__floatsidf+0x70>
    af18:	0005883a 	mov	r2,zero
    af1c:	00f07834 	movhi	r3,49632
    af20:	003fd706 	br	ae80 <__floatsidf+0x30>

0000af24 <__fixdfsi>:
    af24:	defff804 	addi	sp,sp,-32
    af28:	d9000515 	stw	r4,20(sp)
    af2c:	d9400615 	stw	r5,24(sp)
    af30:	d9000504 	addi	r4,sp,20
    af34:	d80b883a 	mov	r5,sp
    af38:	dfc00715 	stw	ra,28(sp)
    af3c:	000b5300 	call	b530 <__unpack_d>
    af40:	d8800017 	ldw	r2,0(sp)
    af44:	00c00084 	movi	r3,2
    af48:	10c01c26 	beq	r2,r3,afbc <__fixdfsi+0x98>
    af4c:	00c00044 	movi	r3,1
    af50:	18801a2e 	bgeu	r3,r2,afbc <__fixdfsi+0x98>
    af54:	00c00104 	movi	r3,4
    af58:	10c01126 	beq	r2,r3,afa0 <__fixdfsi+0x7c>
    af5c:	d8800217 	ldw	r2,8(sp)
    af60:	10001616 	blt	r2,zero,afbc <__fixdfsi+0x98>
    af64:	00c00784 	movi	r3,30
    af68:	18800d16 	blt	r3,r2,afa0 <__fixdfsi+0x7c>
    af6c:	00c00f04 	movi	r3,60
    af70:	1885c83a 	sub	r2,r3,r2
    af74:	10fff804 	addi	r3,r2,-32
    af78:	d9400317 	ldw	r5,12(sp)
    af7c:	d9000417 	ldw	r4,16(sp)
    af80:	18001616 	blt	r3,zero,afdc <__fixdfsi+0xb8>
    af84:	20c4d83a 	srl	r2,r4,r3
    af88:	d8c00117 	ldw	r3,4(sp)
    af8c:	18000126 	beq	r3,zero,af94 <__fixdfsi+0x70>
    af90:	0085c83a 	sub	r2,zero,r2
    af94:	dfc00717 	ldw	ra,28(sp)
    af98:	dec00804 	addi	sp,sp,32
    af9c:	f800283a 	ret
    afa0:	d8800117 	ldw	r2,4(sp)
    afa4:	1000091e 	bne	r2,zero,afcc <__fixdfsi+0xa8>
    afa8:	00a00034 	movhi	r2,32768
    afac:	10bfffc4 	addi	r2,r2,-1
    afb0:	dfc00717 	ldw	ra,28(sp)
    afb4:	dec00804 	addi	sp,sp,32
    afb8:	f800283a 	ret
    afbc:	0005883a 	mov	r2,zero
    afc0:	dfc00717 	ldw	ra,28(sp)
    afc4:	dec00804 	addi	sp,sp,32
    afc8:	f800283a 	ret
    afcc:	00a00034 	movhi	r2,32768
    afd0:	dfc00717 	ldw	ra,28(sp)
    afd4:	dec00804 	addi	sp,sp,32
    afd8:	f800283a 	ret
    afdc:	2008907a 	slli	r4,r4,1
    afe0:	018007c4 	movi	r6,31
    afe4:	308dc83a 	sub	r6,r6,r2
    afe8:	2188983a 	sll	r4,r4,r6
    afec:	2884d83a 	srl	r2,r5,r2
    aff0:	2084b03a 	or	r2,r4,r2
    aff4:	003fe406 	br	af88 <__fixdfsi+0x64>

0000aff8 <udivmodsi4>:
    aff8:	2005883a 	mov	r2,r4
    affc:	2900182e 	bgeu	r5,r4,b060 <udivmodsi4+0x68>
    b000:	28001716 	blt	r5,zero,b060 <udivmodsi4+0x68>
    b004:	01000804 	movi	r4,32
    b008:	00c00044 	movi	r3,1
    b00c:	00000206 	br	b018 <udivmodsi4+0x20>
    b010:	20001126 	beq	r4,zero,b058 <udivmodsi4+0x60>
    b014:	28000516 	blt	r5,zero,b02c <udivmodsi4+0x34>
    b018:	294b883a 	add	r5,r5,r5
    b01c:	213fffc4 	addi	r4,r4,-1
    b020:	18c7883a 	add	r3,r3,r3
    b024:	28bffa36 	bltu	r5,r2,b010 <udivmodsi4+0x18>
    b028:	18000b26 	beq	r3,zero,b058 <udivmodsi4+0x60>
    b02c:	0009883a 	mov	r4,zero
    b030:	11400236 	bltu	r2,r5,b03c <udivmodsi4+0x44>
    b034:	1145c83a 	sub	r2,r2,r5
    b038:	20c8b03a 	or	r4,r4,r3
    b03c:	1806d07a 	srli	r3,r3,1
    b040:	280ad07a 	srli	r5,r5,1
    b044:	183ffa1e 	bne	r3,zero,b030 <udivmodsi4+0x38>
    b048:	3000021e 	bne	r6,zero,b054 <udivmodsi4+0x5c>
    b04c:	2005883a 	mov	r2,r4
    b050:	f800283a 	ret
    b054:	f800283a 	ret
    b058:	0009883a 	mov	r4,zero
    b05c:	003ffa06 	br	b048 <udivmodsi4+0x50>
    b060:	00c00044 	movi	r3,1
    b064:	0009883a 	mov	r4,zero
    b068:	003ff106 	br	b030 <udivmodsi4+0x38>

0000b06c <__divsi3>:
    b06c:	defffe04 	addi	sp,sp,-8
    b070:	dfc00115 	stw	ra,4(sp)
    b074:	dc000015 	stw	r16,0(sp)
    b078:	20000a16 	blt	r4,zero,b0a4 <__divsi3+0x38>
    b07c:	0021883a 	mov	r16,zero
    b080:	28000b16 	blt	r5,zero,b0b0 <__divsi3+0x44>
    b084:	000d883a 	mov	r6,zero
    b088:	000aff80 	call	aff8 <udivmodsi4>
    b08c:	80000126 	beq	r16,zero,b094 <__divsi3+0x28>
    b090:	0085c83a 	sub	r2,zero,r2
    b094:	dfc00117 	ldw	ra,4(sp)
    b098:	dc000017 	ldw	r16,0(sp)
    b09c:	dec00204 	addi	sp,sp,8
    b0a0:	f800283a 	ret
    b0a4:	0109c83a 	sub	r4,zero,r4
    b0a8:	04000044 	movi	r16,1
    b0ac:	283ff50e 	bge	r5,zero,b084 <__divsi3+0x18>
    b0b0:	014bc83a 	sub	r5,zero,r5
    b0b4:	8400005c 	xori	r16,r16,1
    b0b8:	003ff206 	br	b084 <__divsi3+0x18>

0000b0bc <__modsi3>:
    b0bc:	deffff04 	addi	sp,sp,-4
    b0c0:	dfc00015 	stw	ra,0(sp)
    b0c4:	20000516 	blt	r4,zero,b0dc <__modsi3+0x20>
    b0c8:	28000c16 	blt	r5,zero,b0fc <__modsi3+0x40>
    b0cc:	01800044 	movi	r6,1
    b0d0:	dfc00017 	ldw	ra,0(sp)
    b0d4:	dec00104 	addi	sp,sp,4
    b0d8:	000aff81 	jmpi	aff8 <udivmodsi4>
    b0dc:	0109c83a 	sub	r4,zero,r4
    b0e0:	28000b16 	blt	r5,zero,b110 <__modsi3+0x54>
    b0e4:	01800044 	movi	r6,1
    b0e8:	000aff80 	call	aff8 <udivmodsi4>
    b0ec:	0085c83a 	sub	r2,zero,r2
    b0f0:	dfc00017 	ldw	ra,0(sp)
    b0f4:	dec00104 	addi	sp,sp,4
    b0f8:	f800283a 	ret
    b0fc:	014bc83a 	sub	r5,zero,r5
    b100:	01800044 	movi	r6,1
    b104:	dfc00017 	ldw	ra,0(sp)
    b108:	dec00104 	addi	sp,sp,4
    b10c:	000aff81 	jmpi	aff8 <udivmodsi4>
    b110:	014bc83a 	sub	r5,zero,r5
    b114:	003ff306 	br	b0e4 <__modsi3+0x28>

0000b118 <__udivsi3>:
    b118:	000d883a 	mov	r6,zero
    b11c:	000aff81 	jmpi	aff8 <udivmodsi4>

0000b120 <__umodsi3>:
    b120:	01800044 	movi	r6,1
    b124:	000aff81 	jmpi	aff8 <udivmodsi4>

0000b128 <__mulsi3>:
    b128:	0005883a 	mov	r2,zero
    b12c:	20000726 	beq	r4,zero,b14c <__mulsi3+0x24>
    b130:	20c0004c 	andi	r3,r4,1
    b134:	2008d07a 	srli	r4,r4,1
    b138:	18000126 	beq	r3,zero,b140 <__mulsi3+0x18>
    b13c:	1145883a 	add	r2,r2,r5
    b140:	294b883a 	add	r5,r5,r5
    b144:	203ffa1e 	bne	r4,zero,b130 <__mulsi3+0x8>
    b148:	f800283a 	ret
    b14c:	f800283a 	ret

0000b150 <__muldi3>:
    b150:	defff604 	addi	sp,sp,-40
    b154:	dd400515 	stw	r21,20(sp)
    b158:	dd000415 	stw	r20,16(sp)
    b15c:	257fffcc 	andi	r21,r4,65535
    b160:	353fffcc 	andi	r20,r6,65535
    b164:	dcc00315 	stw	r19,12(sp)
    b168:	3026d43a 	srli	r19,r6,16
    b16c:	dd800615 	stw	r22,24(sp)
    b170:	dc800215 	stw	r18,8(sp)
    b174:	dc400115 	stw	r17,4(sp)
    b178:	2024d43a 	srli	r18,r4,16
    b17c:	2023883a 	mov	r17,r4
    b180:	282d883a 	mov	r22,r5
    b184:	a009883a 	mov	r4,r20
    b188:	a80b883a 	mov	r5,r21
    b18c:	dfc00915 	stw	ra,36(sp)
    b190:	df000815 	stw	fp,32(sp)
    b194:	ddc00715 	stw	r23,28(sp)
    b198:	3839883a 	mov	fp,r7
    b19c:	dc000015 	stw	r16,0(sp)
    b1a0:	3021883a 	mov	r16,r6
    b1a4:	000b1280 	call	b128 <__mulsi3>
    b1a8:	a80b883a 	mov	r5,r21
    b1ac:	9809883a 	mov	r4,r19
    b1b0:	102f883a 	mov	r23,r2
    b1b4:	000b1280 	call	b128 <__mulsi3>
    b1b8:	a009883a 	mov	r4,r20
    b1bc:	900b883a 	mov	r5,r18
    b1c0:	102b883a 	mov	r21,r2
    b1c4:	000b1280 	call	b128 <__mulsi3>
    b1c8:	9809883a 	mov	r4,r19
    b1cc:	900b883a 	mov	r5,r18
    b1d0:	1029883a 	mov	r20,r2
    b1d4:	000b1280 	call	b128 <__mulsi3>
    b1d8:	1007883a 	mov	r3,r2
    b1dc:	b804d43a 	srli	r2,r23,16
    b1e0:	a549883a 	add	r4,r20,r21
    b1e4:	2089883a 	add	r4,r4,r2
    b1e8:	2500022e 	bgeu	r4,r20,b1f4 <__muldi3+0xa4>
    b1ec:	00800074 	movhi	r2,1
    b1f0:	1887883a 	add	r3,r3,r2
    b1f4:	200cd43a 	srli	r6,r4,16
    b1f8:	2004943a 	slli	r2,r4,16
    b1fc:	e00b883a 	mov	r5,fp
    b200:	8809883a 	mov	r4,r17
    b204:	bdffffcc 	andi	r23,r23,65535
    b208:	19a3883a 	add	r17,r3,r6
    b20c:	15ef883a 	add	r23,r2,r23
    b210:	000b1280 	call	b128 <__mulsi3>
    b214:	8009883a 	mov	r4,r16
    b218:	b00b883a 	mov	r5,r22
    b21c:	1025883a 	mov	r18,r2
    b220:	000b1280 	call	b128 <__mulsi3>
    b224:	9085883a 	add	r2,r18,r2
    b228:	1447883a 	add	r3,r2,r17
    b22c:	b805883a 	mov	r2,r23
    b230:	dfc00917 	ldw	ra,36(sp)
    b234:	df000817 	ldw	fp,32(sp)
    b238:	ddc00717 	ldw	r23,28(sp)
    b23c:	dd800617 	ldw	r22,24(sp)
    b240:	dd400517 	ldw	r21,20(sp)
    b244:	dd000417 	ldw	r20,16(sp)
    b248:	dcc00317 	ldw	r19,12(sp)
    b24c:	dc800217 	ldw	r18,8(sp)
    b250:	dc400117 	ldw	r17,4(sp)
    b254:	dc000017 	ldw	r16,0(sp)
    b258:	dec00a04 	addi	sp,sp,40
    b25c:	f800283a 	ret

0000b260 <__clzsi2>:
    b260:	00bfffd4 	movui	r2,65535
    b264:	11000b36 	bltu	r2,r4,b294 <__clzsi2+0x34>
    b268:	00803fc4 	movi	r2,255
    b26c:	11001e2e 	bgeu	r2,r4,b2e8 <__clzsi2+0x88>
    b270:	00c00204 	movi	r3,8
    b274:	20c8d83a 	srl	r4,r4,r3
    b278:	00c00074 	movhi	r3,1
    b27c:	18f6fc04 	addi	r3,r3,-9232
    b280:	00800604 	movi	r2,24
    b284:	1909883a 	add	r4,r3,r4
    b288:	20c00003 	ldbu	r3,0(r4)
    b28c:	10c5c83a 	sub	r2,r2,r3
    b290:	f800283a 	ret
    b294:	00804034 	movhi	r2,256
    b298:	10bfffc4 	addi	r2,r2,-1
    b29c:	11000936 	bltu	r2,r4,b2c4 <__clzsi2+0x64>
    b2a0:	00800404 	movi	r2,16
    b2a4:	1007883a 	mov	r3,r2
    b2a8:	20c8d83a 	srl	r4,r4,r3
    b2ac:	00c00074 	movhi	r3,1
    b2b0:	18f6fc04 	addi	r3,r3,-9232
    b2b4:	1909883a 	add	r4,r3,r4
    b2b8:	20c00003 	ldbu	r3,0(r4)
    b2bc:	10c5c83a 	sub	r2,r2,r3
    b2c0:	f800283a 	ret
    b2c4:	00c00604 	movi	r3,24
    b2c8:	20c8d83a 	srl	r4,r4,r3
    b2cc:	00c00074 	movhi	r3,1
    b2d0:	18f6fc04 	addi	r3,r3,-9232
    b2d4:	00800204 	movi	r2,8
    b2d8:	1909883a 	add	r4,r3,r4
    b2dc:	20c00003 	ldbu	r3,0(r4)
    b2e0:	10c5c83a 	sub	r2,r2,r3
    b2e4:	f800283a 	ret
    b2e8:	0007883a 	mov	r3,zero
    b2ec:	20c8d83a 	srl	r4,r4,r3
    b2f0:	00c00074 	movhi	r3,1
    b2f4:	18f6fc04 	addi	r3,r3,-9232
    b2f8:	00800804 	movi	r2,32
    b2fc:	1909883a 	add	r4,r3,r4
    b300:	20c00003 	ldbu	r3,0(r4)
    b304:	10c5c83a 	sub	r2,r2,r3
    b308:	f800283a 	ret

0000b30c <__pack_d>:
    b30c:	20800017 	ldw	r2,0(r4)
    b310:	defff804 	addi	sp,sp,-32
    b314:	dcc00315 	stw	r19,12(sp)
    b318:	dc800215 	stw	r18,8(sp)
    b31c:	dfc00715 	stw	ra,28(sp)
    b320:	dd800615 	stw	r22,24(sp)
    b324:	dd400515 	stw	r21,20(sp)
    b328:	dd000415 	stw	r20,16(sp)
    b32c:	dc400115 	stw	r17,4(sp)
    b330:	dc000015 	stw	r16,0(sp)
    b334:	04800044 	movi	r18,1
    b338:	24400317 	ldw	r17,12(r4)
    b33c:	24000417 	ldw	r16,16(r4)
    b340:	24c00117 	ldw	r19,4(r4)
    b344:	9080422e 	bgeu	r18,r2,b450 <__pack_d+0x144>
    b348:	00c00104 	movi	r3,4
    b34c:	10c03c26 	beq	r2,r3,b440 <__pack_d+0x134>
    b350:	00c00084 	movi	r3,2
    b354:	10c01926 	beq	r2,r3,b3bc <__pack_d+0xb0>
    b358:	8c04b03a 	or	r2,r17,r16
    b35c:	10001726 	beq	r2,zero,b3bc <__pack_d+0xb0>
    b360:	21000217 	ldw	r4,8(r4)
    b364:	00bf0084 	movi	r2,-1022
    b368:	20804016 	blt	r4,r2,b46c <__pack_d+0x160>
    b36c:	0080ffc4 	movi	r2,1023
    b370:	11003316 	blt	r2,r4,b440 <__pack_d+0x134>
    b374:	88803fcc 	andi	r2,r17,255
    b378:	00c02004 	movi	r3,128
    b37c:	10c02926 	beq	r2,r3,b424 <__pack_d+0x118>
    b380:	88801fc4 	addi	r2,r17,127
    b384:	1463803a 	cmpltu	r17,r2,r17
    b388:	8c21883a 	add	r16,r17,r16
    b38c:	1023883a 	mov	r17,r2
    b390:	00880034 	movhi	r2,8192
    b394:	10bfffc4 	addi	r2,r2,-1
    b398:	14001c36 	bltu	r2,r16,b40c <__pack_d+0x100>
    b39c:	2100ffc4 	addi	r4,r4,1023
    b3a0:	8006963a 	slli	r3,r16,24
    b3a4:	8804d23a 	srli	r2,r17,8
    b3a8:	8020913a 	slli	r16,r16,4
    b3ac:	2101ffcc 	andi	r4,r4,2047
    b3b0:	1884b03a 	or	r2,r3,r2
    b3b4:	8020d33a 	srli	r16,r16,12
    b3b8:	00000306 	br	b3c8 <__pack_d+0xbc>
    b3bc:	0009883a 	mov	r4,zero
    b3c0:	0005883a 	mov	r2,zero
    b3c4:	0021883a 	mov	r16,zero
    b3c8:	2008953a 	slli	r4,r4,20
    b3cc:	982697fa 	slli	r19,r19,31
    b3d0:	00c00434 	movhi	r3,16
    b3d4:	18ffffc4 	addi	r3,r3,-1
    b3d8:	80e0703a 	and	r16,r16,r3
    b3dc:	8106b03a 	or	r3,r16,r4
    b3e0:	1cc6b03a 	or	r3,r3,r19
    b3e4:	dfc00717 	ldw	ra,28(sp)
    b3e8:	dd800617 	ldw	r22,24(sp)
    b3ec:	dd400517 	ldw	r21,20(sp)
    b3f0:	dd000417 	ldw	r20,16(sp)
    b3f4:	dcc00317 	ldw	r19,12(sp)
    b3f8:	dc800217 	ldw	r18,8(sp)
    b3fc:	dc400117 	ldw	r17,4(sp)
    b400:	dc000017 	ldw	r16,0(sp)
    b404:	dec00804 	addi	sp,sp,32
    b408:	f800283a 	ret
    b40c:	800697fa 	slli	r3,r16,31
    b410:	8804d07a 	srli	r2,r17,1
    b414:	21010004 	addi	r4,r4,1024
    b418:	8020d07a 	srli	r16,r16,1
    b41c:	18a2b03a 	or	r17,r3,r2
    b420:	003fdf06 	br	b3a0 <__pack_d+0x94>
    b424:	88c0400c 	andi	r3,r17,256
    b428:	183fd926 	beq	r3,zero,b390 <__pack_d+0x84>
    b42c:	8885883a 	add	r2,r17,r2
    b430:	1463803a 	cmpltu	r17,r2,r17
    b434:	8c21883a 	add	r16,r17,r16
    b438:	1023883a 	mov	r17,r2
    b43c:	003fd406 	br	b390 <__pack_d+0x84>
    b440:	0101ffc4 	movi	r4,2047
    b444:	0005883a 	mov	r2,zero
    b448:	0021883a 	mov	r16,zero
    b44c:	003fde06 	br	b3c8 <__pack_d+0xbc>
    b450:	84000234 	orhi	r16,r16,8
    b454:	00c00434 	movhi	r3,16
    b458:	18ffffc4 	addi	r3,r3,-1
    b45c:	8805883a 	mov	r2,r17
    b460:	80e0703a 	and	r16,r16,r3
    b464:	0101ffc4 	movi	r4,2047
    b468:	003fd706 	br	b3c8 <__pack_d+0xbc>
    b46c:	1129c83a 	sub	r20,r2,r4
    b470:	00800e04 	movi	r2,56
    b474:	15002716 	blt	r2,r20,b514 <__pack_d+0x208>
    b478:	800b883a 	mov	r5,r16
    b47c:	a00d883a 	mov	r6,r20
    b480:	8809883a 	mov	r4,r17
    b484:	000b7040 	call	b704 <__lshrdi3>
    b488:	9009883a 	mov	r4,r18
    b48c:	000b883a 	mov	r5,zero
    b490:	a00d883a 	mov	r6,r20
    b494:	102d883a 	mov	r22,r2
    b498:	182b883a 	mov	r21,r3
    b49c:	000b7480 	call	b748 <__ashldi3>
    b4a0:	1009003a 	cmpeq	r4,r2,zero
    b4a4:	1907c83a 	sub	r3,r3,r4
    b4a8:	10bfffc4 	addi	r2,r2,-1
    b4ac:	1c20703a 	and	r16,r3,r16
    b4b0:	1444703a 	and	r2,r2,r17
    b4b4:	1404b03a 	or	r2,r2,r16
    b4b8:	1004c03a 	cmpne	r2,r2,zero
    b4bc:	1584b03a 	or	r2,r2,r22
    b4c0:	11003fcc 	andi	r4,r2,255
    b4c4:	01402004 	movi	r5,128
    b4c8:	a807883a 	mov	r3,r21
    b4cc:	2140131e 	bne	r4,r5,b51c <__pack_d+0x210>
    b4d0:	1140400c 	andi	r5,r2,256
    b4d4:	28000426 	beq	r5,zero,b4e8 <__pack_d+0x1dc>
    b4d8:	1109883a 	add	r4,r2,r4
    b4dc:	2085803a 	cmpltu	r2,r4,r2
    b4e0:	1547883a 	add	r3,r2,r21
    b4e4:	2005883a 	mov	r2,r4
    b4e8:	1808963a 	slli	r4,r3,24
    b4ec:	1004d23a 	srli	r2,r2,8
    b4f0:	1820913a 	slli	r16,r3,4
    b4f4:	01440034 	movhi	r5,4096
    b4f8:	297fffc4 	addi	r5,r5,-1
    b4fc:	2084b03a 	or	r2,r4,r2
    b500:	8020d33a 	srli	r16,r16,12
    b504:	01000044 	movi	r4,1
    b508:	28ffaf36 	bltu	r5,r3,b3c8 <__pack_d+0xbc>
    b50c:	0009883a 	mov	r4,zero
    b510:	003fad06 	br	b3c8 <__pack_d+0xbc>
    b514:	0005883a 	mov	r2,zero
    b518:	0007883a 	mov	r3,zero
    b51c:	11001fc4 	addi	r4,r2,127
    b520:	2085803a 	cmpltu	r2,r4,r2
    b524:	10c7883a 	add	r3,r2,r3
    b528:	2005883a 	mov	r2,r4
    b52c:	003fee06 	br	b4e8 <__pack_d+0x1dc>

0000b530 <__unpack_d>:
    b530:	21800117 	ldw	r6,4(r4)
    b534:	20c00017 	ldw	r3,0(r4)
    b538:	3004d7fa 	srli	r2,r6,31
    b53c:	3008d53a 	srli	r4,r6,20
    b540:	28800115 	stw	r2,4(r5)
    b544:	2101ffcc 	andi	r4,r4,2047
    b548:	00800434 	movhi	r2,16
    b54c:	10bfffc4 	addi	r2,r2,-1
    b550:	3084703a 	and	r2,r6,r2
    b554:	20001a1e 	bne	r4,zero,b5c0 <__unpack_d+0x90>
    b558:	1888b03a 	or	r4,r3,r2
    b55c:	20002626 	beq	r4,zero,b5f8 <__unpack_d+0xc8>
    b560:	1808d63a 	srli	r4,r3,24
    b564:	1004923a 	slli	r2,r2,8
    b568:	01bf0084 	movi	r6,-1022
    b56c:	29800215 	stw	r6,8(r5)
    b570:	2084b03a 	or	r2,r4,r2
    b574:	010000c4 	movi	r4,3
    b578:	29000015 	stw	r4,0(r5)
    b57c:	02040034 	movhi	r8,4096
    b580:	423fffc4 	addi	r8,r8,-1
    b584:	1806923a 	slli	r3,r3,8
    b588:	40801836 	bltu	r8,r2,b5ec <__unpack_d+0xbc>
    b58c:	013f0044 	movi	r4,-1023
    b590:	18cd883a 	add	r6,r3,r3
    b594:	30c7803a 	cmpltu	r3,r6,r3
    b598:	1085883a 	add	r2,r2,r2
    b59c:	1885883a 	add	r2,r3,r2
    b5a0:	200f883a 	mov	r7,r4
    b5a4:	3007883a 	mov	r3,r6
    b5a8:	213fffc4 	addi	r4,r4,-1
    b5ac:	40bff82e 	bgeu	r8,r2,b590 <__unpack_d+0x60>
    b5b0:	29c00215 	stw	r7,8(r5)
    b5b4:	28c00315 	stw	r3,12(r5)
    b5b8:	28800415 	stw	r2,16(r5)
    b5bc:	f800283a 	ret
    b5c0:	01c1ffc4 	movi	r7,2047
    b5c4:	21c00f26 	beq	r4,r7,b604 <__unpack_d+0xd4>
    b5c8:	180cd63a 	srli	r6,r3,24
    b5cc:	1004923a 	slli	r2,r2,8
    b5d0:	213f0044 	addi	r4,r4,-1023
    b5d4:	1806923a 	slli	r3,r3,8
    b5d8:	3084b03a 	or	r2,r6,r2
    b5dc:	29000215 	stw	r4,8(r5)
    b5e0:	010000c4 	movi	r4,3
    b5e4:	10840034 	orhi	r2,r2,4096
    b5e8:	29000015 	stw	r4,0(r5)
    b5ec:	28c00315 	stw	r3,12(r5)
    b5f0:	28800415 	stw	r2,16(r5)
    b5f4:	f800283a 	ret
    b5f8:	00800084 	movi	r2,2
    b5fc:	28800015 	stw	r2,0(r5)
    b600:	f800283a 	ret
    b604:	1888b03a 	or	r4,r3,r2
    b608:	20000526 	beq	r4,zero,b620 <__unpack_d+0xf0>
    b60c:	3180022c 	andhi	r6,r6,8
    b610:	30000626 	beq	r6,zero,b62c <__unpack_d+0xfc>
    b614:	01000044 	movi	r4,1
    b618:	29000015 	stw	r4,0(r5)
    b61c:	003ff306 	br	b5ec <__unpack_d+0xbc>
    b620:	00800104 	movi	r2,4
    b624:	28800015 	stw	r2,0(r5)
    b628:	f800283a 	ret
    b62c:	28000015 	stw	zero,0(r5)
    b630:	003fee06 	br	b5ec <__unpack_d+0xbc>

0000b634 <__fpcmp_parts_d>:
    b634:	20c00017 	ldw	r3,0(r4)
    b638:	00800044 	movi	r2,1
    b63c:	10c0142e 	bgeu	r2,r3,b690 <__fpcmp_parts_d+0x5c>
    b640:	29800017 	ldw	r6,0(r5)
    b644:	1180122e 	bgeu	r2,r6,b690 <__fpcmp_parts_d+0x5c>
    b648:	01c00104 	movi	r7,4
    b64c:	19c02826 	beq	r3,r7,b6f0 <__fpcmp_parts_d+0xbc>
    b650:	31c00926 	beq	r6,r7,b678 <__fpcmp_parts_d+0x44>
    b654:	01c00084 	movi	r7,2
    b658:	19c00626 	beq	r3,r7,b674 <__fpcmp_parts_d+0x40>
    b65c:	31c00a26 	beq	r6,r7,b688 <__fpcmp_parts_d+0x54>
    b660:	20c00117 	ldw	r3,4(r4)
    b664:	29800117 	ldw	r6,4(r5)
    b668:	19800b26 	beq	r3,r6,b698 <__fpcmp_parts_d+0x64>
    b66c:	1800041e 	bne	r3,zero,b680 <__fpcmp_parts_d+0x4c>
    b670:	f800283a 	ret
    b674:	30c01a26 	beq	r6,r3,b6e0 <__fpcmp_parts_d+0xac>
    b678:	28800117 	ldw	r2,4(r5)
    b67c:	1000041e 	bne	r2,zero,b690 <__fpcmp_parts_d+0x5c>
    b680:	00bfffc4 	movi	r2,-1
    b684:	f800283a 	ret
    b688:	20800117 	ldw	r2,4(r4)
    b68c:	103ffc1e 	bne	r2,zero,b680 <__fpcmp_parts_d+0x4c>
    b690:	00800044 	movi	r2,1
    b694:	f800283a 	ret
    b698:	21c00217 	ldw	r7,8(r4)
    b69c:	29800217 	ldw	r6,8(r5)
    b6a0:	31c0020e 	bge	r6,r7,b6ac <__fpcmp_parts_d+0x78>
    b6a4:	183ff61e 	bne	r3,zero,b680 <__fpcmp_parts_d+0x4c>
    b6a8:	f800283a 	ret
    b6ac:	39800a16 	blt	r7,r6,b6d8 <__fpcmp_parts_d+0xa4>
    b6b0:	20800417 	ldw	r2,16(r4)
    b6b4:	29800417 	ldw	r6,16(r5)
    b6b8:	21c00317 	ldw	r7,12(r4)
    b6bc:	29000317 	ldw	r4,12(r5)
    b6c0:	30800936 	bltu	r6,r2,b6e8 <__fpcmp_parts_d+0xb4>
    b6c4:	1180011e 	bne	r2,r6,b6cc <__fpcmp_parts_d+0x98>
    b6c8:	21c00736 	bltu	r4,r7,b6e8 <__fpcmp_parts_d+0xb4>
    b6cc:	11800236 	bltu	r2,r6,b6d8 <__fpcmp_parts_d+0xa4>
    b6d0:	3080031e 	bne	r6,r2,b6e0 <__fpcmp_parts_d+0xac>
    b6d4:	3900022e 	bgeu	r7,r4,b6e0 <__fpcmp_parts_d+0xac>
    b6d8:	183fe926 	beq	r3,zero,b680 <__fpcmp_parts_d+0x4c>
    b6dc:	003fec06 	br	b690 <__fpcmp_parts_d+0x5c>
    b6e0:	0005883a 	mov	r2,zero
    b6e4:	f800283a 	ret
    b6e8:	183fe926 	beq	r3,zero,b690 <__fpcmp_parts_d+0x5c>
    b6ec:	003fe406 	br	b680 <__fpcmp_parts_d+0x4c>
    b6f0:	30ffe51e 	bne	r6,r3,b688 <__fpcmp_parts_d+0x54>
    b6f4:	28c00117 	ldw	r3,4(r5)
    b6f8:	20800117 	ldw	r2,4(r4)
    b6fc:	1885c83a 	sub	r2,r3,r2
    b700:	f800283a 	ret

0000b704 <__lshrdi3>:
    b704:	2005883a 	mov	r2,r4
    b708:	2807883a 	mov	r3,r5
    b70c:	30000826 	beq	r6,zero,b730 <__lshrdi3+0x2c>
    b710:	01000804 	movi	r4,32
    b714:	2189c83a 	sub	r4,r4,r6
    b718:	0100060e 	bge	zero,r4,b734 <__lshrdi3+0x30>
    b71c:	1184d83a 	srl	r2,r2,r6
    b720:	2908983a 	sll	r4,r5,r4
    b724:	298cd83a 	srl	r6,r5,r6
    b728:	2084b03a 	or	r2,r4,r2
    b72c:	3007883a 	mov	r3,r6
    b730:	f800283a 	ret
    b734:	0105c83a 	sub	r2,zero,r4
    b738:	000d883a 	mov	r6,zero
    b73c:	2884d83a 	srl	r2,r5,r2
    b740:	3007883a 	mov	r3,r6
    b744:	003ffa06 	br	b730 <__lshrdi3+0x2c>

0000b748 <__ashldi3>:
    b748:	2005883a 	mov	r2,r4
    b74c:	2807883a 	mov	r3,r5
    b750:	30000826 	beq	r6,zero,b774 <__ashldi3+0x2c>
    b754:	01000804 	movi	r4,32
    b758:	2189c83a 	sub	r4,r4,r6
    b75c:	0100060e 	bge	zero,r4,b778 <__ashldi3+0x30>
    b760:	1108d83a 	srl	r4,r2,r4
    b764:	2986983a 	sll	r3,r5,r6
    b768:	118c983a 	sll	r6,r2,r6
    b76c:	20c6b03a 	or	r3,r4,r3
    b770:	3005883a 	mov	r2,r6
    b774:	f800283a 	ret
    b778:	0107c83a 	sub	r3,zero,r4
    b77c:	000d883a 	mov	r6,zero
    b780:	10c6983a 	sll	r3,r2,r3
    b784:	3005883a 	mov	r2,r6
    b788:	003ffa06 	br	b774 <__ashldi3+0x2c>

0000b78c <memset>:
    b78c:	2005883a 	mov	r2,r4
    b790:	30000526 	beq	r6,zero,b7a8 <memset+0x1c>
    b794:	218d883a 	add	r6,r4,r6
    b798:	2007883a 	mov	r3,r4
    b79c:	19400005 	stb	r5,0(r3)
    b7a0:	18c00044 	addi	r3,r3,1
    b7a4:	19bffd1e 	bne	r3,r6,b79c <memset+0x10>
    b7a8:	f800283a 	ret

0000b7ac <_printf_r>:
    b7ac:	defffd04 	addi	sp,sp,-12
    b7b0:	dfc00015 	stw	ra,0(sp)
    b7b4:	d9800115 	stw	r6,4(sp)
    b7b8:	d9c00215 	stw	r7,8(sp)
    b7bc:	20800217 	ldw	r2,8(r4)
    b7c0:	00c00074 	movhi	r3,1
    b7c4:	18f01204 	addi	r3,r3,-16312
    b7c8:	280d883a 	mov	r6,r5
    b7cc:	10c00115 	stw	r3,4(r2)
    b7d0:	100b883a 	mov	r5,r2
    b7d4:	d9c00104 	addi	r7,sp,4
    b7d8:	000b8f00 	call	b8f0 <___vfprintf_internal_r>
    b7dc:	dfc00017 	ldw	ra,0(sp)
    b7e0:	dec00304 	addi	sp,sp,12
    b7e4:	f800283a 	ret

0000b7e8 <printf>:
    b7e8:	defffc04 	addi	sp,sp,-16
    b7ec:	dfc00015 	stw	ra,0(sp)
    b7f0:	d9400115 	stw	r5,4(sp)
    b7f4:	d9800215 	stw	r6,8(sp)
    b7f8:	d9c00315 	stw	r7,12(sp)
    b7fc:	00800074 	movhi	r2,1
    b800:	10b81304 	addi	r2,r2,-8116
    b804:	10800017 	ldw	r2,0(r2)
    b808:	00c00074 	movhi	r3,1
    b80c:	18f01204 	addi	r3,r3,-16312
    b810:	200b883a 	mov	r5,r4
    b814:	10800217 	ldw	r2,8(r2)
    b818:	d9800104 	addi	r6,sp,4
    b81c:	10c00115 	stw	r3,4(r2)
    b820:	1009883a 	mov	r4,r2
    b824:	000c0240 	call	c024 <__vfprintf_internal>
    b828:	dfc00017 	ldw	ra,0(sp)
    b82c:	dec00404 	addi	sp,sp,16
    b830:	f800283a 	ret

0000b834 <_puts_r>:
    b834:	defffd04 	addi	sp,sp,-12
    b838:	dc000015 	stw	r16,0(sp)
    b83c:	2021883a 	mov	r16,r4
    b840:	2809883a 	mov	r4,r5
    b844:	dfc00215 	stw	ra,8(sp)
    b848:	dc400115 	stw	r17,4(sp)
    b84c:	2823883a 	mov	r17,r5
    b850:	000b8c80 	call	b8c8 <strlen>
    b854:	81400217 	ldw	r5,8(r16)
    b858:	00c00074 	movhi	r3,1
    b85c:	18f01204 	addi	r3,r3,-16312
    b860:	880d883a 	mov	r6,r17
    b864:	8009883a 	mov	r4,r16
    b868:	28c00115 	stw	r3,4(r5)
    b86c:	100f883a 	mov	r7,r2
    b870:	183ee83a 	callr	r3
    b874:	047fffc4 	movi	r17,-1
    b878:	14400926 	beq	r2,r17,b8a0 <_puts_r+0x6c>
    b87c:	81400217 	ldw	r5,8(r16)
    b880:	8009883a 	mov	r4,r16
    b884:	01800074 	movhi	r6,1
    b888:	31b73c04 	addi	r6,r6,-8976
    b88c:	28800117 	ldw	r2,4(r5)
    b890:	01c00044 	movi	r7,1
    b894:	103ee83a 	callr	r2
    b898:	14400126 	beq	r2,r17,b8a0 <_puts_r+0x6c>
    b89c:	0005883a 	mov	r2,zero
    b8a0:	dfc00217 	ldw	ra,8(sp)
    b8a4:	dc400117 	ldw	r17,4(sp)
    b8a8:	dc000017 	ldw	r16,0(sp)
    b8ac:	dec00304 	addi	sp,sp,12
    b8b0:	f800283a 	ret

0000b8b4 <puts>:
    b8b4:	00800074 	movhi	r2,1
    b8b8:	10b81304 	addi	r2,r2,-8116
    b8bc:	200b883a 	mov	r5,r4
    b8c0:	11000017 	ldw	r4,0(r2)
    b8c4:	000b8341 	jmpi	b834 <_puts_r>

0000b8c8 <strlen>:
    b8c8:	20800007 	ldb	r2,0(r4)
    b8cc:	10000626 	beq	r2,zero,b8e8 <strlen+0x20>
    b8d0:	2005883a 	mov	r2,r4
    b8d4:	10800044 	addi	r2,r2,1
    b8d8:	10c00007 	ldb	r3,0(r2)
    b8dc:	183ffd1e 	bne	r3,zero,b8d4 <strlen+0xc>
    b8e0:	1105c83a 	sub	r2,r2,r4
    b8e4:	f800283a 	ret
    b8e8:	0005883a 	mov	r2,zero
    b8ec:	f800283a 	ret

0000b8f0 <___vfprintf_internal_r>:
    b8f0:	deffe004 	addi	sp,sp,-128
    b8f4:	d8c00804 	addi	r3,sp,32
    b8f8:	ddc01d15 	stw	r23,116(sp)
    b8fc:	dd401b15 	stw	r21,108(sp)
    b900:	dd001a15 	stw	r20,104(sp)
    b904:	dcc01915 	stw	r19,100(sp)
    b908:	dc801815 	stw	r18,96(sp)
    b90c:	dc001615 	stw	r16,88(sp)
    b910:	dfc01f15 	stw	ra,124(sp)
    b914:	df001e15 	stw	fp,120(sp)
    b918:	dd801c15 	stw	r22,112(sp)
    b91c:	dc401715 	stw	r17,92(sp)
    b920:	d9000f15 	stw	r4,60(sp)
    b924:	d9c00e15 	stw	r7,56(sp)
    b928:	3021883a 	mov	r16,r6
    b92c:	0025883a 	mov	r18,zero
    b930:	d8001415 	stw	zero,80(sp)
    b934:	d8000d15 	stw	zero,52(sp)
    b938:	0029883a 	mov	r20,zero
    b93c:	d8000b15 	stw	zero,44(sp)
    b940:	d8000c15 	stw	zero,48(sp)
    b944:	d8001315 	stw	zero,76(sp)
    b948:	d8001015 	stw	zero,64(sp)
    b94c:	002b883a 	mov	r21,zero
    b950:	04c00044 	movi	r19,1
    b954:	d8c00a15 	stw	r3,40(sp)
    b958:	282f883a 	mov	r23,r5
    b95c:	80c00003 	ldbu	r3,0(r16)
    b960:	84000044 	addi	r16,r16,1
    b964:	18803fcc 	andi	r2,r3,255
    b968:	1080201c 	xori	r2,r2,128
    b96c:	10bfe004 	addi	r2,r2,-128
    b970:	10001426 	beq	r2,zero,b9c4 <___vfprintf_internal_r+0xd4>
    b974:	acc03026 	beq	r21,r19,ba38 <___vfprintf_internal_r+0x148>
    b978:	9d401f16 	blt	r19,r21,b9f8 <___vfprintf_internal_r+0x108>
    b97c:	a83ff71e 	bne	r21,zero,b95c <___vfprintf_internal_r+0x6c>
    b980:	01000944 	movi	r4,37
    b984:	1100d926 	beq	r2,r4,bcec <___vfprintf_internal_r+0x3fc>
    b988:	b8800117 	ldw	r2,4(r23)
    b98c:	d9000f17 	ldw	r4,60(sp)
    b990:	d8c00905 	stb	r3,36(sp)
    b994:	b80b883a 	mov	r5,r23
    b998:	d9800904 	addi	r6,sp,36
    b99c:	01c00044 	movi	r7,1
    b9a0:	103ee83a 	callr	r2
    b9a4:	1000a31e 	bne	r2,zero,bc34 <___vfprintf_internal_r+0x344>
    b9a8:	80c00003 	ldbu	r3,0(r16)
    b9ac:	94800044 	addi	r18,r18,1
    b9b0:	84000044 	addi	r16,r16,1
    b9b4:	18803fcc 	andi	r2,r3,255
    b9b8:	1080201c 	xori	r2,r2,128
    b9bc:	10bfe004 	addi	r2,r2,-128
    b9c0:	103fec1e 	bne	r2,zero,b974 <___vfprintf_internal_r+0x84>
    b9c4:	9005883a 	mov	r2,r18
    b9c8:	dfc01f17 	ldw	ra,124(sp)
    b9cc:	df001e17 	ldw	fp,120(sp)
    b9d0:	ddc01d17 	ldw	r23,116(sp)
    b9d4:	dd801c17 	ldw	r22,112(sp)
    b9d8:	dd401b17 	ldw	r21,108(sp)
    b9dc:	dd001a17 	ldw	r20,104(sp)
    b9e0:	dcc01917 	ldw	r19,100(sp)
    b9e4:	dc801817 	ldw	r18,96(sp)
    b9e8:	dc401717 	ldw	r17,92(sp)
    b9ec:	dc001617 	ldw	r16,88(sp)
    b9f0:	dec02004 	addi	sp,sp,128
    b9f4:	f800283a 	ret
    b9f8:	01000084 	movi	r4,2
    b9fc:	a9001226 	beq	r21,r4,ba48 <___vfprintf_internal_r+0x158>
    ba00:	010000c4 	movi	r4,3
    ba04:	a93fd51e 	bne	r21,r4,b95c <___vfprintf_internal_r+0x6c>
    ba08:	1c7ff404 	addi	r17,r3,-48
    ba0c:	8c403fcc 	andi	r17,r17,255
    ba10:	01000244 	movi	r4,9
    ba14:	24401b36 	bltu	r4,r17,ba84 <___vfprintf_internal_r+0x194>
    ba18:	d9000b17 	ldw	r4,44(sp)
    ba1c:	00bfffc4 	movi	r2,-1
    ba20:	2080ea26 	beq	r4,r2,bdcc <___vfprintf_internal_r+0x4dc>
    ba24:	01400284 	movi	r5,10
    ba28:	000b1280 	call	b128 <__mulsi3>
    ba2c:	88a3883a 	add	r17,r17,r2
    ba30:	dc400b15 	stw	r17,44(sp)
    ba34:	003fc906 	br	b95c <___vfprintf_internal_r+0x6c>
    ba38:	01000c04 	movi	r4,48
    ba3c:	1100de26 	beq	r2,r4,bdb8 <___vfprintf_internal_r+0x4c8>
    ba40:	01000944 	movi	r4,37
    ba44:	1100fd26 	beq	r2,r4,be3c <___vfprintf_internal_r+0x54c>
    ba48:	1c7ff404 	addi	r17,r3,-48
    ba4c:	8c403fcc 	andi	r17,r17,255
    ba50:	01000244 	movi	r4,9
    ba54:	24400936 	bltu	r4,r17,ba7c <___vfprintf_internal_r+0x18c>
    ba58:	d9000c17 	ldw	r4,48(sp)
    ba5c:	00bfffc4 	movi	r2,-1
    ba60:	2080d826 	beq	r4,r2,bdc4 <___vfprintf_internal_r+0x4d4>
    ba64:	01400284 	movi	r5,10
    ba68:	000b1280 	call	b128 <__mulsi3>
    ba6c:	88a3883a 	add	r17,r17,r2
    ba70:	dc400c15 	stw	r17,48(sp)
    ba74:	05400084 	movi	r21,2
    ba78:	003fb806 	br	b95c <___vfprintf_internal_r+0x6c>
    ba7c:	01000b84 	movi	r4,46
    ba80:	1100a726 	beq	r2,r4,bd20 <___vfprintf_internal_r+0x430>
    ba84:	01401b04 	movi	r5,108
    ba88:	1140a326 	beq	r2,r5,bd18 <___vfprintf_internal_r+0x428>
    ba8c:	d9000b17 	ldw	r4,44(sp)
    ba90:	00bfffc4 	movi	r2,-1
    ba94:	2080e626 	beq	r4,r2,be30 <___vfprintf_internal_r+0x540>
    ba98:	d8001015 	stw	zero,64(sp)
    ba9c:	18ffea04 	addi	r3,r3,-88
    baa0:	18c03fcc 	andi	r3,r3,255
    baa4:	00800804 	movi	r2,32
    baa8:	10c0022e 	bgeu	r2,r3,bab4 <___vfprintf_internal_r+0x1c4>
    baac:	002b883a 	mov	r21,zero
    bab0:	003faa06 	br	b95c <___vfprintf_internal_r+0x6c>
    bab4:	18c7883a 	add	r3,r3,r3
    bab8:	18c7883a 	add	r3,r3,r3
    babc:	01400074 	movhi	r5,1
    bac0:	296eb404 	addi	r5,r5,-17712
    bac4:	1947883a 	add	r3,r3,r5
    bac8:	18800017 	ldw	r2,0(r3)
    bacc:	1000683a 	jmp	r2
    bad0:	0000be68 	cmpgeui	zero,zero,761
    bad4:	0000baac 	andhi	zero,zero,746
    bad8:	0000baac 	andhi	zero,zero,746
    badc:	0000baac 	andhi	zero,zero,746
    bae0:	0000baac 	andhi	zero,zero,746
    bae4:	0000baac 	andhi	zero,zero,746
    bae8:	0000baac 	andhi	zero,zero,746
    baec:	0000baac 	andhi	zero,zero,746
    baf0:	0000baac 	andhi	zero,zero,746
    baf4:	0000baac 	andhi	zero,zero,746
    baf8:	0000baac 	andhi	zero,zero,746
    bafc:	0000be78 	rdprs	zero,zero,761
    bb00:	0000bb54 	movui	zero,749
    bb04:	0000baac 	andhi	zero,zero,746
    bb08:	0000baac 	andhi	zero,zero,746
    bb0c:	0000baac 	andhi	zero,zero,746
    bb10:	0000baac 	andhi	zero,zero,746
    bb14:	0000bb54 	movui	zero,749
    bb18:	0000baac 	andhi	zero,zero,746
    bb1c:	0000baac 	andhi	zero,zero,746
    bb20:	0000baac 	andhi	zero,zero,746
    bb24:	0000baac 	andhi	zero,zero,746
    bb28:	0000baac 	andhi	zero,zero,746
    bb2c:	0000bc3c 	xorhi	zero,zero,752
    bb30:	0000baac 	andhi	zero,zero,746
    bb34:	0000baac 	andhi	zero,zero,746
    bb38:	0000baac 	andhi	zero,zero,746
    bb3c:	0000bec4 	movi	zero,763
    bb40:	0000baac 	andhi	zero,zero,746
    bb44:	0000bc40 	call	bc4 <__alt_mem_onchip_mem-0x743c>
    bb48:	0000baac 	andhi	zero,zero,746
    bb4c:	0000baac 	andhi	zero,zero,746
    bb50:	0000be70 	cmpltui	zero,zero,761
    bb54:	d8c00d17 	ldw	r3,52(sp)
    bb58:	18003926 	beq	r3,zero,bc40 <___vfprintf_internal_r+0x350>
    bb5c:	d9000e17 	ldw	r4,56(sp)
    bb60:	00c00044 	movi	r3,1
    bb64:	25400017 	ldw	r21,0(r4)
    bb68:	21000104 	addi	r4,r4,4
    bb6c:	d9000e15 	stw	r4,56(sp)
    bb70:	d8c00d15 	stw	r3,52(sp)
    bb74:	a8012116 	blt	r21,zero,bffc <___vfprintf_internal_r+0x70c>
    bb78:	d8001215 	stw	zero,72(sp)
    bb7c:	d823883a 	mov	r17,sp
    bb80:	a800371e 	bne	r21,zero,bc60 <___vfprintf_internal_r+0x370>
    bb84:	d9400b17 	ldw	r5,44(sp)
    bb88:	d809883a 	mov	r4,sp
    bb8c:	01400b0e 	bge	zero,r5,bbbc <___vfprintf_internal_r+0x2cc>
    bb90:	d8800b17 	ldw	r2,44(sp)
    bb94:	d823883a 	mov	r17,sp
    bb98:	00c00c04 	movi	r3,48
    bb9c:	00000206 	br	bba8 <___vfprintf_internal_r+0x2b8>
    bba0:	d9400a17 	ldw	r5,40(sp)
    bba4:	89400426 	beq	r17,r5,bbb8 <___vfprintf_internal_r+0x2c8>
    bba8:	88c00005 	stb	r3,0(r17)
    bbac:	10bfffc4 	addi	r2,r2,-1
    bbb0:	8c400044 	addi	r17,r17,1
    bbb4:	103ffa1e 	bne	r2,zero,bba0 <___vfprintf_internal_r+0x2b0>
    bbb8:	892bc83a 	sub	r21,r17,r4
    bbbc:	d8c01217 	ldw	r3,72(sp)
    bbc0:	d9000c17 	ldw	r4,48(sp)
    bbc4:	a8c5883a 	add	r2,r21,r3
    bbc8:	d8c01017 	ldw	r3,64(sp)
    bbcc:	2085c83a 	sub	r2,r4,r2
    bbd0:	d8801115 	stw	r2,68(sp)
    bbd4:	18007f26 	beq	r3,zero,bdd4 <___vfprintf_internal_r+0x4e4>
    bbd8:	d8c01217 	ldw	r3,72(sp)
    bbdc:	1800fa1e 	bne	r3,zero,bfc8 <___vfprintf_internal_r+0x6d8>
    bbe0:	d8c01117 	ldw	r3,68(sp)
    bbe4:	00c0620e 	bge	zero,r3,bd70 <___vfprintf_internal_r+0x480>
    bbe8:	00800c04 	movi	r2,48
    bbec:	d88008c5 	stb	r2,35(sp)
    bbf0:	b805883a 	mov	r2,r23
    bbf4:	dc001215 	stw	r16,72(sp)
    bbf8:	882f883a 	mov	r23,r17
    bbfc:	1f3fffc4 	addi	fp,r3,-1
    bc00:	05bfffc4 	movi	r22,-1
    bc04:	dc000f17 	ldw	r16,60(sp)
    bc08:	1023883a 	mov	r17,r2
    bc0c:	00000206 	br	bc18 <___vfprintf_internal_r+0x328>
    bc10:	e73fffc4 	addi	fp,fp,-1
    bc14:	e580fc26 	beq	fp,r22,c008 <___vfprintf_internal_r+0x718>
    bc18:	88800117 	ldw	r2,4(r17)
    bc1c:	8009883a 	mov	r4,r16
    bc20:	880b883a 	mov	r5,r17
    bc24:	d98008c4 	addi	r6,sp,35
    bc28:	01c00044 	movi	r7,1
    bc2c:	103ee83a 	callr	r2
    bc30:	103ff726 	beq	r2,zero,bc10 <___vfprintf_internal_r+0x320>
    bc34:	04bfffc4 	movi	r18,-1
    bc38:	003f6206 	br	b9c4 <___vfprintf_internal_r+0xd4>
    bc3c:	05000204 	movi	r20,8
    bc40:	d9400e17 	ldw	r5,56(sp)
    bc44:	2d400017 	ldw	r21,0(r5)
    bc48:	29400104 	addi	r5,r5,4
    bc4c:	d9400e15 	stw	r5,56(sp)
    bc50:	d8000d15 	stw	zero,52(sp)
    bc54:	d8001215 	stw	zero,72(sp)
    bc58:	d823883a 	mov	r17,sp
    bc5c:	a83fc926 	beq	r21,zero,bb84 <___vfprintf_internal_r+0x294>
    bc60:	05800244 	movi	r22,9
    bc64:	dc001115 	stw	r16,68(sp)
    bc68:	df001417 	ldw	fp,80(sp)
    bc6c:	00000506 	br	bc84 <___vfprintf_internal_r+0x394>
    bc70:	15400c04 	addi	r21,r2,48
    bc74:	8d400005 	stb	r21,0(r17)
    bc78:	802b883a 	mov	r21,r16
    bc7c:	8c400044 	addi	r17,r17,1
    bc80:	80000f26 	beq	r16,zero,bcc0 <___vfprintf_internal_r+0x3d0>
    bc84:	a809883a 	mov	r4,r21
    bc88:	a00b883a 	mov	r5,r20
    bc8c:	000b1180 	call	b118 <__udivsi3>
    bc90:	a009883a 	mov	r4,r20
    bc94:	100b883a 	mov	r5,r2
    bc98:	1021883a 	mov	r16,r2
    bc9c:	000b1280 	call	b128 <__mulsi3>
    bca0:	a885c83a 	sub	r2,r21,r2
    bca4:	b0bff20e 	bge	r22,r2,bc70 <___vfprintf_internal_r+0x380>
    bca8:	e0000e26 	beq	fp,zero,bce4 <___vfprintf_internal_r+0x3f4>
    bcac:	15400dc4 	addi	r21,r2,55
    bcb0:	8d400005 	stb	r21,0(r17)
    bcb4:	802b883a 	mov	r21,r16
    bcb8:	8c400044 	addi	r17,r17,1
    bcbc:	803ff11e 	bne	r16,zero,bc84 <___vfprintf_internal_r+0x394>
    bcc0:	d9000b17 	ldw	r4,44(sp)
    bcc4:	8eebc83a 	sub	r21,r17,sp
    bcc8:	dc001117 	ldw	r16,68(sp)
    bccc:	2545c83a 	sub	r2,r4,r21
    bcd0:	d809883a 	mov	r4,sp
    bcd4:	00bfb90e 	bge	zero,r2,bbbc <___vfprintf_internal_r+0x2cc>
    bcd8:	d8c00a17 	ldw	r3,40(sp)
    bcdc:	88ffae36 	bltu	r17,r3,bb98 <___vfprintf_internal_r+0x2a8>
    bce0:	003fb606 	br	bbbc <___vfprintf_internal_r+0x2cc>
    bce4:	154015c4 	addi	r21,r2,87
    bce8:	003fe206 	br	bc74 <___vfprintf_internal_r+0x384>
    bcec:	00c00044 	movi	r3,1
    bcf0:	013fffc4 	movi	r4,-1
    bcf4:	d8c00d15 	stw	r3,52(sp)
    bcf8:	d9000b15 	stw	r4,44(sp)
    bcfc:	d8001415 	stw	zero,80(sp)
    bd00:	05000284 	movi	r20,10
    bd04:	d9000c15 	stw	r4,48(sp)
    bd08:	d8001315 	stw	zero,76(sp)
    bd0c:	d8001015 	stw	zero,64(sp)
    bd10:	182b883a 	mov	r21,r3
    bd14:	003f1106 	br	b95c <___vfprintf_internal_r+0x6c>
    bd18:	00c00044 	movi	r3,1
    bd1c:	d8c01315 	stw	r3,76(sp)
    bd20:	054000c4 	movi	r21,3
    bd24:	003f0d06 	br	b95c <___vfprintf_internal_r+0x6c>
    bd28:	d8c01117 	ldw	r3,68(sp)
    bd2c:	dc001517 	ldw	r16,84(sp)
    bd30:	8805883a 	mov	r2,r17
    bd34:	90e5883a 	add	r18,r18,r3
    bd38:	b823883a 	mov	r17,r23
    bd3c:	102f883a 	mov	r23,r2
    bd40:	d8c01217 	ldw	r3,72(sp)
    bd44:	18000a26 	beq	r3,zero,bd70 <___vfprintf_internal_r+0x480>
    bd48:	b8800117 	ldw	r2,4(r23)
    bd4c:	d9000f17 	ldw	r4,60(sp)
    bd50:	00c00b44 	movi	r3,45
    bd54:	d8c00905 	stb	r3,36(sp)
    bd58:	b80b883a 	mov	r5,r23
    bd5c:	d9800904 	addi	r6,sp,36
    bd60:	01c00044 	movi	r7,1
    bd64:	103ee83a 	callr	r2
    bd68:	103fb21e 	bne	r2,zero,bc34 <___vfprintf_internal_r+0x344>
    bd6c:	94800044 	addi	r18,r18,1
    bd70:	8d6dc83a 	sub	r22,r17,r21
    bd74:	057f4d0e 	bge	zero,r21,baac <___vfprintf_internal_r+0x1bc>
    bd78:	dd400f17 	ldw	r21,60(sp)
    bd7c:	00000206 	br	bd88 <___vfprintf_internal_r+0x498>
    bd80:	94800044 	addi	r18,r18,1
    bd84:	8dbf4926 	beq	r17,r22,baac <___vfprintf_internal_r+0x1bc>
    bd88:	8c7fffc4 	addi	r17,r17,-1
    bd8c:	88c00003 	ldbu	r3,0(r17)
    bd90:	b8800117 	ldw	r2,4(r23)
    bd94:	a809883a 	mov	r4,r21
    bd98:	d8c00905 	stb	r3,36(sp)
    bd9c:	b80b883a 	mov	r5,r23
    bda0:	d9800904 	addi	r6,sp,36
    bda4:	01c00044 	movi	r7,1
    bda8:	103ee83a 	callr	r2
    bdac:	103ff426 	beq	r2,zero,bd80 <___vfprintf_internal_r+0x490>
    bdb0:	04bfffc4 	movi	r18,-1
    bdb4:	003f0306 	br	b9c4 <___vfprintf_internal_r+0xd4>
    bdb8:	dd401015 	stw	r21,64(sp)
    bdbc:	05400084 	movi	r21,2
    bdc0:	003ee606 	br	b95c <___vfprintf_internal_r+0x6c>
    bdc4:	0005883a 	mov	r2,zero
    bdc8:	003f2806 	br	ba6c <___vfprintf_internal_r+0x17c>
    bdcc:	0005883a 	mov	r2,zero
    bdd0:	003f1606 	br	ba2c <___vfprintf_internal_r+0x13c>
    bdd4:	d8c01117 	ldw	r3,68(sp)
    bdd8:	00ffd90e 	bge	zero,r3,bd40 <___vfprintf_internal_r+0x450>
    bddc:	00800804 	movi	r2,32
    bde0:	d8800885 	stb	r2,34(sp)
    bde4:	b805883a 	mov	r2,r23
    bde8:	dc001515 	stw	r16,84(sp)
    bdec:	882f883a 	mov	r23,r17
    bdf0:	1f3fffc4 	addi	fp,r3,-1
    bdf4:	05bfffc4 	movi	r22,-1
    bdf8:	dc000f17 	ldw	r16,60(sp)
    bdfc:	1023883a 	mov	r17,r2
    be00:	00000206 	br	be0c <___vfprintf_internal_r+0x51c>
    be04:	e73fffc4 	addi	fp,fp,-1
    be08:	e5bfc726 	beq	fp,r22,bd28 <___vfprintf_internal_r+0x438>
    be0c:	88800117 	ldw	r2,4(r17)
    be10:	8009883a 	mov	r4,r16
    be14:	880b883a 	mov	r5,r17
    be18:	d9800884 	addi	r6,sp,34
    be1c:	01c00044 	movi	r7,1
    be20:	103ee83a 	callr	r2
    be24:	103ff726 	beq	r2,zero,be04 <___vfprintf_internal_r+0x514>
    be28:	04bfffc4 	movi	r18,-1
    be2c:	003ee506 	br	b9c4 <___vfprintf_internal_r+0xd4>
    be30:	01000044 	movi	r4,1
    be34:	d9000b15 	stw	r4,44(sp)
    be38:	003f1806 	br	ba9c <___vfprintf_internal_r+0x1ac>
    be3c:	b8c00117 	ldw	r3,4(r23)
    be40:	d9000f17 	ldw	r4,60(sp)
    be44:	d8800905 	stb	r2,36(sp)
    be48:	b80b883a 	mov	r5,r23
    be4c:	d9800904 	addi	r6,sp,36
    be50:	a80f883a 	mov	r7,r21
    be54:	183ee83a 	callr	r3
    be58:	103f761e 	bne	r2,zero,bc34 <___vfprintf_internal_r+0x344>
    be5c:	94800044 	addi	r18,r18,1
    be60:	002b883a 	mov	r21,zero
    be64:	003ebd06 	br	b95c <___vfprintf_internal_r+0x6c>
    be68:	00c00044 	movi	r3,1
    be6c:	d8c01415 	stw	r3,80(sp)
    be70:	05000404 	movi	r20,16
    be74:	003f7206 	br	bc40 <___vfprintf_internal_r+0x350>
    be78:	d9000c17 	ldw	r4,48(sp)
    be7c:	9900420e 	bge	r19,r4,bf88 <___vfprintf_internal_r+0x698>
    be80:	df000f17 	ldw	fp,60(sp)
    be84:	25bfffc4 	addi	r22,r4,-1
    be88:	00800804 	movi	r2,32
    be8c:	d8800845 	stb	r2,33(sp)
    be90:	b023883a 	mov	r17,r22
    be94:	057fffc4 	movi	r21,-1
    be98:	8c7fffc4 	addi	r17,r17,-1
    be9c:	8d403926 	beq	r17,r21,bf84 <___vfprintf_internal_r+0x694>
    bea0:	b8800117 	ldw	r2,4(r23)
    bea4:	e009883a 	mov	r4,fp
    bea8:	b80b883a 	mov	r5,r23
    beac:	d9800844 	addi	r6,sp,33
    beb0:	01c00044 	movi	r7,1
    beb4:	103ee83a 	callr	r2
    beb8:	103ff726 	beq	r2,zero,be98 <___vfprintf_internal_r+0x5a8>
    bebc:	04bfffc4 	movi	r18,-1
    bec0:	003ec006 	br	b9c4 <___vfprintf_internal_r+0xd4>
    bec4:	d9000e17 	ldw	r4,56(sp)
    bec8:	d8c00e17 	ldw	r3,56(sp)
    becc:	21000017 	ldw	r4,0(r4)
    bed0:	18c00104 	addi	r3,r3,4
    bed4:	d8c00e15 	stw	r3,56(sp)
    bed8:	d9001215 	stw	r4,72(sp)
    bedc:	000b8c80 	call	b8c8 <strlen>
    bee0:	d9000c17 	ldw	r4,48(sp)
    bee4:	102d883a 	mov	r22,r2
    bee8:	20b9c83a 	sub	fp,r4,r2
    beec:	07001b0e 	bge	zero,fp,bf5c <___vfprintf_internal_r+0x66c>
    bef0:	00800804 	movi	r2,32
    bef4:	d8800805 	stb	r2,32(sp)
    bef8:	b805883a 	mov	r2,r23
    befc:	dc001115 	stw	r16,68(sp)
    bf00:	b02f883a 	mov	r23,r22
    bf04:	e47fffc4 	addi	r17,fp,-1
    bf08:	902d883a 	mov	r22,r18
    bf0c:	057fffc4 	movi	r21,-1
    bf10:	dc000f17 	ldw	r16,60(sp)
    bf14:	1025883a 	mov	r18,r2
    bf18:	00000206 	br	bf24 <___vfprintf_internal_r+0x634>
    bf1c:	8c7fffc4 	addi	r17,r17,-1
    bf20:	8d400826 	beq	r17,r21,bf44 <___vfprintf_internal_r+0x654>
    bf24:	90800117 	ldw	r2,4(r18)
    bf28:	8009883a 	mov	r4,r16
    bf2c:	900b883a 	mov	r5,r18
    bf30:	d9800804 	addi	r6,sp,32
    bf34:	01c00044 	movi	r7,1
    bf38:	103ee83a 	callr	r2
    bf3c:	103ff726 	beq	r2,zero,bf1c <___vfprintf_internal_r+0x62c>
    bf40:	003f3c06 	br	bc34 <___vfprintf_internal_r+0x344>
    bf44:	dc001117 	ldw	r16,68(sp)
    bf48:	9005883a 	mov	r2,r18
    bf4c:	b025883a 	mov	r18,r22
    bf50:	9725883a 	add	r18,r18,fp
    bf54:	b82d883a 	mov	r22,r23
    bf58:	102f883a 	mov	r23,r2
    bf5c:	b8800117 	ldw	r2,4(r23)
    bf60:	d9000f17 	ldw	r4,60(sp)
    bf64:	d9801217 	ldw	r6,72(sp)
    bf68:	b80b883a 	mov	r5,r23
    bf6c:	b00f883a 	mov	r7,r22
    bf70:	103ee83a 	callr	r2
    bf74:	103f2f1e 	bne	r2,zero,bc34 <___vfprintf_internal_r+0x344>
    bf78:	95a5883a 	add	r18,r18,r22
    bf7c:	002b883a 	mov	r21,zero
    bf80:	003e7606 	br	b95c <___vfprintf_internal_r+0x6c>
    bf84:	95a5883a 	add	r18,r18,r22
    bf88:	d9400e17 	ldw	r5,56(sp)
    bf8c:	b8800117 	ldw	r2,4(r23)
    bf90:	d9000f17 	ldw	r4,60(sp)
    bf94:	28c00017 	ldw	r3,0(r5)
    bf98:	d9800904 	addi	r6,sp,36
    bf9c:	b80b883a 	mov	r5,r23
    bfa0:	d8c00905 	stb	r3,36(sp)
    bfa4:	d8c00e17 	ldw	r3,56(sp)
    bfa8:	01c00044 	movi	r7,1
    bfac:	1c400104 	addi	r17,r3,4
    bfb0:	103ee83a 	callr	r2
    bfb4:	103f1f1e 	bne	r2,zero,bc34 <___vfprintf_internal_r+0x344>
    bfb8:	94800044 	addi	r18,r18,1
    bfbc:	dc400e15 	stw	r17,56(sp)
    bfc0:	002b883a 	mov	r21,zero
    bfc4:	003e6506 	br	b95c <___vfprintf_internal_r+0x6c>
    bfc8:	b8800117 	ldw	r2,4(r23)
    bfcc:	d9000f17 	ldw	r4,60(sp)
    bfd0:	00c00b44 	movi	r3,45
    bfd4:	d8c00905 	stb	r3,36(sp)
    bfd8:	b80b883a 	mov	r5,r23
    bfdc:	d9800904 	addi	r6,sp,36
    bfe0:	01c00044 	movi	r7,1
    bfe4:	103ee83a 	callr	r2
    bfe8:	103f121e 	bne	r2,zero,bc34 <___vfprintf_internal_r+0x344>
    bfec:	d8c01117 	ldw	r3,68(sp)
    bff0:	94800044 	addi	r18,r18,1
    bff4:	00fefc16 	blt	zero,r3,bbe8 <___vfprintf_internal_r+0x2f8>
    bff8:	003f5d06 	br	bd70 <___vfprintf_internal_r+0x480>
    bffc:	056bc83a 	sub	r21,zero,r21
    c000:	d8c01215 	stw	r3,72(sp)
    c004:	003f1406 	br	bc58 <___vfprintf_internal_r+0x368>
    c008:	d8c01117 	ldw	r3,68(sp)
    c00c:	8805883a 	mov	r2,r17
    c010:	dc001217 	ldw	r16,72(sp)
    c014:	b823883a 	mov	r17,r23
    c018:	90e5883a 	add	r18,r18,r3
    c01c:	102f883a 	mov	r23,r2
    c020:	003f5306 	br	bd70 <___vfprintf_internal_r+0x480>

0000c024 <__vfprintf_internal>:
    c024:	00800074 	movhi	r2,1
    c028:	10b81304 	addi	r2,r2,-8116
    c02c:	2007883a 	mov	r3,r4
    c030:	11000017 	ldw	r4,0(r2)
    c034:	2805883a 	mov	r2,r5
    c038:	300f883a 	mov	r7,r6
    c03c:	180b883a 	mov	r5,r3
    c040:	100d883a 	mov	r6,r2
    c044:	000b8f01 	jmpi	b8f0 <___vfprintf_internal_r>

0000c048 <__sfvwrite_small_dev>:
    c048:	2880000b 	ldhu	r2,0(r5)
    c04c:	defffa04 	addi	sp,sp,-24
    c050:	dcc00315 	stw	r19,12(sp)
    c054:	10c0020c 	andi	r3,r2,8
    c058:	18ffffcc 	andi	r3,r3,65535
    c05c:	18e0001c 	xori	r3,r3,32768
    c060:	dc800215 	stw	r18,8(sp)
    c064:	dc400115 	stw	r17,4(sp)
    c068:	dfc00515 	stw	ra,20(sp)
    c06c:	dd000415 	stw	r20,16(sp)
    c070:	dc000015 	stw	r16,0(sp)
    c074:	18e00004 	addi	r3,r3,-32768
    c078:	2825883a 	mov	r18,r5
    c07c:	2027883a 	mov	r19,r4
    c080:	3023883a 	mov	r17,r6
    c084:	18002626 	beq	r3,zero,c120 <__sfvwrite_small_dev+0xd8>
    c088:	2940008f 	ldh	r5,2(r5)
    c08c:	28001016 	blt	r5,zero,c0d0 <__sfvwrite_small_dev+0x88>
    c090:	01c01a0e 	bge	zero,r7,c0fc <__sfvwrite_small_dev+0xb4>
    c094:	3821883a 	mov	r16,r7
    c098:	05010004 	movi	r20,1024
    c09c:	00000306 	br	c0ac <__sfvwrite_small_dev+0x64>
    c0a0:	88a3883a 	add	r17,r17,r2
    c0a4:	0400150e 	bge	zero,r16,c0fc <__sfvwrite_small_dev+0xb4>
    c0a8:	9140008f 	ldh	r5,2(r18)
    c0ac:	880d883a 	mov	r6,r17
    c0b0:	9809883a 	mov	r4,r19
    c0b4:	800f883a 	mov	r7,r16
    c0b8:	a400010e 	bge	r20,r16,c0c0 <__sfvwrite_small_dev+0x78>
    c0bc:	01c10004 	movi	r7,1024
    c0c0:	000c1280 	call	c128 <_write_r>
    c0c4:	80a1c83a 	sub	r16,r16,r2
    c0c8:	00bff516 	blt	zero,r2,c0a0 <__sfvwrite_small_dev+0x58>
    c0cc:	9080000b 	ldhu	r2,0(r18)
    c0d0:	10801014 	ori	r2,r2,64
    c0d4:	9080000d 	sth	r2,0(r18)
    c0d8:	00bfffc4 	movi	r2,-1
    c0dc:	dfc00517 	ldw	ra,20(sp)
    c0e0:	dd000417 	ldw	r20,16(sp)
    c0e4:	dcc00317 	ldw	r19,12(sp)
    c0e8:	dc800217 	ldw	r18,8(sp)
    c0ec:	dc400117 	ldw	r17,4(sp)
    c0f0:	dc000017 	ldw	r16,0(sp)
    c0f4:	dec00604 	addi	sp,sp,24
    c0f8:	f800283a 	ret
    c0fc:	0005883a 	mov	r2,zero
    c100:	dfc00517 	ldw	ra,20(sp)
    c104:	dd000417 	ldw	r20,16(sp)
    c108:	dcc00317 	ldw	r19,12(sp)
    c10c:	dc800217 	ldw	r18,8(sp)
    c110:	dc400117 	ldw	r17,4(sp)
    c114:	dc000017 	ldw	r16,0(sp)
    c118:	dec00604 	addi	sp,sp,24
    c11c:	f800283a 	ret
    c120:	00bfffc4 	movi	r2,-1
    c124:	003fed06 	br	c0dc <__sfvwrite_small_dev+0x94>

0000c128 <_write_r>:
    c128:	defffd04 	addi	sp,sp,-12
    c12c:	dc400115 	stw	r17,4(sp)
    c130:	dc000015 	stw	r16,0(sp)
    c134:	2023883a 	mov	r17,r4
    c138:	04000074 	movhi	r16,1
    c13c:	8438fd04 	addi	r16,r16,-7180
    c140:	2809883a 	mov	r4,r5
    c144:	300b883a 	mov	r5,r6
    c148:	380d883a 	mov	r6,r7
    c14c:	dfc00215 	stw	ra,8(sp)
    c150:	80000015 	stw	zero,0(r16)
    c154:	000c4e80 	call	c4e8 <write>
    c158:	00ffffc4 	movi	r3,-1
    c15c:	10c00526 	beq	r2,r3,c174 <_write_r+0x4c>
    c160:	dfc00217 	ldw	ra,8(sp)
    c164:	dc400117 	ldw	r17,4(sp)
    c168:	dc000017 	ldw	r16,0(sp)
    c16c:	dec00304 	addi	sp,sp,12
    c170:	f800283a 	ret
    c174:	80c00017 	ldw	r3,0(r16)
    c178:	183ff926 	beq	r3,zero,c160 <_write_r+0x38>
    c17c:	88c00015 	stw	r3,0(r17)
    c180:	dfc00217 	ldw	ra,8(sp)
    c184:	dc400117 	ldw	r17,4(sp)
    c188:	dc000017 	ldw	r16,0(sp)
    c18c:	dec00304 	addi	sp,sp,12
    c190:	f800283a 	ret

0000c194 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    c194:	defff004 	addi	sp,sp,-64
    c198:	df000f15 	stw	fp,60(sp)
    c19c:	df000f04 	addi	fp,sp,60
    c1a0:	e13ffd15 	stw	r4,-12(fp)
    c1a4:	e17ffe15 	stw	r5,-8(fp)
    c1a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    c1ac:	00bffa84 	movi	r2,-22
    c1b0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c1b4:	e0bffd17 	ldw	r2,-12(fp)
    c1b8:	10800828 	cmpgeui	r2,r2,32
    c1bc:	10005c1e 	bne	r2,zero,c330 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c1c0:	0005303a 	rdctl	r2,status
    c1c4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c1c8:	e0fff317 	ldw	r3,-52(fp)
    c1cc:	00bfff84 	movi	r2,-2
    c1d0:	1884703a 	and	r2,r3,r2
    c1d4:	1001703a 	wrctl	status,r2
  
  return context;
    c1d8:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    c1dc:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    c1e0:	00c00074 	movhi	r3,1
    c1e4:	18fb7004 	addi	r3,r3,-4672
    c1e8:	e0bffd17 	ldw	r2,-12(fp)
    c1ec:	100490fa 	slli	r2,r2,3
    c1f0:	1885883a 	add	r2,r3,r2
    c1f4:	e0ffff17 	ldw	r3,-4(fp)
    c1f8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    c1fc:	00c00074 	movhi	r3,1
    c200:	18fb7004 	addi	r3,r3,-4672
    c204:	e0bffd17 	ldw	r2,-12(fp)
    c208:	100490fa 	slli	r2,r2,3
    c20c:	1885883a 	add	r2,r3,r2
    c210:	10800104 	addi	r2,r2,4
    c214:	e0fffe17 	ldw	r3,-8(fp)
    c218:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    c21c:	e0bfff17 	ldw	r2,-4(fp)
    c220:	10001f26 	beq	r2,zero,c2a0 <alt_irq_register+0x10c>
    c224:	e0bffd17 	ldw	r2,-12(fp)
    c228:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c22c:	0005303a 	rdctl	r2,status
    c230:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c234:	e0fff517 	ldw	r3,-44(fp)
    c238:	00bfff84 	movi	r2,-2
    c23c:	1884703a 	and	r2,r3,r2
    c240:	1001703a 	wrctl	status,r2
  
  return context;
    c244:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c248:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    c24c:	e0bff417 	ldw	r2,-48(fp)
    c250:	00c00044 	movi	r3,1
    c254:	1884983a 	sll	r2,r3,r2
    c258:	1007883a 	mov	r3,r2
    c25c:	00800074 	movhi	r2,1
    c260:	10b8fe04 	addi	r2,r2,-7176
    c264:	10800017 	ldw	r2,0(r2)
    c268:	1886b03a 	or	r3,r3,r2
    c26c:	00800074 	movhi	r2,1
    c270:	10b8fe04 	addi	r2,r2,-7176
    c274:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c278:	00800074 	movhi	r2,1
    c27c:	10b8fe04 	addi	r2,r2,-7176
    c280:	10800017 	ldw	r2,0(r2)
    c284:	100170fa 	wrctl	ienable,r2
    c288:	e0bff617 	ldw	r2,-40(fp)
    c28c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c290:	e0bff717 	ldw	r2,-36(fp)
    c294:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c298:	0005883a 	mov	r2,zero
    c29c:	00001f06 	br	c31c <alt_irq_register+0x188>
    c2a0:	e0bffd17 	ldw	r2,-12(fp)
    c2a4:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c2a8:	0005303a 	rdctl	r2,status
    c2ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c2b0:	e0fff917 	ldw	r3,-28(fp)
    c2b4:	00bfff84 	movi	r2,-2
    c2b8:	1884703a 	and	r2,r3,r2
    c2bc:	1001703a 	wrctl	status,r2
  
  return context;
    c2c0:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c2c4:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    c2c8:	e0bff817 	ldw	r2,-32(fp)
    c2cc:	00c00044 	movi	r3,1
    c2d0:	1884983a 	sll	r2,r3,r2
    c2d4:	0084303a 	nor	r2,zero,r2
    c2d8:	1007883a 	mov	r3,r2
    c2dc:	00800074 	movhi	r2,1
    c2e0:	10b8fe04 	addi	r2,r2,-7176
    c2e4:	10800017 	ldw	r2,0(r2)
    c2e8:	1886703a 	and	r3,r3,r2
    c2ec:	00800074 	movhi	r2,1
    c2f0:	10b8fe04 	addi	r2,r2,-7176
    c2f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c2f8:	00800074 	movhi	r2,1
    c2fc:	10b8fe04 	addi	r2,r2,-7176
    c300:	10800017 	ldw	r2,0(r2)
    c304:	100170fa 	wrctl	ienable,r2
    c308:	e0bffa17 	ldw	r2,-24(fp)
    c30c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c310:	e0bffb17 	ldw	r2,-20(fp)
    c314:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c318:	0005883a 	mov	r2,zero
    c31c:	e0bff115 	stw	r2,-60(fp)
    c320:	e0bff217 	ldw	r2,-56(fp)
    c324:	e0bffc15 	stw	r2,-16(fp)
    c328:	e0bffc17 	ldw	r2,-16(fp)
    c32c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    c330:	e0bff117 	ldw	r2,-60(fp)
}
    c334:	e037883a 	mov	sp,fp
    c338:	df000017 	ldw	fp,0(sp)
    c33c:	dec00104 	addi	sp,sp,4
    c340:	f800283a 	ret

0000c344 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    c344:	defffc04 	addi	sp,sp,-16
    c348:	df000315 	stw	fp,12(sp)
    c34c:	df000304 	addi	fp,sp,12
    c350:	e13ffd15 	stw	r4,-12(fp)
    c354:	e17ffe15 	stw	r5,-8(fp)
    c358:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    c35c:	e0fffe17 	ldw	r3,-8(fp)
    c360:	e0bffd17 	ldw	r2,-12(fp)
    c364:	18800e26 	beq	r3,r2,c3a0 <alt_load_section+0x5c>
  {
    while( to != end )
    c368:	00000a06 	br	c394 <alt_load_section+0x50>
    {
      *to++ = *from++;
    c36c:	e0bffd17 	ldw	r2,-12(fp)
    c370:	10c00017 	ldw	r3,0(r2)
    c374:	e0bffe17 	ldw	r2,-8(fp)
    c378:	10c00015 	stw	r3,0(r2)
    c37c:	e0bffe17 	ldw	r2,-8(fp)
    c380:	10800104 	addi	r2,r2,4
    c384:	e0bffe15 	stw	r2,-8(fp)
    c388:	e0bffd17 	ldw	r2,-12(fp)
    c38c:	10800104 	addi	r2,r2,4
    c390:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    c394:	e0fffe17 	ldw	r3,-8(fp)
    c398:	e0bfff17 	ldw	r2,-4(fp)
    c39c:	18bff31e 	bne	r3,r2,c36c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    c3a0:	e037883a 	mov	sp,fp
    c3a4:	df000017 	ldw	fp,0(sp)
    c3a8:	dec00104 	addi	sp,sp,4
    c3ac:	f800283a 	ret

0000c3b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    c3b0:	defffe04 	addi	sp,sp,-8
    c3b4:	dfc00115 	stw	ra,4(sp)
    c3b8:	df000015 	stw	fp,0(sp)
    c3bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    c3c0:	01000074 	movhi	r4,1
    c3c4:	21381d04 	addi	r4,r4,-8076
    c3c8:	01400074 	movhi	r5,1
    c3cc:	29774b04 	addi	r5,r5,-8916
    c3d0:	01800074 	movhi	r6,1
    c3d4:	31b81d04 	addi	r6,r6,-8076
    c3d8:	000c3440 	call	c344 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    c3dc:	01000074 	movhi	r4,1
    c3e0:	21200804 	addi	r4,r4,-32736
    c3e4:	01400074 	movhi	r5,1
    c3e8:	29600804 	addi	r5,r5,-32736
    c3ec:	01800074 	movhi	r6,1
    c3f0:	31a06f04 	addi	r6,r6,-32324
    c3f4:	000c3440 	call	c344 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    c3f8:	01000074 	movhi	r4,1
    c3fc:	2136c304 	addi	r4,r4,-9460
    c400:	01400074 	movhi	r5,1
    c404:	2976c304 	addi	r5,r5,-9460
    c408:	01800074 	movhi	r6,1
    c40c:	31b74b04 	addi	r6,r6,-8916
    c410:	000c3440 	call	c344 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    c414:	000cdf80 	call	cdf8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    c418:	000cf300 	call	cf30 <alt_icache_flush_all>
}
    c41c:	e037883a 	mov	sp,fp
    c420:	dfc00117 	ldw	ra,4(sp)
    c424:	df000017 	ldw	fp,0(sp)
    c428:	dec00204 	addi	sp,sp,8
    c42c:	f800283a 	ret

0000c430 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    c430:	defffd04 	addi	sp,sp,-12
    c434:	dfc00215 	stw	ra,8(sp)
    c438:	df000115 	stw	fp,4(sp)
    c43c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    c440:	0009883a 	mov	r4,zero
    c444:	000c6100 	call	c610 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    c448:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    c44c:	000c6440 	call	c644 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    c450:	01000074 	movhi	r4,1
    c454:	21373d04 	addi	r4,r4,-8972
    c458:	01400074 	movhi	r5,1
    c45c:	29773d04 	addi	r5,r5,-8972
    c460:	01800074 	movhi	r6,1
    c464:	31b73d04 	addi	r6,r6,-8972
    c468:	000d0400 	call	d040 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    c46c:	d120fc17 	ldw	r4,-31760(gp)
    c470:	d0e0fd17 	ldw	r3,-31756(gp)
    c474:	d0a0fe17 	ldw	r2,-31752(gp)
    c478:	180b883a 	mov	r5,r3
    c47c:	100d883a 	mov	r6,r2
    c480:	00087e80 	call	87e8 <main>
    c484:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    c488:	01000044 	movi	r4,1
    c48c:	000cd2c0 	call	cd2c <close>
  exit (result);
    c490:	e13fff17 	ldw	r4,-4(fp)
    c494:	000d8900 	call	d890 <exit>

0000c498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c498:	defffe04 	addi	sp,sp,-8
    c49c:	dfc00115 	stw	ra,4(sp)
    c4a0:	df000015 	stw	fp,0(sp)
    c4a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c4a8:	00800074 	movhi	r2,1
    c4ac:	10b81a04 	addi	r2,r2,-8088
    c4b0:	10800017 	ldw	r2,0(r2)
    c4b4:	10000526 	beq	r2,zero,c4cc <alt_get_errno+0x34>
    c4b8:	00800074 	movhi	r2,1
    c4bc:	10b81a04 	addi	r2,r2,-8088
    c4c0:	10800017 	ldw	r2,0(r2)
    c4c4:	103ee83a 	callr	r2
    c4c8:	00000206 	br	c4d4 <alt_get_errno+0x3c>
    c4cc:	00800074 	movhi	r2,1
    c4d0:	10b8fd04 	addi	r2,r2,-7180
}
    c4d4:	e037883a 	mov	sp,fp
    c4d8:	dfc00117 	ldw	ra,4(sp)
    c4dc:	df000017 	ldw	fp,0(sp)
    c4e0:	dec00204 	addi	sp,sp,8
    c4e4:	f800283a 	ret

0000c4e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c4e8:	defff904 	addi	sp,sp,-28
    c4ec:	dfc00615 	stw	ra,24(sp)
    c4f0:	df000515 	stw	fp,20(sp)
    c4f4:	df000504 	addi	fp,sp,20
    c4f8:	e13ffd15 	stw	r4,-12(fp)
    c4fc:	e17ffe15 	stw	r5,-8(fp)
    c500:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c504:	e0bffd17 	ldw	r2,-12(fp)
    c508:	10000716 	blt	r2,zero,c528 <write+0x40>
    c50c:	e13ffd17 	ldw	r4,-12(fp)
    c510:	01400304 	movi	r5,12
    c514:	000b1280 	call	b128 <__mulsi3>
    c518:	00c00074 	movhi	r3,1
    c51c:	18f7a304 	addi	r3,r3,-8564
    c520:	10c5883a 	add	r2,r2,r3
    c524:	00000106 	br	c52c <write+0x44>
    c528:	0005883a 	mov	r2,zero
    c52c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    c530:	e0bffb17 	ldw	r2,-20(fp)
    c534:	10001f26 	beq	r2,zero,c5b4 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c538:	e0bffb17 	ldw	r2,-20(fp)
    c53c:	10800217 	ldw	r2,8(r2)
    c540:	108000cc 	andi	r2,r2,3
    c544:	10001726 	beq	r2,zero,c5a4 <write+0xbc>
    c548:	e0bffb17 	ldw	r2,-20(fp)
    c54c:	10800017 	ldw	r2,0(r2)
    c550:	10800617 	ldw	r2,24(r2)
    c554:	10001326 	beq	r2,zero,c5a4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c558:	e0bffb17 	ldw	r2,-20(fp)
    c55c:	10800017 	ldw	r2,0(r2)
    c560:	10c00617 	ldw	r3,24(r2)
    c564:	e0bfff17 	ldw	r2,-4(fp)
    c568:	e13ffb17 	ldw	r4,-20(fp)
    c56c:	e17ffe17 	ldw	r5,-8(fp)
    c570:	100d883a 	mov	r6,r2
    c574:	183ee83a 	callr	r3
    c578:	e0bffc15 	stw	r2,-16(fp)
    c57c:	e0bffc17 	ldw	r2,-16(fp)
    c580:	1000060e 	bge	r2,zero,c59c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    c584:	000c4980 	call	c498 <alt_get_errno>
    c588:	e0fffc17 	ldw	r3,-16(fp)
    c58c:	00c7c83a 	sub	r3,zero,r3
    c590:	10c00015 	stw	r3,0(r2)
        return -1;
    c594:	00bfffc4 	movi	r2,-1
    c598:	00000a06 	br	c5c4 <write+0xdc>
      }
      return rval;
    c59c:	e0bffc17 	ldw	r2,-16(fp)
    c5a0:	00000806 	br	c5c4 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c5a4:	000c4980 	call	c498 <alt_get_errno>
    c5a8:	00c00344 	movi	r3,13
    c5ac:	10c00015 	stw	r3,0(r2)
    c5b0:	00000306 	br	c5c0 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c5b4:	000c4980 	call	c498 <alt_get_errno>
    c5b8:	00c01444 	movi	r3,81
    c5bc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    c5c0:	00bfffc4 	movi	r2,-1
}
    c5c4:	e037883a 	mov	sp,fp
    c5c8:	dfc00117 	ldw	ra,4(sp)
    c5cc:	df000017 	ldw	fp,0(sp)
    c5d0:	dec00204 	addi	sp,sp,8
    c5d4:	f800283a 	ret

0000c5d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c5d8:	defffd04 	addi	sp,sp,-12
    c5dc:	dfc00215 	stw	ra,8(sp)
    c5e0:	df000115 	stw	fp,4(sp)
    c5e4:	df000104 	addi	fp,sp,4
    c5e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c5ec:	e13fff17 	ldw	r4,-4(fp)
    c5f0:	01400074 	movhi	r5,1
    c5f4:	29781704 	addi	r5,r5,-8100
    c5f8:	000ce900 	call	ce90 <alt_dev_llist_insert>
}
    c5fc:	e037883a 	mov	sp,fp
    c600:	dfc00117 	ldw	ra,4(sp)
    c604:	df000017 	ldw	fp,0(sp)
    c608:	dec00204 	addi	sp,sp,8
    c60c:	f800283a 	ret

0000c610 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c610:	defffd04 	addi	sp,sp,-12
    c614:	dfc00215 	stw	ra,8(sp)
    c618:	df000115 	stw	fp,4(sp)
    c61c:	df000104 	addi	fp,sp,4
    c620:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    c624:	000d56c0 	call	d56c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c628:	00800044 	movi	r2,1
    c62c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c630:	e037883a 	mov	sp,fp
    c634:	dfc00117 	ldw	ra,4(sp)
    c638:	df000017 	ldw	fp,0(sp)
    c63c:	dec00204 	addi	sp,sp,8
    c640:	f800283a 	ret

0000c644 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c644:	defffe04 	addi	sp,sp,-8
    c648:	dfc00115 	stw	ra,4(sp)
    c64c:	df000015 	stw	fp,0(sp)
    c650:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLOCK_TIMER, sys_clock_timer);
    c654:	01000074 	movhi	r4,1
    c658:	21050804 	addi	r4,r4,5152
    c65c:	000b883a 	mov	r5,zero
    c660:	01800044 	movi	r6,1
    c664:	01c0fa04 	movi	r7,1000
    c668:	000c9600 	call	c960 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    c66c:	01000074 	movhi	r4,1
    c670:	21378304 	addi	r4,r4,-8692
    c674:	000c5d80 	call	c5d8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    c678:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    c67c:	01000074 	movhi	r4,1
    c680:	21378e04 	addi	r4,r4,-8648
    c684:	000c5d80 	call	c5d8 <alt_dev_reg>
}
    c688:	e037883a 	mov	sp,fp
    c68c:	dfc00117 	ldw	ra,4(sp)
    c690:	df000017 	ldw	fp,0(sp)
    c694:	dec00204 	addi	sp,sp,8
    c698:	f800283a 	ret

0000c69c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c69c:	defffa04 	addi	sp,sp,-24
    c6a0:	dfc00515 	stw	ra,20(sp)
    c6a4:	df000415 	stw	fp,16(sp)
    c6a8:	df000404 	addi	fp,sp,16
    c6ac:	e13ffd15 	stw	r4,-12(fp)
    c6b0:	e17ffe15 	stw	r5,-8(fp)
    c6b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c6b8:	e0bffd17 	ldw	r2,-12(fp)
    c6bc:	10800017 	ldw	r2,0(r2)
    c6c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c6c4:	e0bffc17 	ldw	r2,-16(fp)
    c6c8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    c6cc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c6d0:	10800217 	ldw	r2,8(r2)
    c6d4:	1809883a 	mov	r4,r3
    c6d8:	e17ffe17 	ldw	r5,-8(fp)
    c6dc:	e1bfff17 	ldw	r6,-4(fp)
    c6e0:	100f883a 	mov	r7,r2
    c6e4:	000c75c0 	call	c75c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c6e8:	e037883a 	mov	sp,fp
    c6ec:	dfc00117 	ldw	ra,4(sp)
    c6f0:	df000017 	ldw	fp,0(sp)
    c6f4:	dec00204 	addi	sp,sp,8
    c6f8:	f800283a 	ret

0000c6fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c6fc:	defffa04 	addi	sp,sp,-24
    c700:	dfc00515 	stw	ra,20(sp)
    c704:	df000415 	stw	fp,16(sp)
    c708:	df000404 	addi	fp,sp,16
    c70c:	e13ffd15 	stw	r4,-12(fp)
    c710:	e17ffe15 	stw	r5,-8(fp)
    c714:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c718:	e0bffd17 	ldw	r2,-12(fp)
    c71c:	10800017 	ldw	r2,0(r2)
    c720:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c724:	e0bffc17 	ldw	r2,-16(fp)
    c728:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    c72c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c730:	10800217 	ldw	r2,8(r2)
    c734:	1809883a 	mov	r4,r3
    c738:	e17ffe17 	ldw	r5,-8(fp)
    c73c:	e1bfff17 	ldw	r6,-4(fp)
    c740:	100f883a 	mov	r7,r2
    c744:	000c8500 	call	c850 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c748:	e037883a 	mov	sp,fp
    c74c:	dfc00117 	ldw	ra,4(sp)
    c750:	df000017 	ldw	fp,0(sp)
    c754:	dec00204 	addi	sp,sp,8
    c758:	f800283a 	ret

0000c75c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    c75c:	defff704 	addi	sp,sp,-36
    c760:	df000815 	stw	fp,32(sp)
    c764:	df000804 	addi	fp,sp,32
    c768:	e13ffc15 	stw	r4,-16(fp)
    c76c:	e17ffd15 	stw	r5,-12(fp)
    c770:	e1bffe15 	stw	r6,-8(fp)
    c774:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    c778:	e0bffc17 	ldw	r2,-16(fp)
    c77c:	10800017 	ldw	r2,0(r2)
    c780:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    c784:	e0bffd17 	ldw	r2,-12(fp)
    c788:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    c78c:	e0bffe17 	ldw	r2,-8(fp)
    c790:	e0fffd17 	ldw	r3,-12(fp)
    c794:	1885883a 	add	r2,r3,r2
    c798:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    c79c:	00001406 	br	c7f0 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c7a0:	e0bff917 	ldw	r2,-28(fp)
    c7a4:	10800037 	ldwio	r2,0(r2)
    c7a8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    c7ac:	e0bffb17 	ldw	r2,-20(fp)
    c7b0:	10a0000c 	andi	r2,r2,32768
    c7b4:	10000826 	beq	r2,zero,c7d8 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c7b8:	e0bffb17 	ldw	r2,-20(fp)
    c7bc:	1007883a 	mov	r3,r2
    c7c0:	e0bff817 	ldw	r2,-32(fp)
    c7c4:	10c00005 	stb	r3,0(r2)
    c7c8:	e0bff817 	ldw	r2,-32(fp)
    c7cc:	10800044 	addi	r2,r2,1
    c7d0:	e0bff815 	stw	r2,-32(fp)
    c7d4:	00000606 	br	c7f0 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    c7d8:	e0fff817 	ldw	r3,-32(fp)
    c7dc:	e0bffd17 	ldw	r2,-12(fp)
    c7e0:	1880071e 	bne	r3,r2,c800 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    c7e4:	e0bfff17 	ldw	r2,-4(fp)
    c7e8:	1090000c 	andi	r2,r2,16384
    c7ec:	1000061e 	bne	r2,zero,c808 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    c7f0:	e0fff817 	ldw	r3,-32(fp)
    c7f4:	e0bffa17 	ldw	r2,-24(fp)
    c7f8:	18bfe936 	bltu	r3,r2,c7a0 <altera_avalon_jtag_uart_read+0x44>
    c7fc:	00000306 	br	c80c <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    c800:	0001883a 	nop
    c804:	00000106 	br	c80c <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    c808:	0001883a 	nop
    
  }

  if (ptr != buffer)
    c80c:	e0fff817 	ldw	r3,-32(fp)
    c810:	e0bffd17 	ldw	r2,-12(fp)
    c814:	18800426 	beq	r3,r2,c828 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    c818:	e0fff817 	ldw	r3,-32(fp)
    c81c:	e0bffd17 	ldw	r2,-12(fp)
    c820:	1885c83a 	sub	r2,r3,r2
    c824:	00000606 	br	c840 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    c828:	e0bfff17 	ldw	r2,-4(fp)
    c82c:	1090000c 	andi	r2,r2,16384
    c830:	10000226 	beq	r2,zero,c83c <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    c834:	00bffd44 	movi	r2,-11
    c838:	00000106 	br	c840 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    c83c:	00bffec4 	movi	r2,-5
}
    c840:	e037883a 	mov	sp,fp
    c844:	df000017 	ldw	fp,0(sp)
    c848:	dec00104 	addi	sp,sp,4
    c84c:	f800283a 	ret

0000c850 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c850:	defff904 	addi	sp,sp,-28
    c854:	df000615 	stw	fp,24(sp)
    c858:	df000604 	addi	fp,sp,24
    c85c:	e13ffc15 	stw	r4,-16(fp)
    c860:	e17ffd15 	stw	r5,-12(fp)
    c864:	e1bffe15 	stw	r6,-8(fp)
    c868:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    c86c:	e0bffc17 	ldw	r2,-16(fp)
    c870:	10800017 	ldw	r2,0(r2)
    c874:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    c878:	e0bffe17 	ldw	r2,-8(fp)
    c87c:	e0fffd17 	ldw	r3,-12(fp)
    c880:	1885883a 	add	r2,r3,r2
    c884:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    c888:	00000f06 	br	c8c8 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    c88c:	e0bffa17 	ldw	r2,-24(fp)
    c890:	10800104 	addi	r2,r2,4
    c894:	10800037 	ldwio	r2,0(r2)
    c898:	10bfffec 	andhi	r2,r2,65535
    c89c:	10000a26 	beq	r2,zero,c8c8 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    c8a0:	e0bffa17 	ldw	r2,-24(fp)
    c8a4:	e0fffd17 	ldw	r3,-12(fp)
    c8a8:	18c00003 	ldbu	r3,0(r3)
    c8ac:	18c03fcc 	andi	r3,r3,255
    c8b0:	18c0201c 	xori	r3,r3,128
    c8b4:	18ffe004 	addi	r3,r3,-128
    c8b8:	e13ffd17 	ldw	r4,-12(fp)
    c8bc:	21000044 	addi	r4,r4,1
    c8c0:	e13ffd15 	stw	r4,-12(fp)
    c8c4:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    c8c8:	e0fffd17 	ldw	r3,-12(fp)
    c8cc:	e0bffb17 	ldw	r2,-20(fp)
    c8d0:	18bfee36 	bltu	r3,r2,c88c <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    c8d4:	e0bffe17 	ldw	r2,-8(fp)
}
    c8d8:	e037883a 	mov	sp,fp
    c8dc:	df000017 	ldw	fp,0(sp)
    c8e0:	dec00104 	addi	sp,sp,4
    c8e4:	f800283a 	ret

0000c8e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c8e8:	defff904 	addi	sp,sp,-28
    c8ec:	dfc00615 	stw	ra,24(sp)
    c8f0:	df000515 	stw	fp,20(sp)
    c8f4:	df000504 	addi	fp,sp,20
    c8f8:	e13ffe15 	stw	r4,-8(fp)
    c8fc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c900:	0007883a 	mov	r3,zero
    c904:	e0bffe17 	ldw	r2,-8(fp)
    c908:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c90c:	e0bffe17 	ldw	r2,-8(fp)
    c910:	10800104 	addi	r2,r2,4
    c914:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c918:	0005303a 	rdctl	r2,status
    c91c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c920:	e0fffc17 	ldw	r3,-16(fp)
    c924:	00bfff84 	movi	r2,-2
    c928:	1884703a 	and	r2,r3,r2
    c92c:	1001703a 	wrctl	status,r2
  
  return context;
    c930:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c934:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    c938:	000d4680 	call	d468 <alt_tick>
    c93c:	e0bffb17 	ldw	r2,-20(fp)
    c940:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c944:	e0bffd17 	ldw	r2,-12(fp)
    c948:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c94c:	e037883a 	mov	sp,fp
    c950:	dfc00117 	ldw	ra,4(sp)
    c954:	df000017 	ldw	fp,0(sp)
    c958:	dec00204 	addi	sp,sp,8
    c95c:	f800283a 	ret

0000c960 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c960:	defff904 	addi	sp,sp,-28
    c964:	dfc00615 	stw	ra,24(sp)
    c968:	df000515 	stw	fp,20(sp)
    c96c:	df000504 	addi	fp,sp,20
    c970:	e13ffc15 	stw	r4,-16(fp)
    c974:	e17ffd15 	stw	r5,-12(fp)
    c978:	e1bffe15 	stw	r6,-8(fp)
    c97c:	e1ffff15 	stw	r7,-4(fp)
    c980:	e0bfff17 	ldw	r2,-4(fp)
    c984:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c988:	00800074 	movhi	r2,1
    c98c:	10b90204 	addi	r2,r2,-7160
    c990:	10800017 	ldw	r2,0(r2)
    c994:	1000041e 	bne	r2,zero,c9a8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    c998:	00800074 	movhi	r2,1
    c99c:	10b90204 	addi	r2,r2,-7160
    c9a0:	e0fffb17 	ldw	r3,-20(fp)
    c9a4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c9a8:	e0bffc17 	ldw	r2,-16(fp)
    c9ac:	10800104 	addi	r2,r2,4
    c9b0:	00c001c4 	movi	r3,7
    c9b4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    c9b8:	e13ffe17 	ldw	r4,-8(fp)
    c9bc:	e17ffc17 	ldw	r5,-16(fp)
    c9c0:	01800074 	movhi	r6,1
    c9c4:	31b23a04 	addi	r6,r6,-14104
    c9c8:	000c1940 	call	c194 <alt_irq_register>
#endif  
}
    c9cc:	e037883a 	mov	sp,fp
    c9d0:	dfc00117 	ldw	ra,4(sp)
    c9d4:	df000017 	ldw	fp,0(sp)
    c9d8:	dec00204 	addi	sp,sp,8
    c9dc:	f800283a 	ret

0000c9e0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c9e0:	defffa04 	addi	sp,sp,-24
    c9e4:	dfc00515 	stw	ra,20(sp)
    c9e8:	df000415 	stw	fp,16(sp)
    c9ec:	df000404 	addi	fp,sp,16
    c9f0:	e13ffd15 	stw	r4,-12(fp)
    c9f4:	e17ffe15 	stw	r5,-8(fp)
    c9f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    c9fc:	e0bffd17 	ldw	r2,-12(fp)
    ca00:	10800017 	ldw	r2,0(r2)
    ca04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    ca08:	e0bffc17 	ldw	r2,-16(fp)
    ca0c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    ca10:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    ca14:	10800217 	ldw	r2,8(r2)
    ca18:	1809883a 	mov	r4,r3
    ca1c:	e17ffe17 	ldw	r5,-8(fp)
    ca20:	e1bfff17 	ldw	r6,-4(fp)
    ca24:	100f883a 	mov	r7,r2
    ca28:	000caf00 	call	caf0 <altera_avalon_uart_read>
      fd->fd_flags);
}
    ca2c:	e037883a 	mov	sp,fp
    ca30:	dfc00117 	ldw	ra,4(sp)
    ca34:	df000017 	ldw	fp,0(sp)
    ca38:	dec00204 	addi	sp,sp,8
    ca3c:	f800283a 	ret

0000ca40 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ca40:	defffa04 	addi	sp,sp,-24
    ca44:	dfc00515 	stw	ra,20(sp)
    ca48:	df000415 	stw	fp,16(sp)
    ca4c:	df000404 	addi	fp,sp,16
    ca50:	e13ffd15 	stw	r4,-12(fp)
    ca54:	e17ffe15 	stw	r5,-8(fp)
    ca58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    ca5c:	e0bffd17 	ldw	r2,-12(fp)
    ca60:	10800017 	ldw	r2,0(r2)
    ca64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    ca68:	e0bffc17 	ldw	r2,-16(fp)
    ca6c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    ca70:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    ca74:	10800217 	ldw	r2,8(r2)
    ca78:	1809883a 	mov	r4,r3
    ca7c:	e17ffe17 	ldw	r5,-8(fp)
    ca80:	e1bfff17 	ldw	r6,-4(fp)
    ca84:	100f883a 	mov	r7,r2
    ca88:	000cc000 	call	cc00 <altera_avalon_uart_write>
      fd->fd_flags);
}
    ca8c:	e037883a 	mov	sp,fp
    ca90:	dfc00117 	ldw	ra,4(sp)
    ca94:	df000017 	ldw	fp,0(sp)
    ca98:	dec00204 	addi	sp,sp,8
    ca9c:	f800283a 	ret

0000caa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    caa0:	defffe04 	addi	sp,sp,-8
    caa4:	dfc00115 	stw	ra,4(sp)
    caa8:	df000015 	stw	fp,0(sp)
    caac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cab0:	00800074 	movhi	r2,1
    cab4:	10b81a04 	addi	r2,r2,-8088
    cab8:	10800017 	ldw	r2,0(r2)
    cabc:	10000526 	beq	r2,zero,cad4 <alt_get_errno+0x34>
    cac0:	00800074 	movhi	r2,1
    cac4:	10b81a04 	addi	r2,r2,-8088
    cac8:	10800017 	ldw	r2,0(r2)
    cacc:	103ee83a 	callr	r2
    cad0:	00000206 	br	cadc <alt_get_errno+0x3c>
    cad4:	00800074 	movhi	r2,1
    cad8:	10b8fd04 	addi	r2,r2,-7180
}
    cadc:	e037883a 	mov	sp,fp
    cae0:	dfc00117 	ldw	ra,4(sp)
    cae4:	df000017 	ldw	fp,0(sp)
    cae8:	dec00204 	addi	sp,sp,8
    caec:	f800283a 	ret

0000caf0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    caf0:	defff804 	addi	sp,sp,-32
    caf4:	dfc00715 	stw	ra,28(sp)
    caf8:	df000615 	stw	fp,24(sp)
    cafc:	df000604 	addi	fp,sp,24
    cb00:	e13ffc15 	stw	r4,-16(fp)
    cb04:	e17ffd15 	stw	r5,-12(fp)
    cb08:	e1bffe15 	stw	r6,-8(fp)
    cb0c:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    cb10:	e0bfff17 	ldw	r2,-4(fp)
    cb14:	1090000c 	andi	r2,r2,16384
    cb18:	1005003a 	cmpeq	r2,r2,zero
    cb1c:	10803fcc 	andi	r2,r2,255
    cb20:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    cb24:	e0bffc17 	ldw	r2,-16(fp)
    cb28:	10800017 	ldw	r2,0(r2)
    cb2c:	10800204 	addi	r2,r2,8
    cb30:	10800037 	ldwio	r2,0(r2)
    cb34:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    cb38:	e0bffc17 	ldw	r2,-16(fp)
    cb3c:	10800017 	ldw	r2,0(r2)
    cb40:	10800204 	addi	r2,r2,8
    cb44:	0007883a 	mov	r3,zero
    cb48:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    cb4c:	e0bffb17 	ldw	r2,-20(fp)
    cb50:	1080200c 	andi	r2,r2,128
    cb54:	10000b26 	beq	r2,zero,cb84 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    cb58:	e0bffc17 	ldw	r2,-16(fp)
    cb5c:	10800017 	ldw	r2,0(r2)
    cb60:	10800037 	ldwio	r2,0(r2)
    cb64:	1007883a 	mov	r3,r2
    cb68:	e0bffd17 	ldw	r2,-12(fp)
    cb6c:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    cb70:	e0bffb17 	ldw	r2,-20(fp)
    cb74:	108000cc 	andi	r2,r2,3
    cb78:	1000021e 	bne	r2,zero,cb84 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    cb7c:	00800044 	movi	r2,1
    cb80:	00000606 	br	cb9c <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    cb84:	e0bffa17 	ldw	r2,-24(fp)
    cb88:	103fe61e 	bne	r2,zero,cb24 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
    cb8c:	000caa00 	call	caa0 <alt_get_errno>
    cb90:	00c002c4 	movi	r3,11
    cb94:	10c00015 	stw	r3,0(r2)
 
  return 0;
    cb98:	0005883a 	mov	r2,zero
}
    cb9c:	e037883a 	mov	sp,fp
    cba0:	dfc00117 	ldw	ra,4(sp)
    cba4:	df000017 	ldw	fp,0(sp)
    cba8:	dec00204 	addi	sp,sp,8
    cbac:	f800283a 	ret

0000cbb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cbb0:	defffe04 	addi	sp,sp,-8
    cbb4:	dfc00115 	stw	ra,4(sp)
    cbb8:	df000015 	stw	fp,0(sp)
    cbbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cbc0:	00800074 	movhi	r2,1
    cbc4:	10b81a04 	addi	r2,r2,-8088
    cbc8:	10800017 	ldw	r2,0(r2)
    cbcc:	10000526 	beq	r2,zero,cbe4 <alt_get_errno+0x34>
    cbd0:	00800074 	movhi	r2,1
    cbd4:	10b81a04 	addi	r2,r2,-8088
    cbd8:	10800017 	ldw	r2,0(r2)
    cbdc:	103ee83a 	callr	r2
    cbe0:	00000206 	br	cbec <alt_get_errno+0x3c>
    cbe4:	00800074 	movhi	r2,1
    cbe8:	10b8fd04 	addi	r2,r2,-7180
}
    cbec:	e037883a 	mov	sp,fp
    cbf0:	dfc00117 	ldw	ra,4(sp)
    cbf4:	df000017 	ldw	fp,0(sp)
    cbf8:	dec00204 	addi	sp,sp,8
    cbfc:	f800283a 	ret

0000cc00 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    cc00:	defff704 	addi	sp,sp,-36
    cc04:	dfc00815 	stw	ra,32(sp)
    cc08:	df000715 	stw	fp,28(sp)
    cc0c:	df000704 	addi	fp,sp,28
    cc10:	e13ffc15 	stw	r4,-16(fp)
    cc14:	e17ffd15 	stw	r5,-12(fp)
    cc18:	e1bffe15 	stw	r6,-8(fp)
    cc1c:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    cc20:	e0bfff17 	ldw	r2,-4(fp)
    cc24:	1090000c 	andi	r2,r2,16384
    cc28:	1005003a 	cmpeq	r2,r2,zero
    cc2c:	10803fcc 	andi	r2,r2,255
    cc30:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    cc34:	e0bffe17 	ldw	r2,-8(fp)
    cc38:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    cc3c:	e0bffc17 	ldw	r2,-16(fp)
    cc40:	10800017 	ldw	r2,0(r2)
    cc44:	10800204 	addi	r2,r2,8
    cc48:	10800037 	ldwio	r2,0(r2)
    cc4c:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    cc50:	e0bffb17 	ldw	r2,-20(fp)
    cc54:	1080100c 	andi	r2,r2,64
    cc58:	10000f26 	beq	r2,zero,cc98 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    cc5c:	e0bffc17 	ldw	r2,-16(fp)
    cc60:	10800017 	ldw	r2,0(r2)
    cc64:	10800104 	addi	r2,r2,4
    cc68:	e0fffd17 	ldw	r3,-12(fp)
    cc6c:	18c00003 	ldbu	r3,0(r3)
    cc70:	18c03fcc 	andi	r3,r3,255
    cc74:	18c0201c 	xori	r3,r3,128
    cc78:	18ffe004 	addi	r3,r3,-128
    cc7c:	e13ffd17 	ldw	r4,-12(fp)
    cc80:	21000044 	addi	r4,r4,1
    cc84:	e13ffd15 	stw	r4,-12(fp)
    cc88:	10c00035 	stwio	r3,0(r2)
      count--;
    cc8c:	e0bff917 	ldw	r2,-28(fp)
    cc90:	10bfffc4 	addi	r2,r2,-1
    cc94:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    cc98:	e0bffa17 	ldw	r2,-24(fp)
    cc9c:	10000226 	beq	r2,zero,cca8 <altera_avalon_uart_write+0xa8>
    cca0:	e0bff917 	ldw	r2,-28(fp)
    cca4:	103fe51e 	bne	r2,zero,cc3c <altera_avalon_uart_write+0x3c>

  if (count)
    cca8:	e0bff917 	ldw	r2,-28(fp)
    ccac:	10000326 	beq	r2,zero,ccbc <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    ccb0:	000cbb00 	call	cbb0 <alt_get_errno>
    ccb4:	00c002c4 	movi	r3,11
    ccb8:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    ccbc:	e0fffe17 	ldw	r3,-8(fp)
    ccc0:	e0bff917 	ldw	r2,-28(fp)
    ccc4:	1885c83a 	sub	r2,r3,r2
}
    ccc8:	e037883a 	mov	sp,fp
    cccc:	dfc00117 	ldw	ra,4(sp)
    ccd0:	df000017 	ldw	fp,0(sp)
    ccd4:	dec00204 	addi	sp,sp,8
    ccd8:	f800283a 	ret

0000ccdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccdc:	defffe04 	addi	sp,sp,-8
    cce0:	dfc00115 	stw	ra,4(sp)
    cce4:	df000015 	stw	fp,0(sp)
    cce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ccec:	00800074 	movhi	r2,1
    ccf0:	10b81a04 	addi	r2,r2,-8088
    ccf4:	10800017 	ldw	r2,0(r2)
    ccf8:	10000526 	beq	r2,zero,cd10 <alt_get_errno+0x34>
    ccfc:	00800074 	movhi	r2,1
    cd00:	10b81a04 	addi	r2,r2,-8088
    cd04:	10800017 	ldw	r2,0(r2)
    cd08:	103ee83a 	callr	r2
    cd0c:	00000206 	br	cd18 <alt_get_errno+0x3c>
    cd10:	00800074 	movhi	r2,1
    cd14:	10b8fd04 	addi	r2,r2,-7180
}
    cd18:	e037883a 	mov	sp,fp
    cd1c:	dfc00117 	ldw	ra,4(sp)
    cd20:	df000017 	ldw	fp,0(sp)
    cd24:	dec00204 	addi	sp,sp,8
    cd28:	f800283a 	ret

0000cd2c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cd2c:	defffb04 	addi	sp,sp,-20
    cd30:	dfc00415 	stw	ra,16(sp)
    cd34:	df000315 	stw	fp,12(sp)
    cd38:	df000304 	addi	fp,sp,12
    cd3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cd40:	e0bfff17 	ldw	r2,-4(fp)
    cd44:	10000716 	blt	r2,zero,cd64 <close+0x38>
    cd48:	e13fff17 	ldw	r4,-4(fp)
    cd4c:	01400304 	movi	r5,12
    cd50:	000b1280 	call	b128 <__mulsi3>
    cd54:	00c00074 	movhi	r3,1
    cd58:	18f7a304 	addi	r3,r3,-8564
    cd5c:	10c5883a 	add	r2,r2,r3
    cd60:	00000106 	br	cd68 <close+0x3c>
    cd64:	0005883a 	mov	r2,zero
    cd68:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cd6c:	e0bffd17 	ldw	r2,-12(fp)
    cd70:	10001826 	beq	r2,zero,cdd4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cd74:	e0bffd17 	ldw	r2,-12(fp)
    cd78:	10800017 	ldw	r2,0(r2)
    cd7c:	10800417 	ldw	r2,16(r2)
    cd80:	10000626 	beq	r2,zero,cd9c <close+0x70>
    cd84:	e0bffd17 	ldw	r2,-12(fp)
    cd88:	10800017 	ldw	r2,0(r2)
    cd8c:	10800417 	ldw	r2,16(r2)
    cd90:	e13ffd17 	ldw	r4,-12(fp)
    cd94:	103ee83a 	callr	r2
    cd98:	00000106 	br	cda0 <close+0x74>
    cd9c:	0005883a 	mov	r2,zero
    cda0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cda4:	e13fff17 	ldw	r4,-4(fp)
    cda8:	000d3500 	call	d350 <alt_release_fd>
    if (rval < 0)
    cdac:	e0bffe17 	ldw	r2,-8(fp)
    cdb0:	1000060e 	bge	r2,zero,cdcc <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cdb4:	000ccdc0 	call	ccdc <alt_get_errno>
    cdb8:	e0fffe17 	ldw	r3,-8(fp)
    cdbc:	00c7c83a 	sub	r3,zero,r3
    cdc0:	10c00015 	stw	r3,0(r2)
      return -1;
    cdc4:	00bfffc4 	movi	r2,-1
    cdc8:	00000606 	br	cde4 <close+0xb8>
    }
    return 0;
    cdcc:	0005883a 	mov	r2,zero
    cdd0:	00000406 	br	cde4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cdd4:	000ccdc0 	call	ccdc <alt_get_errno>
    cdd8:	00c01444 	movi	r3,81
    cddc:	10c00015 	stw	r3,0(r2)
    return -1;
    cde0:	00bfffc4 	movi	r2,-1
  }
}
    cde4:	e037883a 	mov	sp,fp
    cde8:	dfc00117 	ldw	ra,4(sp)
    cdec:	df000017 	ldw	fp,0(sp)
    cdf0:	dec00204 	addi	sp,sp,8
    cdf4:	f800283a 	ret

0000cdf8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    cdf8:	deffff04 	addi	sp,sp,-4
    cdfc:	df000015 	stw	fp,0(sp)
    ce00:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ce04:	e037883a 	mov	sp,fp
    ce08:	df000017 	ldw	fp,0(sp)
    ce0c:	dec00104 	addi	sp,sp,4
    ce10:	f800283a 	ret

0000ce14 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ce14:	defffc04 	addi	sp,sp,-16
    ce18:	df000315 	stw	fp,12(sp)
    ce1c:	df000304 	addi	fp,sp,12
    ce20:	e13ffd15 	stw	r4,-12(fp)
    ce24:	e17ffe15 	stw	r5,-8(fp)
    ce28:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ce2c:	e0bfff17 	ldw	r2,-4(fp)
}
    ce30:	e037883a 	mov	sp,fp
    ce34:	df000017 	ldw	fp,0(sp)
    ce38:	dec00104 	addi	sp,sp,4
    ce3c:	f800283a 	ret

0000ce40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ce40:	defffe04 	addi	sp,sp,-8
    ce44:	dfc00115 	stw	ra,4(sp)
    ce48:	df000015 	stw	fp,0(sp)
    ce4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ce50:	00800074 	movhi	r2,1
    ce54:	10b81a04 	addi	r2,r2,-8088
    ce58:	10800017 	ldw	r2,0(r2)
    ce5c:	10000526 	beq	r2,zero,ce74 <alt_get_errno+0x34>
    ce60:	00800074 	movhi	r2,1
    ce64:	10b81a04 	addi	r2,r2,-8088
    ce68:	10800017 	ldw	r2,0(r2)
    ce6c:	103ee83a 	callr	r2
    ce70:	00000206 	br	ce7c <alt_get_errno+0x3c>
    ce74:	00800074 	movhi	r2,1
    ce78:	10b8fd04 	addi	r2,r2,-7180
}
    ce7c:	e037883a 	mov	sp,fp
    ce80:	dfc00117 	ldw	ra,4(sp)
    ce84:	df000017 	ldw	fp,0(sp)
    ce88:	dec00204 	addi	sp,sp,8
    ce8c:	f800283a 	ret

0000ce90 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ce90:	defffa04 	addi	sp,sp,-24
    ce94:	dfc00515 	stw	ra,20(sp)
    ce98:	df000415 	stw	fp,16(sp)
    ce9c:	df000404 	addi	fp,sp,16
    cea0:	e13ffe15 	stw	r4,-8(fp)
    cea4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    cea8:	e0bffe17 	ldw	r2,-8(fp)
    ceac:	10000326 	beq	r2,zero,cebc <alt_dev_llist_insert+0x2c>
    ceb0:	e0bffe17 	ldw	r2,-8(fp)
    ceb4:	10800217 	ldw	r2,8(r2)
    ceb8:	1000051e 	bne	r2,zero,ced0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    cebc:	000ce400 	call	ce40 <alt_get_errno>
    cec0:	00c00584 	movi	r3,22
    cec4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    cec8:	00bffa84 	movi	r2,-22
    cecc:	00001306 	br	cf1c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ced0:	e0bffe17 	ldw	r2,-8(fp)
    ced4:	e0ffff17 	ldw	r3,-4(fp)
    ced8:	e0fffc15 	stw	r3,-16(fp)
    cedc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cee0:	e0bffd17 	ldw	r2,-12(fp)
    cee4:	e0fffc17 	ldw	r3,-16(fp)
    cee8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ceec:	e0bffc17 	ldw	r2,-16(fp)
    cef0:	10c00017 	ldw	r3,0(r2)
    cef4:	e0bffd17 	ldw	r2,-12(fp)
    cef8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cefc:	e0bffc17 	ldw	r2,-16(fp)
    cf00:	10800017 	ldw	r2,0(r2)
    cf04:	e0fffd17 	ldw	r3,-12(fp)
    cf08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    cf0c:	e0bffc17 	ldw	r2,-16(fp)
    cf10:	e0fffd17 	ldw	r3,-12(fp)
    cf14:	10c00015 	stw	r3,0(r2)

  return 0;  
    cf18:	0005883a 	mov	r2,zero
}
    cf1c:	e037883a 	mov	sp,fp
    cf20:	dfc00117 	ldw	ra,4(sp)
    cf24:	df000017 	ldw	fp,0(sp)
    cf28:	dec00204 	addi	sp,sp,8
    cf2c:	f800283a 	ret

0000cf30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    cf30:	defffe04 	addi	sp,sp,-8
    cf34:	dfc00115 	stw	ra,4(sp)
    cf38:	df000015 	stw	fp,0(sp)
    cf3c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    cf40:	0009883a 	mov	r4,zero
    cf44:	01420004 	movi	r5,2048
    cf48:	000d8040 	call	d804 <alt_icache_flush>
#endif
}
    cf4c:	e037883a 	mov	sp,fp
    cf50:	dfc00117 	ldw	ra,4(sp)
    cf54:	df000017 	ldw	fp,0(sp)
    cf58:	dec00204 	addi	sp,sp,8
    cf5c:	f800283a 	ret

0000cf60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    cf60:	defff804 	addi	sp,sp,-32
    cf64:	dfc00715 	stw	ra,28(sp)
    cf68:	df000615 	stw	fp,24(sp)
    cf6c:	dc000515 	stw	r16,20(sp)
    cf70:	df000504 	addi	fp,sp,20
    cf74:	e13ffc15 	stw	r4,-16(fp)
    cf78:	e17ffd15 	stw	r5,-12(fp)
    cf7c:	e1bffe15 	stw	r6,-8(fp)
    cf80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    cf84:	e13ffd17 	ldw	r4,-12(fp)
    cf88:	e17ffe17 	ldw	r5,-8(fp)
    cf8c:	e1bfff17 	ldw	r6,-4(fp)
    cf90:	000d1f80 	call	d1f8 <open>
    cf94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    cf98:	e0bffb17 	ldw	r2,-20(fp)
    cf9c:	10002216 	blt	r2,zero,d028 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    cfa0:	04000074 	movhi	r16,1
    cfa4:	8437a304 	addi	r16,r16,-8564
    cfa8:	e0bffb17 	ldw	r2,-20(fp)
    cfac:	1009883a 	mov	r4,r2
    cfb0:	01400304 	movi	r5,12
    cfb4:	000b1280 	call	b128 <__mulsi3>
    cfb8:	8085883a 	add	r2,r16,r2
    cfbc:	10c00017 	ldw	r3,0(r2)
    cfc0:	e0bffc17 	ldw	r2,-16(fp)
    cfc4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    cfc8:	04000074 	movhi	r16,1
    cfcc:	8437a304 	addi	r16,r16,-8564
    cfd0:	e0bffb17 	ldw	r2,-20(fp)
    cfd4:	1009883a 	mov	r4,r2
    cfd8:	01400304 	movi	r5,12
    cfdc:	000b1280 	call	b128 <__mulsi3>
    cfe0:	8085883a 	add	r2,r16,r2
    cfe4:	10800104 	addi	r2,r2,4
    cfe8:	10c00017 	ldw	r3,0(r2)
    cfec:	e0bffc17 	ldw	r2,-16(fp)
    cff0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    cff4:	04000074 	movhi	r16,1
    cff8:	8437a304 	addi	r16,r16,-8564
    cffc:	e0bffb17 	ldw	r2,-20(fp)
    d000:	1009883a 	mov	r4,r2
    d004:	01400304 	movi	r5,12
    d008:	000b1280 	call	b128 <__mulsi3>
    d00c:	8085883a 	add	r2,r16,r2
    d010:	10800204 	addi	r2,r2,8
    d014:	10c00017 	ldw	r3,0(r2)
    d018:	e0bffc17 	ldw	r2,-16(fp)
    d01c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d020:	e13ffb17 	ldw	r4,-20(fp)
    d024:	000d3500 	call	d350 <alt_release_fd>
  }
} 
    d028:	e037883a 	mov	sp,fp
    d02c:	dfc00217 	ldw	ra,8(sp)
    d030:	df000117 	ldw	fp,4(sp)
    d034:	dc000017 	ldw	r16,0(sp)
    d038:	dec00304 	addi	sp,sp,12
    d03c:	f800283a 	ret

0000d040 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d040:	defffb04 	addi	sp,sp,-20
    d044:	dfc00415 	stw	ra,16(sp)
    d048:	df000315 	stw	fp,12(sp)
    d04c:	df000304 	addi	fp,sp,12
    d050:	e13ffd15 	stw	r4,-12(fp)
    d054:	e17ffe15 	stw	r5,-8(fp)
    d058:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d05c:	01000074 	movhi	r4,1
    d060:	2137a604 	addi	r4,r4,-8552
    d064:	e17ffd17 	ldw	r5,-12(fp)
    d068:	01800044 	movi	r6,1
    d06c:	01c07fc4 	movi	r7,511
    d070:	000cf600 	call	cf60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d074:	01000074 	movhi	r4,1
    d078:	2137a304 	addi	r4,r4,-8564
    d07c:	e17ffe17 	ldw	r5,-8(fp)
    d080:	000d883a 	mov	r6,zero
    d084:	01c07fc4 	movi	r7,511
    d088:	000cf600 	call	cf60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d08c:	01000074 	movhi	r4,1
    d090:	2137a904 	addi	r4,r4,-8540
    d094:	e17fff17 	ldw	r5,-4(fp)
    d098:	01800044 	movi	r6,1
    d09c:	01c07fc4 	movi	r7,511
    d0a0:	000cf600 	call	cf60 <alt_open_fd>
}  
    d0a4:	e037883a 	mov	sp,fp
    d0a8:	dfc00117 	ldw	ra,4(sp)
    d0ac:	df000017 	ldw	fp,0(sp)
    d0b0:	dec00204 	addi	sp,sp,8
    d0b4:	f800283a 	ret

0000d0b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0b8:	defffe04 	addi	sp,sp,-8
    d0bc:	dfc00115 	stw	ra,4(sp)
    d0c0:	df000015 	stw	fp,0(sp)
    d0c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0c8:	00800074 	movhi	r2,1
    d0cc:	10b81a04 	addi	r2,r2,-8088
    d0d0:	10800017 	ldw	r2,0(r2)
    d0d4:	10000526 	beq	r2,zero,d0ec <alt_get_errno+0x34>
    d0d8:	00800074 	movhi	r2,1
    d0dc:	10b81a04 	addi	r2,r2,-8088
    d0e0:	10800017 	ldw	r2,0(r2)
    d0e4:	103ee83a 	callr	r2
    d0e8:	00000206 	br	d0f4 <alt_get_errno+0x3c>
    d0ec:	00800074 	movhi	r2,1
    d0f0:	10b8fd04 	addi	r2,r2,-7180
}
    d0f4:	e037883a 	mov	sp,fp
    d0f8:	dfc00117 	ldw	ra,4(sp)
    d0fc:	df000017 	ldw	fp,0(sp)
    d100:	dec00204 	addi	sp,sp,8
    d104:	f800283a 	ret

0000d108 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d108:	defffb04 	addi	sp,sp,-20
    d10c:	dfc00415 	stw	ra,16(sp)
    d110:	df000315 	stw	fp,12(sp)
    d114:	dc000215 	stw	r16,8(sp)
    d118:	df000204 	addi	fp,sp,8
    d11c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d120:	e0bfff17 	ldw	r2,-4(fp)
    d124:	10800217 	ldw	r2,8(r2)
    d128:	10d00034 	orhi	r3,r2,16384
    d12c:	e0bfff17 	ldw	r2,-4(fp)
    d130:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d134:	e03ffe15 	stw	zero,-8(fp)
    d138:	00002206 	br	d1c4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d13c:	04000074 	movhi	r16,1
    d140:	8437a304 	addi	r16,r16,-8564
    d144:	e0bffe17 	ldw	r2,-8(fp)
    d148:	1009883a 	mov	r4,r2
    d14c:	01400304 	movi	r5,12
    d150:	000b1280 	call	b128 <__mulsi3>
    d154:	8085883a 	add	r2,r16,r2
    d158:	10c00017 	ldw	r3,0(r2)
    d15c:	e0bfff17 	ldw	r2,-4(fp)
    d160:	10800017 	ldw	r2,0(r2)
    d164:	1880141e 	bne	r3,r2,d1b8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d168:	04000074 	movhi	r16,1
    d16c:	8437a304 	addi	r16,r16,-8564
    d170:	e0bffe17 	ldw	r2,-8(fp)
    d174:	1009883a 	mov	r4,r2
    d178:	01400304 	movi	r5,12
    d17c:	000b1280 	call	b128 <__mulsi3>
    d180:	8085883a 	add	r2,r16,r2
    d184:	10800204 	addi	r2,r2,8
    d188:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d18c:	10000a0e 	bge	r2,zero,d1b8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    d190:	e13ffe17 	ldw	r4,-8(fp)
    d194:	01400304 	movi	r5,12
    d198:	000b1280 	call	b128 <__mulsi3>
    d19c:	00c00074 	movhi	r3,1
    d1a0:	18f7a304 	addi	r3,r3,-8564
    d1a4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d1a8:	e0bfff17 	ldw	r2,-4(fp)
    d1ac:	18800226 	beq	r3,r2,d1b8 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d1b0:	00bffcc4 	movi	r2,-13
    d1b4:	00000a06 	br	d1e0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d1b8:	e0bffe17 	ldw	r2,-8(fp)
    d1bc:	10800044 	addi	r2,r2,1
    d1c0:	e0bffe15 	stw	r2,-8(fp)
    d1c4:	00800074 	movhi	r2,1
    d1c8:	10b81904 	addi	r2,r2,-8092
    d1cc:	10800017 	ldw	r2,0(r2)
    d1d0:	1007883a 	mov	r3,r2
    d1d4:	e0bffe17 	ldw	r2,-8(fp)
    d1d8:	18bfd82e 	bgeu	r3,r2,d13c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d1dc:	0005883a 	mov	r2,zero
}
    d1e0:	e037883a 	mov	sp,fp
    d1e4:	dfc00217 	ldw	ra,8(sp)
    d1e8:	df000117 	ldw	fp,4(sp)
    d1ec:	dc000017 	ldw	r16,0(sp)
    d1f0:	dec00304 	addi	sp,sp,12
    d1f4:	f800283a 	ret

0000d1f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d1f8:	defff604 	addi	sp,sp,-40
    d1fc:	dfc00915 	stw	ra,36(sp)
    d200:	df000815 	stw	fp,32(sp)
    d204:	df000804 	addi	fp,sp,32
    d208:	e13ffd15 	stw	r4,-12(fp)
    d20c:	e17ffe15 	stw	r5,-8(fp)
    d210:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d214:	00bfffc4 	movi	r2,-1
    d218:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    d21c:	00bffb44 	movi	r2,-19
    d220:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    d224:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d228:	e13ffd17 	ldw	r4,-12(fp)
    d22c:	01400074 	movhi	r5,1
    d230:	29781704 	addi	r5,r5,-8100
    d234:	000d58c0 	call	d58c <alt_find_dev>
    d238:	e0bff815 	stw	r2,-32(fp)
    d23c:	e0bff817 	ldw	r2,-32(fp)
    d240:	1000051e 	bne	r2,zero,d258 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d244:	e13ffd17 	ldw	r4,-12(fp)
    d248:	000d61c0 	call	d61c <alt_find_file>
    d24c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    d250:	00800044 	movi	r2,1
    d254:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d258:	e0bff817 	ldw	r2,-32(fp)
    d25c:	10002a26 	beq	r2,zero,d308 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d260:	e13ff817 	ldw	r4,-32(fp)
    d264:	000d7300 	call	d730 <alt_get_fd>
    d268:	e0bff915 	stw	r2,-28(fp)
    d26c:	e0bff917 	ldw	r2,-28(fp)
    d270:	1000030e 	bge	r2,zero,d280 <open+0x88>
    {
      status = index;
    d274:	e0bff917 	ldw	r2,-28(fp)
    d278:	e0bffa15 	stw	r2,-24(fp)
    d27c:	00002406 	br	d310 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    d280:	e13ff917 	ldw	r4,-28(fp)
    d284:	01400304 	movi	r5,12
    d288:	000b1280 	call	b128 <__mulsi3>
    d28c:	00c00074 	movhi	r3,1
    d290:	18f7a304 	addi	r3,r3,-8564
    d294:	10c5883a 	add	r2,r2,r3
    d298:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d29c:	e0fffe17 	ldw	r3,-8(fp)
    d2a0:	00900034 	movhi	r2,16384
    d2a4:	10bfffc4 	addi	r2,r2,-1
    d2a8:	1886703a 	and	r3,r3,r2
    d2ac:	e0bffc17 	ldw	r2,-16(fp)
    d2b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d2b4:	e0bffb17 	ldw	r2,-20(fp)
    d2b8:	1000051e 	bne	r2,zero,d2d0 <open+0xd8>
    d2bc:	e13ffc17 	ldw	r4,-16(fp)
    d2c0:	000d1080 	call	d108 <alt_file_locked>
    d2c4:	e0bffa15 	stw	r2,-24(fp)
    d2c8:	e0bffa17 	ldw	r2,-24(fp)
    d2cc:	10001016 	blt	r2,zero,d310 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d2d0:	e0bff817 	ldw	r2,-32(fp)
    d2d4:	10800317 	ldw	r2,12(r2)
    d2d8:	10000826 	beq	r2,zero,d2fc <open+0x104>
    d2dc:	e0bff817 	ldw	r2,-32(fp)
    d2e0:	10800317 	ldw	r2,12(r2)
    d2e4:	e13ffc17 	ldw	r4,-16(fp)
    d2e8:	e17ffd17 	ldw	r5,-12(fp)
    d2ec:	e1bffe17 	ldw	r6,-8(fp)
    d2f0:	e1ffff17 	ldw	r7,-4(fp)
    d2f4:	103ee83a 	callr	r2
    d2f8:	00000106 	br	d300 <open+0x108>
    d2fc:	0005883a 	mov	r2,zero
    d300:	e0bffa15 	stw	r2,-24(fp)
    d304:	00000206 	br	d310 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d308:	00bffb44 	movi	r2,-19
    d30c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d310:	e0bffa17 	ldw	r2,-24(fp)
    d314:	1000080e 	bge	r2,zero,d338 <open+0x140>
  {
    alt_release_fd (index);  
    d318:	e13ff917 	ldw	r4,-28(fp)
    d31c:	000d3500 	call	d350 <alt_release_fd>
    ALT_ERRNO = -status;
    d320:	000d0b80 	call	d0b8 <alt_get_errno>
    d324:	e0fffa17 	ldw	r3,-24(fp)
    d328:	00c7c83a 	sub	r3,zero,r3
    d32c:	10c00015 	stw	r3,0(r2)
    return -1;
    d330:	00bfffc4 	movi	r2,-1
    d334:	00000106 	br	d33c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    d338:	e0bff917 	ldw	r2,-28(fp)
}
    d33c:	e037883a 	mov	sp,fp
    d340:	dfc00117 	ldw	ra,4(sp)
    d344:	df000017 	ldw	fp,0(sp)
    d348:	dec00204 	addi	sp,sp,8
    d34c:	f800283a 	ret

0000d350 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d350:	defffc04 	addi	sp,sp,-16
    d354:	dfc00315 	stw	ra,12(sp)
    d358:	df000215 	stw	fp,8(sp)
    d35c:	dc000115 	stw	r16,4(sp)
    d360:	df000104 	addi	fp,sp,4
    d364:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d368:	e0bfff17 	ldw	r2,-4(fp)
    d36c:	108000d0 	cmplti	r2,r2,3
    d370:	1000111e 	bne	r2,zero,d3b8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    d374:	04000074 	movhi	r16,1
    d378:	8437a304 	addi	r16,r16,-8564
    d37c:	e0bfff17 	ldw	r2,-4(fp)
    d380:	1009883a 	mov	r4,r2
    d384:	01400304 	movi	r5,12
    d388:	000b1280 	call	b128 <__mulsi3>
    d38c:	8085883a 	add	r2,r16,r2
    d390:	10800204 	addi	r2,r2,8
    d394:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d398:	04000074 	movhi	r16,1
    d39c:	8437a304 	addi	r16,r16,-8564
    d3a0:	e0bfff17 	ldw	r2,-4(fp)
    d3a4:	1009883a 	mov	r4,r2
    d3a8:	01400304 	movi	r5,12
    d3ac:	000b1280 	call	b128 <__mulsi3>
    d3b0:	8085883a 	add	r2,r16,r2
    d3b4:	10000015 	stw	zero,0(r2)
  }
}
    d3b8:	e037883a 	mov	sp,fp
    d3bc:	dfc00217 	ldw	ra,8(sp)
    d3c0:	df000117 	ldw	fp,4(sp)
    d3c4:	dc000017 	ldw	r16,0(sp)
    d3c8:	dec00304 	addi	sp,sp,12
    d3cc:	f800283a 	ret

0000d3d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d3d0:	defffa04 	addi	sp,sp,-24
    d3d4:	df000515 	stw	fp,20(sp)
    d3d8:	df000504 	addi	fp,sp,20
    d3dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d3e0:	0005303a 	rdctl	r2,status
    d3e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d3e8:	e0fffc17 	ldw	r3,-16(fp)
    d3ec:	00bfff84 	movi	r2,-2
    d3f0:	1884703a 	and	r2,r3,r2
    d3f4:	1001703a 	wrctl	status,r2
  
  return context;
    d3f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d3fc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    d400:	e0bfff17 	ldw	r2,-4(fp)
    d404:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d408:	e0bffd17 	ldw	r2,-12(fp)
    d40c:	10800017 	ldw	r2,0(r2)
    d410:	e0fffd17 	ldw	r3,-12(fp)
    d414:	18c00117 	ldw	r3,4(r3)
    d418:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    d41c:	e0bffd17 	ldw	r2,-12(fp)
    d420:	10800117 	ldw	r2,4(r2)
    d424:	e0fffd17 	ldw	r3,-12(fp)
    d428:	18c00017 	ldw	r3,0(r3)
    d42c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d430:	e0bffd17 	ldw	r2,-12(fp)
    d434:	e0fffd17 	ldw	r3,-12(fp)
    d438:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    d43c:	e0bffd17 	ldw	r2,-12(fp)
    d440:	e0fffd17 	ldw	r3,-12(fp)
    d444:	10c00015 	stw	r3,0(r2)
    d448:	e0bffb17 	ldw	r2,-20(fp)
    d44c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d450:	e0bffe17 	ldw	r2,-8(fp)
    d454:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    d458:	e037883a 	mov	sp,fp
    d45c:	df000017 	ldw	fp,0(sp)
    d460:	dec00104 	addi	sp,sp,4
    d464:	f800283a 	ret

0000d468 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d468:	defffb04 	addi	sp,sp,-20
    d46c:	dfc00415 	stw	ra,16(sp)
    d470:	df000315 	stw	fp,12(sp)
    d474:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d478:	d0a01817 	ldw	r2,-32672(gp)
    d47c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d480:	d0a10017 	ldw	r2,-31744(gp)
    d484:	10800044 	addi	r2,r2,1
    d488:	d0a10015 	stw	r2,-31744(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d48c:	00002e06 	br	d548 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    d490:	e0bffd17 	ldw	r2,-12(fp)
    d494:	10800017 	ldw	r2,0(r2)
    d498:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d49c:	e0bffd17 	ldw	r2,-12(fp)
    d4a0:	10800403 	ldbu	r2,16(r2)
    d4a4:	10803fcc 	andi	r2,r2,255
    d4a8:	10000426 	beq	r2,zero,d4bc <alt_tick+0x54>
    d4ac:	d0a10017 	ldw	r2,-31744(gp)
    d4b0:	1000021e 	bne	r2,zero,d4bc <alt_tick+0x54>
    {
      alarm->rollover = 0;
    d4b4:	e0bffd17 	ldw	r2,-12(fp)
    d4b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d4bc:	e0bffd17 	ldw	r2,-12(fp)
    d4c0:	10800217 	ldw	r2,8(r2)
    d4c4:	d0e10017 	ldw	r3,-31744(gp)
    d4c8:	18801d36 	bltu	r3,r2,d540 <alt_tick+0xd8>
    d4cc:	e0bffd17 	ldw	r2,-12(fp)
    d4d0:	10800403 	ldbu	r2,16(r2)
    d4d4:	10803fcc 	andi	r2,r2,255
    d4d8:	1000191e 	bne	r2,zero,d540 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    d4dc:	e0bffd17 	ldw	r2,-12(fp)
    d4e0:	10c00317 	ldw	r3,12(r2)
    d4e4:	e0bffd17 	ldw	r2,-12(fp)
    d4e8:	10800517 	ldw	r2,20(r2)
    d4ec:	1009883a 	mov	r4,r2
    d4f0:	183ee83a 	callr	r3
    d4f4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d4f8:	e0bfff17 	ldw	r2,-4(fp)
    d4fc:	1000031e 	bne	r2,zero,d50c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    d500:	e13ffd17 	ldw	r4,-12(fp)
    d504:	000d3d00 	call	d3d0 <alt_alarm_stop>
    d508:	00000d06 	br	d540 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    d50c:	e0bffd17 	ldw	r2,-12(fp)
    d510:	10c00217 	ldw	r3,8(r2)
    d514:	e0bfff17 	ldw	r2,-4(fp)
    d518:	1887883a 	add	r3,r3,r2
    d51c:	e0bffd17 	ldw	r2,-12(fp)
    d520:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d524:	e0bffd17 	ldw	r2,-12(fp)
    d528:	10c00217 	ldw	r3,8(r2)
    d52c:	d0a10017 	ldw	r2,-31744(gp)
    d530:	1880032e 	bgeu	r3,r2,d540 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    d534:	e0bffd17 	ldw	r2,-12(fp)
    d538:	00c00044 	movi	r3,1
    d53c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    d540:	e0bffe17 	ldw	r2,-8(fp)
    d544:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d548:	e0fffd17 	ldw	r3,-12(fp)
    d54c:	d0a01804 	addi	r2,gp,-32672
    d550:	18bfcf1e 	bne	r3,r2,d490 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    d554:	0001883a 	nop
}
    d558:	e037883a 	mov	sp,fp
    d55c:	dfc00117 	ldw	ra,4(sp)
    d560:	df000017 	ldw	fp,0(sp)
    d564:	dec00204 	addi	sp,sp,8
    d568:	f800283a 	ret

0000d56c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    d56c:	deffff04 	addi	sp,sp,-4
    d570:	df000015 	stw	fp,0(sp)
    d574:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d578:	000170fa 	wrctl	ienable,zero
}
    d57c:	e037883a 	mov	sp,fp
    d580:	df000017 	ldw	fp,0(sp)
    d584:	dec00104 	addi	sp,sp,4
    d588:	f800283a 	ret

0000d58c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d58c:	defffa04 	addi	sp,sp,-24
    d590:	dfc00515 	stw	ra,20(sp)
    d594:	df000415 	stw	fp,16(sp)
    d598:	df000404 	addi	fp,sp,16
    d59c:	e13ffe15 	stw	r4,-8(fp)
    d5a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d5a4:	e0bfff17 	ldw	r2,-4(fp)
    d5a8:	10800017 	ldw	r2,0(r2)
    d5ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d5b0:	e13ffe17 	ldw	r4,-8(fp)
    d5b4:	000b8c80 	call	b8c8 <strlen>
    d5b8:	10800044 	addi	r2,r2,1
    d5bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d5c0:	00000d06 	br	d5f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d5c4:	e0bffc17 	ldw	r2,-16(fp)
    d5c8:	10c00217 	ldw	r3,8(r2)
    d5cc:	e0bffd17 	ldw	r2,-12(fp)
    d5d0:	1809883a 	mov	r4,r3
    d5d4:	e17ffe17 	ldw	r5,-8(fp)
    d5d8:	100d883a 	mov	r6,r2
    d5dc:	000d8b00 	call	d8b0 <memcmp>
    d5e0:	1000021e 	bne	r2,zero,d5ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d5e4:	e0bffc17 	ldw	r2,-16(fp)
    d5e8:	00000706 	br	d608 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d5ec:	e0bffc17 	ldw	r2,-16(fp)
    d5f0:	10800017 	ldw	r2,0(r2)
    d5f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d5f8:	e0fffc17 	ldw	r3,-16(fp)
    d5fc:	e0bfff17 	ldw	r2,-4(fp)
    d600:	18bff01e 	bne	r3,r2,d5c4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d604:	0005883a 	mov	r2,zero
}
    d608:	e037883a 	mov	sp,fp
    d60c:	dfc00117 	ldw	ra,4(sp)
    d610:	df000017 	ldw	fp,0(sp)
    d614:	dec00204 	addi	sp,sp,8
    d618:	f800283a 	ret

0000d61c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d61c:	defffb04 	addi	sp,sp,-20
    d620:	dfc00415 	stw	ra,16(sp)
    d624:	df000315 	stw	fp,12(sp)
    d628:	df000304 	addi	fp,sp,12
    d62c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d630:	00800074 	movhi	r2,1
    d634:	10b81504 	addi	r2,r2,-8108
    d638:	10800017 	ldw	r2,0(r2)
    d63c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d640:	00003106 	br	d708 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    d644:	e0bffd17 	ldw	r2,-12(fp)
    d648:	10800217 	ldw	r2,8(r2)
    d64c:	1009883a 	mov	r4,r2
    d650:	000b8c80 	call	b8c8 <strlen>
    d654:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    d658:	e0bffd17 	ldw	r2,-12(fp)
    d65c:	10c00217 	ldw	r3,8(r2)
    d660:	e0bffe17 	ldw	r2,-8(fp)
    d664:	10bfffc4 	addi	r2,r2,-1
    d668:	1885883a 	add	r2,r3,r2
    d66c:	10800003 	ldbu	r2,0(r2)
    d670:	10803fcc 	andi	r2,r2,255
    d674:	1080201c 	xori	r2,r2,128
    d678:	10bfe004 	addi	r2,r2,-128
    d67c:	10800bd8 	cmpnei	r2,r2,47
    d680:	1000031e 	bne	r2,zero,d690 <alt_find_file+0x74>
    {
      len -= 1;
    d684:	e0bffe17 	ldw	r2,-8(fp)
    d688:	10bfffc4 	addi	r2,r2,-1
    d68c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d690:	e0bffe17 	ldw	r2,-8(fp)
    d694:	e0ffff17 	ldw	r3,-4(fp)
    d698:	1885883a 	add	r2,r3,r2
    d69c:	10800003 	ldbu	r2,0(r2)
    d6a0:	10803fcc 	andi	r2,r2,255
    d6a4:	1080201c 	xori	r2,r2,128
    d6a8:	10bfe004 	addi	r2,r2,-128
    d6ac:	10800be0 	cmpeqi	r2,r2,47
    d6b0:	1000081e 	bne	r2,zero,d6d4 <alt_find_file+0xb8>
    d6b4:	e0bffe17 	ldw	r2,-8(fp)
    d6b8:	e0ffff17 	ldw	r3,-4(fp)
    d6bc:	1885883a 	add	r2,r3,r2
    d6c0:	10800003 	ldbu	r2,0(r2)
    d6c4:	10803fcc 	andi	r2,r2,255
    d6c8:	1080201c 	xori	r2,r2,128
    d6cc:	10bfe004 	addi	r2,r2,-128
    d6d0:	10000a1e 	bne	r2,zero,d6fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    d6d4:	e0bffd17 	ldw	r2,-12(fp)
    d6d8:	10c00217 	ldw	r3,8(r2)
    d6dc:	e0bffe17 	ldw	r2,-8(fp)
    d6e0:	1809883a 	mov	r4,r3
    d6e4:	e17fff17 	ldw	r5,-4(fp)
    d6e8:	100d883a 	mov	r6,r2
    d6ec:	000d8b00 	call	d8b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d6f0:	1000021e 	bne	r2,zero,d6fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d6f4:	e0bffd17 	ldw	r2,-12(fp)
    d6f8:	00000806 	br	d71c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    d6fc:	e0bffd17 	ldw	r2,-12(fp)
    d700:	10800017 	ldw	r2,0(r2)
    d704:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d708:	e0fffd17 	ldw	r3,-12(fp)
    d70c:	00800074 	movhi	r2,1
    d710:	10b81504 	addi	r2,r2,-8108
    d714:	18bfcb1e 	bne	r3,r2,d644 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d718:	0005883a 	mov	r2,zero
}
    d71c:	e037883a 	mov	sp,fp
    d720:	dfc00117 	ldw	ra,4(sp)
    d724:	df000017 	ldw	fp,0(sp)
    d728:	dec00204 	addi	sp,sp,8
    d72c:	f800283a 	ret

0000d730 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d730:	defffa04 	addi	sp,sp,-24
    d734:	dfc00515 	stw	ra,20(sp)
    d738:	df000415 	stw	fp,16(sp)
    d73c:	dc000315 	stw	r16,12(sp)
    d740:	df000304 	addi	fp,sp,12
    d744:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d748:	00bffa04 	movi	r2,-24
    d74c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d750:	e03ffd15 	stw	zero,-12(fp)
    d754:	00002106 	br	d7dc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    d758:	04000074 	movhi	r16,1
    d75c:	8437a304 	addi	r16,r16,-8564
    d760:	e0bffd17 	ldw	r2,-12(fp)
    d764:	1009883a 	mov	r4,r2
    d768:	01400304 	movi	r5,12
    d76c:	000b1280 	call	b128 <__mulsi3>
    d770:	8085883a 	add	r2,r16,r2
    d774:	10800017 	ldw	r2,0(r2)
    d778:	1000151e 	bne	r2,zero,d7d0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    d77c:	04000074 	movhi	r16,1
    d780:	8437a304 	addi	r16,r16,-8564
    d784:	e0bffd17 	ldw	r2,-12(fp)
    d788:	1009883a 	mov	r4,r2
    d78c:	01400304 	movi	r5,12
    d790:	000b1280 	call	b128 <__mulsi3>
    d794:	8085883a 	add	r2,r16,r2
    d798:	e0ffff17 	ldw	r3,-4(fp)
    d79c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    d7a0:	00800074 	movhi	r2,1
    d7a4:	10b81904 	addi	r2,r2,-8092
    d7a8:	10c00017 	ldw	r3,0(r2)
    d7ac:	e0bffd17 	ldw	r2,-12(fp)
    d7b0:	1880040e 	bge	r3,r2,d7c4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    d7b4:	00800074 	movhi	r2,1
    d7b8:	10b81904 	addi	r2,r2,-8092
    d7bc:	e0fffd17 	ldw	r3,-12(fp)
    d7c0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    d7c4:	e0bffd17 	ldw	r2,-12(fp)
    d7c8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    d7cc:	00000606 	br	d7e8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d7d0:	e0bffd17 	ldw	r2,-12(fp)
    d7d4:	10800044 	addi	r2,r2,1
    d7d8:	e0bffd15 	stw	r2,-12(fp)
    d7dc:	e0bffd17 	ldw	r2,-12(fp)
    d7e0:	10800810 	cmplti	r2,r2,32
    d7e4:	103fdc1e 	bne	r2,zero,d758 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d7e8:	e0bffe17 	ldw	r2,-8(fp)
}
    d7ec:	e037883a 	mov	sp,fp
    d7f0:	dfc00217 	ldw	ra,8(sp)
    d7f4:	df000117 	ldw	fp,4(sp)
    d7f8:	dc000017 	ldw	r16,0(sp)
    d7fc:	dec00304 	addi	sp,sp,12
    d800:	f800283a 	ret

0000d804 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d804:	defffb04 	addi	sp,sp,-20
    d808:	df000415 	stw	fp,16(sp)
    d80c:	df000404 	addi	fp,sp,16
    d810:	e13ffe15 	stw	r4,-8(fp)
    d814:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d818:	e0bfff17 	ldw	r2,-4(fp)
    d81c:	10820070 	cmpltui	r2,r2,2049
    d820:	1000021e 	bne	r2,zero,d82c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d824:	00820004 	movi	r2,2048
    d828:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    d82c:	e0fffe17 	ldw	r3,-8(fp)
    d830:	e0bfff17 	ldw	r2,-4(fp)
    d834:	1885883a 	add	r2,r3,r2
    d838:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d83c:	e0bffe17 	ldw	r2,-8(fp)
    d840:	e0bffc15 	stw	r2,-16(fp)
    d844:	00000506 	br	d85c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d848:	e0bffc17 	ldw	r2,-16(fp)
    d84c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d850:	e0bffc17 	ldw	r2,-16(fp)
    d854:	10800804 	addi	r2,r2,32
    d858:	e0bffc15 	stw	r2,-16(fp)
    d85c:	e0fffc17 	ldw	r3,-16(fp)
    d860:	e0bffd17 	ldw	r2,-12(fp)
    d864:	18bff836 	bltu	r3,r2,d848 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    d868:	e0bffe17 	ldw	r2,-8(fp)
    d86c:	108007cc 	andi	r2,r2,31
    d870:	10000226 	beq	r2,zero,d87c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    d874:	e0bffc17 	ldw	r2,-16(fp)
    d878:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    d87c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    d880:	e037883a 	mov	sp,fp
    d884:	df000017 	ldw	fp,0(sp)
    d888:	dec00104 	addi	sp,sp,4
    d88c:	f800283a 	ret

0000d890 <exit>:
    d890:	defffe04 	addi	sp,sp,-8
    d894:	000b883a 	mov	r5,zero
    d898:	dc000015 	stw	r16,0(sp)
    d89c:	dfc00115 	stw	ra,4(sp)
    d8a0:	2021883a 	mov	r16,r4
    d8a4:	000d8f80 	call	d8f8 <__call_exitprocs>
    d8a8:	8009883a 	mov	r4,r16
    d8ac:	000dad00 	call	dad0 <_exit>

0000d8b0 <memcmp>:
    d8b0:	30000d26 	beq	r6,zero,d8e8 <memcmp+0x38>
    d8b4:	20c00003 	ldbu	r3,0(r4)
    d8b8:	28800003 	ldbu	r2,0(r5)
    d8bc:	18800c1e 	bne	r3,r2,d8f0 <memcmp+0x40>
    d8c0:	31bfff84 	addi	r6,r6,-2
    d8c4:	01ffffc4 	movi	r7,-1
    d8c8:	00000406 	br	d8dc <memcmp+0x2c>
    d8cc:	20c00003 	ldbu	r3,0(r4)
    d8d0:	28800003 	ldbu	r2,0(r5)
    d8d4:	31bfffc4 	addi	r6,r6,-1
    d8d8:	1880051e 	bne	r3,r2,d8f0 <memcmp+0x40>
    d8dc:	21000044 	addi	r4,r4,1
    d8e0:	29400044 	addi	r5,r5,1
    d8e4:	31fff91e 	bne	r6,r7,d8cc <memcmp+0x1c>
    d8e8:	0005883a 	mov	r2,zero
    d8ec:	f800283a 	ret
    d8f0:	1885c83a 	sub	r2,r3,r2
    d8f4:	f800283a 	ret

0000d8f8 <__call_exitprocs>:
    d8f8:	00800074 	movhi	r2,1
    d8fc:	10b81204 	addi	r2,r2,-8120
    d900:	10800017 	ldw	r2,0(r2)
    d904:	defff204 	addi	sp,sp,-56
    d908:	df000c15 	stw	fp,48(sp)
    d90c:	d8800015 	stw	r2,0(sp)
    d910:	10800c04 	addi	r2,r2,48
    d914:	dd400915 	stw	r21,36(sp)
    d918:	dfc00d15 	stw	ra,52(sp)
    d91c:	ddc00b15 	stw	r23,44(sp)
    d920:	dd800a15 	stw	r22,40(sp)
    d924:	dd000815 	stw	r20,32(sp)
    d928:	dcc00715 	stw	r19,28(sp)
    d92c:	dc800615 	stw	r18,24(sp)
    d930:	dc400515 	stw	r17,20(sp)
    d934:	dc000415 	stw	r16,16(sp)
    d938:	d9000115 	stw	r4,4(sp)
    d93c:	2839883a 	mov	fp,r5
    d940:	d8800215 	stw	r2,8(sp)
    d944:	057fffc4 	movi	r21,-1
    d948:	d8800017 	ldw	r2,0(sp)
    d94c:	dd800217 	ldw	r22,8(sp)
    d950:	15c00c17 	ldw	r23,48(r2)
    d954:	b8001b26 	beq	r23,zero,d9c4 <__call_exitprocs+0xcc>
    d958:	b9000117 	ldw	r4,4(r23)
    d95c:	bd002217 	ldw	r20,136(r23)
    d960:	243fffc4 	addi	r16,r4,-1
    d964:	80001416 	blt	r16,zero,d9b8 <__call_exitprocs+0xc0>
    d968:	244007c4 	addi	r17,r4,31
    d96c:	21000044 	addi	r4,r4,1
    d970:	8c63883a 	add	r17,r17,r17
    d974:	8427883a 	add	r19,r16,r16
    d978:	2109883a 	add	r4,r4,r4
    d97c:	8c63883a 	add	r17,r17,r17
    d980:	9ce7883a 	add	r19,r19,r19
    d984:	2109883a 	add	r4,r4,r4
    d988:	a463883a 	add	r17,r20,r17
    d98c:	a4e7883a 	add	r19,r20,r19
    d990:	b925883a 	add	r18,r23,r4
    d994:	e0001726 	beq	fp,zero,d9f4 <__call_exitprocs+0xfc>
    d998:	a0000226 	beq	r20,zero,d9a4 <__call_exitprocs+0xac>
    d99c:	89400017 	ldw	r5,0(r17)
    d9a0:	2f001426 	beq	r5,fp,d9f4 <__call_exitprocs+0xfc>
    d9a4:	843fffc4 	addi	r16,r16,-1
    d9a8:	8c7fff04 	addi	r17,r17,-4
    d9ac:	9cffff04 	addi	r19,r19,-4
    d9b0:	94bfff04 	addi	r18,r18,-4
    d9b4:	857ff71e 	bne	r16,r21,d994 <__call_exitprocs+0x9c>
    d9b8:	00800034 	movhi	r2,0
    d9bc:	10800004 	addi	r2,r2,0
    d9c0:	1000311e 	bne	r2,zero,da88 <__call_exitprocs+0x190>
    d9c4:	dfc00d17 	ldw	ra,52(sp)
    d9c8:	df000c17 	ldw	fp,48(sp)
    d9cc:	ddc00b17 	ldw	r23,44(sp)
    d9d0:	dd800a17 	ldw	r22,40(sp)
    d9d4:	dd400917 	ldw	r21,36(sp)
    d9d8:	dd000817 	ldw	r20,32(sp)
    d9dc:	dcc00717 	ldw	r19,28(sp)
    d9e0:	dc800617 	ldw	r18,24(sp)
    d9e4:	dc400517 	ldw	r17,20(sp)
    d9e8:	dc000417 	ldw	r16,16(sp)
    d9ec:	dec00e04 	addi	sp,sp,56
    d9f0:	f800283a 	ret
    d9f4:	b9000117 	ldw	r4,4(r23)
    d9f8:	92000017 	ldw	r8,0(r18)
    d9fc:	213fffc4 	addi	r4,r4,-1
    da00:	24001a26 	beq	r4,r16,da6c <__call_exitprocs+0x174>
    da04:	90000015 	stw	zero,0(r18)
    da08:	403fe626 	beq	r8,zero,d9a4 <__call_exitprocs+0xac>
    da0c:	ba400117 	ldw	r9,4(r23)
    da10:	a0001226 	beq	r20,zero,da5c <__call_exitprocs+0x164>
    da14:	00800044 	movi	r2,1
    da18:	1408983a 	sll	r4,r2,r16
    da1c:	a1404017 	ldw	r5,256(r20)
    da20:	214a703a 	and	r5,r4,r5
    da24:	28000d26 	beq	r5,zero,da5c <__call_exitprocs+0x164>
    da28:	a1404117 	ldw	r5,260(r20)
    da2c:	2148703a 	and	r4,r4,r5
    da30:	2000101e 	bne	r4,zero,da74 <__call_exitprocs+0x17c>
    da34:	99400017 	ldw	r5,0(r19)
    da38:	d9000117 	ldw	r4,4(sp)
    da3c:	da400315 	stw	r9,12(sp)
    da40:	403ee83a 	callr	r8
    da44:	da400317 	ldw	r9,12(sp)
    da48:	b9000117 	ldw	r4,4(r23)
    da4c:	227fbe1e 	bne	r4,r9,d948 <__call_exitprocs+0x50>
    da50:	b1000017 	ldw	r4,0(r22)
    da54:	25ffd326 	beq	r4,r23,d9a4 <__call_exitprocs+0xac>
    da58:	003fbb06 	br	d948 <__call_exitprocs+0x50>
    da5c:	da400315 	stw	r9,12(sp)
    da60:	403ee83a 	callr	r8
    da64:	da400317 	ldw	r9,12(sp)
    da68:	003ff706 	br	da48 <__call_exitprocs+0x150>
    da6c:	bc000115 	stw	r16,4(r23)
    da70:	003fe506 	br	da08 <__call_exitprocs+0x110>
    da74:	99000017 	ldw	r4,0(r19)
    da78:	da400315 	stw	r9,12(sp)
    da7c:	403ee83a 	callr	r8
    da80:	da400317 	ldw	r9,12(sp)
    da84:	003ff006 	br	da48 <__call_exitprocs+0x150>
    da88:	b9000117 	ldw	r4,4(r23)
    da8c:	20000e1e 	bne	r4,zero,dac8 <__call_exitprocs+0x1d0>
    da90:	b9000017 	ldw	r4,0(r23)
    da94:	20000826 	beq	r4,zero,dab8 <__call_exitprocs+0x1c0>
    da98:	b1000015 	stw	r4,0(r22)
    da9c:	a0000226 	beq	r20,zero,daa8 <__call_exitprocs+0x1b0>
    daa0:	a009883a 	mov	r4,r20
    daa4:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    daa8:	b809883a 	mov	r4,r23
    daac:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    dab0:	b5c00017 	ldw	r23,0(r22)
    dab4:	003fa706 	br	d954 <__call_exitprocs+0x5c>
    dab8:	0007883a 	mov	r3,zero
    dabc:	b82d883a 	mov	r22,r23
    dac0:	182f883a 	mov	r23,r3
    dac4:	003fa306 	br	d954 <__call_exitprocs+0x5c>
    dac8:	b8c00017 	ldw	r3,0(r23)
    dacc:	003ffb06 	br	dabc <__call_exitprocs+0x1c4>

0000dad0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    dad0:	defffc04 	addi	sp,sp,-16
    dad4:	df000315 	stw	fp,12(sp)
    dad8:	df000304 	addi	fp,sp,12
    dadc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    dae0:	0001883a 	nop
    dae4:	e0bfff17 	ldw	r2,-4(fp)
    dae8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    daec:	e0bffd17 	ldw	r2,-12(fp)
    daf0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    daf4:	e0bffe17 	ldw	r2,-8(fp)
    daf8:	10000226 	beq	r2,zero,db04 <_exit+0x34>
    ALT_SIM_FAIL();
    dafc:	002af070 	cmpltui	zero,zero,43969
    db00:	00000106 	br	db08 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    db04:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    db08:	003fff06 	br	db08 <_exit+0x38>
