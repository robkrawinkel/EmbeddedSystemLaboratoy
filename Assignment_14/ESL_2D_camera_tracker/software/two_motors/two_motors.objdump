
two_motors.elf:     file format elf32-littlenios2
two_motors.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00005d30 memsz 0x00005d30 flags r-x
    LOAD off    0x00006d50 vaddr 0x0000dd50 paddr 0x0000e098 align 2**12
         filesz 0x00000348 memsz 0x00000348 flags rw-
    LOAD off    0x000073e0 vaddr 0x0000e3e0 paddr 0x0000e3e0 align 2**12
         filesz 0x00000000 memsz 0x00000b04 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005974  000081bc  000081bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000220  0000db30  0000db30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000348  0000dd50  0000e098  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b04  0000e3e0  0000e3e0  000073e0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000920  00000000  00000000  000070c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c760  00000000  00000000  000079e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a86  00000000  00000000  00014140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000045a9  00000000  00000000  00018bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001070  00000000  00000000  0001d170  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021f6  00000000  00000000  0001e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003fcb  00000000  00000000  000203d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  000243a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000480  00000000  00000000  000243c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000270d0  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000270d3  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000270d6  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000270d7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000270d8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000270dc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000270e0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000270e4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000270ed  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000270f6  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  000270ff  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  00027111  2**0
                  CONTENTS, READONLY
 28 .jdi          00005585  00000000  00000000  00027162  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003c04b  00000000  00000000  0002c6e7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081bc l    d  .text	00000000 .text
0000db30 l    d  .rodata	00000000 .rodata
0000dd50 l    d  .rwdata	00000000 .rwdata
0000e3e0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../two_motors_bsp//obj/HAL/src/crt0.o
000081f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 InterruptHandlerForUart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pan_funcs.c
00000000 l    df *ABS*	00000000 pan_integ.c
00000000 l    df *ABS*	00000000 pan_model.c
00000000 l    df *ABS*	00000000 pan_submod.c
00000000 l    df *ABS*	00000000 tilt_integ.c
00000000 l    df *ABS*	00000000 tilt_model.c
00000000 l    df *ABS*	00000000 tilt_submod.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000a4b0 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000b01c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000dd50 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000c368 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000c4bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000c5fc l     F .text	00000038 alt_dev_reg
0000de30 l     O .rwdata	0000002c jtag_uart
0000de5c l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c90c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000cac4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000cbd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
0000cd00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000ce38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ce64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000cf84 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000d0dc l     F .text	00000050 alt_get_errno
0000d12c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000c454 g     F .text	00000068 alt_main
0000b76c g     F .text	00000044 __ashldi3
0000b858 g     F .text	00000080 _puts_r
0000ede4 g     O .bss	00000100 alt_irq
0000e3e4 g     O .bss	00000002 RxHead_0
0000e098 g       *ABS*	00000000 __flash_rwdata_start
0000ed04 g     O .bss	00000018 tilt_I
0000b80c g     F .text	0000004c printf
00009688 g     F .text	0000005c pan_CalculateOutput
0000e3e6 g     O .bss	00000002 RxTail_0
0000ad50 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
0000909c g     F .text	000005ec pan_CalculateDynamic
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000e418 g     O .bss	00000004 errno
000081f8 g     F .text	00000060 InitUart0
0000ed1c g     O .bss	00000018 tilt_R
00009adc g     F .text	0000004c tilt_ModelInitialize_initialvalues
0000e424 g     O .bss	00000004 alt_argv
00016030 g       *ABS*	00000000 _gp
0000deb0 g     O .rwdata	00000180 alt_fd_list
0000d5b0 g     F .text	00000090 alt_find_dev
0000e3e2 g     O .bss	00000002 TxTail_0
0000ae74 g     F .text	000000d4 __floatsidf
0000d064 g     F .text	00000078 alt_io_redirect
0000ae18 g     F .text	0000005c __ltdf2
0000b8d8 g     F .text	00000014 puts
0000c780 g     F .text	000000f4 altera_avalon_jtag_uart_read
0000b7d0 g     F .text	0000003c _printf_r
0000a320 g     F .text	0000003c tilt_CopyVariablesToOutputs
0000b13c g     F .text	00000008 __udivsi3
0000e048 g     O .rwdata	00000004 pan_number_of_inputs
0000e061 g     O .rwdata	00000001 tilt_major
0000d828 g     F .text	0000008c alt_icache_flush
00008d78 g     F .text	0000002c pan_DiscreteInitialize
0000ec34 g     O .bss	00000018 pan_I
0000e088 g     O .rwdata	00000004 alt_max_fd
0000b554 g     F .text	00000104 __unpack_d
0000837c g     F .text	0000003c EmptyUart0
0000c1b8 g     F .text	000001b0 alt_irq_register
00009030 g     F .text	00000038 pan_ModelInitialize_variables
0000a804 g     F .text	00000054 __adddf3
0000e414 g     O .bss	00000001 tilt_stop_simulation
0000e06c g     O .rwdata	00000004 _global_impure_ptr
0000eee4 g       *ABS*	00000000 __bss_end
00009890 g     F .text	0000005c pan_TerminateSubmodel
0000e3e8 g     O .bss	00000008 pan_start_time
0000d48c g     F .text	00000104 alt_tick
00008f68 g     F .text	0000004c pan_ModelInitialize_initialvalues
0000d3f4 g     F .text	00000098 alt_alarm_stop
0000e41c g     O .bss	00000004 alt_irq_active
0000ec4c g     O .bss	00000038 pan_P
000099fc g     F .text	000000e0 tilt_ModelInitialize_parameters
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000d0 alt_irq_handler
0000de88 g     O .rwdata	00000028 alt_dev_null
0000ec84 g     O .bss	00000018 pan_s
0000982c g     F .text	00000064 pan_CalculateSubmodel
00008258 g     F .text	00000124 IsrUart0
0000e060 g     O .rwdata	00000001 tilt_initialize
0000ce1c g     F .text	0000001c alt_dcache_flush_all
0000af48 g     F .text	000000d4 __fixdfsi
0000e044 g     O .rwdata	00000001 pan_initialize
0000e098 g       *ABS*	00000000 __ram_rwdata_end
0000e080 g     O .rwdata	00000008 alt_dev_list
0000c50c g     F .text	000000f0 write
0000ed34 g     O .bss	00000060 tilt_V
000098ec g     F .text	0000002c tilt_DiscreteInitialize
0000dd50 g       *ABS*	00000000 __ram_rodata_end
0000b728 g     F .text	00000044 __lshrdi3
0000a3f0 g     F .text	00000064 tilt_CalculateSubmodel
0000b144 g     F .text	00000008 __umodsi3
0000e034 g     O .rwdata	00000008 pan_finish_time
0000a454 g     F .text	0000005c tilt_TerminateSubmodel
0000eee4 g       *ABS*	00000000 end
0000a35c g     F .text	00000094 tilt_InitializeSubmodel
0000e3f0 g     O .bss	00000008 pan_time
0000cc24 g     F .text	000000dc altera_avalon_uart_write
0000ed94 g     O .bss	00000038 tilt_P
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009ba4 g     F .text	00000038 tilt_ModelInitialize_variables
0000c984 g     F .text	00000080 alt_avalon_timer_sc_init
0000ca64 g     F .text	00000060 altera_avalon_uart_write_fd
0000b284 g     F .text	000000ac __clzsi2
0000c874 g     F .text	00000098 altera_avalon_jtag_uart_write
0000b914 g     F .text	00000734 ___vfprintf_internal_r
0000d91c g     F .text	000001d8 __call_exitprocs
000081bc g     F .text	0000003c _start
0000e42c g     O .bss	00000004 _alt_tick_rate
00009b28 g     F .text	0000007c tilt_ModelInitialize_states
0000e430 g     O .bss	00000004 _alt_nticks
0000c668 g     F .text	00000058 alt_sys_init
00008e88 g     F .text	000000e0 pan_ModelInitialize_parameters
000083b8 g     F .text	0000005c GetUart0
0000e064 g     O .rwdata	00000004 tilt_number_of_inputs
00008d00 g     F .text	00000040 pan_String2Double
0000e030 g     O .rwdata	00000002 maxStepCount0
0000b14c g     F .text	00000028 __mulsi3
0000dd50 g       *ABS*	00000000 __ram_rwdata_start
0000db30 g       *ABS*	00000000 __ram_rodata_start
0000c6c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000d754 g     F .text	000000d4 alt_get_fd
00008414 g     F .text	0000011c PutUart0
0000b658 g     F .text	000000d0 __fpcmp_parts_d
00008da4 g     F .text	000000e4 pan_DiscreteStep
0000d8d4 g     F .text	00000048 memcmp
0000eee4 g       *ABS*	00000000 __alt_stack_base
0000e045 g     O .rwdata	00000001 pan_major
0000ab9c g     F .text	000001b4 __divdf3
0000e408 g     O .bss	00000008 tilt_time
0000a8b8 g     F .text	000002e4 __muldf3
0000d640 g     F .text	00000114 alt_find_file
0000ceb4 g     F .text	000000a0 alt_dev_llist_insert
0000e050 g     O .rwdata	00000008 tilt_finish_time
0000c06c g     F .text	000000e0 __sfvwrite_small_dev
0000e3e0 g       *ABS*	00000000 __bss_start
0000b7b0 g     F .text	00000020 memset
000087e8 g     F .text	00000518 main
0000e428 g     O .bss	00000004 alt_envp
0000c720 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e032 g     O .rwdata	00000002 maxStepCount1
0000973c g     F .text	0000005c pan_CopyVariablesToOutputs
0000e08c g     O .rwdata	00000004 alt_errno
0000ec9c g     O .bss	00000050 pan_V
0000a2ac g     F .text	00000074 tilt_CopyInputsToVariables
0000e410 g     O .bss	00000004 tilt_steps
0000e3f8 g     O .bss	00000004 pan_steps
0000b090 g     F .text	00000050 __divsi3
0000dc00 g     O .rodata	00000014 __thenan_df
0000e3e0 g     O .bss	00000002 TxHead_0
0000db30 g       *ABS*	00000000 __flash_rodata_start
0000e3fc g     O .bss	00000001 pan_stop_simulation
0000c634 g     F .text	00000034 alt_irq_init
0000d374 g     F .text	00000080 alt_release_fd
0000dc14 g     O .rodata	00000100 __clz_tab
0000c14c g     F .text	0000006c _write_r
0000e434 g     O .bss	00000400 rx_buffer_0
0000e03c g     O .rwdata	00000008 pan_step_size
00008fb4 g     F .text	0000007c pan_ModelInitialize_states
0000e070 g     O .rwdata	00000004 _impure_ptr
0000e420 g     O .bss	00000004 alt_argc
00008530 g     F .text	000000b8 InitUart
00008020 g       .exceptions	00000000 alt_irq_entry
0000e078 g     O .rwdata	00000008 alt_fs_list
000096e4 g     F .text	00000058 pan_CopyInputsToVariables
00009bdc g     F .text	00000034 tilt_ModelInitialize
00008d40 g     F .text	00000038 pan_Double2String
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009798 g     F .text	00000094 pan_InitializeSubmodel
000086e8 g     F .text	00000100 Stepcount0ToSI
0000e098 g       *ABS*	00000000 _edata
0000ca04 g     F .text	00000060 altera_avalon_uart_read_fd
0000eee4 g       *ABS*	00000000 _end
000081bc g       *ABS*	00000000 __ram_exceptions_end
0000e04c g     O .rwdata	00000004 pan_number_of_outputs
0000edcc g     O .bss	00000018 tilt_s
0000d590 g     F .text	00000020 altera_nios2_qsys_irq_init
0000d8b4 g     F .text	00000020 exit
0000b0e0 g     F .text	0000005c __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009c10 g     F .text	00000660 tilt_CalculateDynamic
0000daf4 g     F .text	0000003c _exit
0000e058 g     O .rwdata	00000008 tilt_step_size
0000e400 g     O .bss	00000008 tilt_start_time
0000b174 g     F .text	00000110 __muldi3
0000a270 g     F .text	0000003c tilt_CalculateOutput
0000b8ec g     F .text	00000028 strlen
0000d21c g     F .text	00000158 open
0000adb4 g     F .text	00000064 __gedf2
0000e068 g     O .rwdata	00000004 tilt_number_of_outputs
0000cf54 g     F .text	00000030 alt_icache_flush_all
0000e074 g     O .rwdata	00000004 alt_priority_mask
0000ecec g     O .bss	00000018 pan_R
0000c048 g     F .text	00000024 __vfprintf_internal
0000cb14 g     F .text	000000c0 altera_avalon_uart_read
00009068 g     F .text	00000034 pan_ModelInitialize
0000a858 g     F .text	00000060 __subdf3
000085e8 g     F .text	00000100 Stepcount1ToSI
0000e090 g     O .rwdata	00000008 alt_alarm_list
0000e834 g     O .bss	00000400 tx_buffer_0
0000cd50 g     F .text	000000cc close
0000c3d4 g     F .text	00000080 alt_load
0000b330 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00009918 g     F .text	000000e4 tilt_DiscreteStep



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606f14 	ori	at,at,33212
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001826 	beq	r2,zero,818c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
    812c:	00c00074 	movhi	r3,1
    8130:	18fb7904 	addi	r3,r3,-4636
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	213b7904 	addi	r4,r4,-4636
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	e17ffd17 	ldw	r5,-12(fp)
    8168:	183ee83a 	callr	r3
#endif
        break;
    816c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8178:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    817c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    8180:	e0bffb17 	ldw	r2,-20(fp)
    8184:	103fe21e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8188:	00000706 	br	81a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fdd06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a8:	e037883a 	mov	sp,fp
    81ac:	dfc00117 	ldw	ra,4(sp)
    81b0:	df000017 	ldw	fp,0(sp)
    81b4:	dec00204 	addi	sp,sp,8
    81b8:	f800283a 	ret

Disassembly of section .text:

000081bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81bc:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c8:	d6980c14 	ori	gp,gp,24624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81cc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81d0:	10b8f814 	ori	r2,r2,58336

    movhi r3, %hi(__bss_end)
    81d4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d8:	18fbb914 	ori	r3,r3,61156

    beq r2, r3, 1f
    81dc:	10c00326 	beq	r2,r3,81ec <_start+0x30>

0:
    stw zero, (r2)
    81e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e8:	10fffd36 	bltu	r2,r3,81e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81ec:	000c3d40 	call	c3d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81f0:	000c4540 	call	c454 <alt_main>

000081f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f4:	003fff06 	br	81f4 <alt_after_alt_main>

000081f8 <InitUart0>:
unsigned short RxHead_0=0;
unsigned short RxTail_0=0;
unsigned char rx_buffer_0[RX_BUFFER_SIZE_0];
 
void InitUart0(unsigned int BaudRate)
{
    81f8:	defffc04 	addi	sp,sp,-16
    81fc:	dfc00315 	stw	ra,12(sp)
    8200:	df000215 	stw	fp,8(sp)
    8204:	df000204 	addi	fp,sp,8
    8208:	e13fff15 	stw	r4,-4(fp)
    unsigned int divisor;
    
    divisor = (ALT_CPU_FREQ/BaudRate) + 1;
    820c:	0100bef4 	movhi	r4,763
    8210:	213c2004 	addi	r4,r4,-3968
    8214:	e17fff17 	ldw	r5,-4(fp)
    8218:	000b13c0 	call	b13c <__udivsi3>
    821c:	10800044 	addi	r2,r2,1
    8220:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
    8224:	e0fffe17 	ldw	r3,-8(fp)
    8228:	00800074 	movhi	r2,1
    822c:	10850404 	addi	r2,r2,5136
    8230:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    8234:	00c02004 	movi	r3,128
    8238:	00800074 	movhi	r2,1
    823c:	10850304 	addi	r2,r2,5132
    8240:	10c00035 	stwio	r3,0(r2)
}
    8244:	e037883a 	mov	sp,fp
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	df000017 	ldw	fp,0(sp)
    8250:	dec00204 	addi	sp,sp,8
    8254:	f800283a 	ret

00008258 <IsrUart0>:
 
void IsrUart0(void* context, unsigned int id)
{
    8258:	defffc04 	addi	sp,sp,-16
    825c:	df000315 	stw	fp,12(sp)
    8260:	df000304 	addi	fp,sp,12
    8264:	e13ffe15 	stw	r4,-8(fp)
    8268:	e17fff15 	stw	r5,-4(fp)
    int sr;
    
    sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    826c:	00800074 	movhi	r2,1
    8270:	10850204 	addi	r2,r2,5128
    8274:	10800037 	ldwio	r2,0(r2)
    8278:	e0bffd15 	stw	r2,-12(fp)

    if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
    827c:	e0bffd17 	ldw	r2,-12(fp)
    8280:	1080200c 	andi	r2,r2,128
    8284:	10001526 	beq	r2,zero,82dc <IsrUart0+0x84>
        rx_buffer_0[RxHead_0] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8288:	d0a0ed0b 	ldhu	r2,-31820(gp)
    828c:	10bfffcc 	andi	r2,r2,65535
    8290:	00c00074 	movhi	r3,1
    8294:	18c50004 	addi	r3,r3,5120
    8298:	18c00037 	ldwio	r3,0(r3)
    829c:	01000074 	movhi	r4,1
    82a0:	21390d04 	addi	r4,r4,-7116
    82a4:	2085883a 	add	r2,r4,r2
    82a8:	10c00005 	stb	r3,0(r2)
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
    82ac:	0007883a 	mov	r3,zero
    82b0:	00800074 	movhi	r2,1
    82b4:	10850204 	addi	r2,r2,5128
    82b8:	10c00035 	stwio	r3,0(r2)
        if (++RxHead_0 > (RX_BUFFER_SIZE_0 - 1)) {
    82bc:	d0a0ed0b 	ldhu	r2,-31820(gp)
    82c0:	10800044 	addi	r2,r2,1
    82c4:	d0a0ed0d 	sth	r2,-31820(gp)
    82c8:	d0a0ed0b 	ldhu	r2,-31820(gp)
    82cc:	10bfffcc 	andi	r2,r2,65535
    82d0:	10810030 	cmpltui	r2,r2,1024
    82d4:	1000011e 	bne	r2,zero,82dc <IsrUart0+0x84>
            RxHead_0 = 0;
    82d8:	d020ed0d 	sth	zero,-31820(gp)
        }
    }

    if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
    82dc:	e0bffd17 	ldw	r2,-12(fp)
    82e0:	1080100c 	andi	r2,r2,64
    82e4:	10002126 	beq	r2,zero,836c <IsrUart0+0x114>
        if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK) {
    82e8:	00800074 	movhi	r2,1
    82ec:	10850304 	addi	r2,r2,5132
    82f0:	10800037 	ldwio	r2,0(r2)
    82f4:	1080100c 	andi	r2,r2,64
    82f8:	10001c26 	beq	r2,zero,836c <IsrUart0+0x114>
            if (TxTail_0 != TxHead_0) {
    82fc:	d0e0ec8b 	ldhu	r3,-31822(gp)
    8300:	d0a0ec0b 	ldhu	r2,-31824(gp)
    8304:	18ffffcc 	andi	r3,r3,65535
    8308:	10bfffcc 	andi	r2,r2,65535
    830c:	18801326 	beq	r3,r2,835c <IsrUart0+0x104>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_0[TxTail_0]);
    8310:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8314:	10bfffcc 	andi	r2,r2,65535
    8318:	00c00074 	movhi	r3,1
    831c:	18fa0d04 	addi	r3,r3,-6092
    8320:	1885883a 	add	r2,r3,r2
    8324:	10800003 	ldbu	r2,0(r2)
    8328:	10c03fcc 	andi	r3,r2,255
    832c:	00800074 	movhi	r2,1
    8330:	10850104 	addi	r2,r2,5124
    8334:	10c00035 	stwio	r3,0(r2)
                if (++TxTail_0 > (TX_BUFFER_SIZE_0 - 1)) {
    8338:	d0a0ec8b 	ldhu	r2,-31822(gp)
    833c:	10800044 	addi	r2,r2,1
    8340:	d0a0ec8d 	sth	r2,-31822(gp)
    8344:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8348:	10bfffcc 	andi	r2,r2,65535
    834c:	10810030 	cmpltui	r2,r2,1024
    8350:	1000061e 	bne	r2,zero,836c <IsrUart0+0x114>
                    TxTail_0 = 0;
    8354:	d020ec8d 	sth	zero,-31822(gp)
    8358:	00000406 	br	836c <IsrUart0+0x114>
                }
            }
            else {
                IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    835c:	00c02004 	movi	r3,128
    8360:	00800074 	movhi	r2,1
    8364:	10850304 	addi	r2,r2,5132
    8368:	10c00035 	stwio	r3,0(r2)
            }
        }
    }
}
    836c:	e037883a 	mov	sp,fp
    8370:	df000017 	ldw	fp,0(sp)
    8374:	dec00104 	addi	sp,sp,4
    8378:	f800283a 	ret

0000837c <EmptyUart0>:
 
unsigned char EmptyUart0()
{
    837c:	deffff04 	addi	sp,sp,-4
    8380:	df000015 	stw	fp,0(sp)
    8384:	d839883a 	mov	fp,sp
    if(RxHead_0 == RxTail_0) {
    8388:	d0e0ed0b 	ldhu	r3,-31820(gp)
    838c:	d0a0ed8b 	ldhu	r2,-31818(gp)
    8390:	18ffffcc 	andi	r3,r3,65535
    8394:	10bfffcc 	andi	r2,r2,65535
    8398:	1880021e 	bne	r3,r2,83a4 <EmptyUart0+0x28>
        return 1;
    839c:	00800044 	movi	r2,1
    83a0:	00000106 	br	83a8 <EmptyUart0+0x2c>
    }
    
    return 0;
    83a4:	0005883a 	mov	r2,zero
} 
    83a8:	e037883a 	mov	sp,fp
    83ac:	df000017 	ldw	fp,0(sp)
    83b0:	dec00104 	addi	sp,sp,4
    83b4:	f800283a 	ret

000083b8 <GetUart0>:
    
unsigned char GetUart0(void)
{
    83b8:	defffe04 	addi	sp,sp,-8
    83bc:	df000115 	stw	fp,4(sp)
    83c0:	df000104 	addi	fp,sp,4
    unsigned char rxChar; 
    
    /* buffer is empty */
    
    rxChar=rx_buffer_0[RxTail_0];
    83c4:	d0a0ed8b 	ldhu	r2,-31818(gp)
    83c8:	10bfffcc 	andi	r2,r2,65535
    83cc:	00c00074 	movhi	r3,1
    83d0:	18f90d04 	addi	r3,r3,-7116
    83d4:	1885883a 	add	r2,r3,r2
    83d8:	10800003 	ldbu	r2,0(r2)
    83dc:	e0bfff05 	stb	r2,-4(fp)
    if (++RxTail_0 > (RX_BUFFER_SIZE_0 - 1)) {
    83e0:	d0a0ed8b 	ldhu	r2,-31818(gp)
    83e4:	10800044 	addi	r2,r2,1
    83e8:	d0a0ed8d 	sth	r2,-31818(gp)
    83ec:	d0a0ed8b 	ldhu	r2,-31818(gp)
    83f0:	10bfffcc 	andi	r2,r2,65535
    83f4:	10810030 	cmpltui	r2,r2,1024
    83f8:	1000011e 	bne	r2,zero,8400 <GetUart0+0x48>
        RxTail_0 = 0;
    83fc:	d020ed8d 	sth	zero,-31818(gp)
    }
    
    return rxChar;
    8400:	e0bfff03 	ldbu	r2,-4(fp)
}
    8404:	e037883a 	mov	sp,fp
    8408:	df000017 	ldw	fp,0(sp)
    840c:	dec00104 	addi	sp,sp,4
    8410:	f800283a 	ret

00008414 <PutUart0>:
 
unsigned char PutUart0(unsigned char in_char)
{
    8414:	defffc04 	addi	sp,sp,-16
    8418:	df000315 	stw	fp,12(sp)
    841c:	df000304 	addi	fp,sp,12
    8420:	2005883a 	mov	r2,r4
    8424:	e0bfff05 	stb	r2,-4(fp)
    unsigned short size;
    unsigned int z;
    
    z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
    8428:	00800074 	movhi	r2,1
    842c:	10850204 	addi	r2,r2,5128
    8430:	10800037 	ldwio	r2,0(r2)
    8434:	1080100c 	andi	r2,r2,64
    8438:	e0bffe15 	stw	r2,-8(fp)
    
    if ((TxHead_0==TxTail_0) && z) {
    843c:	d0e0ec0b 	ldhu	r3,-31824(gp)
    8440:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8444:	18ffffcc 	andi	r3,r3,65535
    8448:	10bfffcc 	andi	r2,r2,65535
    844c:	1880071e 	bne	r3,r2,846c <PutUart0+0x58>
    8450:	e0bffe17 	ldw	r2,-8(fp)
    8454:	10000526 	beq	r2,zero,846c <PutUart0+0x58>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
    8458:	e0ffff03 	ldbu	r3,-4(fp)
    845c:	00800074 	movhi	r2,1
    8460:	10850104 	addi	r2,r2,5124
    8464:	10c00035 	stwio	r3,0(r2)
    8468:	00002c06 	br	851c <PutUart0+0x108>
    } else {
        if (TxHead_0 >= TxTail_0) {
    846c:	d0e0ec0b 	ldhu	r3,-31824(gp)
    8470:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8474:	18ffffcc 	andi	r3,r3,65535
    8478:	10bfffcc 	andi	r2,r2,65535
    847c:	18800536 	bltu	r3,r2,8494 <PutUart0+0x80>
            size = TxHead_0 - TxTail_0;
    8480:	d0e0ec0b 	ldhu	r3,-31824(gp)
    8484:	d0a0ec8b 	ldhu	r2,-31822(gp)
    8488:	1885c83a 	sub	r2,r3,r2
    848c:	e0bffd0d 	sth	r2,-12(fp)
    8490:	00000506 	br	84a8 <PutUart0+0x94>
        } else {
            size = ((TX_BUFFER_SIZE_0 - 1) - TxTail_0) + TxHead_0;
    8494:	d0e0ec0b 	ldhu	r3,-31824(gp)
    8498:	d0a0ec8b 	ldhu	r2,-31822(gp)
    849c:	1885c83a 	sub	r2,r3,r2
    84a0:	1080ffc4 	addi	r2,r2,1023
    84a4:	e0bffd0d 	sth	r2,-12(fp)
        }

        if (size > (TX_BUFFER_SIZE_0 - 3)) {
    84a8:	e0bffd0b 	ldhu	r2,-12(fp)
    84ac:	1080ffb0 	cmpltui	r2,r2,1022
    84b0:	1000021e 	bne	r2,zero,84bc <PutUart0+0xa8>
            return (-1);
    84b4:	00bfffc4 	movi	r2,-1
    84b8:	00001906 	br	8520 <PutUart0+0x10c>
        }
        
        tx_buffer_0[TxHead_0] = in_char;
    84bc:	d0a0ec0b 	ldhu	r2,-31824(gp)
    84c0:	10bfffcc 	andi	r2,r2,65535
    84c4:	00c00074 	movhi	r3,1
    84c8:	18fa0d04 	addi	r3,r3,-6092
    84cc:	1885883a 	add	r2,r3,r2
    84d0:	e0ffff03 	ldbu	r3,-4(fp)
    84d4:	10c00005 	stb	r3,0(r2)

        if (++TxHead_0 > (TX_BUFFER_SIZE_0-1)) {
    84d8:	d0a0ec0b 	ldhu	r2,-31824(gp)
    84dc:	10800044 	addi	r2,r2,1
    84e0:	d0a0ec0d 	sth	r2,-31824(gp)
    84e4:	d0a0ec0b 	ldhu	r2,-31824(gp)
    84e8:	10bfffcc 	andi	r2,r2,65535
    84ec:	10810030 	cmpltui	r2,r2,1024
    84f0:	1000011e 	bne	r2,zero,84f8 <PutUart0+0xe4>
            TxHead_0 = 0;
    84f4:	d020ec0d 	sth	zero,-31824(gp)
        }

        z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    84f8:	00800074 	movhi	r2,1
    84fc:	10850304 	addi	r2,r2,5132
    8500:	10800037 	ldwio	r2,0(r2)
    8504:	10801014 	ori	r2,r2,64
    8508:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
    850c:	e0fffe17 	ldw	r3,-8(fp)
    8510:	00800074 	movhi	r2,1
    8514:	10850304 	addi	r2,r2,5132
    8518:	10c00035 	stwio	r3,0(r2)
    }

    return(1);
    851c:	00800044 	movi	r2,1
}
    8520:	e037883a 	mov	sp,fp
    8524:	df000017 	ldw	fp,0(sp)
    8528:	dec00104 	addi	sp,sp,4
    852c:	f800283a 	ret

00008530 <InitUart>:

uint16_t maxStepCount0 = 1115;
uint16_t maxStepCount1 = 221;

void InitUart()
{
    8530:	defff904 	addi	sp,sp,-28
    8534:	dfc00615 	stw	ra,24(sp)
    8538:	df000515 	stw	fp,20(sp)
    853c:	df000504 	addi	fp,sp,20
    int context_uart0;

    InitUart0(BAUD_RATE_0);
    8540:	010000b4 	movhi	r4,2
    8544:	21308004 	addi	r4,r4,-15872
    8548:	00081f80 	call	81f8 <InitUart0>

    //alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ,&context_uart1,IsrUart1,NULL); // install UART1 ISR
    alt_irq_register(UART_0_IRQ,&context_uart0,IsrUart0); // install UART0 ISR
    854c:	e0bfff04 	addi	r2,fp,-4
    8550:	0009883a 	mov	r4,zero
    8554:	100b883a 	mov	r5,r2
    8558:	01800074 	movhi	r6,1
    855c:	31a09604 	addi	r6,r6,-32168
    8560:	000c1b80 	call	c1b8 <alt_irq_register>
    8564:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8568:	0005303a 	rdctl	r2,status
    856c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8570:	e0fffc17 	ldw	r3,-16(fp)
    8574:	00bfff84 	movi	r2,-2
    8578:	1884703a 	and	r2,r3,r2
    857c:	1001703a 	wrctl	status,r2
  
  return context;
    8580:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8584:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8588:	e0bffb17 	ldw	r2,-20(fp)
    858c:	00c00044 	movi	r3,1
    8590:	1884983a 	sll	r2,r3,r2
    8594:	1007883a 	mov	r3,r2
    8598:	00800074 	movhi	r2,1
    859c:	10b90704 	addi	r2,r2,-7140
    85a0:	10800017 	ldw	r2,0(r2)
    85a4:	1886b03a 	or	r3,r3,r2
    85a8:	00800074 	movhi	r2,1
    85ac:	10b90704 	addi	r2,r2,-7140
    85b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    85b4:	00800074 	movhi	r2,1
    85b8:	10b90704 	addi	r2,r2,-7140
    85bc:	10800017 	ldw	r2,0(r2)
    85c0:	100170fa 	wrctl	ienable,r2
    85c4:	e0bffd17 	ldw	r2,-12(fp)
    85c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    85cc:	e0bffe17 	ldw	r2,-8(fp)
    85d0:	1001703a 	wrctl	status,r2

    //alt_ic_irq_enable (UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ);
    alt_irq_enable (UART_0_IRQ);
}
    85d4:	e037883a 	mov	sp,fp
    85d8:	dfc00117 	ldw	ra,4(sp)
    85dc:	df000017 	ldw	fp,0(sp)
    85e0:	dec00204 	addi	sp,sp,8
    85e4:	f800283a 	ret

000085e8 <Stepcount1ToSI>:

double Stepcount1ToSI(int16_t steps)
{
    85e8:	defffb04 	addi	sp,sp,-20
    85ec:	dfc00415 	stw	ra,16(sp)
    85f0:	df000315 	stw	fp,12(sp)
    85f4:	df000304 	addi	fp,sp,12
    85f8:	2005883a 	mov	r2,r4
    85fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount1/170*360;
    8600:	d0a0008b 	ldhu	r2,-32766(gp)
    8604:	10bfffcc 	andi	r2,r2,65535
    8608:	1009883a 	mov	r4,r2
    860c:	01402a84 	movi	r5,170
    8610:	000b13c0 	call	b13c <__udivsi3>
    8614:	10bfffcc 	andi	r2,r2,65535
    8618:	1009883a 	mov	r4,r2
    861c:	01405a04 	movi	r5,360
    8620:	000b14c0 	call	b14c <__mulsi3>
    8624:	1009883a 	mov	r4,r2
    8628:	000ae740 	call	ae74 <__floatsidf>
    862c:	1009883a 	mov	r4,r2
    8630:	180b883a 	mov	r5,r3
    8634:	e13ffd15 	stw	r4,-12(fp)
    8638:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    863c:	e0bfff0f 	ldh	r2,-4(fp)
    8640:	1009883a 	mov	r4,r2
    8644:	000ae740 	call	ae74 <__floatsidf>
    8648:	100b883a 	mov	r5,r2
    864c:	180d883a 	mov	r6,r3
    8650:	2809883a 	mov	r4,r5
    8654:	300b883a 	mov	r5,r6
    8658:	e1bffd17 	ldw	r6,-12(fp)
    865c:	e1fffe17 	ldw	r7,-8(fp)
    8660:	000ab9c0 	call	ab9c <__divdf3>
    8664:	1009883a 	mov	r4,r2
    8668:	180b883a 	mov	r5,r3
    866c:	2005883a 	mov	r2,r4
    8670:	2807883a 	mov	r3,r5
    8674:	1009883a 	mov	r4,r2
    8678:	180b883a 	mov	r5,r3
    867c:	100d883a 	mov	r6,r2
    8680:	180f883a 	mov	r7,r3
    8684:	000a8040 	call	a804 <__adddf3>
    8688:	1009883a 	mov	r4,r2
    868c:	180b883a 	mov	r5,r3
    8690:	2005883a 	mov	r2,r4
    8694:	2807883a 	mov	r3,r5
    8698:	1009883a 	mov	r4,r2
    869c:	180b883a 	mov	r5,r3
    86a0:	01b020f4 	movhi	r6,49283
    86a4:	31849bc4 	addi	r6,r6,4719
    86a8:	01d00274 	movhi	r7,16393
    86ac:	39c87284 	addi	r7,r7,8650
    86b0:	000a8b80 	call	a8b8 <__muldf3>
    86b4:	100f883a 	mov	r7,r2
    86b8:	1811883a 	mov	r8,r3
    86bc:	380b883a 	mov	r5,r7
    86c0:	400d883a 	mov	r6,r8
    86c4:	2807883a 	mov	r3,r5
    86c8:	3009883a 	mov	r4,r6

}
    86cc:	1805883a 	mov	r2,r3
    86d0:	2007883a 	mov	r3,r4
    86d4:	e037883a 	mov	sp,fp
    86d8:	dfc00117 	ldw	ra,4(sp)
    86dc:	df000017 	ldw	fp,0(sp)
    86e0:	dec00204 	addi	sp,sp,8
    86e4:	f800283a 	ret

000086e8 <Stepcount0ToSI>:

double Stepcount0ToSI(int16_t steps)
{
    86e8:	defffb04 	addi	sp,sp,-20
    86ec:	dfc00415 	stw	ra,16(sp)
    86f0:	df000315 	stw	fp,12(sp)
    86f4:	df000304 	addi	fp,sp,12
    86f8:	2005883a 	mov	r2,r4
    86fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount0/325*360;
    8700:	d0a0000b 	ldhu	r2,-32768(gp)
    8704:	10bfffcc 	andi	r2,r2,65535
    8708:	1009883a 	mov	r4,r2
    870c:	01405144 	movi	r5,325
    8710:	000b13c0 	call	b13c <__udivsi3>
    8714:	10bfffcc 	andi	r2,r2,65535
    8718:	1009883a 	mov	r4,r2
    871c:	01405a04 	movi	r5,360
    8720:	000b14c0 	call	b14c <__mulsi3>
    8724:	1009883a 	mov	r4,r2
    8728:	000ae740 	call	ae74 <__floatsidf>
    872c:	1009883a 	mov	r4,r2
    8730:	180b883a 	mov	r5,r3
    8734:	e13ffd15 	stw	r4,-12(fp)
    8738:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    873c:	e0bfff0f 	ldh	r2,-4(fp)
    8740:	1009883a 	mov	r4,r2
    8744:	000ae740 	call	ae74 <__floatsidf>
    8748:	100b883a 	mov	r5,r2
    874c:	180d883a 	mov	r6,r3
    8750:	2809883a 	mov	r4,r5
    8754:	300b883a 	mov	r5,r6
    8758:	e1bffd17 	ldw	r6,-12(fp)
    875c:	e1fffe17 	ldw	r7,-8(fp)
    8760:	000ab9c0 	call	ab9c <__divdf3>
    8764:	1009883a 	mov	r4,r2
    8768:	180b883a 	mov	r5,r3
    876c:	2005883a 	mov	r2,r4
    8770:	2807883a 	mov	r3,r5
    8774:	1009883a 	mov	r4,r2
    8778:	180b883a 	mov	r5,r3
    877c:	100d883a 	mov	r6,r2
    8780:	180f883a 	mov	r7,r3
    8784:	000a8040 	call	a804 <__adddf3>
    8788:	1009883a 	mov	r4,r2
    878c:	180b883a 	mov	r5,r3
    8790:	2005883a 	mov	r2,r4
    8794:	2807883a 	mov	r3,r5
    8798:	1009883a 	mov	r4,r2
    879c:	180b883a 	mov	r5,r3
    87a0:	01b020f4 	movhi	r6,49283
    87a4:	31849bc4 	addi	r6,r6,4719
    87a8:	01d00274 	movhi	r7,16393
    87ac:	39c87284 	addi	r7,r7,8650
    87b0:	000a8b80 	call	a8b8 <__muldf3>
    87b4:	100f883a 	mov	r7,r2
    87b8:	1811883a 	mov	r8,r3
    87bc:	380b883a 	mov	r5,r7
    87c0:	400d883a 	mov	r6,r8
    87c4:	2807883a 	mov	r3,r5
    87c8:	3009883a 	mov	r4,r6
}
    87cc:	1805883a 	mov	r2,r3
    87d0:	2007883a 	mov	r3,r4
    87d4:	e037883a 	mov	sp,fp
    87d8:	dfc00117 	ldw	ra,4(sp)
    87dc:	df000017 	ldw	fp,0(sp)
    87e0:	dec00204 	addi	sp,sp,8
    87e4:	f800283a 	ret

000087e8 <main>:

int main()
{
    87e8:	deffde04 	addi	sp,sp,-136
    87ec:	dfc02115 	stw	ra,132(sp)
    87f0:	df002015 	stw	fp,128(sp)
    87f4:	df002004 	addi	fp,sp,128
	int8_t ch;
	printf("\n\nHello NiosII!!!!!\n");
    87f8:	01000074 	movhi	r4,1
    87fc:	2136cc04 	addi	r4,r4,-9424
    8800:	000b8d80 	call	b8d8 <puts>

	InitUart();
    8804:	00085300 	call	8530 <InitUart>
	double pan_y [1 + 1];
	double tilt_u[3 + 1];
	double tilt_y[1 + 1];

	/* Initialize the inputs and outputs with correct initial values */
	pan_u[0] = 0.0;		/* corr */
    8808:	e03fe815 	stw	zero,-96(fp)
    880c:	e03fe915 	stw	zero,-92(fp)
	pan_u[1] = 0.0;		/* in */
    8810:	e03fea15 	stw	zero,-88(fp)
    8814:	e03feb15 	stw	zero,-84(fp)
	pan_u[2] = 0.0;		/* position */
    8818:	e03fec15 	stw	zero,-80(fp)
    881c:	e03fed15 	stw	zero,-76(fp)

	pan_y[0] = 0.0;		/* out */
    8820:	e03ff015 	stw	zero,-64(fp)
    8824:	e03ff115 	stw	zero,-60(fp)
	
	tilt_u[0] = 0.0;		/* corr */
    8828:	e03ff415 	stw	zero,-48(fp)
    882c:	e03ff515 	stw	zero,-44(fp)
	tilt_u[1] = 0.0;		/* in */
    8830:	e03ff615 	stw	zero,-40(fp)
    8834:	e03ff715 	stw	zero,-36(fp)
	tilt_u[2] = 0.0;		/* position */
    8838:	e03ff815 	stw	zero,-32(fp)
    883c:	e03ff915 	stw	zero,-28(fp)

	tilt_y[0] = 0.0;		/* out */
    8840:	e03ffc15 	stw	zero,-16(fp)
    8844:	e03ffd15 	stw	zero,-12(fp)




	/* Initialize the submodel itself */
	pan_InitializeSubmodel (&pan_u, &pan_y, pan_time);
    8848:	01000074 	movhi	r4,1
    884c:	2138fc04 	addi	r4,r4,-7184
    8850:	20800017 	ldw	r2,0(r4)
    8854:	20c00117 	ldw	r3,4(r4)
    8858:	e13fe804 	addi	r4,fp,-96
    885c:	e17ff004 	addi	r5,fp,-64
    8860:	100d883a 	mov	r6,r2
    8864:	180f883a 	mov	r7,r3
    8868:	00097980 	call	9798 <pan_InitializeSubmodel>
	tilt_InitializeSubmodel(&tilt_u, &tilt_y, pan_time);
    886c:	01000074 	movhi	r4,1
    8870:	2138fc04 	addi	r4,r4,-7184
    8874:	20800017 	ldw	r2,0(r4)
    8878:	20c00117 	ldw	r3,4(r4)
    887c:	e13ff404 	addi	r4,fp,-48
    8880:	e17ffc04 	addi	r5,fp,-16
    8884:	100d883a 	mov	r6,r2
    8888:	180f883a 	mov	r7,r3
    888c:	000a35c0 	call	a35c <tilt_InitializeSubmodel>
	
	//reset calibration
	IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000001000000000000000);
    8890:	00e00014 	movui	r3,32768
    8894:	00800074 	movhi	r2,1
    8898:	10840004 	addi	r2,r2,4096
    889c:	10c00035 	stwio	r3,0(r2)
	IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000000000000000000000);
    88a0:	0007883a 	mov	r3,zero
    88a4:	00800074 	movhi	r2,1
    88a8:	10840004 	addi	r2,r2,4096
    88ac:	10c00035 	stwio	r3,0(r2)
	
	
	//variables
	uint32_t nReadOut = 0;
    88b0:	e03fe215 	stw	zero,-120(fp)
	uint16_t stepCount0 = 0;
    88b4:	e03fe00d 	sth	zero,-128(fp)
	uint16_t stepCount1 = 0;
    88b8:	e03fe08d 	sth	zero,-126(fp)
	uint16_t stepCount0Old = 0;
    88bc:	e03fe10d 	sth	zero,-124(fp)
	uint16_t stepCount1Old = 0;
    88c0:	e03fe18d 	sth	zero,-122(fp)
	int8_t PWM0 = 0;
    88c4:	e03fe305 	stb	zero,-116(fp)
	int8_t PWM1 = 0;
    88c8:	e03fe345 	stb	zero,-115(fp)
	uint32_t avalondSend = 0;
    88cc:	e03fe415 	stw	zero,-112(fp)
	while( (pan_stop_simulation == 0) ) {
    88d0:	0000ec06 	br	8c84 <main+0x49c>

		//avalon bus communication
		nReadOut = IORD(ESL_NIOS_II_IP_0_BASE, 0x00);
    88d4:	00800074 	movhi	r2,1
    88d8:	10840004 	addi	r2,r2,4096
    88dc:	10800037 	ldwio	r2,0(r2)
    88e0:	e0bfe215 	stw	r2,-120(fp)
		unsigned int readID = nReadOut >> 29;
    88e4:	e0bfe217 	ldw	r2,-120(fp)
    88e8:	1004d77a 	srli	r2,r2,29
    88ec:	e0bfe515 	stw	r2,-108(fp)
		nReadOut = nReadOut << 3;
    88f0:	e0bfe217 	ldw	r2,-120(fp)
    88f4:	100490fa 	slli	r2,r2,3
    88f8:	e0bfe215 	stw	r2,-120(fp)
		uint32_t temp32;

		switch(readID) {
    88fc:	e0bfe517 	ldw	r2,-108(fp)
    8900:	10c00060 	cmpeqi	r3,r2,1
    8904:	1800031e 	bne	r3,zero,8914 <main+0x12c>
    8908:	108000a0 	cmpeqi	r2,r2,2
    890c:	10000b1e 	bne	r2,zero,893c <main+0x154>
    8910:	00002006 	br	8994 <main+0x1ac>
			case 1:
				stepCount0 = nReadOut >> (32-11);
    8914:	e0bfe217 	ldw	r2,-120(fp)
    8918:	1004d57a 	srli	r2,r2,21
    891c:	e0bfe00d 	sth	r2,-128(fp)

				temp32 = nReadOut << 11;
    8920:	e0bfe217 	ldw	r2,-120(fp)
    8924:	100492fa 	slli	r2,r2,11
    8928:	e0bfe615 	stw	r2,-104(fp)
				stepCount1 = temp32 >> (32-11);
    892c:	e0bfe617 	ldw	r2,-104(fp)
    8930:	1004d57a 	srli	r2,r2,21
    8934:	e0bfe08d 	sth	r2,-126(fp)
				break;
    8938:	00001a06 	br	89a4 <main+0x1bc>
			case 2:
				maxStepCount0 = nReadOut >> (32-11);
    893c:	e0bfe217 	ldw	r2,-120(fp)
    8940:	1004d57a 	srli	r2,r2,21
    8944:	d0a0000d 	sth	r2,-32768(gp)
				temp32 = nReadOut << 11;
    8948:	e0bfe217 	ldw	r2,-120(fp)
    894c:	100492fa 	slli	r2,r2,11
    8950:	e0bfe615 	stw	r2,-104(fp)
				maxStepCount1 = temp32 >> (32-11);
    8954:	e0bfe617 	ldw	r2,-104(fp)
    8958:	1004d57a 	srli	r2,r2,21
    895c:	d0a0008d 	sth	r2,-32766(gp)
				printf(".....................Received new calibration values!:\t");
    8960:	01000074 	movhi	r4,1
    8964:	2136d104 	addi	r4,r4,-9404
    8968:	000b80c0 	call	b80c <printf>
				printf("stepCount0_max: %d\t stepCount1_max: %d \n\r", maxStepCount0, maxStepCount1);
    896c:	d0a0000b 	ldhu	r2,-32768(gp)
    8970:	10ffffcc 	andi	r3,r2,65535
    8974:	d0a0008b 	ldhu	r2,-32766(gp)
    8978:	10bfffcc 	andi	r2,r2,65535
    897c:	01000074 	movhi	r4,1
    8980:	2136df04 	addi	r4,r4,-9348
    8984:	180b883a 	mov	r5,r3
    8988:	100d883a 	mov	r6,r2
    898c:	000b80c0 	call	b80c <printf>
				break;
    8990:	00000406 	br	89a4 <main+0x1bc>
			default:
				// default statements
				printf("Received incorrect message");
    8994:	01000074 	movhi	r4,1
    8998:	2136ea04 	addi	r4,r4,-9304
    899c:	000b80c0 	call	b80c <printf>
				break;
    89a0:	0001883a 	nop
		}
		
		
		

		if(stepCount0 != stepCount0Old || stepCount1 != stepCount1Old)
    89a4:	e0ffe00b 	ldhu	r3,-128(fp)
    89a8:	e0bfe10b 	ldhu	r2,-124(fp)
    89ac:	1880031e 	bne	r3,r2,89bc <main+0x1d4>
    89b0:	e0ffe08b 	ldhu	r3,-126(fp)
    89b4:	e0bfe18b 	ldhu	r2,-122(fp)
    89b8:	18800726 	beq	r3,r2,89d8 <main+0x1f0>
			printf("stepCount0: %d\t stepCount1: %d \n\r", stepCount0, stepCount1);
    89bc:	e0ffe00b 	ldhu	r3,-128(fp)
    89c0:	e0bfe08b 	ldhu	r2,-126(fp)
    89c4:	01000074 	movhi	r4,1
    89c8:	2136f104 	addi	r4,r4,-9276
    89cc:	180b883a 	mov	r5,r3
    89d0:	100d883a 	mov	r6,r2
    89d4:	000b80c0 	call	b80c <printf>
		
		//generate inputs
		pan_u[1] = 0;
    89d8:	e03fea15 	stw	zero,-88(fp)
    89dc:	e03feb15 	stw	zero,-84(fp)
		if(pan_time >= 1){
    89e0:	01000074 	movhi	r4,1
    89e4:	2138fc04 	addi	r4,r4,-7184
    89e8:	20800017 	ldw	r2,0(r4)
    89ec:	20c00117 	ldw	r3,4(r4)
    89f0:	1009883a 	mov	r4,r2
    89f4:	180b883a 	mov	r5,r3
    89f8:	000d883a 	mov	r6,zero
    89fc:	01cffc34 	movhi	r7,16368
    8a00:	000adb40 	call	adb4 <__gedf2>
    8a04:	10000616 	blt	r2,zero,8a20 <main+0x238>
			pan_u[1] = 0.5*pi;
    8a08:	00b020f4 	movhi	r2,49283
    8a0c:	10849bc4 	addi	r2,r2,4719
    8a10:	e0bfea15 	stw	r2,-88(fp)
    8a14:	008ffe74 	movhi	r2,16377
    8a18:	10887284 	addi	r2,r2,8650
    8a1c:	e0bfeb15 	stw	r2,-84(fp)

		}
		if(pan_time >= 5){
    8a20:	01000074 	movhi	r4,1
    8a24:	2138fc04 	addi	r4,r4,-7184
    8a28:	20800017 	ldw	r2,0(r4)
    8a2c:	20c00117 	ldw	r3,4(r4)
    8a30:	1009883a 	mov	r4,r2
    8a34:	180b883a 	mov	r5,r3
    8a38:	000d883a 	mov	r6,zero
    8a3c:	01d00534 	movhi	r7,16404
    8a40:	000adb40 	call	adb4 <__gedf2>
    8a44:	10000616 	blt	r2,zero,8a60 <main+0x278>
			pan_u[1] = 1.5*pi;
    8a48:	008418b4 	movhi	r2,4194
    8a4c:	109374c4 	addi	r2,r2,19923
    8a50:	e0bfea15 	stw	r2,-88(fp)
    8a54:	009004f4 	movhi	r2,16403
    8a58:	10b65604 	addi	r2,r2,-9896
    8a5c:	e0bfeb15 	stw	r2,-84(fp)

		}
		if(pan_time >= 10){
    8a60:	01000074 	movhi	r4,1
    8a64:	2138fc04 	addi	r4,r4,-7184
    8a68:	20800017 	ldw	r2,0(r4)
    8a6c:	20c00117 	ldw	r3,4(r4)
    8a70:	1009883a 	mov	r4,r2
    8a74:	180b883a 	mov	r5,r3
    8a78:	000d883a 	mov	r6,zero
    8a7c:	01d00934 	movhi	r7,16420
    8a80:	000adb40 	call	adb4 <__gedf2>
    8a84:	10000616 	blt	r2,zero,8aa0 <main+0x2b8>

			pan_u[1] = 0.5*pi;
    8a88:	00b020f4 	movhi	r2,49283
    8a8c:	10849bc4 	addi	r2,r2,4719
    8a90:	e0bfea15 	stw	r2,-88(fp)
    8a94:	008ffe74 	movhi	r2,16377
    8a98:	10887284 	addi	r2,r2,8650
    8a9c:	e0bfeb15 	stw	r2,-84(fp)

		}
		
		
		/* Call the 20-sim submodel to calculate the output */
		pan_u[2] = Stepcount0ToSI(stepCount0);
    8aa0:	e0bfe00b 	ldhu	r2,-128(fp)
    8aa4:	10bfffcc 	andi	r2,r2,65535
    8aa8:	10a0001c 	xori	r2,r2,32768
    8aac:	10a00004 	addi	r2,r2,-32768
    8ab0:	1009883a 	mov	r4,r2
    8ab4:	00086e80 	call	86e8 <Stepcount0ToSI>
    8ab8:	1009883a 	mov	r4,r2
    8abc:	180b883a 	mov	r5,r3
    8ac0:	e13fec15 	stw	r4,-80(fp)
    8ac4:	e17fed15 	stw	r5,-76(fp)
		tilt_u[1] = pan_u[1];
    8ac8:	e0bfea17 	ldw	r2,-88(fp)
    8acc:	e0ffeb17 	ldw	r3,-84(fp)
    8ad0:	e0bff615 	stw	r2,-40(fp)
    8ad4:	e0fff715 	stw	r3,-36(fp)
		tilt_u[2] = Stepcount1ToSI(stepCount1);
    8ad8:	e0bfe08b 	ldhu	r2,-126(fp)
    8adc:	10bfffcc 	andi	r2,r2,65535
    8ae0:	10a0001c 	xori	r2,r2,32768
    8ae4:	10a00004 	addi	r2,r2,-32768
    8ae8:	1009883a 	mov	r4,r2
    8aec:	00085e80 	call	85e8 <Stepcount1ToSI>
    8af0:	1009883a 	mov	r4,r2
    8af4:	180b883a 	mov	r5,r3
    8af8:	e13ff815 	stw	r4,-32(fp)
    8afc:	e17ff915 	stw	r5,-28(fp)
		

		pan_CalculateSubmodel (&pan_u, &pan_y, pan_time);
    8b00:	01000074 	movhi	r4,1
    8b04:	2138fc04 	addi	r4,r4,-7184
    8b08:	20800017 	ldw	r2,0(r4)
    8b0c:	20c00117 	ldw	r3,4(r4)
    8b10:	e13fe804 	addi	r4,fp,-96
    8b14:	e17ff004 	addi	r5,fp,-64
    8b18:	100d883a 	mov	r6,r2
    8b1c:	180f883a 	mov	r7,r3
    8b20:	000982c0 	call	982c <pan_CalculateSubmodel>
		tilt_CalculateSubmodel(&tilt_u, &tilt_y,pan_time);
    8b24:	01000074 	movhi	r4,1
    8b28:	2138fc04 	addi	r4,r4,-7184
    8b2c:	20800017 	ldw	r2,0(r4)
    8b30:	20c00117 	ldw	r3,4(r4)
    8b34:	e13ff404 	addi	r4,fp,-48
    8b38:	e17ffc04 	addi	r5,fp,-16
    8b3c:	100d883a 	mov	r6,r2
    8b40:	180f883a 	mov	r7,r3
    8b44:	000a3f00 	call	a3f0 <tilt_CalculateSubmodel>
		PWM0 = pan_y[0]*maxPWMPan;
    8b48:	e0bff017 	ldw	r2,-64(fp)
    8b4c:	e0fff117 	ldw	r3,-60(fp)
    8b50:	1009883a 	mov	r4,r2
    8b54:	180b883a 	mov	r5,r3
    8b58:	000d883a 	mov	r6,zero
    8b5c:	01d014b4 	movhi	r7,16466
    8b60:	39e00004 	addi	r7,r7,-32768
    8b64:	000a8b80 	call	a8b8 <__muldf3>
    8b68:	1009883a 	mov	r4,r2
    8b6c:	180b883a 	mov	r5,r3
    8b70:	2005883a 	mov	r2,r4
    8b74:	2807883a 	mov	r3,r5
    8b78:	1009883a 	mov	r4,r2
    8b7c:	180b883a 	mov	r5,r3
    8b80:	000af480 	call	af48 <__fixdfsi>
    8b84:	e0bfe305 	stb	r2,-116(fp)
		PWM0 = 40;
    8b88:	00800a04 	movi	r2,40
    8b8c:	e0bfe305 	stb	r2,-116(fp)
		PWM1 = tilt_y[0]*maxPWMTilt;
    8b90:	e0bffc17 	ldw	r2,-16(fp)
    8b94:	e0fffd17 	ldw	r3,-12(fp)
    8b98:	1009883a 	mov	r4,r2
    8b9c:	180b883a 	mov	r5,r3
    8ba0:	000d883a 	mov	r6,zero
    8ba4:	01d00fb4 	movhi	r7,16446
    8ba8:	000a8b80 	call	a8b8 <__muldf3>
    8bac:	1009883a 	mov	r4,r2
    8bb0:	180b883a 	mov	r5,r3
    8bb4:	2005883a 	mov	r2,r4
    8bb8:	2807883a 	mov	r3,r5
    8bbc:	1009883a 	mov	r4,r2
    8bc0:	180b883a 	mov	r5,r3
    8bc4:	000af480 	call	af48 <__fixdfsi>
    8bc8:	e0bfe345 	stb	r2,-115(fp)
		int16_t temp16 = 0;
    8bcc:	e03fe70d 	sth	zero,-100(fp)
		avalondSend = PWM0 << 24 | PWM1 <<16 | temp16;
    8bd0:	e0bfe307 	ldb	r2,-116(fp)
    8bd4:	1006963a 	slli	r3,r2,24
    8bd8:	e0bfe347 	ldb	r2,-115(fp)
    8bdc:	1004943a 	slli	r2,r2,16
    8be0:	1886b03a 	or	r3,r3,r2
    8be4:	e0bfe70f 	ldh	r2,-100(fp)
    8be8:	1884b03a 	or	r2,r3,r2
    8bec:	e0bfe415 	stw	r2,-112(fp)
		//printf("%f\n",pan_time);
		IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,avalondSend);
    8bf0:	e0ffe417 	ldw	r3,-112(fp)
    8bf4:	00800074 	movhi	r2,1
    8bf8:	10840004 	addi	r2,r2,4096
    8bfc:	10c00035 	stwio	r3,0(r2)
		
		if(!EmptyUart0()){
    8c00:	000837c0 	call	837c <EmptyUart0>
    8c04:	10803fcc 	andi	r2,r2,255
    8c08:	1000071e 	bne	r2,zero,8c28 <main+0x440>
			ch = GetUart0();
    8c0c:	00083b80 	call	83b8 <GetUart0>
    8c10:	e0bfe785 	stb	r2,-98(fp)
			printf("received message: %d\n",ch);
    8c14:	e0bfe787 	ldb	r2,-98(fp)
    8c18:	01000074 	movhi	r4,1
    8c1c:	2136fa04 	addi	r4,r4,-9240
    8c20:	100b883a 	mov	r5,r2
    8c24:	000b80c0 	call	b80c <printf>
			
			
		}
		
		stepCount0Old = stepCount0;
    8c28:	e0bfe00b 	ldhu	r2,-128(fp)
    8c2c:	e0bfe10d 	sth	r2,-124(fp)
		stepCount1Old = stepCount1;
    8c30:	e0bfe08b 	ldhu	r2,-126(fp)
    8c34:	e0bfe18d 	sth	r2,-122(fp)
		pan_time+=0.0013;
    8c38:	01000074 	movhi	r4,1
    8c3c:	2138fc04 	addi	r4,r4,-7184
    8c40:	20800017 	ldw	r2,0(r4)
    8c44:	20c00117 	ldw	r3,4(r4)
    8c48:	1009883a 	mov	r4,r2
    8c4c:	180b883a 	mov	r5,r3
    8c50:	0197c1f4 	movhi	r6,24327
    8c54:	31bda504 	addi	r6,r6,-2412
    8c58:	01cfd574 	movhi	r7,16213
    8c5c:	39d32604 	addi	r7,r7,19608
    8c60:	000a8040 	call	a804 <__adddf3>
    8c64:	1009883a 	mov	r4,r2
    8c68:	180b883a 	mov	r5,r3
    8c6c:	2005883a 	mov	r2,r4
    8c70:	2807883a 	mov	r3,r5
    8c74:	01000074 	movhi	r4,1
    8c78:	2138fc04 	addi	r4,r4,-7184
    8c7c:	20800015 	stw	r2,0(r4)
    8c80:	20c00115 	stw	r3,4(r4)
	uint16_t stepCount0Old = 0;
	uint16_t stepCount1Old = 0;
	int8_t PWM0 = 0;
	int8_t PWM1 = 0;
	uint32_t avalondSend = 0;
	while( (pan_stop_simulation == 0) ) {
    8c84:	00800074 	movhi	r2,1
    8c88:	10b8ff04 	addi	r2,r2,-7172
    8c8c:	10800003 	ldbu	r2,0(r2)
    8c90:	10803fcc 	andi	r2,r2,255
    8c94:	1080201c 	xori	r2,r2,128
    8c98:	10bfe004 	addi	r2,r2,-128
    8c9c:	103f0d26 	beq	r2,zero,88d4 <main+0xec>
		stepCount1Old = stepCount1;
		pan_time+=0.0013;
	} 

	/* Perform the final 20-sim calculations */
	pan_TerminateSubmodel (&pan_u, &pan_y, pan_time);
    8ca0:	01000074 	movhi	r4,1
    8ca4:	2138fc04 	addi	r4,r4,-7184
    8ca8:	20800017 	ldw	r2,0(r4)
    8cac:	20c00117 	ldw	r3,4(r4)
    8cb0:	e13fe804 	addi	r4,fp,-96
    8cb4:	e17ff004 	addi	r5,fp,-64
    8cb8:	100d883a 	mov	r6,r2
    8cbc:	180f883a 	mov	r7,r3
    8cc0:	00098900 	call	9890 <pan_TerminateSubmodel>
	tilt_TerminateSubmodel(&tilt_u,&tilt_y,pan_time);
    8cc4:	01000074 	movhi	r4,1
    8cc8:	2138fc04 	addi	r4,r4,-7184
    8ccc:	20800017 	ldw	r2,0(r4)
    8cd0:	20c00117 	ldw	r3,4(r4)
    8cd4:	e13ff404 	addi	r4,fp,-48
    8cd8:	e17ffc04 	addi	r5,fp,-16
    8cdc:	100d883a 	mov	r6,r2
    8ce0:	180f883a 	mov	r7,r3
    8ce4:	000a4540 	call	a454 <tilt_TerminateSubmodel>

return 0;
    8ce8:	0005883a 	mov	r2,zero

}
    8cec:	e037883a 	mov	sp,fp
    8cf0:	dfc00117 	ldw	ra,4(sp)
    8cf4:	df000017 	ldw	fp,0(sp)
    8cf8:	dec00204 	addi	sp,sp,8
    8cfc:	f800283a 	ret

00008d00 <pan_String2Double>:
	double m_double;
	const char* m_char;
}str2dbl;

double pan_String2Double(const char* argument)
{
    8d00:	defffc04 	addi	sp,sp,-16
    8d04:	df000315 	stw	fp,12(sp)
    8d08:	df000304 	addi	fp,sp,12
    8d0c:	e13fff15 	stw	r4,-4(fp)
	str2dbl myConversion;
	myConversion.m_char = argument;
    8d10:	e0bfff17 	ldw	r2,-4(fp)
    8d14:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_double;
    8d18:	e17ffd17 	ldw	r5,-12(fp)
    8d1c:	e1bffe17 	ldw	r6,-8(fp)
    8d20:	2807883a 	mov	r3,r5
    8d24:	3009883a 	mov	r4,r6

}
    8d28:	1805883a 	mov	r2,r3
    8d2c:	2007883a 	mov	r3,r4
    8d30:	e037883a 	mov	sp,fp
    8d34:	df000017 	ldw	fp,0(sp)
    8d38:	dec00104 	addi	sp,sp,4
    8d3c:	f800283a 	ret

00008d40 <pan_Double2String>:

const char* pan_Double2String(double argument)
{
    8d40:	defffb04 	addi	sp,sp,-20
    8d44:	df000415 	stw	fp,16(sp)
    8d48:	df000404 	addi	fp,sp,16
    8d4c:	e13ffe15 	stw	r4,-8(fp)
    8d50:	e17fff15 	stw	r5,-4(fp)
	str2dbl myConversion;
	myConversion.m_double = argument;
    8d54:	e0bffe17 	ldw	r2,-8(fp)
    8d58:	e0bffc15 	stw	r2,-16(fp)
    8d5c:	e0bfff17 	ldw	r2,-4(fp)
    8d60:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_char;
    8d64:	e0bffc17 	ldw	r2,-16(fp)
}
    8d68:	e037883a 	mov	sp,fp
    8d6c:	df000017 	ldw	fp,0(sp)
    8d70:	dec00104 	addi	sp,sp,4
    8d74:	f800283a 	ret

00008d78 <pan_DiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void pan_DiscreteInitialize (void)
{
    8d78:	deffff04 	addi	sp,sp,-4
    8d7c:	df000015 	stw	fp,0(sp)
    8d80:	d839883a 	mov	fp,sp
	/* nothing to be done */
	pan_major = 1;
    8d84:	00800074 	movhi	r2,1
    8d88:	10b81144 	addi	r2,r2,-8123
    8d8c:	00c00044 	movi	r3,1
    8d90:	10c00005 	stb	r3,0(r2)
}
    8d94:	e037883a 	mov	sp,fp
    8d98:	df000017 	ldw	fp,0(sp)
    8d9c:	dec00104 	addi	sp,sp,4
    8da0:	f800283a 	ret

00008da4 <pan_DiscreteStep>:

/* the Discrete integration method itself */
void pan_DiscreteStep (void)
{
    8da4:	defffd04 	addi	sp,sp,-12
    8da8:	dfc00215 	stw	ra,8(sp)
    8dac:	df000115 	stw	fp,4(sp)
    8db0:	df000104 	addi	fp,sp,4
	int index;
	/* for each of the supplied states */
	for (index = 0; index < pan_STATE_SIZE; index++)
    8db4:	e03fff15 	stw	zero,-4(fp)
    8db8:	00001106 	br	8e00 <pan_DiscreteStep+0x5c>
	{
		/* just a move of the new state */
		pan_s [index] = pan_R [index];
    8dbc:	00c00074 	movhi	r3,1
    8dc0:	18fb3b04 	addi	r3,r3,-4884
    8dc4:	e0bfff17 	ldw	r2,-4(fp)
    8dc8:	100490fa 	slli	r2,r2,3
    8dcc:	1889883a 	add	r4,r3,r2
    8dd0:	20800017 	ldw	r2,0(r4)
    8dd4:	20c00117 	ldw	r3,4(r4)
    8dd8:	01400074 	movhi	r5,1
    8ddc:	297b2104 	addi	r5,r5,-4988
    8de0:	e13fff17 	ldw	r4,-4(fp)
    8de4:	200890fa 	slli	r4,r4,3
    8de8:	2909883a 	add	r4,r5,r4
    8dec:	20800015 	stw	r2,0(r4)
    8df0:	20c00115 	stw	r3,4(r4)
/* the Discrete integration method itself */
void pan_DiscreteStep (void)
{
	int index;
	/* for each of the supplied states */
	for (index = 0; index < pan_STATE_SIZE; index++)
    8df4:	e0bfff17 	ldw	r2,-4(fp)
    8df8:	10800044 	addi	r2,r2,1
    8dfc:	e0bfff15 	stw	r2,-4(fp)
    8e00:	e0bfff17 	ldw	r2,-4(fp)
    8e04:	108000d0 	cmplti	r2,r2,3
    8e08:	103fec1e 	bne	r2,zero,8dbc <pan_DiscreteStep+0x18>
	{
		/* just a move of the new state */
		pan_s [index] = pan_R [index];
	}
	/* increment the simulation time */
	pan_time += pan_step_size;
    8e0c:	00800074 	movhi	r2,1
    8e10:	10b8fc04 	addi	r2,r2,-7184
    8e14:	11400017 	ldw	r5,0(r2)
    8e18:	11800117 	ldw	r6,4(r2)
    8e1c:	01000074 	movhi	r4,1
    8e20:	21380f04 	addi	r4,r4,-8132
    8e24:	20800017 	ldw	r2,0(r4)
    8e28:	20c00117 	ldw	r3,4(r4)
    8e2c:	2809883a 	mov	r4,r5
    8e30:	300b883a 	mov	r5,r6
    8e34:	100d883a 	mov	r6,r2
    8e38:	180f883a 	mov	r7,r3
    8e3c:	000a8040 	call	a804 <__adddf3>
    8e40:	1009883a 	mov	r4,r2
    8e44:	180b883a 	mov	r5,r3
    8e48:	2005883a 	mov	r2,r4
    8e4c:	2807883a 	mov	r3,r5
    8e50:	01000074 	movhi	r4,1
    8e54:	2138fc04 	addi	r4,r4,-7184
    8e58:	20800015 	stw	r2,0(r4)
    8e5c:	20c00115 	stw	r3,4(r4)

	pan_major = 1;
    8e60:	00800074 	movhi	r2,1
    8e64:	10b81144 	addi	r2,r2,-8123
    8e68:	00c00044 	movi	r3,1
    8e6c:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	pan_CalculateDynamic ();
    8e70:	000909c0 	call	909c <pan_CalculateDynamic>
}
    8e74:	e037883a 	mov	sp,fp
    8e78:	dfc00117 	ldw	ra,4(sp)
    8e7c:	df000017 	ldw	fp,0(sp)
    8e80:	dec00204 	addi	sp,sp,8
    8e84:	f800283a 	ret

00008e88 <pan_ModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void pan_ModelInitialize_parameters(void)
{
    8e88:	deffff04 	addi	sp,sp,-4
    8e8c:	df000015 	stw	fp,0(sp)
    8e90:	d839883a 	mov	fp,sp
	/* set the parameters */
	pan_P[0] = 0.0;		/* corrGain\K */
    8e94:	00800074 	movhi	r2,1
    8e98:	10bb1304 	addi	r2,r2,-5044
    8e9c:	10000015 	stw	zero,0(r2)
    8ea0:	10000115 	stw	zero,4(r2)
	pan_P[1] = 2.6;		/* PID1\kp */
    8ea4:	00800074 	movhi	r2,1
    8ea8:	10bb1304 	addi	r2,r2,-5044
    8eac:	00f33374 	movhi	r3,52429
    8eb0:	18f33344 	addi	r3,r3,-13107
    8eb4:	10c00215 	stw	r3,8(r2)
    8eb8:	00d00174 	movhi	r3,16389
    8ebc:	18f33304 	addi	r3,r3,-13108
    8ec0:	10c00315 	stw	r3,12(r2)
	pan_P[2] = 0.05;		/* PID1\tauD */
    8ec4:	00800074 	movhi	r2,1
    8ec8:	10bb1304 	addi	r2,r2,-5044
    8ecc:	00e666b4 	movhi	r3,39322
    8ed0:	18e66684 	addi	r3,r3,-26214
    8ed4:	10c00415 	stw	r3,16(r2)
    8ed8:	00cfeab4 	movhi	r3,16298
    8edc:	18e66644 	addi	r3,r3,-26215
    8ee0:	10c00515 	stw	r3,20(r2)
	pan_P[3] = 0.17;		/* PID1\beta */
    8ee4:	00800074 	movhi	r2,1
    8ee8:	10bb1304 	addi	r2,r2,-5044
    8eec:	00d70a74 	movhi	r3,23593
    8ef0:	18fd70c4 	addi	r3,r3,-2621
    8ef4:	10c00615 	stw	r3,24(r2)
    8ef8:	00cff1b4 	movhi	r3,16326
    8efc:	18f0a3c4 	addi	r3,r3,-15729
    8f00:	10c00715 	stw	r3,28(r2)
	pan_P[4] = 9.0;		/* PID1\tauI */
    8f04:	00800074 	movhi	r2,1
    8f08:	10bb1304 	addi	r2,r2,-5044
    8f0c:	10000815 	stw	zero,32(r2)
    8f10:	00d008b4 	movhi	r3,16418
    8f14:	10c00915 	stw	r3,36(r2)
	pan_P[5] = -0.99;		/* SignalLimiter2\minimum */
    8f18:	00800074 	movhi	r2,1
    8f1c:	10bb1304 	addi	r2,r2,-5044
    8f20:	00deb874 	movhi	r3,31457
    8f24:	18d1eb84 	addi	r3,r3,18350
    8f28:	10c00a15 	stw	r3,40(r2)
    8f2c:	00effc34 	movhi	r3,49136
    8f30:	18eb8504 	addi	r3,r3,-20972
    8f34:	10c00b15 	stw	r3,44(r2)
	pan_P[6] = 0.99;		/* SignalLimiter2\maximum */
    8f38:	00800074 	movhi	r2,1
    8f3c:	10bb1304 	addi	r2,r2,-5044
    8f40:	00deb874 	movhi	r3,31457
    8f44:	18d1eb84 	addi	r3,r3,18350
    8f48:	10c00c15 	stw	r3,48(r2)
    8f4c:	00cffc34 	movhi	r3,16368
    8f50:	18eb8504 	addi	r3,r3,-20972
    8f54:	10c00d15 	stw	r3,52(r2)

}
    8f58:	e037883a 	mov	sp,fp
    8f5c:	df000017 	ldw	fp,0(sp)
    8f60:	dec00104 	addi	sp,sp,4
    8f64:	f800283a 	ret

00008f68 <pan_ModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void pan_ModelInitialize_initialvalues(void)
{
    8f68:	deffff04 	addi	sp,sp,-4
    8f6c:	df000015 	stw	fp,0(sp)
    8f70:	d839883a 	mov	fp,sp
	/* set the initial values */
	pan_I[0] = 0.0;		/* PID1\uD_previous_initial */
    8f74:	00800074 	movhi	r2,1
    8f78:	10bb0d04 	addi	r2,r2,-5068
    8f7c:	10000015 	stw	zero,0(r2)
    8f80:	10000115 	stw	zero,4(r2)
	pan_I[1] = 0.0;		/* PID1\error_previous_initial */
    8f84:	00800074 	movhi	r2,1
    8f88:	10bb0d04 	addi	r2,r2,-5068
    8f8c:	10000215 	stw	zero,8(r2)
    8f90:	10000315 	stw	zero,12(r2)
	pan_I[2] = 0.0;		/* PID1\uI_previous_initial */
    8f94:	00800074 	movhi	r2,1
    8f98:	10bb0d04 	addi	r2,r2,-5068
    8f9c:	10000415 	stw	zero,16(r2)
    8fa0:	10000515 	stw	zero,20(r2)

}
    8fa4:	e037883a 	mov	sp,fp
    8fa8:	df000017 	ldw	fp,0(sp)
    8fac:	dec00104 	addi	sp,sp,4
    8fb0:	f800283a 	ret

00008fb4 <pan_ModelInitialize_states>:

void pan_ModelInitialize_states(void)
{
    8fb4:	deffff04 	addi	sp,sp,-4
    8fb8:	df000015 	stw	fp,0(sp)
    8fbc:	d839883a 	mov	fp,sp
	/* set the states */
	pan_s[0] = pan_I[0];		/* PID1\uD_previous */
    8fc0:	01000074 	movhi	r4,1
    8fc4:	213b0d04 	addi	r4,r4,-5068
    8fc8:	20800017 	ldw	r2,0(r4)
    8fcc:	20c00117 	ldw	r3,4(r4)
    8fd0:	01000074 	movhi	r4,1
    8fd4:	213b2104 	addi	r4,r4,-4988
    8fd8:	20800015 	stw	r2,0(r4)
    8fdc:	20c00115 	stw	r3,4(r4)
	pan_s[1] = pan_I[1];		/* PID1\error_previous */
    8fe0:	01000074 	movhi	r4,1
    8fe4:	213b0d04 	addi	r4,r4,-5068
    8fe8:	20800217 	ldw	r2,8(r4)
    8fec:	20c00317 	ldw	r3,12(r4)
    8ff0:	01000074 	movhi	r4,1
    8ff4:	213b2104 	addi	r4,r4,-4988
    8ff8:	20800215 	stw	r2,8(r4)
    8ffc:	20c00315 	stw	r3,12(r4)
	pan_s[2] = pan_I[2];		/* PID1\uI_previous */
    9000:	01000074 	movhi	r4,1
    9004:	213b0d04 	addi	r4,r4,-5068
    9008:	20800417 	ldw	r2,16(r4)
    900c:	20c00517 	ldw	r3,20(r4)
    9010:	01000074 	movhi	r4,1
    9014:	213b2104 	addi	r4,r4,-4988
    9018:	20800415 	stw	r2,16(r4)
    901c:	20c00515 	stw	r3,20(r4)

}
    9020:	e037883a 	mov	sp,fp
    9024:	df000017 	ldw	fp,0(sp)
    9028:	dec00104 	addi	sp,sp,4
    902c:	f800283a 	ret

00009030 <pan_ModelInitialize_variables>:

void pan_ModelInitialize_variables(void)
{
    9030:	defffe04 	addi	sp,sp,-8
    9034:	dfc00115 	stw	ra,4(sp)
    9038:	df000015 	stw	fp,0(sp)
    903c:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(pan_V, 0, pan_variables_size * sizeof(double));
    9040:	01000074 	movhi	r4,1
    9044:	213b2704 	addi	r4,r4,-4964
    9048:	000b883a 	mov	r5,zero
    904c:	01801404 	movi	r6,80
    9050:	000b7b00 	call	b7b0 <memset>
}
    9054:	e037883a 	mov	sp,fp
    9058:	dfc00117 	ldw	ra,4(sp)
    905c:	df000017 	ldw	fp,0(sp)
    9060:	dec00204 	addi	sp,sp,8
    9064:	f800283a 	ret

00009068 <pan_ModelInitialize>:

/* this method is called before calculation is possible */
void pan_ModelInitialize (void)
{
    9068:	defffe04 	addi	sp,sp,-8
    906c:	dfc00115 	stw	ra,4(sp)
    9070:	df000015 	stw	fp,0(sp)
    9074:	d839883a 	mov	fp,sp
	pan_ModelInitialize_parameters();
    9078:	0008e880 	call	8e88 <pan_ModelInitialize_parameters>
	pan_ModelInitialize_variables();
    907c:	00090300 	call	9030 <pan_ModelInitialize_variables>
	pan_ModelInitialize_initialvalues();
    9080:	0008f680 	call	8f68 <pan_ModelInitialize_initialvalues>
	pan_ModelInitialize_states();
    9084:	0008fb40 	call	8fb4 <pan_ModelInitialize_states>
}
    9088:	e037883a 	mov	sp,fp
    908c:	dfc00117 	ldw	ra,4(sp)
    9090:	df000017 	ldw	fp,0(sp)
    9094:	dec00204 	addi	sp,sp,8
    9098:	f800283a 	ret

0000909c <pan_CalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void pan_CalculateDynamic (void)
{
    909c:	defff804 	addi	sp,sp,-32
    90a0:	dfc00715 	stw	ra,28(sp)
    90a4:	df000615 	stw	fp,24(sp)
    90a8:	dd400515 	stw	r21,20(sp)
    90ac:	dd000415 	stw	r20,16(sp)
    90b0:	dcc00315 	stw	r19,12(sp)
    90b4:	dc800215 	stw	r18,8(sp)
    90b8:	dc400115 	stw	r17,4(sp)
    90bc:	dc000015 	stw	r16,0(sp)
    90c0:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	pan_V[2] = 1.0 / (pan_step_size + pan_P[2] * pan_P[3]);
    90c4:	00800074 	movhi	r2,1
    90c8:	10bb1304 	addi	r2,r2,-5044
    90cc:	11400417 	ldw	r5,16(r2)
    90d0:	11800517 	ldw	r6,20(r2)
    90d4:	01000074 	movhi	r4,1
    90d8:	213b1304 	addi	r4,r4,-5044
    90dc:	20800617 	ldw	r2,24(r4)
    90e0:	20c00717 	ldw	r3,28(r4)
    90e4:	2809883a 	mov	r4,r5
    90e8:	300b883a 	mov	r5,r6
    90ec:	100d883a 	mov	r6,r2
    90f0:	180f883a 	mov	r7,r3
    90f4:	000a8b80 	call	a8b8 <__muldf3>
    90f8:	100f883a 	mov	r7,r2
    90fc:	1811883a 	mov	r8,r3
    9100:	380b883a 	mov	r5,r7
    9104:	400d883a 	mov	r6,r8
    9108:	d0a00317 	ldw	r2,-32756(gp)
    910c:	01000074 	movhi	r4,1
    9110:	21381004 	addi	r4,r4,-8128
    9114:	20c00017 	ldw	r3,0(r4)
    9118:	2809883a 	mov	r4,r5
    911c:	300b883a 	mov	r5,r6
    9120:	100d883a 	mov	r6,r2
    9124:	180f883a 	mov	r7,r3
    9128:	000a8040 	call	a804 <__adddf3>
    912c:	1009883a 	mov	r4,r2
    9130:	180b883a 	mov	r5,r3
    9134:	2005883a 	mov	r2,r4
    9138:	2807883a 	mov	r3,r5
    913c:	0009883a 	mov	r4,zero
    9140:	014ffc34 	movhi	r5,16368
    9144:	100d883a 	mov	r6,r2
    9148:	180f883a 	mov	r7,r3
    914c:	000ab9c0 	call	ab9c <__divdf3>
    9150:	1009883a 	mov	r4,r2
    9154:	180b883a 	mov	r5,r3
    9158:	2005883a 	mov	r2,r4
    915c:	2807883a 	mov	r3,r5
    9160:	01000074 	movhi	r4,1
    9164:	213b2704 	addi	r4,r4,-4964
    9168:	20800415 	stw	r2,16(r4)
    916c:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\plus1 = in; */
	pan_V[3] = pan_V[7];
    9170:	01000074 	movhi	r4,1
    9174:	213b2704 	addi	r4,r4,-4964
    9178:	20800e17 	ldw	r2,56(r4)
    917c:	20c00f17 	ldw	r3,60(r4)
    9180:	01000074 	movhi	r4,1
    9184:	213b2704 	addi	r4,r4,-4964
    9188:	20800615 	stw	r2,24(r4)
    918c:	20c00715 	stw	r3,28(r4)

	/* Splitter1\input = position; */
	pan_V[5] = pan_V[8];
    9190:	01000074 	movhi	r4,1
    9194:	213b2704 	addi	r4,r4,-4964
    9198:	20801017 	ldw	r2,64(r4)
    919c:	20c01117 	ldw	r3,68(r4)
    91a0:	01000074 	movhi	r4,1
    91a4:	213b2704 	addi	r4,r4,-4964
    91a8:	20800a15 	stw	r2,40(r4)
    91ac:	20c00b15 	stw	r3,44(r4)

	/* corrGain\corr = corrGain\K * Splitter1\input; */
	pan_V[0] = pan_P[0] * pan_V[5];
    91b0:	00800074 	movhi	r2,1
    91b4:	10bb1304 	addi	r2,r2,-5044
    91b8:	11400017 	ldw	r5,0(r2)
    91bc:	11800117 	ldw	r6,4(r2)
    91c0:	01000074 	movhi	r4,1
    91c4:	213b2704 	addi	r4,r4,-4964
    91c8:	20800a17 	ldw	r2,40(r4)
    91cc:	20c00b17 	ldw	r3,44(r4)
    91d0:	2809883a 	mov	r4,r5
    91d4:	300b883a 	mov	r5,r6
    91d8:	100d883a 	mov	r6,r2
    91dc:	180f883a 	mov	r7,r3
    91e0:	000a8b80 	call	a8b8 <__muldf3>
    91e4:	1009883a 	mov	r4,r2
    91e8:	180b883a 	mov	r5,r3
    91ec:	2005883a 	mov	r2,r4
    91f0:	2807883a 	mov	r3,r5
    91f4:	01000074 	movhi	r4,1
    91f8:	213b2704 	addi	r4,r4,-4964
    91fc:	20800015 	stw	r2,0(r4)
    9200:	20c00115 	stw	r3,4(r4)

	/* PID1\error = PlusMinus1\plus1 - Splitter1\input; */
	pan_R[1] = pan_V[3] - pan_V[5];
    9204:	00800074 	movhi	r2,1
    9208:	10bb2704 	addi	r2,r2,-4964
    920c:	11400617 	ldw	r5,24(r2)
    9210:	11800717 	ldw	r6,28(r2)
    9214:	01000074 	movhi	r4,1
    9218:	213b2704 	addi	r4,r4,-4964
    921c:	20800a17 	ldw	r2,40(r4)
    9220:	20c00b17 	ldw	r3,44(r4)
    9224:	2809883a 	mov	r4,r5
    9228:	300b883a 	mov	r5,r6
    922c:	100d883a 	mov	r6,r2
    9230:	180f883a 	mov	r7,r3
    9234:	000a8580 	call	a858 <__subdf3>
    9238:	1009883a 	mov	r4,r2
    923c:	180b883a 	mov	r5,r3
    9240:	2005883a 	mov	r2,r4
    9244:	2807883a 	mov	r3,r5
    9248:	01000074 	movhi	r4,1
    924c:	213b3b04 	addi	r4,r4,-4884
    9250:	20800215 	stw	r2,8(r4)
    9254:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	pan_R[0] = pan_V[2] * (((pan_P[2] * pan_s[0]) * pan_P[3] + (pan_P[2] * pan_P[1]) * (pan_R[1] - pan_s[1])) + (pan_step_size * pan_P[1]) * pan_R[1]);
    9258:	00800074 	movhi	r2,1
    925c:	10bb2704 	addi	r2,r2,-4964
    9260:	14000417 	ldw	r16,16(r2)
    9264:	14400517 	ldw	r17,20(r2)
    9268:	00800074 	movhi	r2,1
    926c:	10bb1304 	addi	r2,r2,-5044
    9270:	11400417 	ldw	r5,16(r2)
    9274:	11800517 	ldw	r6,20(r2)
    9278:	01000074 	movhi	r4,1
    927c:	213b2104 	addi	r4,r4,-4988
    9280:	20800017 	ldw	r2,0(r4)
    9284:	20c00117 	ldw	r3,4(r4)
    9288:	2809883a 	mov	r4,r5
    928c:	300b883a 	mov	r5,r6
    9290:	100d883a 	mov	r6,r2
    9294:	180f883a 	mov	r7,r3
    9298:	000a8b80 	call	a8b8 <__muldf3>
    929c:	100f883a 	mov	r7,r2
    92a0:	1811883a 	mov	r8,r3
    92a4:	380b883a 	mov	r5,r7
    92a8:	400d883a 	mov	r6,r8
    92ac:	01000074 	movhi	r4,1
    92b0:	213b1304 	addi	r4,r4,-5044
    92b4:	20800617 	ldw	r2,24(r4)
    92b8:	20c00717 	ldw	r3,28(r4)
    92bc:	2809883a 	mov	r4,r5
    92c0:	300b883a 	mov	r5,r6
    92c4:	100d883a 	mov	r6,r2
    92c8:	180f883a 	mov	r7,r3
    92cc:	000a8b80 	call	a8b8 <__muldf3>
    92d0:	1009883a 	mov	r4,r2
    92d4:	180b883a 	mov	r5,r3
    92d8:	2025883a 	mov	r18,r4
    92dc:	2827883a 	mov	r19,r5
    92e0:	00800074 	movhi	r2,1
    92e4:	10bb1304 	addi	r2,r2,-5044
    92e8:	11400417 	ldw	r5,16(r2)
    92ec:	11800517 	ldw	r6,20(r2)
    92f0:	01000074 	movhi	r4,1
    92f4:	213b1304 	addi	r4,r4,-5044
    92f8:	20800217 	ldw	r2,8(r4)
    92fc:	20c00317 	ldw	r3,12(r4)
    9300:	2809883a 	mov	r4,r5
    9304:	300b883a 	mov	r5,r6
    9308:	100d883a 	mov	r6,r2
    930c:	180f883a 	mov	r7,r3
    9310:	000a8b80 	call	a8b8 <__muldf3>
    9314:	1009883a 	mov	r4,r2
    9318:	180b883a 	mov	r5,r3
    931c:	2029883a 	mov	r20,r4
    9320:	282b883a 	mov	r21,r5
    9324:	00800074 	movhi	r2,1
    9328:	10bb3b04 	addi	r2,r2,-4884
    932c:	11400217 	ldw	r5,8(r2)
    9330:	11800317 	ldw	r6,12(r2)
    9334:	01000074 	movhi	r4,1
    9338:	213b2104 	addi	r4,r4,-4988
    933c:	20800217 	ldw	r2,8(r4)
    9340:	20c00317 	ldw	r3,12(r4)
    9344:	2809883a 	mov	r4,r5
    9348:	300b883a 	mov	r5,r6
    934c:	100d883a 	mov	r6,r2
    9350:	180f883a 	mov	r7,r3
    9354:	000a8580 	call	a858 <__subdf3>
    9358:	1009883a 	mov	r4,r2
    935c:	180b883a 	mov	r5,r3
    9360:	2005883a 	mov	r2,r4
    9364:	2807883a 	mov	r3,r5
    9368:	a009883a 	mov	r4,r20
    936c:	a80b883a 	mov	r5,r21
    9370:	100d883a 	mov	r6,r2
    9374:	180f883a 	mov	r7,r3
    9378:	000a8b80 	call	a8b8 <__muldf3>
    937c:	1009883a 	mov	r4,r2
    9380:	180b883a 	mov	r5,r3
    9384:	2005883a 	mov	r2,r4
    9388:	2807883a 	mov	r3,r5
    938c:	9009883a 	mov	r4,r18
    9390:	980b883a 	mov	r5,r19
    9394:	100d883a 	mov	r6,r2
    9398:	180f883a 	mov	r7,r3
    939c:	000a8040 	call	a804 <__adddf3>
    93a0:	1009883a 	mov	r4,r2
    93a4:	180b883a 	mov	r5,r3
    93a8:	2025883a 	mov	r18,r4
    93ac:	2827883a 	mov	r19,r5
    93b0:	00800074 	movhi	r2,1
    93b4:	10bb1304 	addi	r2,r2,-5044
    93b8:	11400217 	ldw	r5,8(r2)
    93bc:	11800317 	ldw	r6,12(r2)
    93c0:	d0a00317 	ldw	r2,-32756(gp)
    93c4:	01000074 	movhi	r4,1
    93c8:	21381004 	addi	r4,r4,-8128
    93cc:	20c00017 	ldw	r3,0(r4)
    93d0:	2809883a 	mov	r4,r5
    93d4:	300b883a 	mov	r5,r6
    93d8:	100d883a 	mov	r6,r2
    93dc:	180f883a 	mov	r7,r3
    93e0:	000a8b80 	call	a8b8 <__muldf3>
    93e4:	100f883a 	mov	r7,r2
    93e8:	1811883a 	mov	r8,r3
    93ec:	380b883a 	mov	r5,r7
    93f0:	400d883a 	mov	r6,r8
    93f4:	01000074 	movhi	r4,1
    93f8:	213b3b04 	addi	r4,r4,-4884
    93fc:	20800217 	ldw	r2,8(r4)
    9400:	20c00317 	ldw	r3,12(r4)
    9404:	2809883a 	mov	r4,r5
    9408:	300b883a 	mov	r5,r6
    940c:	100d883a 	mov	r6,r2
    9410:	180f883a 	mov	r7,r3
    9414:	000a8b80 	call	a8b8 <__muldf3>
    9418:	1009883a 	mov	r4,r2
    941c:	180b883a 	mov	r5,r3
    9420:	2005883a 	mov	r2,r4
    9424:	2807883a 	mov	r3,r5
    9428:	9009883a 	mov	r4,r18
    942c:	980b883a 	mov	r5,r19
    9430:	100d883a 	mov	r6,r2
    9434:	180f883a 	mov	r7,r3
    9438:	000a8040 	call	a804 <__adddf3>
    943c:	1009883a 	mov	r4,r2
    9440:	180b883a 	mov	r5,r3
    9444:	2005883a 	mov	r2,r4
    9448:	2807883a 	mov	r3,r5
    944c:	8009883a 	mov	r4,r16
    9450:	880b883a 	mov	r5,r17
    9454:	100d883a 	mov	r6,r2
    9458:	180f883a 	mov	r7,r3
    945c:	000a8b80 	call	a8b8 <__muldf3>
    9460:	1009883a 	mov	r4,r2
    9464:	180b883a 	mov	r5,r3
    9468:	2005883a 	mov	r2,r4
    946c:	2807883a 	mov	r3,r5
    9470:	01000074 	movhi	r4,1
    9474:	213b3b04 	addi	r4,r4,-4884
    9478:	20800015 	stw	r2,0(r4)
    947c:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	pan_R[2] = pan_s[2] + (pan_step_size * pan_R[0]) / pan_P[4];
    9480:	00800074 	movhi	r2,1
    9484:	10bb2104 	addi	r2,r2,-4988
    9488:	14000417 	ldw	r16,16(r2)
    948c:	14400517 	ldw	r17,20(r2)
    9490:	00800074 	movhi	r2,1
    9494:	10bb3b04 	addi	r2,r2,-4884
    9498:	11400017 	ldw	r5,0(r2)
    949c:	11800117 	ldw	r6,4(r2)
    94a0:	d0a00317 	ldw	r2,-32756(gp)
    94a4:	01000074 	movhi	r4,1
    94a8:	21381004 	addi	r4,r4,-8128
    94ac:	20c00017 	ldw	r3,0(r4)
    94b0:	2809883a 	mov	r4,r5
    94b4:	300b883a 	mov	r5,r6
    94b8:	100d883a 	mov	r6,r2
    94bc:	180f883a 	mov	r7,r3
    94c0:	000a8b80 	call	a8b8 <__muldf3>
    94c4:	100f883a 	mov	r7,r2
    94c8:	1811883a 	mov	r8,r3
    94cc:	380b883a 	mov	r5,r7
    94d0:	400d883a 	mov	r6,r8
    94d4:	01000074 	movhi	r4,1
    94d8:	213b1304 	addi	r4,r4,-5044
    94dc:	20800817 	ldw	r2,32(r4)
    94e0:	20c00917 	ldw	r3,36(r4)
    94e4:	2809883a 	mov	r4,r5
    94e8:	300b883a 	mov	r5,r6
    94ec:	100d883a 	mov	r6,r2
    94f0:	180f883a 	mov	r7,r3
    94f4:	000ab9c0 	call	ab9c <__divdf3>
    94f8:	1009883a 	mov	r4,r2
    94fc:	180b883a 	mov	r5,r3
    9500:	2005883a 	mov	r2,r4
    9504:	2807883a 	mov	r3,r5
    9508:	8009883a 	mov	r4,r16
    950c:	880b883a 	mov	r5,r17
    9510:	100d883a 	mov	r6,r2
    9514:	180f883a 	mov	r7,r3
    9518:	000a8040 	call	a804 <__adddf3>
    951c:	1009883a 	mov	r4,r2
    9520:	180b883a 	mov	r5,r3
    9524:	2005883a 	mov	r2,r4
    9528:	2807883a 	mov	r3,r5
    952c:	01000074 	movhi	r4,1
    9530:	213b3b04 	addi	r4,r4,-4884
    9534:	20800415 	stw	r2,16(r4)
    9538:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	pan_V[1] = pan_R[2] + pan_R[0];
    953c:	00800074 	movhi	r2,1
    9540:	10bb3b04 	addi	r2,r2,-4884
    9544:	11400417 	ldw	r5,16(r2)
    9548:	11800517 	ldw	r6,20(r2)
    954c:	01000074 	movhi	r4,1
    9550:	213b3b04 	addi	r4,r4,-4884
    9554:	20800017 	ldw	r2,0(r4)
    9558:	20c00117 	ldw	r3,4(r4)
    955c:	2809883a 	mov	r4,r5
    9560:	300b883a 	mov	r5,r6
    9564:	100d883a 	mov	r6,r2
    9568:	180f883a 	mov	r7,r3
    956c:	000a8040 	call	a804 <__adddf3>
    9570:	1009883a 	mov	r4,r2
    9574:	180b883a 	mov	r5,r3
    9578:	2005883a 	mov	r2,r4
    957c:	2807883a 	mov	r3,r5
    9580:	01000074 	movhi	r4,1
    9584:	213b2704 	addi	r4,r4,-4964
    9588:	20800215 	stw	r2,8(r4)
    958c:	20c00315 	stw	r3,12(r4)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
    9590:	00800074 	movhi	r2,1
    9594:	10bb2704 	addi	r2,r2,-4964
    9598:	11400217 	ldw	r5,8(r2)
    959c:	11800317 	ldw	r6,12(r2)
    95a0:	01000074 	movhi	r4,1
    95a4:	213b1304 	addi	r4,r4,-5044
    95a8:	20800a17 	ldw	r2,40(r4)
    95ac:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		pan_P[5]
	:
    95b0:	2809883a 	mov	r4,r5
    95b4:	300b883a 	mov	r5,r6
    95b8:	100d883a 	mov	r6,r2
    95bc:	180f883a 	mov	r7,r3
    95c0:	000ae180 	call	ae18 <__ltdf2>
    95c4:	1000050e 	bge	r2,zero,95dc <pan_CalculateDynamic+0x540>
    95c8:	01000074 	movhi	r4,1
    95cc:	213b1304 	addi	r4,r4,-5044
    95d0:	20800a17 	ldw	r2,40(r4)
    95d4:	20c00b17 	ldw	r3,44(r4)
    95d8:	00001906 	br	9640 <pan_CalculateDynamic+0x5a4>
		/* (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) */
		((pan_V[1] > pan_P[6]) ? 
    95dc:	00800074 	movhi	r2,1
    95e0:	10bb2704 	addi	r2,r2,-4964
    95e4:	11400217 	ldw	r5,8(r2)
    95e8:	11800317 	ldw	r6,12(r2)
    95ec:	01000074 	movhi	r4,1
    95f0:	213b1304 	addi	r4,r4,-5044
    95f4:	20800c17 	ldw	r2,48(r4)
    95f8:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			pan_P[6]
		:
    95fc:	2809883a 	mov	r4,r5
    9600:	300b883a 	mov	r5,r6
    9604:	100d883a 	mov	r6,r2
    9608:	180f883a 	mov	r7,r3
    960c:	000ad500 	call	ad50 <__gtdf2>
    9610:	0080050e 	bge	zero,r2,9628 <pan_CalculateDynamic+0x58c>
    9614:	00800074 	movhi	r2,1
    9618:	10bb1304 	addi	r2,r2,-5044
    961c:	11000c17 	ldw	r4,48(r2)
    9620:	11400d17 	ldw	r5,52(r2)
    9624:	00000406 	br	9638 <pan_CalculateDynamic+0x59c>
    9628:	00800074 	movhi	r2,1
    962c:	10bb2704 	addi	r2,r2,-4964
    9630:	11000217 	ldw	r4,8(r2)
    9634:	11400317 	ldw	r5,12(r2)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
		/* SignalLimiter2\minimum */
		pan_P[5]
	:
    9638:	2005883a 	mov	r2,r4
    963c:	2807883a 	mov	r3,r5

	/* PID1\output = PID1\uI + PID1\uD; */
	pan_V[1] = pan_R[2] + pan_R[0];

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	pan_V[4] = ((pan_V[1] < pan_P[5]) ? 
    9640:	01000074 	movhi	r4,1
    9644:	213b2704 	addi	r4,r4,-4964
    9648:	20800815 	stw	r2,32(r4)
    964c:	20c00915 	stw	r3,36(r4)
		)
	);


	/* increment the step counter */
	pan_steps++;
    9650:	d0a0f217 	ldw	r2,-31800(gp)
    9654:	10800044 	addi	r2,r2,1
    9658:	d0a0f215 	stw	r2,-31800(gp)
}
    965c:	e037883a 	mov	sp,fp
    9660:	dfc00717 	ldw	ra,28(sp)
    9664:	df000617 	ldw	fp,24(sp)
    9668:	dd400517 	ldw	r21,20(sp)
    966c:	dd000417 	ldw	r20,16(sp)
    9670:	dcc00317 	ldw	r19,12(sp)
    9674:	dc800217 	ldw	r18,8(sp)
    9678:	dc400117 	ldw	r17,4(sp)
    967c:	dc000017 	ldw	r16,0(sp)
    9680:	dec00804 	addi	sp,sp,32
    9684:	f800283a 	ret

00009688 <pan_CalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void pan_CalculateOutput (void)
{
    9688:	deffff04 	addi	sp,sp,-4
    968c:	df000015 	stw	fp,0(sp)
    9690:	d839883a 	mov	fp,sp
	/* corr = corrGain\corr; */
	pan_V[6] = pan_V[0];
    9694:	01000074 	movhi	r4,1
    9698:	213b2704 	addi	r4,r4,-4964
    969c:	20800017 	ldw	r2,0(r4)
    96a0:	20c00117 	ldw	r3,4(r4)
    96a4:	01000074 	movhi	r4,1
    96a8:	213b2704 	addi	r4,r4,-4964
    96ac:	20800c15 	stw	r2,48(r4)
    96b0:	20c00d15 	stw	r3,52(r4)

	/* out = SignalLimiter2\output; */
	pan_V[9] = pan_V[4];
    96b4:	01000074 	movhi	r4,1
    96b8:	213b2704 	addi	r4,r4,-4964
    96bc:	20800817 	ldw	r2,32(r4)
    96c0:	20c00917 	ldw	r3,36(r4)
    96c4:	01000074 	movhi	r4,1
    96c8:	213b2704 	addi	r4,r4,-4964
    96cc:	20801215 	stw	r2,72(r4)
    96d0:	20c01315 	stw	r3,76(r4)

}
    96d4:	e037883a 	mov	sp,fp
    96d8:	df000017 	ldw	fp,0(sp)
    96dc:	dec00104 	addi	sp,sp,4
    96e0:	f800283a 	ret

000096e4 <pan_CopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void pan_CopyInputsToVariables (double *u)
{
    96e4:	defffe04 	addi	sp,sp,-8
    96e8:	df000115 	stw	fp,4(sp)
    96ec:	df000104 	addi	fp,sp,4
    96f0:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	pan_V[7] = u[0];		/* in */
    96f4:	e13fff17 	ldw	r4,-4(fp)
    96f8:	20800017 	ldw	r2,0(r4)
    96fc:	20c00117 	ldw	r3,4(r4)
    9700:	01000074 	movhi	r4,1
    9704:	213b2704 	addi	r4,r4,-4964
    9708:	20800e15 	stw	r2,56(r4)
    970c:	20c00f15 	stw	r3,60(r4)
	pan_V[8] = u[1];		/* position */
    9710:	e13fff17 	ldw	r4,-4(fp)
    9714:	20800217 	ldw	r2,8(r4)
    9718:	20c00317 	ldw	r3,12(r4)
    971c:	01000074 	movhi	r4,1
    9720:	213b2704 	addi	r4,r4,-4964
    9724:	20801015 	stw	r2,64(r4)
    9728:	20c01115 	stw	r3,68(r4)

}
    972c:	e037883a 	mov	sp,fp
    9730:	df000017 	ldw	fp,0(sp)
    9734:	dec00104 	addi	sp,sp,4
    9738:	f800283a 	ret

0000973c <pan_CopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void pan_CopyVariablesToOutputs (double *y)
{
    973c:	defffe04 	addi	sp,sp,-8
    9740:	df000115 	stw	fp,4(sp)
    9744:	df000104 	addi	fp,sp,4
    9748:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	pan_V[6];		/* corr */
    974c:	01000074 	movhi	r4,1
    9750:	213b2704 	addi	r4,r4,-4964
    9754:	20800c17 	ldw	r2,48(r4)
    9758:	20c00d17 	ldw	r3,52(r4)
    975c:	e13fff17 	ldw	r4,-4(fp)
    9760:	20800015 	stw	r2,0(r4)
    9764:	20c00115 	stw	r3,4(r4)
	y[1] = 	pan_V[9];		/* out */
    9768:	e0bfff17 	ldw	r2,-4(fp)
    976c:	11000204 	addi	r4,r2,8
    9770:	01400074 	movhi	r5,1
    9774:	297b2704 	addi	r5,r5,-4964
    9778:	28801217 	ldw	r2,72(r5)
    977c:	28c01317 	ldw	r3,76(r5)
    9780:	20800015 	stw	r2,0(r4)
    9784:	20c00115 	stw	r3,4(r4)

}
    9788:	e037883a 	mov	sp,fp
    978c:	df000017 	ldw	fp,0(sp)
    9790:	dec00104 	addi	sp,sp,4
    9794:	f800283a 	ret

00009798 <pan_InitializeSubmodel>:

/* The initialization function for submodel */
void pan_InitializeSubmodel (double *u, double *y, double t)
{
    9798:	defffa04 	addi	sp,sp,-24
    979c:	dfc00515 	stw	ra,20(sp)
    97a0:	df000415 	stw	fp,16(sp)
    97a4:	df000404 	addi	fp,sp,16
    97a8:	e13ffc15 	stw	r4,-16(fp)
    97ac:	e17ffd15 	stw	r5,-12(fp)
    97b0:	e1bffe15 	stw	r6,-8(fp)
    97b4:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	pan_initialize = 1;
    97b8:	00800074 	movhi	r2,1
    97bc:	10b81104 	addi	r2,r2,-8124
    97c0:	00c00044 	movi	r3,1
    97c4:	10c00005 	stb	r3,0(r2)
	pan_steps = 0;
    97c8:	00800074 	movhi	r2,1
    97cc:	10b8fe04 	addi	r2,r2,-7176
    97d0:	10000015 	stw	zero,0(r2)
	pan_ModelInitialize ();
    97d4:	00090680 	call	9068 <pan_ModelInitialize>
	pan_DiscreteInitialize ();
    97d8:	0008d780 	call	8d78 <pan_DiscreteInitialize>

	/* Copy the inputs */
	pan_time = t;
    97dc:	00800074 	movhi	r2,1
    97e0:	10b8fc04 	addi	r2,r2,-7184
    97e4:	e0fffe17 	ldw	r3,-8(fp)
    97e8:	10c00015 	stw	r3,0(r2)
    97ec:	e0ffff17 	ldw	r3,-4(fp)
    97f0:	10c00115 	stw	r3,4(r2)
	pan_CopyInputsToVariables (u);
    97f4:	e13ffc17 	ldw	r4,-16(fp)
    97f8:	00096e40 	call	96e4 <pan_CopyInputsToVariables>

	/* Calculate the model for the first time */
	pan_CalculateDynamic ();
    97fc:	000909c0 	call	909c <pan_CalculateDynamic>
	pan_CalculateOutput ();
    9800:	00096880 	call	9688 <pan_CalculateOutput>

	/* Set the outputs */
	pan_CopyVariablesToOutputs (y);
    9804:	e13ffd17 	ldw	r4,-12(fp)
    9808:	000973c0 	call	973c <pan_CopyVariablesToOutputs>

	/* End of initialization phase */
	pan_initialize = 0;
    980c:	00800074 	movhi	r2,1
    9810:	10b81104 	addi	r2,r2,-8124
    9814:	10000005 	stb	zero,0(r2)
}
    9818:	e037883a 	mov	sp,fp
    981c:	dfc00117 	ldw	ra,4(sp)
    9820:	df000017 	ldw	fp,0(sp)
    9824:	dec00204 	addi	sp,sp,8
    9828:	f800283a 	ret

0000982c <pan_CalculateSubmodel>:

/* The function that calculates the submodel */
void pan_CalculateSubmodel (double *u, double *y, double t)
{
    982c:	defffa04 	addi	sp,sp,-24
    9830:	dfc00515 	stw	ra,20(sp)
    9834:	df000415 	stw	fp,16(sp)
    9838:	df000404 	addi	fp,sp,16
    983c:	e13ffc15 	stw	r4,-16(fp)
    9840:	e17ffd15 	stw	r5,-12(fp)
    9844:	e1bffe15 	stw	r6,-8(fp)
    9848:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	pan_time = t;
    984c:	00800074 	movhi	r2,1
    9850:	10b8fc04 	addi	r2,r2,-7184
    9854:	e0fffe17 	ldw	r3,-8(fp)
    9858:	10c00015 	stw	r3,0(r2)
    985c:	e0ffff17 	ldw	r3,-4(fp)
    9860:	10c00115 	stw	r3,4(r2)
	pan_CopyInputsToVariables (u);
    9864:	e13ffc17 	ldw	r4,-16(fp)
    9868:	00096e40 	call	96e4 <pan_CopyInputsToVariables>

	/* Calculate the model */
	pan_DiscreteStep ();
    986c:	0008da40 	call	8da4 <pan_DiscreteStep>
	pan_CalculateOutput ();
    9870:	00096880 	call	9688 <pan_CalculateOutput>

	/* Copy the outputs */
	pan_CopyVariablesToOutputs (y);
    9874:	e13ffd17 	ldw	r4,-12(fp)
    9878:	000973c0 	call	973c <pan_CopyVariablesToOutputs>
}
    987c:	e037883a 	mov	sp,fp
    9880:	dfc00117 	ldw	ra,4(sp)
    9884:	df000017 	ldw	fp,0(sp)
    9888:	dec00204 	addi	sp,sp,8
    988c:	f800283a 	ret

00009890 <pan_TerminateSubmodel>:

/* The termination function for submodel */
void pan_TerminateSubmodel (double *u, double *y, double t)
{
    9890:	defffa04 	addi	sp,sp,-24
    9894:	dfc00515 	stw	ra,20(sp)
    9898:	df000415 	stw	fp,16(sp)
    989c:	df000404 	addi	fp,sp,16
    98a0:	e13ffc15 	stw	r4,-16(fp)
    98a4:	e17ffd15 	stw	r5,-12(fp)
    98a8:	e1bffe15 	stw	r6,-8(fp)
    98ac:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	pan_time = t;
    98b0:	00800074 	movhi	r2,1
    98b4:	10b8fc04 	addi	r2,r2,-7184
    98b8:	e0fffe17 	ldw	r3,-8(fp)
    98bc:	10c00015 	stw	r3,0(r2)
    98c0:	e0ffff17 	ldw	r3,-4(fp)
    98c4:	10c00115 	stw	r3,4(r2)
	pan_CopyInputsToVariables (u);
    98c8:	e13ffc17 	ldw	r4,-16(fp)
    98cc:	00096e40 	call	96e4 <pan_CopyInputsToVariables>

	/* Set the outputs */
	pan_CopyVariablesToOutputs (y);
    98d0:	e13ffd17 	ldw	r4,-12(fp)
    98d4:	000973c0 	call	973c <pan_CopyVariablesToOutputs>

}
    98d8:	e037883a 	mov	sp,fp
    98dc:	dfc00117 	ldw	ra,4(sp)
    98e0:	df000017 	ldw	fp,0(sp)
    98e4:	dec00204 	addi	sp,sp,8
    98e8:	f800283a 	ret

000098ec <tilt_DiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void tilt_DiscreteInitialize (void)
{
    98ec:	deffff04 	addi	sp,sp,-4
    98f0:	df000015 	stw	fp,0(sp)
    98f4:	d839883a 	mov	fp,sp
	/* nothing to be done */
	tilt_major = 1;
    98f8:	00800074 	movhi	r2,1
    98fc:	10b81844 	addi	r2,r2,-8095
    9900:	00c00044 	movi	r3,1
    9904:	10c00005 	stb	r3,0(r2)
}
    9908:	e037883a 	mov	sp,fp
    990c:	df000017 	ldw	fp,0(sp)
    9910:	dec00104 	addi	sp,sp,4
    9914:	f800283a 	ret

00009918 <tilt_DiscreteStep>:

/* the Discrete integration method itself */
void tilt_DiscreteStep (void)
{
    9918:	defffd04 	addi	sp,sp,-12
    991c:	dfc00215 	stw	ra,8(sp)
    9920:	df000115 	stw	fp,4(sp)
    9924:	df000104 	addi	fp,sp,4
	int index;

	/* for each of the supplied states */
	for (index = 0; index < tilt_STATE_SIZE; index++)
    9928:	e03fff15 	stw	zero,-4(fp)
    992c:	00001106 	br	9974 <tilt_DiscreteStep+0x5c>
	{
		/* just a move of the new state */
		tilt_s [index] = tilt_R [index];
    9930:	00c00074 	movhi	r3,1
    9934:	18fb4704 	addi	r3,r3,-4836
    9938:	e0bfff17 	ldw	r2,-4(fp)
    993c:	100490fa 	slli	r2,r2,3
    9940:	1889883a 	add	r4,r3,r2
    9944:	20800017 	ldw	r2,0(r4)
    9948:	20c00117 	ldw	r3,4(r4)
    994c:	01400074 	movhi	r5,1
    9950:	297b7304 	addi	r5,r5,-4660
    9954:	e13fff17 	ldw	r4,-4(fp)
    9958:	200890fa 	slli	r4,r4,3
    995c:	2909883a 	add	r4,r5,r4
    9960:	20800015 	stw	r2,0(r4)
    9964:	20c00115 	stw	r3,4(r4)
void tilt_DiscreteStep (void)
{
	int index;

	/* for each of the supplied states */
	for (index = 0; index < tilt_STATE_SIZE; index++)
    9968:	e0bfff17 	ldw	r2,-4(fp)
    996c:	10800044 	addi	r2,r2,1
    9970:	e0bfff15 	stw	r2,-4(fp)
    9974:	e0bfff17 	ldw	r2,-4(fp)
    9978:	108000d0 	cmplti	r2,r2,3
    997c:	103fec1e 	bne	r2,zero,9930 <tilt_DiscreteStep+0x18>
	{
		/* just a move of the new state */
		tilt_s [index] = tilt_R [index];
	}
	/* increment the simulation time */
	tilt_time += tilt_step_size;
    9980:	00800074 	movhi	r2,1
    9984:	10b90204 	addi	r2,r2,-7160
    9988:	11400017 	ldw	r5,0(r2)
    998c:	11800117 	ldw	r6,4(r2)
    9990:	01000074 	movhi	r4,1
    9994:	21381604 	addi	r4,r4,-8104
    9998:	20800017 	ldw	r2,0(r4)
    999c:	20c00117 	ldw	r3,4(r4)
    99a0:	2809883a 	mov	r4,r5
    99a4:	300b883a 	mov	r5,r6
    99a8:	100d883a 	mov	r6,r2
    99ac:	180f883a 	mov	r7,r3
    99b0:	000a8040 	call	a804 <__adddf3>
    99b4:	1009883a 	mov	r4,r2
    99b8:	180b883a 	mov	r5,r3
    99bc:	2005883a 	mov	r2,r4
    99c0:	2807883a 	mov	r3,r5
    99c4:	01000074 	movhi	r4,1
    99c8:	21390204 	addi	r4,r4,-7160
    99cc:	20800015 	stw	r2,0(r4)
    99d0:	20c00115 	stw	r3,4(r4)

	tilt_major = 1;
    99d4:	00800074 	movhi	r2,1
    99d8:	10b81844 	addi	r2,r2,-8095
    99dc:	00c00044 	movi	r3,1
    99e0:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	tilt_CalculateDynamic ();
    99e4:	0009c100 	call	9c10 <tilt_CalculateDynamic>
}
    99e8:	e037883a 	mov	sp,fp
    99ec:	dfc00117 	ldw	ra,4(sp)
    99f0:	df000017 	ldw	fp,0(sp)
    99f4:	dec00204 	addi	sp,sp,8
    99f8:	f800283a 	ret

000099fc <tilt_ModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void tilt_ModelInitialize_parameters(void)
{
    99fc:	deffff04 	addi	sp,sp,-4
    9a00:	df000015 	stw	fp,0(sp)
    9a04:	d839883a 	mov	fp,sp
	/* set the parameters */
	tilt_P[0] = 0.0;		/* corrGain\K */
    9a08:	00800074 	movhi	r2,1
    9a0c:	10bb6504 	addi	r2,r2,-4716
    9a10:	10000015 	stw	zero,0(r2)
    9a14:	10000115 	stw	zero,4(r2)
	tilt_P[1] = 1.6;		/* PID1\kp */
    9a18:	00800074 	movhi	r2,1
    9a1c:	10bb6504 	addi	r2,r2,-4716
    9a20:	00e666b4 	movhi	r3,39322
    9a24:	18e66684 	addi	r3,r3,-26214
    9a28:	10c00215 	stw	r3,8(r2)
    9a2c:	00cffeb4 	movhi	r3,16378
    9a30:	18e66644 	addi	r3,r3,-26215
    9a34:	10c00315 	stw	r3,12(r2)
	tilt_P[2] = 0.05;		/* PID1\tauD */
    9a38:	00800074 	movhi	r2,1
    9a3c:	10bb6504 	addi	r2,r2,-4716
    9a40:	00e666b4 	movhi	r3,39322
    9a44:	18e66684 	addi	r3,r3,-26214
    9a48:	10c00415 	stw	r3,16(r2)
    9a4c:	00cfeab4 	movhi	r3,16298
    9a50:	18e66644 	addi	r3,r3,-26215
    9a54:	10c00515 	stw	r3,20(r2)
	tilt_P[3] = 0.001;		/* PID1\beta */
    9a58:	00800074 	movhi	r2,1
    9a5c:	10bb6504 	addi	r2,r2,-4716
    9a60:	00f4bcb4 	movhi	r3,54002
    9a64:	18ea7f04 	addi	r3,r3,-22020
    9a68:	10c00615 	stw	r3,24(r2)
    9a6c:	00cfd434 	movhi	r3,16208
    9a70:	18d89344 	addi	r3,r3,25165
    9a74:	10c00715 	stw	r3,28(r2)
	tilt_P[4] = 10.5;		/* PID1\tauI */
    9a78:	00800074 	movhi	r2,1
    9a7c:	10bb6504 	addi	r2,r2,-4716
    9a80:	10000815 	stw	zero,32(r2)
    9a84:	00d00974 	movhi	r3,16421
    9a88:	10c00915 	stw	r3,36(r2)
	tilt_P[5] = -0.99;		/* SignalLimiter2\minimum */
    9a8c:	00800074 	movhi	r2,1
    9a90:	10bb6504 	addi	r2,r2,-4716
    9a94:	00deb874 	movhi	r3,31457
    9a98:	18d1eb84 	addi	r3,r3,18350
    9a9c:	10c00a15 	stw	r3,40(r2)
    9aa0:	00effc34 	movhi	r3,49136
    9aa4:	18eb8504 	addi	r3,r3,-20972
    9aa8:	10c00b15 	stw	r3,44(r2)
	tilt_P[6] = 0.99;		/* SignalLimiter2\maximum */
    9aac:	00800074 	movhi	r2,1
    9ab0:	10bb6504 	addi	r2,r2,-4716
    9ab4:	00deb874 	movhi	r3,31457
    9ab8:	18d1eb84 	addi	r3,r3,18350
    9abc:	10c00c15 	stw	r3,48(r2)
    9ac0:	00cffc34 	movhi	r3,16368
    9ac4:	18eb8504 	addi	r3,r3,-20972
    9ac8:	10c00d15 	stw	r3,52(r2)

}
    9acc:	e037883a 	mov	sp,fp
    9ad0:	df000017 	ldw	fp,0(sp)
    9ad4:	dec00104 	addi	sp,sp,4
    9ad8:	f800283a 	ret

00009adc <tilt_ModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void tilt_ModelInitialize_initialvalues(void)
{
    9adc:	deffff04 	addi	sp,sp,-4
    9ae0:	df000015 	stw	fp,0(sp)
    9ae4:	d839883a 	mov	fp,sp
	/* set the initial values */
	tilt_I[0] = 0.0;		/* PID1\uD_previous_initial */
    9ae8:	00800074 	movhi	r2,1
    9aec:	10bb4104 	addi	r2,r2,-4860
    9af0:	10000015 	stw	zero,0(r2)
    9af4:	10000115 	stw	zero,4(r2)
	tilt_I[1] = 0.0;		/* PID1\error_previous_initial */
    9af8:	00800074 	movhi	r2,1
    9afc:	10bb4104 	addi	r2,r2,-4860
    9b00:	10000215 	stw	zero,8(r2)
    9b04:	10000315 	stw	zero,12(r2)
	tilt_I[2] = 0.0;		/* PID1\uI_previous_initial */
    9b08:	00800074 	movhi	r2,1
    9b0c:	10bb4104 	addi	r2,r2,-4860
    9b10:	10000415 	stw	zero,16(r2)
    9b14:	10000515 	stw	zero,20(r2)

}
    9b18:	e037883a 	mov	sp,fp
    9b1c:	df000017 	ldw	fp,0(sp)
    9b20:	dec00104 	addi	sp,sp,4
    9b24:	f800283a 	ret

00009b28 <tilt_ModelInitialize_states>:

void tilt_ModelInitialize_states(void)
{
    9b28:	deffff04 	addi	sp,sp,-4
    9b2c:	df000015 	stw	fp,0(sp)
    9b30:	d839883a 	mov	fp,sp
	/* set the states */
	tilt_s[0] = tilt_I[0];		/* PID1\uD_previous */
    9b34:	01000074 	movhi	r4,1
    9b38:	213b4104 	addi	r4,r4,-4860
    9b3c:	20800017 	ldw	r2,0(r4)
    9b40:	20c00117 	ldw	r3,4(r4)
    9b44:	01000074 	movhi	r4,1
    9b48:	213b7304 	addi	r4,r4,-4660
    9b4c:	20800015 	stw	r2,0(r4)
    9b50:	20c00115 	stw	r3,4(r4)
	tilt_s[1] = tilt_I[1];		/* PID1\error_previous */
    9b54:	01000074 	movhi	r4,1
    9b58:	213b4104 	addi	r4,r4,-4860
    9b5c:	20800217 	ldw	r2,8(r4)
    9b60:	20c00317 	ldw	r3,12(r4)
    9b64:	01000074 	movhi	r4,1
    9b68:	213b7304 	addi	r4,r4,-4660
    9b6c:	20800215 	stw	r2,8(r4)
    9b70:	20c00315 	stw	r3,12(r4)
	tilt_s[2] = tilt_I[2];		/* PID1\uI_previous */
    9b74:	01000074 	movhi	r4,1
    9b78:	213b4104 	addi	r4,r4,-4860
    9b7c:	20800417 	ldw	r2,16(r4)
    9b80:	20c00517 	ldw	r3,20(r4)
    9b84:	01000074 	movhi	r4,1
    9b88:	213b7304 	addi	r4,r4,-4660
    9b8c:	20800415 	stw	r2,16(r4)
    9b90:	20c00515 	stw	r3,20(r4)

}
    9b94:	e037883a 	mov	sp,fp
    9b98:	df000017 	ldw	fp,0(sp)
    9b9c:	dec00104 	addi	sp,sp,4
    9ba0:	f800283a 	ret

00009ba4 <tilt_ModelInitialize_variables>:

void tilt_ModelInitialize_variables(void)
{
    9ba4:	defffe04 	addi	sp,sp,-8
    9ba8:	dfc00115 	stw	ra,4(sp)
    9bac:	df000015 	stw	fp,0(sp)
    9bb0:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(tilt_V, 0, tilt_variables_size * sizeof(double));
    9bb4:	01000074 	movhi	r4,1
    9bb8:	213b4d04 	addi	r4,r4,-4812
    9bbc:	000b883a 	mov	r5,zero
    9bc0:	01801804 	movi	r6,96
    9bc4:	000b7b00 	call	b7b0 <memset>
}
    9bc8:	e037883a 	mov	sp,fp
    9bcc:	dfc00117 	ldw	ra,4(sp)
    9bd0:	df000017 	ldw	fp,0(sp)
    9bd4:	dec00204 	addi	sp,sp,8
    9bd8:	f800283a 	ret

00009bdc <tilt_ModelInitialize>:

/* this method is called before calculation is possible */
void tilt_ModelInitialize (void)
{
    9bdc:	defffe04 	addi	sp,sp,-8
    9be0:	dfc00115 	stw	ra,4(sp)
    9be4:	df000015 	stw	fp,0(sp)
    9be8:	d839883a 	mov	fp,sp
	tilt_ModelInitialize_parameters();
    9bec:	00099fc0 	call	99fc <tilt_ModelInitialize_parameters>
	tilt_ModelInitialize_variables();
    9bf0:	0009ba40 	call	9ba4 <tilt_ModelInitialize_variables>
	tilt_ModelInitialize_initialvalues();
    9bf4:	0009adc0 	call	9adc <tilt_ModelInitialize_initialvalues>
	tilt_ModelInitialize_states();
    9bf8:	0009b280 	call	9b28 <tilt_ModelInitialize_states>
}
    9bfc:	e037883a 	mov	sp,fp
    9c00:	dfc00117 	ldw	ra,4(sp)
    9c04:	df000017 	ldw	fp,0(sp)
    9c08:	dec00204 	addi	sp,sp,8
    9c0c:	f800283a 	ret

00009c10 <tilt_CalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void tilt_CalculateDynamic (void)
{
    9c10:	defff804 	addi	sp,sp,-32
    9c14:	dfc00715 	stw	ra,28(sp)
    9c18:	df000615 	stw	fp,24(sp)
    9c1c:	dd400515 	stw	r21,20(sp)
    9c20:	dd000415 	stw	r20,16(sp)
    9c24:	dcc00315 	stw	r19,12(sp)
    9c28:	dc800215 	stw	r18,8(sp)
    9c2c:	dc400115 	stw	r17,4(sp)
    9c30:	dc000015 	stw	r16,0(sp)
    9c34:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	tilt_V[3] = 1.0 / (tilt_step_size + tilt_P[2] * tilt_P[3]);
    9c38:	00800074 	movhi	r2,1
    9c3c:	10bb6504 	addi	r2,r2,-4716
    9c40:	11400417 	ldw	r5,16(r2)
    9c44:	11800517 	ldw	r6,20(r2)
    9c48:	01000074 	movhi	r4,1
    9c4c:	213b6504 	addi	r4,r4,-4716
    9c50:	20800617 	ldw	r2,24(r4)
    9c54:	20c00717 	ldw	r3,28(r4)
    9c58:	2809883a 	mov	r4,r5
    9c5c:	300b883a 	mov	r5,r6
    9c60:	100d883a 	mov	r6,r2
    9c64:	180f883a 	mov	r7,r3
    9c68:	000a8b80 	call	a8b8 <__muldf3>
    9c6c:	100f883a 	mov	r7,r2
    9c70:	1811883a 	mov	r8,r3
    9c74:	380b883a 	mov	r5,r7
    9c78:	400d883a 	mov	r6,r8
    9c7c:	d0a00a17 	ldw	r2,-32728(gp)
    9c80:	01000074 	movhi	r4,1
    9c84:	21381704 	addi	r4,r4,-8100
    9c88:	20c00017 	ldw	r3,0(r4)
    9c8c:	2809883a 	mov	r4,r5
    9c90:	300b883a 	mov	r5,r6
    9c94:	100d883a 	mov	r6,r2
    9c98:	180f883a 	mov	r7,r3
    9c9c:	000a8040 	call	a804 <__adddf3>
    9ca0:	1009883a 	mov	r4,r2
    9ca4:	180b883a 	mov	r5,r3
    9ca8:	2005883a 	mov	r2,r4
    9cac:	2807883a 	mov	r3,r5
    9cb0:	0009883a 	mov	r4,zero
    9cb4:	014ffc34 	movhi	r5,16368
    9cb8:	100d883a 	mov	r6,r2
    9cbc:	180f883a 	mov	r7,r3
    9cc0:	000ab9c0 	call	ab9c <__divdf3>
    9cc4:	1009883a 	mov	r4,r2
    9cc8:	180b883a 	mov	r5,r3
    9ccc:	2005883a 	mov	r2,r4
    9cd0:	2807883a 	mov	r3,r5
    9cd4:	01000074 	movhi	r4,1
    9cd8:	213b4d04 	addi	r4,r4,-4812
    9cdc:	20800615 	stw	r2,24(r4)
    9ce0:	20c00715 	stw	r3,28(r4)

	/* corrGain\input = corr; */
	tilt_V[0] = tilt_V[8];
    9ce4:	01000074 	movhi	r4,1
    9ce8:	213b4d04 	addi	r4,r4,-4812
    9cec:	20801017 	ldw	r2,64(r4)
    9cf0:	20c01117 	ldw	r3,68(r4)
    9cf4:	01000074 	movhi	r4,1
    9cf8:	213b4d04 	addi	r4,r4,-4812
    9cfc:	20800015 	stw	r2,0(r4)
    9d00:	20c00115 	stw	r3,4(r4)

	/* PlusMinus2\plus1 = in; */
	tilt_V[5] = tilt_V[9];
    9d04:	01000074 	movhi	r4,1
    9d08:	213b4d04 	addi	r4,r4,-4812
    9d0c:	20801217 	ldw	r2,72(r4)
    9d10:	20c01317 	ldw	r3,76(r4)
    9d14:	01000074 	movhi	r4,1
    9d18:	213b4d04 	addi	r4,r4,-4812
    9d1c:	20800a15 	stw	r2,40(r4)
    9d20:	20c00b15 	stw	r3,44(r4)

	/* PlusMinus2\minus1 = position; */
	tilt_V[6] = tilt_V[10];
    9d24:	01000074 	movhi	r4,1
    9d28:	213b4d04 	addi	r4,r4,-4812
    9d2c:	20801417 	ldw	r2,80(r4)
    9d30:	20c01517 	ldw	r3,84(r4)
    9d34:	01000074 	movhi	r4,1
    9d38:	213b4d04 	addi	r4,r4,-4812
    9d3c:	20800c15 	stw	r2,48(r4)
    9d40:	20c00d15 	stw	r3,52(r4)

	/* corrGain\output = corrGain\K * corrGain\input; */
	tilt_V[1] = tilt_P[0] * tilt_V[0];
    9d44:	00800074 	movhi	r2,1
    9d48:	10bb6504 	addi	r2,r2,-4716
    9d4c:	11400017 	ldw	r5,0(r2)
    9d50:	11800117 	ldw	r6,4(r2)
    9d54:	01000074 	movhi	r4,1
    9d58:	213b4d04 	addi	r4,r4,-4812
    9d5c:	20800017 	ldw	r2,0(r4)
    9d60:	20c00117 	ldw	r3,4(r4)
    9d64:	2809883a 	mov	r4,r5
    9d68:	300b883a 	mov	r5,r6
    9d6c:	100d883a 	mov	r6,r2
    9d70:	180f883a 	mov	r7,r3
    9d74:	000a8b80 	call	a8b8 <__muldf3>
    9d78:	1009883a 	mov	r4,r2
    9d7c:	180b883a 	mov	r5,r3
    9d80:	2005883a 	mov	r2,r4
    9d84:	2807883a 	mov	r3,r5
    9d88:	01000074 	movhi	r4,1
    9d8c:	213b4d04 	addi	r4,r4,-4812
    9d90:	20800215 	stw	r2,8(r4)
    9d94:	20c00315 	stw	r3,12(r4)

	/* PID1\error = PlusMinus2\plus1 - PlusMinus2\minus1; */
	tilt_R[1] = tilt_V[5] - tilt_V[6];
    9d98:	00800074 	movhi	r2,1
    9d9c:	10bb4d04 	addi	r2,r2,-4812
    9da0:	11400a17 	ldw	r5,40(r2)
    9da4:	11800b17 	ldw	r6,44(r2)
    9da8:	01000074 	movhi	r4,1
    9dac:	213b4d04 	addi	r4,r4,-4812
    9db0:	20800c17 	ldw	r2,48(r4)
    9db4:	20c00d17 	ldw	r3,52(r4)
    9db8:	2809883a 	mov	r4,r5
    9dbc:	300b883a 	mov	r5,r6
    9dc0:	100d883a 	mov	r6,r2
    9dc4:	180f883a 	mov	r7,r3
    9dc8:	000a8580 	call	a858 <__subdf3>
    9dcc:	1009883a 	mov	r4,r2
    9dd0:	180b883a 	mov	r5,r3
    9dd4:	2005883a 	mov	r2,r4
    9dd8:	2807883a 	mov	r3,r5
    9ddc:	01000074 	movhi	r4,1
    9de0:	213b4704 	addi	r4,r4,-4836
    9de4:	20800215 	stw	r2,8(r4)
    9de8:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	tilt_R[0] = tilt_V[3] * (((tilt_P[2] * tilt_s[0]) * tilt_P[3] + (tilt_P[2] * tilt_P[1]) * (tilt_R[1] - tilt_s[1])) + (tilt_step_size * tilt_P[1]) * tilt_R[1]);
    9dec:	00800074 	movhi	r2,1
    9df0:	10bb4d04 	addi	r2,r2,-4812
    9df4:	14000617 	ldw	r16,24(r2)
    9df8:	14400717 	ldw	r17,28(r2)
    9dfc:	00800074 	movhi	r2,1
    9e00:	10bb6504 	addi	r2,r2,-4716
    9e04:	11400417 	ldw	r5,16(r2)
    9e08:	11800517 	ldw	r6,20(r2)
    9e0c:	01000074 	movhi	r4,1
    9e10:	213b7304 	addi	r4,r4,-4660
    9e14:	20800017 	ldw	r2,0(r4)
    9e18:	20c00117 	ldw	r3,4(r4)
    9e1c:	2809883a 	mov	r4,r5
    9e20:	300b883a 	mov	r5,r6
    9e24:	100d883a 	mov	r6,r2
    9e28:	180f883a 	mov	r7,r3
    9e2c:	000a8b80 	call	a8b8 <__muldf3>
    9e30:	100f883a 	mov	r7,r2
    9e34:	1811883a 	mov	r8,r3
    9e38:	380b883a 	mov	r5,r7
    9e3c:	400d883a 	mov	r6,r8
    9e40:	01000074 	movhi	r4,1
    9e44:	213b6504 	addi	r4,r4,-4716
    9e48:	20800617 	ldw	r2,24(r4)
    9e4c:	20c00717 	ldw	r3,28(r4)
    9e50:	2809883a 	mov	r4,r5
    9e54:	300b883a 	mov	r5,r6
    9e58:	100d883a 	mov	r6,r2
    9e5c:	180f883a 	mov	r7,r3
    9e60:	000a8b80 	call	a8b8 <__muldf3>
    9e64:	1009883a 	mov	r4,r2
    9e68:	180b883a 	mov	r5,r3
    9e6c:	2025883a 	mov	r18,r4
    9e70:	2827883a 	mov	r19,r5
    9e74:	00800074 	movhi	r2,1
    9e78:	10bb6504 	addi	r2,r2,-4716
    9e7c:	11400417 	ldw	r5,16(r2)
    9e80:	11800517 	ldw	r6,20(r2)
    9e84:	01000074 	movhi	r4,1
    9e88:	213b6504 	addi	r4,r4,-4716
    9e8c:	20800217 	ldw	r2,8(r4)
    9e90:	20c00317 	ldw	r3,12(r4)
    9e94:	2809883a 	mov	r4,r5
    9e98:	300b883a 	mov	r5,r6
    9e9c:	100d883a 	mov	r6,r2
    9ea0:	180f883a 	mov	r7,r3
    9ea4:	000a8b80 	call	a8b8 <__muldf3>
    9ea8:	1009883a 	mov	r4,r2
    9eac:	180b883a 	mov	r5,r3
    9eb0:	2029883a 	mov	r20,r4
    9eb4:	282b883a 	mov	r21,r5
    9eb8:	00800074 	movhi	r2,1
    9ebc:	10bb4704 	addi	r2,r2,-4836
    9ec0:	11400217 	ldw	r5,8(r2)
    9ec4:	11800317 	ldw	r6,12(r2)
    9ec8:	01000074 	movhi	r4,1
    9ecc:	213b7304 	addi	r4,r4,-4660
    9ed0:	20800217 	ldw	r2,8(r4)
    9ed4:	20c00317 	ldw	r3,12(r4)
    9ed8:	2809883a 	mov	r4,r5
    9edc:	300b883a 	mov	r5,r6
    9ee0:	100d883a 	mov	r6,r2
    9ee4:	180f883a 	mov	r7,r3
    9ee8:	000a8580 	call	a858 <__subdf3>
    9eec:	1009883a 	mov	r4,r2
    9ef0:	180b883a 	mov	r5,r3
    9ef4:	2005883a 	mov	r2,r4
    9ef8:	2807883a 	mov	r3,r5
    9efc:	a009883a 	mov	r4,r20
    9f00:	a80b883a 	mov	r5,r21
    9f04:	100d883a 	mov	r6,r2
    9f08:	180f883a 	mov	r7,r3
    9f0c:	000a8b80 	call	a8b8 <__muldf3>
    9f10:	1009883a 	mov	r4,r2
    9f14:	180b883a 	mov	r5,r3
    9f18:	2005883a 	mov	r2,r4
    9f1c:	2807883a 	mov	r3,r5
    9f20:	9009883a 	mov	r4,r18
    9f24:	980b883a 	mov	r5,r19
    9f28:	100d883a 	mov	r6,r2
    9f2c:	180f883a 	mov	r7,r3
    9f30:	000a8040 	call	a804 <__adddf3>
    9f34:	1009883a 	mov	r4,r2
    9f38:	180b883a 	mov	r5,r3
    9f3c:	2025883a 	mov	r18,r4
    9f40:	2827883a 	mov	r19,r5
    9f44:	00800074 	movhi	r2,1
    9f48:	10bb6504 	addi	r2,r2,-4716
    9f4c:	11400217 	ldw	r5,8(r2)
    9f50:	11800317 	ldw	r6,12(r2)
    9f54:	d0a00a17 	ldw	r2,-32728(gp)
    9f58:	01000074 	movhi	r4,1
    9f5c:	21381704 	addi	r4,r4,-8100
    9f60:	20c00017 	ldw	r3,0(r4)
    9f64:	2809883a 	mov	r4,r5
    9f68:	300b883a 	mov	r5,r6
    9f6c:	100d883a 	mov	r6,r2
    9f70:	180f883a 	mov	r7,r3
    9f74:	000a8b80 	call	a8b8 <__muldf3>
    9f78:	100f883a 	mov	r7,r2
    9f7c:	1811883a 	mov	r8,r3
    9f80:	380b883a 	mov	r5,r7
    9f84:	400d883a 	mov	r6,r8
    9f88:	01000074 	movhi	r4,1
    9f8c:	213b4704 	addi	r4,r4,-4836
    9f90:	20800217 	ldw	r2,8(r4)
    9f94:	20c00317 	ldw	r3,12(r4)
    9f98:	2809883a 	mov	r4,r5
    9f9c:	300b883a 	mov	r5,r6
    9fa0:	100d883a 	mov	r6,r2
    9fa4:	180f883a 	mov	r7,r3
    9fa8:	000a8b80 	call	a8b8 <__muldf3>
    9fac:	1009883a 	mov	r4,r2
    9fb0:	180b883a 	mov	r5,r3
    9fb4:	2005883a 	mov	r2,r4
    9fb8:	2807883a 	mov	r3,r5
    9fbc:	9009883a 	mov	r4,r18
    9fc0:	980b883a 	mov	r5,r19
    9fc4:	100d883a 	mov	r6,r2
    9fc8:	180f883a 	mov	r7,r3
    9fcc:	000a8040 	call	a804 <__adddf3>
    9fd0:	1009883a 	mov	r4,r2
    9fd4:	180b883a 	mov	r5,r3
    9fd8:	2005883a 	mov	r2,r4
    9fdc:	2807883a 	mov	r3,r5
    9fe0:	8009883a 	mov	r4,r16
    9fe4:	880b883a 	mov	r5,r17
    9fe8:	100d883a 	mov	r6,r2
    9fec:	180f883a 	mov	r7,r3
    9ff0:	000a8b80 	call	a8b8 <__muldf3>
    9ff4:	1009883a 	mov	r4,r2
    9ff8:	180b883a 	mov	r5,r3
    9ffc:	2005883a 	mov	r2,r4
    a000:	2807883a 	mov	r3,r5
    a004:	01000074 	movhi	r4,1
    a008:	213b4704 	addi	r4,r4,-4836
    a00c:	20800015 	stw	r2,0(r4)
    a010:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	tilt_R[2] = tilt_s[2] + (tilt_step_size * tilt_R[0]) / tilt_P[4];
    a014:	00800074 	movhi	r2,1
    a018:	10bb7304 	addi	r2,r2,-4660
    a01c:	14000417 	ldw	r16,16(r2)
    a020:	14400517 	ldw	r17,20(r2)
    a024:	00800074 	movhi	r2,1
    a028:	10bb4704 	addi	r2,r2,-4836
    a02c:	11400017 	ldw	r5,0(r2)
    a030:	11800117 	ldw	r6,4(r2)
    a034:	d0a00a17 	ldw	r2,-32728(gp)
    a038:	01000074 	movhi	r4,1
    a03c:	21381704 	addi	r4,r4,-8100
    a040:	20c00017 	ldw	r3,0(r4)
    a044:	2809883a 	mov	r4,r5
    a048:	300b883a 	mov	r5,r6
    a04c:	100d883a 	mov	r6,r2
    a050:	180f883a 	mov	r7,r3
    a054:	000a8b80 	call	a8b8 <__muldf3>
    a058:	100f883a 	mov	r7,r2
    a05c:	1811883a 	mov	r8,r3
    a060:	380b883a 	mov	r5,r7
    a064:	400d883a 	mov	r6,r8
    a068:	01000074 	movhi	r4,1
    a06c:	213b6504 	addi	r4,r4,-4716
    a070:	20800817 	ldw	r2,32(r4)
    a074:	20c00917 	ldw	r3,36(r4)
    a078:	2809883a 	mov	r4,r5
    a07c:	300b883a 	mov	r5,r6
    a080:	100d883a 	mov	r6,r2
    a084:	180f883a 	mov	r7,r3
    a088:	000ab9c0 	call	ab9c <__divdf3>
    a08c:	1009883a 	mov	r4,r2
    a090:	180b883a 	mov	r5,r3
    a094:	2005883a 	mov	r2,r4
    a098:	2807883a 	mov	r3,r5
    a09c:	8009883a 	mov	r4,r16
    a0a0:	880b883a 	mov	r5,r17
    a0a4:	100d883a 	mov	r6,r2
    a0a8:	180f883a 	mov	r7,r3
    a0ac:	000a8040 	call	a804 <__adddf3>
    a0b0:	1009883a 	mov	r4,r2
    a0b4:	180b883a 	mov	r5,r3
    a0b8:	2005883a 	mov	r2,r4
    a0bc:	2807883a 	mov	r3,r5
    a0c0:	01000074 	movhi	r4,1
    a0c4:	213b4704 	addi	r4,r4,-4836
    a0c8:	20800415 	stw	r2,16(r4)
    a0cc:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	tilt_V[2] = tilt_R[2] + tilt_R[0];
    a0d0:	00800074 	movhi	r2,1
    a0d4:	10bb4704 	addi	r2,r2,-4836
    a0d8:	11400417 	ldw	r5,16(r2)
    a0dc:	11800517 	ldw	r6,20(r2)
    a0e0:	01000074 	movhi	r4,1
    a0e4:	213b4704 	addi	r4,r4,-4836
    a0e8:	20800017 	ldw	r2,0(r4)
    a0ec:	20c00117 	ldw	r3,4(r4)
    a0f0:	2809883a 	mov	r4,r5
    a0f4:	300b883a 	mov	r5,r6
    a0f8:	100d883a 	mov	r6,r2
    a0fc:	180f883a 	mov	r7,r3
    a100:	000a8040 	call	a804 <__adddf3>
    a104:	1009883a 	mov	r4,r2
    a108:	180b883a 	mov	r5,r3
    a10c:	2005883a 	mov	r2,r4
    a110:	2807883a 	mov	r3,r5
    a114:	01000074 	movhi	r4,1
    a118:	213b4d04 	addi	r4,r4,-4812
    a11c:	20800415 	stw	r2,16(r4)
    a120:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	tilt_V[4] = tilt_V[1] + tilt_V[2];
    a124:	00800074 	movhi	r2,1
    a128:	10bb4d04 	addi	r2,r2,-4812
    a12c:	11400217 	ldw	r5,8(r2)
    a130:	11800317 	ldw	r6,12(r2)
    a134:	01000074 	movhi	r4,1
    a138:	213b4d04 	addi	r4,r4,-4812
    a13c:	20800417 	ldw	r2,16(r4)
    a140:	20c00517 	ldw	r3,20(r4)
    a144:	2809883a 	mov	r4,r5
    a148:	300b883a 	mov	r5,r6
    a14c:	100d883a 	mov	r6,r2
    a150:	180f883a 	mov	r7,r3
    a154:	000a8040 	call	a804 <__adddf3>
    a158:	1009883a 	mov	r4,r2
    a15c:	180b883a 	mov	r5,r3
    a160:	2005883a 	mov	r2,r4
    a164:	2807883a 	mov	r3,r5
    a168:	01000074 	movhi	r4,1
    a16c:	213b4d04 	addi	r4,r4,-4812
    a170:	20800815 	stw	r2,32(r4)
    a174:	20c00915 	stw	r3,36(r4)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	tilt_V[7] = ((tilt_V[4] < tilt_P[5]) ? 
    a178:	00800074 	movhi	r2,1
    a17c:	10bb4d04 	addi	r2,r2,-4812
    a180:	11400817 	ldw	r5,32(r2)
    a184:	11800917 	ldw	r6,36(r2)
    a188:	01000074 	movhi	r4,1
    a18c:	213b6504 	addi	r4,r4,-4716
    a190:	20800a17 	ldw	r2,40(r4)
    a194:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		tilt_P[5]
	:
    a198:	2809883a 	mov	r4,r5
    a19c:	300b883a 	mov	r5,r6
    a1a0:	100d883a 	mov	r6,r2
    a1a4:	180f883a 	mov	r7,r3
    a1a8:	000ae180 	call	ae18 <__ltdf2>
    a1ac:	1000050e 	bge	r2,zero,a1c4 <tilt_CalculateDynamic+0x5b4>
    a1b0:	01000074 	movhi	r4,1
    a1b4:	213b6504 	addi	r4,r4,-4716
    a1b8:	20800a17 	ldw	r2,40(r4)
    a1bc:	20c00b17 	ldw	r3,44(r4)
    a1c0:	00001906 	br	a228 <tilt_CalculateDynamic+0x618>
		/* (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) */
		((tilt_V[4] > tilt_P[6]) ? 
    a1c4:	00800074 	movhi	r2,1
    a1c8:	10bb4d04 	addi	r2,r2,-4812
    a1cc:	11400817 	ldw	r5,32(r2)
    a1d0:	11800917 	ldw	r6,36(r2)
    a1d4:	01000074 	movhi	r4,1
    a1d8:	213b6504 	addi	r4,r4,-4716
    a1dc:	20800c17 	ldw	r2,48(r4)
    a1e0:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			tilt_P[6]
		:
    a1e4:	2809883a 	mov	r4,r5
    a1e8:	300b883a 	mov	r5,r6
    a1ec:	100d883a 	mov	r6,r2
    a1f0:	180f883a 	mov	r7,r3
    a1f4:	000ad500 	call	ad50 <__gtdf2>
    a1f8:	0080050e 	bge	zero,r2,a210 <tilt_CalculateDynamic+0x600>
    a1fc:	00800074 	movhi	r2,1
    a200:	10bb6504 	addi	r2,r2,-4716
    a204:	11000c17 	ldw	r4,48(r2)
    a208:	11400d17 	ldw	r5,52(r2)
    a20c:	00000406 	br	a220 <tilt_CalculateDynamic+0x610>
    a210:	00800074 	movhi	r2,1
    a214:	10bb4d04 	addi	r2,r2,-4812
    a218:	11000817 	ldw	r4,32(r2)
    a21c:	11400917 	ldw	r5,36(r2)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	tilt_V[7] = ((tilt_V[4] < tilt_P[5]) ? 
		/* SignalLimiter2\minimum */
		tilt_P[5]
	:
    a220:	2005883a 	mov	r2,r4
    a224:	2807883a 	mov	r3,r5

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	tilt_V[4] = tilt_V[1] + tilt_V[2];

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	tilt_V[7] = ((tilt_V[4] < tilt_P[5]) ? 
    a228:	01000074 	movhi	r4,1
    a22c:	213b4d04 	addi	r4,r4,-4812
    a230:	20800e15 	stw	r2,56(r4)
    a234:	20c00f15 	stw	r3,60(r4)
		)
	);


	/* increment the step counter */
	tilt_steps++;
    a238:	d0a0f817 	ldw	r2,-31776(gp)
    a23c:	10800044 	addi	r2,r2,1
    a240:	d0a0f815 	stw	r2,-31776(gp)
}
    a244:	e037883a 	mov	sp,fp
    a248:	dfc00717 	ldw	ra,28(sp)
    a24c:	df000617 	ldw	fp,24(sp)
    a250:	dd400517 	ldw	r21,20(sp)
    a254:	dd000417 	ldw	r20,16(sp)
    a258:	dcc00317 	ldw	r19,12(sp)
    a25c:	dc800217 	ldw	r18,8(sp)
    a260:	dc400117 	ldw	r17,4(sp)
    a264:	dc000017 	ldw	r16,0(sp)
    a268:	dec00804 	addi	sp,sp,32
    a26c:	f800283a 	ret

0000a270 <tilt_CalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void tilt_CalculateOutput (void)
{
    a270:	deffff04 	addi	sp,sp,-4
    a274:	df000015 	stw	fp,0(sp)
    a278:	d839883a 	mov	fp,sp
	/* out = SignalLimiter2\output; */
	tilt_V[11] = tilt_V[7];
    a27c:	01000074 	movhi	r4,1
    a280:	213b4d04 	addi	r4,r4,-4812
    a284:	20800e17 	ldw	r2,56(r4)
    a288:	20c00f17 	ldw	r3,60(r4)
    a28c:	01000074 	movhi	r4,1
    a290:	213b4d04 	addi	r4,r4,-4812
    a294:	20801615 	stw	r2,88(r4)
    a298:	20c01715 	stw	r3,92(r4)

}
    a29c:	e037883a 	mov	sp,fp
    a2a0:	df000017 	ldw	fp,0(sp)
    a2a4:	dec00104 	addi	sp,sp,4
    a2a8:	f800283a 	ret

0000a2ac <tilt_CopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void tilt_CopyInputsToVariables (double *u)
{
    a2ac:	defffe04 	addi	sp,sp,-8
    a2b0:	df000115 	stw	fp,4(sp)
    a2b4:	df000104 	addi	fp,sp,4
    a2b8:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	tilt_V[8] = u[0];		/* corr */
    a2bc:	e13fff17 	ldw	r4,-4(fp)
    a2c0:	20800017 	ldw	r2,0(r4)
    a2c4:	20c00117 	ldw	r3,4(r4)
    a2c8:	01000074 	movhi	r4,1
    a2cc:	213b4d04 	addi	r4,r4,-4812
    a2d0:	20801015 	stw	r2,64(r4)
    a2d4:	20c01115 	stw	r3,68(r4)
	tilt_V[9] = u[1];		/* in */
    a2d8:	e13fff17 	ldw	r4,-4(fp)
    a2dc:	20800217 	ldw	r2,8(r4)
    a2e0:	20c00317 	ldw	r3,12(r4)
    a2e4:	01000074 	movhi	r4,1
    a2e8:	213b4d04 	addi	r4,r4,-4812
    a2ec:	20801215 	stw	r2,72(r4)
    a2f0:	20c01315 	stw	r3,76(r4)
	tilt_V[10] = u[2];		/* position */
    a2f4:	e13fff17 	ldw	r4,-4(fp)
    a2f8:	20800417 	ldw	r2,16(r4)
    a2fc:	20c00517 	ldw	r3,20(r4)
    a300:	01000074 	movhi	r4,1
    a304:	213b4d04 	addi	r4,r4,-4812
    a308:	20801415 	stw	r2,80(r4)
    a30c:	20c01515 	stw	r3,84(r4)

}
    a310:	e037883a 	mov	sp,fp
    a314:	df000017 	ldw	fp,0(sp)
    a318:	dec00104 	addi	sp,sp,4
    a31c:	f800283a 	ret

0000a320 <tilt_CopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void tilt_CopyVariablesToOutputs (double *y)
{
    a320:	defffe04 	addi	sp,sp,-8
    a324:	df000115 	stw	fp,4(sp)
    a328:	df000104 	addi	fp,sp,4
    a32c:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	tilt_V[11];		/* out */
    a330:	01000074 	movhi	r4,1
    a334:	213b4d04 	addi	r4,r4,-4812
    a338:	20801617 	ldw	r2,88(r4)
    a33c:	20c01717 	ldw	r3,92(r4)
    a340:	e13fff17 	ldw	r4,-4(fp)
    a344:	20800015 	stw	r2,0(r4)
    a348:	20c00115 	stw	r3,4(r4)

}
    a34c:	e037883a 	mov	sp,fp
    a350:	df000017 	ldw	fp,0(sp)
    a354:	dec00104 	addi	sp,sp,4
    a358:	f800283a 	ret

0000a35c <tilt_InitializeSubmodel>:

/* The initialization function for submodel */
void tilt_InitializeSubmodel (double *u, double *y, double t)
{
    a35c:	defffa04 	addi	sp,sp,-24
    a360:	dfc00515 	stw	ra,20(sp)
    a364:	df000415 	stw	fp,16(sp)
    a368:	df000404 	addi	fp,sp,16
    a36c:	e13ffc15 	stw	r4,-16(fp)
    a370:	e17ffd15 	stw	r5,-12(fp)
    a374:	e1bffe15 	stw	r6,-8(fp)
    a378:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	tilt_initialize = 1;
    a37c:	00800074 	movhi	r2,1
    a380:	10b81804 	addi	r2,r2,-8096
    a384:	00c00044 	movi	r3,1
    a388:	10c00005 	stb	r3,0(r2)
	tilt_steps = 0;
    a38c:	00800074 	movhi	r2,1
    a390:	10b90404 	addi	r2,r2,-7152
    a394:	10000015 	stw	zero,0(r2)
	tilt_ModelInitialize ();
    a398:	0009bdc0 	call	9bdc <tilt_ModelInitialize>
	tilt_DiscreteInitialize ();
    a39c:	00098ec0 	call	98ec <tilt_DiscreteInitialize>

	/* Copy the inputs */
	tilt_time = t;
    a3a0:	00800074 	movhi	r2,1
    a3a4:	10b90204 	addi	r2,r2,-7160
    a3a8:	e0fffe17 	ldw	r3,-8(fp)
    a3ac:	10c00015 	stw	r3,0(r2)
    a3b0:	e0ffff17 	ldw	r3,-4(fp)
    a3b4:	10c00115 	stw	r3,4(r2)
	tilt_CopyInputsToVariables (u);
    a3b8:	e13ffc17 	ldw	r4,-16(fp)
    a3bc:	000a2ac0 	call	a2ac <tilt_CopyInputsToVariables>

	/* Calculate the model for the first time */
	tilt_CalculateDynamic ();
    a3c0:	0009c100 	call	9c10 <tilt_CalculateDynamic>
	tilt_CalculateOutput ();
    a3c4:	000a2700 	call	a270 <tilt_CalculateOutput>

	/* Set the outputs */
	tilt_CopyVariablesToOutputs (y);
    a3c8:	e13ffd17 	ldw	r4,-12(fp)
    a3cc:	000a3200 	call	a320 <tilt_CopyVariablesToOutputs>

	/* End of initialization phase */
	tilt_initialize = 0;
    a3d0:	00800074 	movhi	r2,1
    a3d4:	10b81804 	addi	r2,r2,-8096
    a3d8:	10000005 	stb	zero,0(r2)
}
    a3dc:	e037883a 	mov	sp,fp
    a3e0:	dfc00117 	ldw	ra,4(sp)
    a3e4:	df000017 	ldw	fp,0(sp)
    a3e8:	dec00204 	addi	sp,sp,8
    a3ec:	f800283a 	ret

0000a3f0 <tilt_CalculateSubmodel>:

/* The function that calculates the submodel */
void tilt_CalculateSubmodel (double *u, double *y, double t)
{
    a3f0:	defffa04 	addi	sp,sp,-24
    a3f4:	dfc00515 	stw	ra,20(sp)
    a3f8:	df000415 	stw	fp,16(sp)
    a3fc:	df000404 	addi	fp,sp,16
    a400:	e13ffc15 	stw	r4,-16(fp)
    a404:	e17ffd15 	stw	r5,-12(fp)
    a408:	e1bffe15 	stw	r6,-8(fp)
    a40c:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	tilt_time = t;
    a410:	00800074 	movhi	r2,1
    a414:	10b90204 	addi	r2,r2,-7160
    a418:	e0fffe17 	ldw	r3,-8(fp)
    a41c:	10c00015 	stw	r3,0(r2)
    a420:	e0ffff17 	ldw	r3,-4(fp)
    a424:	10c00115 	stw	r3,4(r2)
	tilt_CopyInputsToVariables (u);
    a428:	e13ffc17 	ldw	r4,-16(fp)
    a42c:	000a2ac0 	call	a2ac <tilt_CopyInputsToVariables>

	/* Calculate the model */
	tilt_DiscreteStep ();
    a430:	00099180 	call	9918 <tilt_DiscreteStep>
	tilt_CalculateOutput ();
    a434:	000a2700 	call	a270 <tilt_CalculateOutput>

	/* Copy the outputs */
	tilt_CopyVariablesToOutputs (y);
    a438:	e13ffd17 	ldw	r4,-12(fp)
    a43c:	000a3200 	call	a320 <tilt_CopyVariablesToOutputs>
}
    a440:	e037883a 	mov	sp,fp
    a444:	dfc00117 	ldw	ra,4(sp)
    a448:	df000017 	ldw	fp,0(sp)
    a44c:	dec00204 	addi	sp,sp,8
    a450:	f800283a 	ret

0000a454 <tilt_TerminateSubmodel>:

/* The termination function for submodel */
void tilt_TerminateSubmodel (double *u, double *y, double t)
{
    a454:	defffa04 	addi	sp,sp,-24
    a458:	dfc00515 	stw	ra,20(sp)
    a45c:	df000415 	stw	fp,16(sp)
    a460:	df000404 	addi	fp,sp,16
    a464:	e13ffc15 	stw	r4,-16(fp)
    a468:	e17ffd15 	stw	r5,-12(fp)
    a46c:	e1bffe15 	stw	r6,-8(fp)
    a470:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	tilt_time = t;
    a474:	00800074 	movhi	r2,1
    a478:	10b90204 	addi	r2,r2,-7160
    a47c:	e0fffe17 	ldw	r3,-8(fp)
    a480:	10c00015 	stw	r3,0(r2)
    a484:	e0ffff17 	ldw	r3,-4(fp)
    a488:	10c00115 	stw	r3,4(r2)
	tilt_CopyInputsToVariables (u);
    a48c:	e13ffc17 	ldw	r4,-16(fp)
    a490:	000a2ac0 	call	a2ac <tilt_CopyInputsToVariables>

	/* Set the outputs */
	tilt_CopyVariablesToOutputs (y);
    a494:	e13ffd17 	ldw	r4,-12(fp)
    a498:	000a3200 	call	a320 <tilt_CopyVariablesToOutputs>
}
    a49c:	e037883a 	mov	sp,fp
    a4a0:	dfc00117 	ldw	ra,4(sp)
    a4a4:	df000017 	ldw	fp,0(sp)
    a4a8:	dec00204 	addi	sp,sp,8
    a4ac:	f800283a 	ret

0000a4b0 <_fpadd_parts>:
    a4b0:	2005883a 	mov	r2,r4
    a4b4:	21000017 	ldw	r4,0(r4)
    a4b8:	01c00044 	movi	r7,1
    a4bc:	3900622e 	bgeu	r7,r4,a648 <_fpadd_parts+0x198>
    a4c0:	28c00017 	ldw	r3,0(r5)
    a4c4:	38c05f2e 	bgeu	r7,r3,a644 <_fpadd_parts+0x194>
    a4c8:	01c00104 	movi	r7,4
    a4cc:	21c0c626 	beq	r4,r7,a7e8 <_fpadd_parts+0x338>
    a4d0:	19c05c26 	beq	r3,r7,a644 <_fpadd_parts+0x194>
    a4d4:	01c00084 	movi	r7,2
    a4d8:	19c06b26 	beq	r3,r7,a688 <_fpadd_parts+0x1d8>
    a4dc:	21c05926 	beq	r4,r7,a644 <_fpadd_parts+0x194>
    a4e0:	11c00217 	ldw	r7,8(r2)
    a4e4:	2ac00217 	ldw	r11,8(r5)
    a4e8:	13000317 	ldw	r12,12(r2)
    a4ec:	13400417 	ldw	r13,16(r2)
    a4f0:	3ac9c83a 	sub	r4,r7,r11
    a4f4:	2a000317 	ldw	r8,12(r5)
    a4f8:	2a400417 	ldw	r9,16(r5)
    a4fc:	2015883a 	mov	r10,r4
    a500:	20007516 	blt	r4,zero,a6d8 <_fpadd_parts+0x228>
    a504:	00c00fc4 	movi	r3,63
    a508:	1a805016 	blt	r3,r10,a64c <_fpadd_parts+0x19c>
    a50c:	0100870e 	bge	zero,r4,a72c <_fpadd_parts+0x27c>
    a510:	50fff804 	addi	r3,r10,-32
    a514:	18009916 	blt	r3,zero,a77c <_fpadd_parts+0x2cc>
    a518:	48d6d83a 	srl	r11,r9,r3
    a51c:	001d883a 	mov	r14,zero
    a520:	18009e16 	blt	r3,zero,a79c <_fpadd_parts+0x2ec>
    a524:	01000044 	movi	r4,1
    a528:	20c6983a 	sll	r3,r4,r3
    a52c:	0015883a 	mov	r10,zero
    a530:	513fffc4 	addi	r4,r10,-1
    a534:	2295403a 	cmpgeu	r10,r4,r10
    a538:	1a87c83a 	sub	r3,r3,r10
    a53c:	1a52703a 	and	r9,r3,r9
    a540:	2210703a 	and	r8,r4,r8
    a544:	4250b03a 	or	r8,r8,r9
    a548:	4010c03a 	cmpne	r8,r8,zero
    a54c:	42d0b03a 	or	r8,r8,r11
    a550:	7013883a 	mov	r9,r14
    a554:	11000117 	ldw	r4,4(r2)
    a558:	28800117 	ldw	r2,4(r5)
    a55c:	20804126 	beq	r4,r2,a664 <_fpadd_parts+0x1b4>
    a560:	20006326 	beq	r4,zero,a6f0 <_fpadd_parts+0x240>
    a564:	4305c83a 	sub	r2,r8,r12
    a568:	4091803a 	cmpltu	r8,r8,r2
    a56c:	4b47c83a 	sub	r3,r9,r13
    a570:	1a07c83a 	sub	r3,r3,r8
    a574:	18006316 	blt	r3,zero,a704 <_fpadd_parts+0x254>
    a578:	30000115 	stw	zero,4(r6)
    a57c:	31c00215 	stw	r7,8(r6)
    a580:	30800315 	stw	r2,12(r6)
    a584:	30c00415 	stw	r3,16(r6)
    a588:	11ffffc4 	addi	r7,r2,-1
    a58c:	388b403a 	cmpgeu	r5,r7,r2
    a590:	194bc83a 	sub	r5,r3,r5
    a594:	01040034 	movhi	r4,4096
    a598:	213fffc4 	addi	r4,r4,-1
    a59c:	21401736 	bltu	r4,r5,a5fc <_fpadd_parts+0x14c>
    a5a0:	29008226 	beq	r5,r4,a7ac <_fpadd_parts+0x2fc>
    a5a4:	31400217 	ldw	r5,8(r6)
    a5a8:	02840034 	movhi	r10,4096
    a5ac:	52bfffc4 	addi	r10,r10,-1
    a5b0:	033fff84 	movi	r12,-2
    a5b4:	297fffc4 	addi	r5,r5,-1
    a5b8:	00000106 	br	a5c0 <_fpadd_parts+0x110>
    a5bc:	3a804a26 	beq	r7,r10,a6e8 <_fpadd_parts+0x238>
    a5c0:	1089883a 	add	r4,r2,r2
    a5c4:	2091803a 	cmpltu	r8,r4,r2
    a5c8:	18c7883a 	add	r3,r3,r3
    a5cc:	227fffc4 	addi	r9,r4,-1
    a5d0:	40d1883a 	add	r8,r8,r3
    a5d4:	490f403a 	cmpgeu	r7,r9,r4
    a5d8:	41cfc83a 	sub	r7,r8,r7
    a5dc:	2817883a 	mov	r11,r5
    a5e0:	2005883a 	mov	r2,r4
    a5e4:	4007883a 	mov	r3,r8
    a5e8:	297fffc4 	addi	r5,r5,-1
    a5ec:	51fff32e 	bgeu	r10,r7,a5bc <_fpadd_parts+0x10c>
    a5f0:	31000315 	stw	r4,12(r6)
    a5f4:	32000415 	stw	r8,16(r6)
    a5f8:	32c00215 	stw	r11,8(r6)
    a5fc:	010000c4 	movi	r4,3
    a600:	31000015 	stw	r4,0(r6)
    a604:	01080034 	movhi	r4,8192
    a608:	213fffc4 	addi	r4,r4,-1
    a60c:	20c00b2e 	bgeu	r4,r3,a63c <_fpadd_parts+0x18c>
    a610:	180e97fa 	slli	r7,r3,31
    a614:	1008d07a 	srli	r4,r2,1
    a618:	31400217 	ldw	r5,8(r6)
    a61c:	1806d07a 	srli	r3,r3,1
    a620:	1080004c 	andi	r2,r2,1
    a624:	3908b03a 	or	r4,r7,r4
    a628:	1108b03a 	or	r4,r2,r4
    a62c:	29400044 	addi	r5,r5,1
    a630:	31000315 	stw	r4,12(r6)
    a634:	30c00415 	stw	r3,16(r6)
    a638:	31400215 	stw	r5,8(r6)
    a63c:	3005883a 	mov	r2,r6
    a640:	f800283a 	ret
    a644:	2805883a 	mov	r2,r5
    a648:	f800283a 	ret
    a64c:	59c01e0e 	bge	r11,r7,a6c8 <_fpadd_parts+0x218>
    a650:	11000117 	ldw	r4,4(r2)
    a654:	28800117 	ldw	r2,4(r5)
    a658:	0011883a 	mov	r8,zero
    a65c:	0013883a 	mov	r9,zero
    a660:	20bfbf1e 	bne	r4,r2,a560 <_fpadd_parts+0xb0>
    a664:	4305883a 	add	r2,r8,r12
    a668:	1207803a 	cmpltu	r3,r2,r8
    a66c:	4b53883a 	add	r9,r9,r13
    a670:	1a47883a 	add	r3,r3,r9
    a674:	31000115 	stw	r4,4(r6)
    a678:	31c00215 	stw	r7,8(r6)
    a67c:	30800315 	stw	r2,12(r6)
    a680:	30c00415 	stw	r3,16(r6)
    a684:	003fdd06 	br	a5fc <_fpadd_parts+0x14c>
    a688:	20ffef1e 	bne	r4,r3,a648 <_fpadd_parts+0x198>
    a68c:	31000015 	stw	r4,0(r6)
    a690:	10c00117 	ldw	r3,4(r2)
    a694:	30c00115 	stw	r3,4(r6)
    a698:	10c00217 	ldw	r3,8(r2)
    a69c:	11000117 	ldw	r4,4(r2)
    a6a0:	29400117 	ldw	r5,4(r5)
    a6a4:	30c00215 	stw	r3,8(r6)
    a6a8:	10c00317 	ldw	r3,12(r2)
    a6ac:	2908703a 	and	r4,r5,r4
    a6b0:	30c00315 	stw	r3,12(r6)
    a6b4:	10c00417 	ldw	r3,16(r2)
    a6b8:	31000115 	stw	r4,4(r6)
    a6bc:	3005883a 	mov	r2,r6
    a6c0:	30c00415 	stw	r3,16(r6)
    a6c4:	f800283a 	ret
    a6c8:	580f883a 	mov	r7,r11
    a6cc:	0019883a 	mov	r12,zero
    a6d0:	001b883a 	mov	r13,zero
    a6d4:	003f9f06 	br	a554 <_fpadd_parts+0xa4>
    a6d8:	0115c83a 	sub	r10,zero,r4
    a6dc:	00c00fc4 	movi	r3,63
    a6e0:	1abfda16 	blt	r3,r10,a64c <_fpadd_parts+0x19c>
    a6e4:	003f8906 	br	a50c <_fpadd_parts+0x5c>
    a6e8:	627fb52e 	bgeu	r12,r9,a5c0 <_fpadd_parts+0x110>
    a6ec:	003fc006 	br	a5f0 <_fpadd_parts+0x140>
    a6f0:	6205c83a 	sub	r2,r12,r8
    a6f4:	6099803a 	cmpltu	r12,r12,r2
    a6f8:	6a47c83a 	sub	r3,r13,r9
    a6fc:	1b07c83a 	sub	r3,r3,r12
    a700:	183f9d0e 	bge	r3,zero,a578 <_fpadd_parts+0xc8>
    a704:	0085c83a 	sub	r2,zero,r2
    a708:	1008c03a 	cmpne	r4,r2,zero
    a70c:	00c7c83a 	sub	r3,zero,r3
    a710:	1907c83a 	sub	r3,r3,r4
    a714:	01000044 	movi	r4,1
    a718:	31000115 	stw	r4,4(r6)
    a71c:	31c00215 	stw	r7,8(r6)
    a720:	30800315 	stw	r2,12(r6)
    a724:	30c00415 	stw	r3,16(r6)
    a728:	003f9706 	br	a588 <_fpadd_parts+0xd8>
    a72c:	203f8926 	beq	r4,zero,a554 <_fpadd_parts+0xa4>
    a730:	50fff804 	addi	r3,r10,-32
    a734:	3a8f883a 	add	r7,r7,r10
    a738:	18002316 	blt	r3,zero,a7c8 <_fpadd_parts+0x318>
    a73c:	68d6d83a 	srl	r11,r13,r3
    a740:	001d883a 	mov	r14,zero
    a744:	18001c16 	blt	r3,zero,a7b8 <_fpadd_parts+0x308>
    a748:	01000044 	movi	r4,1
    a74c:	20c6983a 	sll	r3,r4,r3
    a750:	0015883a 	mov	r10,zero
    a754:	513fffc4 	addi	r4,r10,-1
    a758:	2295403a 	cmpgeu	r10,r4,r10
    a75c:	1a87c83a 	sub	r3,r3,r10
    a760:	1b5a703a 	and	r13,r3,r13
    a764:	2318703a 	and	r12,r4,r12
    a768:	6358b03a 	or	r12,r12,r13
    a76c:	6018c03a 	cmpne	r12,r12,zero
    a770:	62d8b03a 	or	r12,r12,r11
    a774:	701b883a 	mov	r13,r14
    a778:	003f7606 	br	a554 <_fpadd_parts+0xa4>
    a77c:	4808907a 	slli	r4,r9,1
    a780:	02c007c4 	movi	r11,31
    a784:	5a97c83a 	sub	r11,r11,r10
    a788:	22c8983a 	sll	r4,r4,r11
    a78c:	4296d83a 	srl	r11,r8,r10
    a790:	4a9cd83a 	srl	r14,r9,r10
    a794:	22d6b03a 	or	r11,r4,r11
    a798:	003f6106 	br	a520 <_fpadd_parts+0x70>
    a79c:	00c00044 	movi	r3,1
    a7a0:	1a94983a 	sll	r10,r3,r10
    a7a4:	0007883a 	mov	r3,zero
    a7a8:	003f6106 	br	a530 <_fpadd_parts+0x80>
    a7ac:	013fff84 	movi	r4,-2
    a7b0:	21ff7c2e 	bgeu	r4,r7,a5a4 <_fpadd_parts+0xf4>
    a7b4:	003f9106 	br	a5fc <_fpadd_parts+0x14c>
    a7b8:	00c00044 	movi	r3,1
    a7bc:	1a94983a 	sll	r10,r3,r10
    a7c0:	0007883a 	mov	r3,zero
    a7c4:	003fe306 	br	a754 <_fpadd_parts+0x2a4>
    a7c8:	6816907a 	slli	r11,r13,1
    a7cc:	010007c4 	movi	r4,31
    a7d0:	2289c83a 	sub	r4,r4,r10
    a7d4:	5908983a 	sll	r4,r11,r4
    a7d8:	6296d83a 	srl	r11,r12,r10
    a7dc:	6a9cd83a 	srl	r14,r13,r10
    a7e0:	22d6b03a 	or	r11,r4,r11
    a7e4:	003fd706 	br	a744 <_fpadd_parts+0x294>
    a7e8:	193f971e 	bne	r3,r4,a648 <_fpadd_parts+0x198>
    a7ec:	11000117 	ldw	r4,4(r2)
    a7f0:	28c00117 	ldw	r3,4(r5)
    a7f4:	20ff9426 	beq	r4,r3,a648 <_fpadd_parts+0x198>
    a7f8:	00800074 	movhi	r2,1
    a7fc:	10b70004 	addi	r2,r2,-9216
    a800:	f800283a 	ret

0000a804 <__adddf3>:
    a804:	deffec04 	addi	sp,sp,-80
    a808:	d9001115 	stw	r4,68(sp)
    a80c:	d9401215 	stw	r5,72(sp)
    a810:	d9001104 	addi	r4,sp,68
    a814:	d9400a04 	addi	r5,sp,40
    a818:	dfc01315 	stw	ra,76(sp)
    a81c:	d9c01015 	stw	r7,64(sp)
    a820:	d9800f15 	stw	r6,60(sp)
    a824:	000b5540 	call	b554 <__unpack_d>
    a828:	d9000f04 	addi	r4,sp,60
    a82c:	d9400504 	addi	r5,sp,20
    a830:	000b5540 	call	b554 <__unpack_d>
    a834:	d9000a04 	addi	r4,sp,40
    a838:	d9400504 	addi	r5,sp,20
    a83c:	d80d883a 	mov	r6,sp
    a840:	000a4b00 	call	a4b0 <_fpadd_parts>
    a844:	1009883a 	mov	r4,r2
    a848:	000b3300 	call	b330 <__pack_d>
    a84c:	dfc01317 	ldw	ra,76(sp)
    a850:	dec01404 	addi	sp,sp,80
    a854:	f800283a 	ret

0000a858 <__subdf3>:
    a858:	deffec04 	addi	sp,sp,-80
    a85c:	d9001115 	stw	r4,68(sp)
    a860:	d9401215 	stw	r5,72(sp)
    a864:	d9001104 	addi	r4,sp,68
    a868:	d9400a04 	addi	r5,sp,40
    a86c:	dfc01315 	stw	ra,76(sp)
    a870:	d9c01015 	stw	r7,64(sp)
    a874:	d9800f15 	stw	r6,60(sp)
    a878:	000b5540 	call	b554 <__unpack_d>
    a87c:	d9000f04 	addi	r4,sp,60
    a880:	d9400504 	addi	r5,sp,20
    a884:	000b5540 	call	b554 <__unpack_d>
    a888:	d8800617 	ldw	r2,24(sp)
    a88c:	d9000a04 	addi	r4,sp,40
    a890:	d9400504 	addi	r5,sp,20
    a894:	d80d883a 	mov	r6,sp
    a898:	1080005c 	xori	r2,r2,1
    a89c:	d8800615 	stw	r2,24(sp)
    a8a0:	000a4b00 	call	a4b0 <_fpadd_parts>
    a8a4:	1009883a 	mov	r4,r2
    a8a8:	000b3300 	call	b330 <__pack_d>
    a8ac:	dfc01317 	ldw	ra,76(sp)
    a8b0:	dec01404 	addi	sp,sp,80
    a8b4:	f800283a 	ret

0000a8b8 <__muldf3>:
    a8b8:	deffe404 	addi	sp,sp,-112
    a8bc:	d9001115 	stw	r4,68(sp)
    a8c0:	d9401215 	stw	r5,72(sp)
    a8c4:	d9001104 	addi	r4,sp,68
    a8c8:	d9400a04 	addi	r5,sp,40
    a8cc:	dfc01b15 	stw	ra,108(sp)
    a8d0:	d9800f15 	stw	r6,60(sp)
    a8d4:	d9c01015 	stw	r7,64(sp)
    a8d8:	ddc01a15 	stw	r23,104(sp)
    a8dc:	dd801915 	stw	r22,100(sp)
    a8e0:	dd401815 	stw	r21,96(sp)
    a8e4:	dd001715 	stw	r20,92(sp)
    a8e8:	dcc01615 	stw	r19,88(sp)
    a8ec:	dc801515 	stw	r18,84(sp)
    a8f0:	dc401415 	stw	r17,80(sp)
    a8f4:	dc001315 	stw	r16,76(sp)
    a8f8:	000b5540 	call	b554 <__unpack_d>
    a8fc:	d9000f04 	addi	r4,sp,60
    a900:	d9400504 	addi	r5,sp,20
    a904:	000b5540 	call	b554 <__unpack_d>
    a908:	d8c00a17 	ldw	r3,40(sp)
    a90c:	00800044 	movi	r2,1
    a910:	10c01136 	bltu	r2,r3,a958 <__muldf3+0xa0>
    a914:	d8c00b17 	ldw	r3,44(sp)
    a918:	d8800617 	ldw	r2,24(sp)
    a91c:	d9000a04 	addi	r4,sp,40
    a920:	1884c03a 	cmpne	r2,r3,r2
    a924:	d8800b15 	stw	r2,44(sp)
    a928:	000b3300 	call	b330 <__pack_d>
    a92c:	dfc01b17 	ldw	ra,108(sp)
    a930:	ddc01a17 	ldw	r23,104(sp)
    a934:	dd801917 	ldw	r22,100(sp)
    a938:	dd401817 	ldw	r21,96(sp)
    a93c:	dd001717 	ldw	r20,92(sp)
    a940:	dcc01617 	ldw	r19,88(sp)
    a944:	dc801517 	ldw	r18,84(sp)
    a948:	dc401417 	ldw	r17,80(sp)
    a94c:	dc001317 	ldw	r16,76(sp)
    a950:	dec01c04 	addi	sp,sp,112
    a954:	f800283a 	ret
    a958:	d9000517 	ldw	r4,20(sp)
    a95c:	11000636 	bltu	r2,r4,a978 <__muldf3+0xc0>
    a960:	d8800617 	ldw	r2,24(sp)
    a964:	d8c00b17 	ldw	r3,44(sp)
    a968:	d9000504 	addi	r4,sp,20
    a96c:	1884c03a 	cmpne	r2,r3,r2
    a970:	d8800615 	stw	r2,24(sp)
    a974:	003fec06 	br	a928 <__muldf3+0x70>
    a978:	00800104 	movi	r2,4
    a97c:	1880051e 	bne	r3,r2,a994 <__muldf3+0xdc>
    a980:	00800084 	movi	r2,2
    a984:	20bfe31e 	bne	r4,r2,a914 <__muldf3+0x5c>
    a988:	01000074 	movhi	r4,1
    a98c:	21370004 	addi	r4,r4,-9216
    a990:	003fe506 	br	a928 <__muldf3+0x70>
    a994:	2080031e 	bne	r4,r2,a9a4 <__muldf3+0xec>
    a998:	00800084 	movi	r2,2
    a99c:	18bffa26 	beq	r3,r2,a988 <__muldf3+0xd0>
    a9a0:	003fef06 	br	a960 <__muldf3+0xa8>
    a9a4:	00800084 	movi	r2,2
    a9a8:	18bfda26 	beq	r3,r2,a914 <__muldf3+0x5c>
    a9ac:	20bfec26 	beq	r4,r2,a960 <__muldf3+0xa8>
    a9b0:	dc000d17 	ldw	r16,52(sp)
    a9b4:	dd000817 	ldw	r20,32(sp)
    a9b8:	dc800917 	ldw	r18,36(sp)
    a9bc:	8009883a 	mov	r4,r16
    a9c0:	000b883a 	mov	r5,zero
    a9c4:	a00d883a 	mov	r6,r20
    a9c8:	000f883a 	mov	r7,zero
    a9cc:	000b1740 	call	b174 <__muldi3>
    a9d0:	dc400e17 	ldw	r17,56(sp)
    a9d4:	9009883a 	mov	r4,r18
    a9d8:	800d883a 	mov	r6,r16
    a9dc:	000b883a 	mov	r5,zero
    a9e0:	000f883a 	mov	r7,zero
    a9e4:	102f883a 	mov	r23,r2
    a9e8:	1827883a 	mov	r19,r3
    a9ec:	000b1740 	call	b174 <__muldi3>
    a9f0:	900d883a 	mov	r6,r18
    a9f4:	8809883a 	mov	r4,r17
    a9f8:	000b883a 	mov	r5,zero
    a9fc:	000f883a 	mov	r7,zero
    aa00:	102b883a 	mov	r21,r2
    aa04:	1821883a 	mov	r16,r3
    aa08:	000b1740 	call	b174 <__muldi3>
    aa0c:	8809883a 	mov	r4,r17
    aa10:	000b883a 	mov	r5,zero
    aa14:	a00d883a 	mov	r6,r20
    aa18:	000f883a 	mov	r7,zero
    aa1c:	102d883a 	mov	r22,r2
    aa20:	1825883a 	mov	r18,r3
    aa24:	000b1740 	call	b174 <__muldi3>
    aa28:	154b883a 	add	r5,r2,r21
    aa2c:	2889803a 	cmpltu	r4,r5,r2
    aa30:	1c07883a 	add	r3,r3,r16
    aa34:	20c9883a 	add	r4,r4,r3
    aa38:	24004b36 	bltu	r4,r16,ab68 <__muldf3+0x2b0>
    aa3c:	8100011e 	bne	r16,r4,aa44 <__muldf3+0x18c>
    aa40:	2d404936 	bltu	r5,r21,ab68 <__muldf3+0x2b0>
    aa44:	0011883a 	mov	r8,zero
    aa48:	0007883a 	mov	r3,zero
    aa4c:	2ccb883a 	add	r5,r5,r19
    aa50:	b80d883a 	mov	r6,r23
    aa54:	2cc0012e 	bgeu	r5,r19,aa5c <__muldf3+0x1a4>
    aa58:	02000044 	movi	r8,1
    aa5c:	258f883a 	add	r7,r4,r22
    aa60:	3909803a 	cmpltu	r4,r7,r4
    aa64:	da400c17 	ldw	r9,48(sp)
    aa68:	2489883a 	add	r4,r4,r18
    aa6c:	d8800717 	ldw	r2,28(sp)
    aa70:	20c9883a 	add	r4,r4,r3
    aa74:	da800b17 	ldw	r10,44(sp)
    aa78:	d8c00617 	ldw	r3,24(sp)
    aa7c:	3a11883a 	add	r8,r7,r8
    aa80:	4885883a 	add	r2,r9,r2
    aa84:	50c6c03a 	cmpne	r3,r10,r3
    aa88:	41cf803a 	cmpltu	r7,r8,r7
    aa8c:	12400104 	addi	r9,r2,4
    aa90:	d8c00115 	stw	r3,4(sp)
    aa94:	3909883a 	add	r4,r7,r4
    aa98:	da400215 	stw	r9,8(sp)
    aa9c:	03480034 	movhi	r13,8192
    aaa0:	6b7fffc4 	addi	r13,r13,-1
    aaa4:	4007883a 	mov	r3,r8
    aaa8:	6900102e 	bgeu	r13,r4,aaec <__muldf3+0x234>
    aaac:	10800144 	addi	r2,r2,5
    aab0:	180ed07a 	srli	r7,r3,1
    aab4:	18c0004c 	andi	r3,r3,1
    aab8:	201097fa 	slli	r8,r4,31
    aabc:	281697fa 	slli	r11,r5,31
    aac0:	2008d07a 	srli	r4,r4,1
    aac4:	3014d07a 	srli	r10,r6,1
    aac8:	2812d07a 	srli	r9,r5,1
    aacc:	1019883a 	mov	r12,r2
    aad0:	18000226 	beq	r3,zero,aadc <__muldf3+0x224>
    aad4:	5a8cb03a 	or	r6,r11,r10
    aad8:	49600034 	orhi	r5,r9,32768
    aadc:	41c6b03a 	or	r3,r8,r7
    aae0:	10800044 	addi	r2,r2,1
    aae4:	693ff236 	bltu	r13,r4,aab0 <__muldf3+0x1f8>
    aae8:	db000215 	stw	r12,8(sp)
    aaec:	03440034 	movhi	r13,4096
    aaf0:	6b7fffc4 	addi	r13,r13,-1
    aaf4:	69001336 	bltu	r13,r4,ab44 <__muldf3+0x28c>
    aaf8:	d8800217 	ldw	r2,8(sp)
    aafc:	10bfffc4 	addi	r2,r2,-1
    ab00:	18d3883a 	add	r9,r3,r3
    ab04:	48c7803a 	cmpltu	r3,r9,r3
    ab08:	2109883a 	add	r4,r4,r4
    ab0c:	190f883a 	add	r7,r3,r4
    ab10:	3191883a 	add	r8,r6,r6
    ab14:	4197803a 	cmpltu	r11,r8,r6
    ab18:	2955883a 	add	r10,r5,r5
    ab1c:	1019883a 	mov	r12,r2
    ab20:	4807883a 	mov	r3,r9
    ab24:	3809883a 	mov	r4,r7
    ab28:	2800010e 	bge	r5,zero,ab30 <__muldf3+0x278>
    ab2c:	48c00054 	ori	r3,r9,1
    ab30:	400d883a 	mov	r6,r8
    ab34:	5a8b883a 	add	r5,r11,r10
    ab38:	10bfffc4 	addi	r2,r2,-1
    ab3c:	69fff02e 	bgeu	r13,r7,ab00 <__muldf3+0x248>
    ab40:	db000215 	stw	r12,8(sp)
    ab44:	18803fcc 	andi	r2,r3,255
    ab48:	01c02004 	movi	r7,128
    ab4c:	11c00926 	beq	r2,r7,ab74 <__muldf3+0x2bc>
    ab50:	008000c4 	movi	r2,3
    ab54:	d9000415 	stw	r4,16(sp)
    ab58:	d8c00315 	stw	r3,12(sp)
    ab5c:	d8800015 	stw	r2,0(sp)
    ab60:	d809883a 	mov	r4,sp
    ab64:	003f7006 	br	a928 <__muldf3+0x70>
    ab68:	0011883a 	mov	r8,zero
    ab6c:	00c00044 	movi	r3,1
    ab70:	003fb606 	br	aa4c <__muldf3+0x194>
    ab74:	19c0400c 	andi	r7,r3,256
    ab78:	383ff51e 	bne	r7,zero,ab50 <__muldf3+0x298>
    ab7c:	314ab03a 	or	r5,r6,r5
    ab80:	283ff326 	beq	r5,zero,ab50 <__muldf3+0x298>
    ab84:	1885883a 	add	r2,r3,r2
    ab88:	10cb803a 	cmpltu	r5,r2,r3
    ab8c:	00ffc004 	movi	r3,-256
    ab90:	10c6703a 	and	r3,r2,r3
    ab94:	2909883a 	add	r4,r5,r4
    ab98:	003fed06 	br	ab50 <__muldf3+0x298>

0000ab9c <__divdf3>:
    ab9c:	defff104 	addi	sp,sp,-60
    aba0:	d9000c15 	stw	r4,48(sp)
    aba4:	d9400d15 	stw	r5,52(sp)
    aba8:	d9000c04 	addi	r4,sp,48
    abac:	d9400504 	addi	r5,sp,20
    abb0:	dfc00e15 	stw	ra,56(sp)
    abb4:	d9800a15 	stw	r6,40(sp)
    abb8:	d9c00b15 	stw	r7,44(sp)
    abbc:	000b5540 	call	b554 <__unpack_d>
    abc0:	d9000a04 	addi	r4,sp,40
    abc4:	d80b883a 	mov	r5,sp
    abc8:	000b5540 	call	b554 <__unpack_d>
    abcc:	d8c00517 	ldw	r3,20(sp)
    abd0:	00800044 	movi	r2,1
    abd4:	10c00536 	bltu	r2,r3,abec <__divdf3+0x50>
    abd8:	d9000504 	addi	r4,sp,20
    abdc:	000b3300 	call	b330 <__pack_d>
    abe0:	dfc00e17 	ldw	ra,56(sp)
    abe4:	dec00f04 	addi	sp,sp,60
    abe8:	f800283a 	ret
    abec:	d9000017 	ldw	r4,0(sp)
    abf0:	11000536 	bltu	r2,r4,ac08 <__divdf3+0x6c>
    abf4:	d809883a 	mov	r4,sp
    abf8:	000b3300 	call	b330 <__pack_d>
    abfc:	dfc00e17 	ldw	ra,56(sp)
    ac00:	dec00f04 	addi	sp,sp,60
    ac04:	f800283a 	ret
    ac08:	d9800617 	ldw	r6,24(sp)
    ac0c:	d9400117 	ldw	r5,4(sp)
    ac10:	00800104 	movi	r2,4
    ac14:	314af03a 	xor	r5,r6,r5
    ac18:	d9400615 	stw	r5,24(sp)
    ac1c:	18800226 	beq	r3,r2,ac28 <__divdf3+0x8c>
    ac20:	01400084 	movi	r5,2
    ac24:	1940041e 	bne	r3,r5,ac38 <__divdf3+0x9c>
    ac28:	193feb1e 	bne	r3,r4,abd8 <__divdf3+0x3c>
    ac2c:	01000074 	movhi	r4,1
    ac30:	21370004 	addi	r4,r4,-9216
    ac34:	003fe906 	br	abdc <__divdf3+0x40>
    ac38:	20803326 	beq	r4,r2,ad08 <__divdf3+0x16c>
    ac3c:	21403726 	beq	r4,r5,ad1c <__divdf3+0x180>
    ac40:	d8800217 	ldw	r2,8(sp)
    ac44:	d9000717 	ldw	r4,28(sp)
    ac48:	d8c00917 	ldw	r3,36(sp)
    ac4c:	da000417 	ldw	r8,16(sp)
    ac50:	2089c83a 	sub	r4,r4,r2
    ac54:	d9000715 	stw	r4,28(sp)
    ac58:	d8800817 	ldw	r2,32(sp)
    ac5c:	dbc00317 	ldw	r15,12(sp)
    ac60:	1a000236 	bltu	r3,r8,ac6c <__divdf3+0xd0>
    ac64:	40c0081e 	bne	r8,r3,ac88 <__divdf3+0xec>
    ac68:	13c0072e 	bgeu	r2,r15,ac88 <__divdf3+0xec>
    ac6c:	108b883a 	add	r5,r2,r2
    ac70:	288d803a 	cmpltu	r6,r5,r2
    ac74:	18c7883a 	add	r3,r3,r3
    ac78:	213fffc4 	addi	r4,r4,-1
    ac7c:	2805883a 	mov	r2,r5
    ac80:	30c7883a 	add	r3,r6,r3
    ac84:	d9000715 	stw	r4,28(sp)
    ac88:	01400f44 	movi	r5,61
    ac8c:	000f883a 	mov	r7,zero
    ac90:	01040034 	movhi	r4,4096
    ac94:	0019883a 	mov	r12,zero
    ac98:	001b883a 	mov	r13,zero
    ac9c:	201697fa 	slli	r11,r4,31
    aca0:	3814d07a 	srli	r10,r7,1
    aca4:	297fffc4 	addi	r5,r5,-1
    aca8:	1a000936 	bltu	r3,r8,acd0 <__divdf3+0x134>
    acac:	13cdc83a 	sub	r6,r2,r15
    acb0:	1193803a 	cmpltu	r9,r2,r6
    acb4:	1a1dc83a 	sub	r14,r3,r8
    acb8:	40c0011e 	bne	r8,r3,acc0 <__divdf3+0x124>
    acbc:	13c00436 	bltu	r2,r15,acd0 <__divdf3+0x134>
    acc0:	3005883a 	mov	r2,r6
    acc4:	7247c83a 	sub	r3,r14,r9
    acc8:	61d8b03a 	or	r12,r12,r7
    accc:	691ab03a 	or	r13,r13,r4
    acd0:	108d883a 	add	r6,r2,r2
    acd4:	3093803a 	cmpltu	r9,r6,r2
    acd8:	18c7883a 	add	r3,r3,r3
    acdc:	5a8eb03a 	or	r7,r11,r10
    ace0:	2008d07a 	srli	r4,r4,1
    ace4:	3005883a 	mov	r2,r6
    ace8:	48c7883a 	add	r3,r9,r3
    acec:	283feb1e 	bne	r5,zero,ac9c <__divdf3+0x100>
    acf0:	61003fcc 	andi	r4,r12,255
    acf4:	01402004 	movi	r5,128
    acf8:	21400b26 	beq	r4,r5,ad28 <__divdf3+0x18c>
    acfc:	db000815 	stw	r12,32(sp)
    ad00:	db400915 	stw	r13,36(sp)
    ad04:	003fb406 	br	abd8 <__divdf3+0x3c>
    ad08:	d8000815 	stw	zero,32(sp)
    ad0c:	d8000915 	stw	zero,36(sp)
    ad10:	d8000715 	stw	zero,28(sp)
    ad14:	d9000504 	addi	r4,sp,20
    ad18:	003fb006 	br	abdc <__divdf3+0x40>
    ad1c:	d8800515 	stw	r2,20(sp)
    ad20:	d9000504 	addi	r4,sp,20
    ad24:	003fad06 	br	abdc <__divdf3+0x40>
    ad28:	6140400c 	andi	r5,r12,256
    ad2c:	283ff31e 	bne	r5,zero,acfc <__divdf3+0x160>
    ad30:	30c4b03a 	or	r2,r6,r3
    ad34:	103ff126 	beq	r2,zero,acfc <__divdf3+0x160>
    ad38:	6109883a 	add	r4,r12,r4
    ad3c:	2305803a 	cmpltu	r2,r4,r12
    ad40:	033fc004 	movi	r12,-256
    ad44:	2318703a 	and	r12,r4,r12
    ad48:	135b883a 	add	r13,r2,r13
    ad4c:	003feb06 	br	acfc <__divdf3+0x160>

0000ad50 <__gtdf2>:
    ad50:	defff104 	addi	sp,sp,-60
    ad54:	d9000c15 	stw	r4,48(sp)
    ad58:	d9400d15 	stw	r5,52(sp)
    ad5c:	d9000c04 	addi	r4,sp,48
    ad60:	d9400504 	addi	r5,sp,20
    ad64:	dfc00e15 	stw	ra,56(sp)
    ad68:	d9800a15 	stw	r6,40(sp)
    ad6c:	d9c00b15 	stw	r7,44(sp)
    ad70:	000b5540 	call	b554 <__unpack_d>
    ad74:	d9000a04 	addi	r4,sp,40
    ad78:	d80b883a 	mov	r5,sp
    ad7c:	000b5540 	call	b554 <__unpack_d>
    ad80:	d8c00517 	ldw	r3,20(sp)
    ad84:	00800044 	movi	r2,1
    ad88:	10c0082e 	bgeu	r2,r3,adac <__gtdf2+0x5c>
    ad8c:	d8c00017 	ldw	r3,0(sp)
    ad90:	10c0062e 	bgeu	r2,r3,adac <__gtdf2+0x5c>
    ad94:	d9000504 	addi	r4,sp,20
    ad98:	d80b883a 	mov	r5,sp
    ad9c:	000b6580 	call	b658 <__fpcmp_parts_d>
    ada0:	dfc00e17 	ldw	ra,56(sp)
    ada4:	dec00f04 	addi	sp,sp,60
    ada8:	f800283a 	ret
    adac:	00bfffc4 	movi	r2,-1
    adb0:	003ffb06 	br	ada0 <__gtdf2+0x50>

0000adb4 <__gedf2>:
    adb4:	defff104 	addi	sp,sp,-60
    adb8:	d9000c15 	stw	r4,48(sp)
    adbc:	d9400d15 	stw	r5,52(sp)
    adc0:	d9000c04 	addi	r4,sp,48
    adc4:	d9400504 	addi	r5,sp,20
    adc8:	dfc00e15 	stw	ra,56(sp)
    adcc:	d9800a15 	stw	r6,40(sp)
    add0:	d9c00b15 	stw	r7,44(sp)
    add4:	000b5540 	call	b554 <__unpack_d>
    add8:	d9000a04 	addi	r4,sp,40
    addc:	d80b883a 	mov	r5,sp
    ade0:	000b5540 	call	b554 <__unpack_d>
    ade4:	d8c00517 	ldw	r3,20(sp)
    ade8:	00800044 	movi	r2,1
    adec:	10c0082e 	bgeu	r2,r3,ae10 <__gedf2+0x5c>
    adf0:	d8c00017 	ldw	r3,0(sp)
    adf4:	10c0062e 	bgeu	r2,r3,ae10 <__gedf2+0x5c>
    adf8:	d9000504 	addi	r4,sp,20
    adfc:	d80b883a 	mov	r5,sp
    ae00:	000b6580 	call	b658 <__fpcmp_parts_d>
    ae04:	dfc00e17 	ldw	ra,56(sp)
    ae08:	dec00f04 	addi	sp,sp,60
    ae0c:	f800283a 	ret
    ae10:	00bfffc4 	movi	r2,-1
    ae14:	003ffb06 	br	ae04 <__gedf2+0x50>

0000ae18 <__ltdf2>:
    ae18:	defff104 	addi	sp,sp,-60
    ae1c:	d9000c15 	stw	r4,48(sp)
    ae20:	d9400d15 	stw	r5,52(sp)
    ae24:	d9000c04 	addi	r4,sp,48
    ae28:	d9400504 	addi	r5,sp,20
    ae2c:	dfc00e15 	stw	ra,56(sp)
    ae30:	d9800a15 	stw	r6,40(sp)
    ae34:	d9c00b15 	stw	r7,44(sp)
    ae38:	000b5540 	call	b554 <__unpack_d>
    ae3c:	d9000a04 	addi	r4,sp,40
    ae40:	d80b883a 	mov	r5,sp
    ae44:	000b5540 	call	b554 <__unpack_d>
    ae48:	d8c00517 	ldw	r3,20(sp)
    ae4c:	00800044 	movi	r2,1
    ae50:	10c0052e 	bgeu	r2,r3,ae68 <__ltdf2+0x50>
    ae54:	d8c00017 	ldw	r3,0(sp)
    ae58:	10c0032e 	bgeu	r2,r3,ae68 <__ltdf2+0x50>
    ae5c:	d9000504 	addi	r4,sp,20
    ae60:	d80b883a 	mov	r5,sp
    ae64:	000b6580 	call	b658 <__fpcmp_parts_d>
    ae68:	dfc00e17 	ldw	ra,56(sp)
    ae6c:	dec00f04 	addi	sp,sp,60
    ae70:	f800283a 	ret

0000ae74 <__floatsidf>:
    ae74:	2004d7fa 	srli	r2,r4,31
    ae78:	defff904 	addi	sp,sp,-28
    ae7c:	00c000c4 	movi	r3,3
    ae80:	dfc00615 	stw	ra,24(sp)
    ae84:	dc000515 	stw	r16,20(sp)
    ae88:	d8c00015 	stw	r3,0(sp)
    ae8c:	d8800115 	stw	r2,4(sp)
    ae90:	2000081e 	bne	r4,zero,aeb4 <__floatsidf+0x40>
    ae94:	00800084 	movi	r2,2
    ae98:	d8800015 	stw	r2,0(sp)
    ae9c:	d809883a 	mov	r4,sp
    aea0:	000b3300 	call	b330 <__pack_d>
    aea4:	dfc00617 	ldw	ra,24(sp)
    aea8:	dc000517 	ldw	r16,20(sp)
    aeac:	dec00704 	addi	sp,sp,28
    aeb0:	f800283a 	ret
    aeb4:	00c00f04 	movi	r3,60
    aeb8:	d8c00215 	stw	r3,8(sp)
    aebc:	10000f1e 	bne	r2,zero,aefc <__floatsidf+0x88>
    aec0:	2021883a 	mov	r16,r4
    aec4:	8009883a 	mov	r4,r16
    aec8:	000b2840 	call	b284 <__clzsi2>
    aecc:	11000744 	addi	r4,r2,29
    aed0:	0100110e 	bge	zero,r4,af18 <__floatsidf+0xa4>
    aed4:	10ffff44 	addi	r3,r2,-3
    aed8:	18001216 	blt	r3,zero,af24 <__floatsidf+0xb0>
    aedc:	80c6983a 	sll	r3,r16,r3
    aee0:	0009883a 	mov	r4,zero
    aee4:	014007c4 	movi	r5,31
    aee8:	2885c83a 	sub	r2,r5,r2
    aeec:	d9000315 	stw	r4,12(sp)
    aef0:	d8c00415 	stw	r3,16(sp)
    aef4:	d8800215 	stw	r2,8(sp)
    aef8:	003fe806 	br	ae9c <__floatsidf+0x28>
    aefc:	00a00034 	movhi	r2,32768
    af00:	20800e26 	beq	r4,r2,af3c <__floatsidf+0xc8>
    af04:	0121c83a 	sub	r16,zero,r4
    af08:	8009883a 	mov	r4,r16
    af0c:	000b2840 	call	b284 <__clzsi2>
    af10:	11000744 	addi	r4,r2,29
    af14:	013fef16 	blt	zero,r4,aed4 <__floatsidf+0x60>
    af18:	dc000315 	stw	r16,12(sp)
    af1c:	d8000415 	stw	zero,16(sp)
    af20:	003fde06 	br	ae9c <__floatsidf+0x28>
    af24:	800ad07a 	srli	r5,r16,1
    af28:	00c007c4 	movi	r3,31
    af2c:	1907c83a 	sub	r3,r3,r4
    af30:	28c6d83a 	srl	r3,r5,r3
    af34:	8108983a 	sll	r4,r16,r4
    af38:	003fea06 	br	aee4 <__floatsidf+0x70>
    af3c:	0005883a 	mov	r2,zero
    af40:	00f07834 	movhi	r3,49632
    af44:	003fd706 	br	aea4 <__floatsidf+0x30>

0000af48 <__fixdfsi>:
    af48:	defff804 	addi	sp,sp,-32
    af4c:	d9000515 	stw	r4,20(sp)
    af50:	d9400615 	stw	r5,24(sp)
    af54:	d9000504 	addi	r4,sp,20
    af58:	d80b883a 	mov	r5,sp
    af5c:	dfc00715 	stw	ra,28(sp)
    af60:	000b5540 	call	b554 <__unpack_d>
    af64:	d8800017 	ldw	r2,0(sp)
    af68:	00c00084 	movi	r3,2
    af6c:	10c01c26 	beq	r2,r3,afe0 <__fixdfsi+0x98>
    af70:	00c00044 	movi	r3,1
    af74:	18801a2e 	bgeu	r3,r2,afe0 <__fixdfsi+0x98>
    af78:	00c00104 	movi	r3,4
    af7c:	10c01126 	beq	r2,r3,afc4 <__fixdfsi+0x7c>
    af80:	d8800217 	ldw	r2,8(sp)
    af84:	10001616 	blt	r2,zero,afe0 <__fixdfsi+0x98>
    af88:	00c00784 	movi	r3,30
    af8c:	18800d16 	blt	r3,r2,afc4 <__fixdfsi+0x7c>
    af90:	00c00f04 	movi	r3,60
    af94:	1885c83a 	sub	r2,r3,r2
    af98:	10fff804 	addi	r3,r2,-32
    af9c:	d9400317 	ldw	r5,12(sp)
    afa0:	d9000417 	ldw	r4,16(sp)
    afa4:	18001616 	blt	r3,zero,b000 <__fixdfsi+0xb8>
    afa8:	20c4d83a 	srl	r2,r4,r3
    afac:	d8c00117 	ldw	r3,4(sp)
    afb0:	18000126 	beq	r3,zero,afb8 <__fixdfsi+0x70>
    afb4:	0085c83a 	sub	r2,zero,r2
    afb8:	dfc00717 	ldw	ra,28(sp)
    afbc:	dec00804 	addi	sp,sp,32
    afc0:	f800283a 	ret
    afc4:	d8800117 	ldw	r2,4(sp)
    afc8:	1000091e 	bne	r2,zero,aff0 <__fixdfsi+0xa8>
    afcc:	00a00034 	movhi	r2,32768
    afd0:	10bfffc4 	addi	r2,r2,-1
    afd4:	dfc00717 	ldw	ra,28(sp)
    afd8:	dec00804 	addi	sp,sp,32
    afdc:	f800283a 	ret
    afe0:	0005883a 	mov	r2,zero
    afe4:	dfc00717 	ldw	ra,28(sp)
    afe8:	dec00804 	addi	sp,sp,32
    afec:	f800283a 	ret
    aff0:	00a00034 	movhi	r2,32768
    aff4:	dfc00717 	ldw	ra,28(sp)
    aff8:	dec00804 	addi	sp,sp,32
    affc:	f800283a 	ret
    b000:	2008907a 	slli	r4,r4,1
    b004:	018007c4 	movi	r6,31
    b008:	308dc83a 	sub	r6,r6,r2
    b00c:	2188983a 	sll	r4,r4,r6
    b010:	2884d83a 	srl	r2,r5,r2
    b014:	2084b03a 	or	r2,r4,r2
    b018:	003fe406 	br	afac <__fixdfsi+0x64>

0000b01c <udivmodsi4>:
    b01c:	2005883a 	mov	r2,r4
    b020:	2900182e 	bgeu	r5,r4,b084 <udivmodsi4+0x68>
    b024:	28001716 	blt	r5,zero,b084 <udivmodsi4+0x68>
    b028:	01000804 	movi	r4,32
    b02c:	00c00044 	movi	r3,1
    b030:	00000206 	br	b03c <udivmodsi4+0x20>
    b034:	20001126 	beq	r4,zero,b07c <udivmodsi4+0x60>
    b038:	28000516 	blt	r5,zero,b050 <udivmodsi4+0x34>
    b03c:	294b883a 	add	r5,r5,r5
    b040:	213fffc4 	addi	r4,r4,-1
    b044:	18c7883a 	add	r3,r3,r3
    b048:	28bffa36 	bltu	r5,r2,b034 <udivmodsi4+0x18>
    b04c:	18000b26 	beq	r3,zero,b07c <udivmodsi4+0x60>
    b050:	0009883a 	mov	r4,zero
    b054:	11400236 	bltu	r2,r5,b060 <udivmodsi4+0x44>
    b058:	1145c83a 	sub	r2,r2,r5
    b05c:	20c8b03a 	or	r4,r4,r3
    b060:	1806d07a 	srli	r3,r3,1
    b064:	280ad07a 	srli	r5,r5,1
    b068:	183ffa1e 	bne	r3,zero,b054 <udivmodsi4+0x38>
    b06c:	3000021e 	bne	r6,zero,b078 <udivmodsi4+0x5c>
    b070:	2005883a 	mov	r2,r4
    b074:	f800283a 	ret
    b078:	f800283a 	ret
    b07c:	0009883a 	mov	r4,zero
    b080:	003ffa06 	br	b06c <udivmodsi4+0x50>
    b084:	00c00044 	movi	r3,1
    b088:	0009883a 	mov	r4,zero
    b08c:	003ff106 	br	b054 <udivmodsi4+0x38>

0000b090 <__divsi3>:
    b090:	defffe04 	addi	sp,sp,-8
    b094:	dfc00115 	stw	ra,4(sp)
    b098:	dc000015 	stw	r16,0(sp)
    b09c:	20000a16 	blt	r4,zero,b0c8 <__divsi3+0x38>
    b0a0:	0021883a 	mov	r16,zero
    b0a4:	28000b16 	blt	r5,zero,b0d4 <__divsi3+0x44>
    b0a8:	000d883a 	mov	r6,zero
    b0ac:	000b01c0 	call	b01c <udivmodsi4>
    b0b0:	80000126 	beq	r16,zero,b0b8 <__divsi3+0x28>
    b0b4:	0085c83a 	sub	r2,zero,r2
    b0b8:	dfc00117 	ldw	ra,4(sp)
    b0bc:	dc000017 	ldw	r16,0(sp)
    b0c0:	dec00204 	addi	sp,sp,8
    b0c4:	f800283a 	ret
    b0c8:	0109c83a 	sub	r4,zero,r4
    b0cc:	04000044 	movi	r16,1
    b0d0:	283ff50e 	bge	r5,zero,b0a8 <__divsi3+0x18>
    b0d4:	014bc83a 	sub	r5,zero,r5
    b0d8:	8400005c 	xori	r16,r16,1
    b0dc:	003ff206 	br	b0a8 <__divsi3+0x18>

0000b0e0 <__modsi3>:
    b0e0:	deffff04 	addi	sp,sp,-4
    b0e4:	dfc00015 	stw	ra,0(sp)
    b0e8:	20000516 	blt	r4,zero,b100 <__modsi3+0x20>
    b0ec:	28000c16 	blt	r5,zero,b120 <__modsi3+0x40>
    b0f0:	01800044 	movi	r6,1
    b0f4:	dfc00017 	ldw	ra,0(sp)
    b0f8:	dec00104 	addi	sp,sp,4
    b0fc:	000b01c1 	jmpi	b01c <udivmodsi4>
    b100:	0109c83a 	sub	r4,zero,r4
    b104:	28000b16 	blt	r5,zero,b134 <__modsi3+0x54>
    b108:	01800044 	movi	r6,1
    b10c:	000b01c0 	call	b01c <udivmodsi4>
    b110:	0085c83a 	sub	r2,zero,r2
    b114:	dfc00017 	ldw	ra,0(sp)
    b118:	dec00104 	addi	sp,sp,4
    b11c:	f800283a 	ret
    b120:	014bc83a 	sub	r5,zero,r5
    b124:	01800044 	movi	r6,1
    b128:	dfc00017 	ldw	ra,0(sp)
    b12c:	dec00104 	addi	sp,sp,4
    b130:	000b01c1 	jmpi	b01c <udivmodsi4>
    b134:	014bc83a 	sub	r5,zero,r5
    b138:	003ff306 	br	b108 <__modsi3+0x28>

0000b13c <__udivsi3>:
    b13c:	000d883a 	mov	r6,zero
    b140:	000b01c1 	jmpi	b01c <udivmodsi4>

0000b144 <__umodsi3>:
    b144:	01800044 	movi	r6,1
    b148:	000b01c1 	jmpi	b01c <udivmodsi4>

0000b14c <__mulsi3>:
    b14c:	0005883a 	mov	r2,zero
    b150:	20000726 	beq	r4,zero,b170 <__mulsi3+0x24>
    b154:	20c0004c 	andi	r3,r4,1
    b158:	2008d07a 	srli	r4,r4,1
    b15c:	18000126 	beq	r3,zero,b164 <__mulsi3+0x18>
    b160:	1145883a 	add	r2,r2,r5
    b164:	294b883a 	add	r5,r5,r5
    b168:	203ffa1e 	bne	r4,zero,b154 <__mulsi3+0x8>
    b16c:	f800283a 	ret
    b170:	f800283a 	ret

0000b174 <__muldi3>:
    b174:	defff604 	addi	sp,sp,-40
    b178:	dd400515 	stw	r21,20(sp)
    b17c:	dd000415 	stw	r20,16(sp)
    b180:	257fffcc 	andi	r21,r4,65535
    b184:	353fffcc 	andi	r20,r6,65535
    b188:	dcc00315 	stw	r19,12(sp)
    b18c:	3026d43a 	srli	r19,r6,16
    b190:	dd800615 	stw	r22,24(sp)
    b194:	dc800215 	stw	r18,8(sp)
    b198:	dc400115 	stw	r17,4(sp)
    b19c:	2024d43a 	srli	r18,r4,16
    b1a0:	2023883a 	mov	r17,r4
    b1a4:	282d883a 	mov	r22,r5
    b1a8:	a009883a 	mov	r4,r20
    b1ac:	a80b883a 	mov	r5,r21
    b1b0:	dfc00915 	stw	ra,36(sp)
    b1b4:	df000815 	stw	fp,32(sp)
    b1b8:	ddc00715 	stw	r23,28(sp)
    b1bc:	3839883a 	mov	fp,r7
    b1c0:	dc000015 	stw	r16,0(sp)
    b1c4:	3021883a 	mov	r16,r6
    b1c8:	000b14c0 	call	b14c <__mulsi3>
    b1cc:	a80b883a 	mov	r5,r21
    b1d0:	9809883a 	mov	r4,r19
    b1d4:	102f883a 	mov	r23,r2
    b1d8:	000b14c0 	call	b14c <__mulsi3>
    b1dc:	a009883a 	mov	r4,r20
    b1e0:	900b883a 	mov	r5,r18
    b1e4:	102b883a 	mov	r21,r2
    b1e8:	000b14c0 	call	b14c <__mulsi3>
    b1ec:	9809883a 	mov	r4,r19
    b1f0:	900b883a 	mov	r5,r18
    b1f4:	1029883a 	mov	r20,r2
    b1f8:	000b14c0 	call	b14c <__mulsi3>
    b1fc:	1007883a 	mov	r3,r2
    b200:	b804d43a 	srli	r2,r23,16
    b204:	a549883a 	add	r4,r20,r21
    b208:	2089883a 	add	r4,r4,r2
    b20c:	2500022e 	bgeu	r4,r20,b218 <__muldi3+0xa4>
    b210:	00800074 	movhi	r2,1
    b214:	1887883a 	add	r3,r3,r2
    b218:	200cd43a 	srli	r6,r4,16
    b21c:	2004943a 	slli	r2,r4,16
    b220:	e00b883a 	mov	r5,fp
    b224:	8809883a 	mov	r4,r17
    b228:	bdffffcc 	andi	r23,r23,65535
    b22c:	19a3883a 	add	r17,r3,r6
    b230:	15ef883a 	add	r23,r2,r23
    b234:	000b14c0 	call	b14c <__mulsi3>
    b238:	8009883a 	mov	r4,r16
    b23c:	b00b883a 	mov	r5,r22
    b240:	1025883a 	mov	r18,r2
    b244:	000b14c0 	call	b14c <__mulsi3>
    b248:	9085883a 	add	r2,r18,r2
    b24c:	1447883a 	add	r3,r2,r17
    b250:	b805883a 	mov	r2,r23
    b254:	dfc00917 	ldw	ra,36(sp)
    b258:	df000817 	ldw	fp,32(sp)
    b25c:	ddc00717 	ldw	r23,28(sp)
    b260:	dd800617 	ldw	r22,24(sp)
    b264:	dd400517 	ldw	r21,20(sp)
    b268:	dd000417 	ldw	r20,16(sp)
    b26c:	dcc00317 	ldw	r19,12(sp)
    b270:	dc800217 	ldw	r18,8(sp)
    b274:	dc400117 	ldw	r17,4(sp)
    b278:	dc000017 	ldw	r16,0(sp)
    b27c:	dec00a04 	addi	sp,sp,40
    b280:	f800283a 	ret

0000b284 <__clzsi2>:
    b284:	00bfffd4 	movui	r2,65535
    b288:	11000b36 	bltu	r2,r4,b2b8 <__clzsi2+0x34>
    b28c:	00803fc4 	movi	r2,255
    b290:	11001e2e 	bgeu	r2,r4,b30c <__clzsi2+0x88>
    b294:	00c00204 	movi	r3,8
    b298:	20c8d83a 	srl	r4,r4,r3
    b29c:	00c00074 	movhi	r3,1
    b2a0:	18f70504 	addi	r3,r3,-9196
    b2a4:	00800604 	movi	r2,24
    b2a8:	1909883a 	add	r4,r3,r4
    b2ac:	20c00003 	ldbu	r3,0(r4)
    b2b0:	10c5c83a 	sub	r2,r2,r3
    b2b4:	f800283a 	ret
    b2b8:	00804034 	movhi	r2,256
    b2bc:	10bfffc4 	addi	r2,r2,-1
    b2c0:	11000936 	bltu	r2,r4,b2e8 <__clzsi2+0x64>
    b2c4:	00800404 	movi	r2,16
    b2c8:	1007883a 	mov	r3,r2
    b2cc:	20c8d83a 	srl	r4,r4,r3
    b2d0:	00c00074 	movhi	r3,1
    b2d4:	18f70504 	addi	r3,r3,-9196
    b2d8:	1909883a 	add	r4,r3,r4
    b2dc:	20c00003 	ldbu	r3,0(r4)
    b2e0:	10c5c83a 	sub	r2,r2,r3
    b2e4:	f800283a 	ret
    b2e8:	00c00604 	movi	r3,24
    b2ec:	20c8d83a 	srl	r4,r4,r3
    b2f0:	00c00074 	movhi	r3,1
    b2f4:	18f70504 	addi	r3,r3,-9196
    b2f8:	00800204 	movi	r2,8
    b2fc:	1909883a 	add	r4,r3,r4
    b300:	20c00003 	ldbu	r3,0(r4)
    b304:	10c5c83a 	sub	r2,r2,r3
    b308:	f800283a 	ret
    b30c:	0007883a 	mov	r3,zero
    b310:	20c8d83a 	srl	r4,r4,r3
    b314:	00c00074 	movhi	r3,1
    b318:	18f70504 	addi	r3,r3,-9196
    b31c:	00800804 	movi	r2,32
    b320:	1909883a 	add	r4,r3,r4
    b324:	20c00003 	ldbu	r3,0(r4)
    b328:	10c5c83a 	sub	r2,r2,r3
    b32c:	f800283a 	ret

0000b330 <__pack_d>:
    b330:	20800017 	ldw	r2,0(r4)
    b334:	defff804 	addi	sp,sp,-32
    b338:	dcc00315 	stw	r19,12(sp)
    b33c:	dc800215 	stw	r18,8(sp)
    b340:	dfc00715 	stw	ra,28(sp)
    b344:	dd800615 	stw	r22,24(sp)
    b348:	dd400515 	stw	r21,20(sp)
    b34c:	dd000415 	stw	r20,16(sp)
    b350:	dc400115 	stw	r17,4(sp)
    b354:	dc000015 	stw	r16,0(sp)
    b358:	04800044 	movi	r18,1
    b35c:	24400317 	ldw	r17,12(r4)
    b360:	24000417 	ldw	r16,16(r4)
    b364:	24c00117 	ldw	r19,4(r4)
    b368:	9080422e 	bgeu	r18,r2,b474 <__pack_d+0x144>
    b36c:	00c00104 	movi	r3,4
    b370:	10c03c26 	beq	r2,r3,b464 <__pack_d+0x134>
    b374:	00c00084 	movi	r3,2
    b378:	10c01926 	beq	r2,r3,b3e0 <__pack_d+0xb0>
    b37c:	8c04b03a 	or	r2,r17,r16
    b380:	10001726 	beq	r2,zero,b3e0 <__pack_d+0xb0>
    b384:	21000217 	ldw	r4,8(r4)
    b388:	00bf0084 	movi	r2,-1022
    b38c:	20804016 	blt	r4,r2,b490 <__pack_d+0x160>
    b390:	0080ffc4 	movi	r2,1023
    b394:	11003316 	blt	r2,r4,b464 <__pack_d+0x134>
    b398:	88803fcc 	andi	r2,r17,255
    b39c:	00c02004 	movi	r3,128
    b3a0:	10c02926 	beq	r2,r3,b448 <__pack_d+0x118>
    b3a4:	88801fc4 	addi	r2,r17,127
    b3a8:	1463803a 	cmpltu	r17,r2,r17
    b3ac:	8c21883a 	add	r16,r17,r16
    b3b0:	1023883a 	mov	r17,r2
    b3b4:	00880034 	movhi	r2,8192
    b3b8:	10bfffc4 	addi	r2,r2,-1
    b3bc:	14001c36 	bltu	r2,r16,b430 <__pack_d+0x100>
    b3c0:	2100ffc4 	addi	r4,r4,1023
    b3c4:	8006963a 	slli	r3,r16,24
    b3c8:	8804d23a 	srli	r2,r17,8
    b3cc:	8020913a 	slli	r16,r16,4
    b3d0:	2101ffcc 	andi	r4,r4,2047
    b3d4:	1884b03a 	or	r2,r3,r2
    b3d8:	8020d33a 	srli	r16,r16,12
    b3dc:	00000306 	br	b3ec <__pack_d+0xbc>
    b3e0:	0009883a 	mov	r4,zero
    b3e4:	0005883a 	mov	r2,zero
    b3e8:	0021883a 	mov	r16,zero
    b3ec:	2008953a 	slli	r4,r4,20
    b3f0:	982697fa 	slli	r19,r19,31
    b3f4:	00c00434 	movhi	r3,16
    b3f8:	18ffffc4 	addi	r3,r3,-1
    b3fc:	80e0703a 	and	r16,r16,r3
    b400:	8106b03a 	or	r3,r16,r4
    b404:	1cc6b03a 	or	r3,r3,r19
    b408:	dfc00717 	ldw	ra,28(sp)
    b40c:	dd800617 	ldw	r22,24(sp)
    b410:	dd400517 	ldw	r21,20(sp)
    b414:	dd000417 	ldw	r20,16(sp)
    b418:	dcc00317 	ldw	r19,12(sp)
    b41c:	dc800217 	ldw	r18,8(sp)
    b420:	dc400117 	ldw	r17,4(sp)
    b424:	dc000017 	ldw	r16,0(sp)
    b428:	dec00804 	addi	sp,sp,32
    b42c:	f800283a 	ret
    b430:	800697fa 	slli	r3,r16,31
    b434:	8804d07a 	srli	r2,r17,1
    b438:	21010004 	addi	r4,r4,1024
    b43c:	8020d07a 	srli	r16,r16,1
    b440:	18a2b03a 	or	r17,r3,r2
    b444:	003fdf06 	br	b3c4 <__pack_d+0x94>
    b448:	88c0400c 	andi	r3,r17,256
    b44c:	183fd926 	beq	r3,zero,b3b4 <__pack_d+0x84>
    b450:	8885883a 	add	r2,r17,r2
    b454:	1463803a 	cmpltu	r17,r2,r17
    b458:	8c21883a 	add	r16,r17,r16
    b45c:	1023883a 	mov	r17,r2
    b460:	003fd406 	br	b3b4 <__pack_d+0x84>
    b464:	0101ffc4 	movi	r4,2047
    b468:	0005883a 	mov	r2,zero
    b46c:	0021883a 	mov	r16,zero
    b470:	003fde06 	br	b3ec <__pack_d+0xbc>
    b474:	84000234 	orhi	r16,r16,8
    b478:	00c00434 	movhi	r3,16
    b47c:	18ffffc4 	addi	r3,r3,-1
    b480:	8805883a 	mov	r2,r17
    b484:	80e0703a 	and	r16,r16,r3
    b488:	0101ffc4 	movi	r4,2047
    b48c:	003fd706 	br	b3ec <__pack_d+0xbc>
    b490:	1129c83a 	sub	r20,r2,r4
    b494:	00800e04 	movi	r2,56
    b498:	15002716 	blt	r2,r20,b538 <__pack_d+0x208>
    b49c:	800b883a 	mov	r5,r16
    b4a0:	a00d883a 	mov	r6,r20
    b4a4:	8809883a 	mov	r4,r17
    b4a8:	000b7280 	call	b728 <__lshrdi3>
    b4ac:	9009883a 	mov	r4,r18
    b4b0:	000b883a 	mov	r5,zero
    b4b4:	a00d883a 	mov	r6,r20
    b4b8:	102d883a 	mov	r22,r2
    b4bc:	182b883a 	mov	r21,r3
    b4c0:	000b76c0 	call	b76c <__ashldi3>
    b4c4:	1009003a 	cmpeq	r4,r2,zero
    b4c8:	1907c83a 	sub	r3,r3,r4
    b4cc:	10bfffc4 	addi	r2,r2,-1
    b4d0:	1c20703a 	and	r16,r3,r16
    b4d4:	1444703a 	and	r2,r2,r17
    b4d8:	1404b03a 	or	r2,r2,r16
    b4dc:	1004c03a 	cmpne	r2,r2,zero
    b4e0:	1584b03a 	or	r2,r2,r22
    b4e4:	11003fcc 	andi	r4,r2,255
    b4e8:	01402004 	movi	r5,128
    b4ec:	a807883a 	mov	r3,r21
    b4f0:	2140131e 	bne	r4,r5,b540 <__pack_d+0x210>
    b4f4:	1140400c 	andi	r5,r2,256
    b4f8:	28000426 	beq	r5,zero,b50c <__pack_d+0x1dc>
    b4fc:	1109883a 	add	r4,r2,r4
    b500:	2085803a 	cmpltu	r2,r4,r2
    b504:	1547883a 	add	r3,r2,r21
    b508:	2005883a 	mov	r2,r4
    b50c:	1808963a 	slli	r4,r3,24
    b510:	1004d23a 	srli	r2,r2,8
    b514:	1820913a 	slli	r16,r3,4
    b518:	01440034 	movhi	r5,4096
    b51c:	297fffc4 	addi	r5,r5,-1
    b520:	2084b03a 	or	r2,r4,r2
    b524:	8020d33a 	srli	r16,r16,12
    b528:	01000044 	movi	r4,1
    b52c:	28ffaf36 	bltu	r5,r3,b3ec <__pack_d+0xbc>
    b530:	0009883a 	mov	r4,zero
    b534:	003fad06 	br	b3ec <__pack_d+0xbc>
    b538:	0005883a 	mov	r2,zero
    b53c:	0007883a 	mov	r3,zero
    b540:	11001fc4 	addi	r4,r2,127
    b544:	2085803a 	cmpltu	r2,r4,r2
    b548:	10c7883a 	add	r3,r2,r3
    b54c:	2005883a 	mov	r2,r4
    b550:	003fee06 	br	b50c <__pack_d+0x1dc>

0000b554 <__unpack_d>:
    b554:	21800117 	ldw	r6,4(r4)
    b558:	20c00017 	ldw	r3,0(r4)
    b55c:	3004d7fa 	srli	r2,r6,31
    b560:	3008d53a 	srli	r4,r6,20
    b564:	28800115 	stw	r2,4(r5)
    b568:	2101ffcc 	andi	r4,r4,2047
    b56c:	00800434 	movhi	r2,16
    b570:	10bfffc4 	addi	r2,r2,-1
    b574:	3084703a 	and	r2,r6,r2
    b578:	20001a1e 	bne	r4,zero,b5e4 <__unpack_d+0x90>
    b57c:	1888b03a 	or	r4,r3,r2
    b580:	20002626 	beq	r4,zero,b61c <__unpack_d+0xc8>
    b584:	1808d63a 	srli	r4,r3,24
    b588:	1004923a 	slli	r2,r2,8
    b58c:	01bf0084 	movi	r6,-1022
    b590:	29800215 	stw	r6,8(r5)
    b594:	2084b03a 	or	r2,r4,r2
    b598:	010000c4 	movi	r4,3
    b59c:	29000015 	stw	r4,0(r5)
    b5a0:	02040034 	movhi	r8,4096
    b5a4:	423fffc4 	addi	r8,r8,-1
    b5a8:	1806923a 	slli	r3,r3,8
    b5ac:	40801836 	bltu	r8,r2,b610 <__unpack_d+0xbc>
    b5b0:	013f0044 	movi	r4,-1023
    b5b4:	18cd883a 	add	r6,r3,r3
    b5b8:	30c7803a 	cmpltu	r3,r6,r3
    b5bc:	1085883a 	add	r2,r2,r2
    b5c0:	1885883a 	add	r2,r3,r2
    b5c4:	200f883a 	mov	r7,r4
    b5c8:	3007883a 	mov	r3,r6
    b5cc:	213fffc4 	addi	r4,r4,-1
    b5d0:	40bff82e 	bgeu	r8,r2,b5b4 <__unpack_d+0x60>
    b5d4:	29c00215 	stw	r7,8(r5)
    b5d8:	28c00315 	stw	r3,12(r5)
    b5dc:	28800415 	stw	r2,16(r5)
    b5e0:	f800283a 	ret
    b5e4:	01c1ffc4 	movi	r7,2047
    b5e8:	21c00f26 	beq	r4,r7,b628 <__unpack_d+0xd4>
    b5ec:	180cd63a 	srli	r6,r3,24
    b5f0:	1004923a 	slli	r2,r2,8
    b5f4:	213f0044 	addi	r4,r4,-1023
    b5f8:	1806923a 	slli	r3,r3,8
    b5fc:	3084b03a 	or	r2,r6,r2
    b600:	29000215 	stw	r4,8(r5)
    b604:	010000c4 	movi	r4,3
    b608:	10840034 	orhi	r2,r2,4096
    b60c:	29000015 	stw	r4,0(r5)
    b610:	28c00315 	stw	r3,12(r5)
    b614:	28800415 	stw	r2,16(r5)
    b618:	f800283a 	ret
    b61c:	00800084 	movi	r2,2
    b620:	28800015 	stw	r2,0(r5)
    b624:	f800283a 	ret
    b628:	1888b03a 	or	r4,r3,r2
    b62c:	20000526 	beq	r4,zero,b644 <__unpack_d+0xf0>
    b630:	3180022c 	andhi	r6,r6,8
    b634:	30000626 	beq	r6,zero,b650 <__unpack_d+0xfc>
    b638:	01000044 	movi	r4,1
    b63c:	29000015 	stw	r4,0(r5)
    b640:	003ff306 	br	b610 <__unpack_d+0xbc>
    b644:	00800104 	movi	r2,4
    b648:	28800015 	stw	r2,0(r5)
    b64c:	f800283a 	ret
    b650:	28000015 	stw	zero,0(r5)
    b654:	003fee06 	br	b610 <__unpack_d+0xbc>

0000b658 <__fpcmp_parts_d>:
    b658:	20c00017 	ldw	r3,0(r4)
    b65c:	00800044 	movi	r2,1
    b660:	10c0142e 	bgeu	r2,r3,b6b4 <__fpcmp_parts_d+0x5c>
    b664:	29800017 	ldw	r6,0(r5)
    b668:	1180122e 	bgeu	r2,r6,b6b4 <__fpcmp_parts_d+0x5c>
    b66c:	01c00104 	movi	r7,4
    b670:	19c02826 	beq	r3,r7,b714 <__fpcmp_parts_d+0xbc>
    b674:	31c00926 	beq	r6,r7,b69c <__fpcmp_parts_d+0x44>
    b678:	01c00084 	movi	r7,2
    b67c:	19c00626 	beq	r3,r7,b698 <__fpcmp_parts_d+0x40>
    b680:	31c00a26 	beq	r6,r7,b6ac <__fpcmp_parts_d+0x54>
    b684:	20c00117 	ldw	r3,4(r4)
    b688:	29800117 	ldw	r6,4(r5)
    b68c:	19800b26 	beq	r3,r6,b6bc <__fpcmp_parts_d+0x64>
    b690:	1800041e 	bne	r3,zero,b6a4 <__fpcmp_parts_d+0x4c>
    b694:	f800283a 	ret
    b698:	30c01a26 	beq	r6,r3,b704 <__fpcmp_parts_d+0xac>
    b69c:	28800117 	ldw	r2,4(r5)
    b6a0:	1000041e 	bne	r2,zero,b6b4 <__fpcmp_parts_d+0x5c>
    b6a4:	00bfffc4 	movi	r2,-1
    b6a8:	f800283a 	ret
    b6ac:	20800117 	ldw	r2,4(r4)
    b6b0:	103ffc1e 	bne	r2,zero,b6a4 <__fpcmp_parts_d+0x4c>
    b6b4:	00800044 	movi	r2,1
    b6b8:	f800283a 	ret
    b6bc:	21c00217 	ldw	r7,8(r4)
    b6c0:	29800217 	ldw	r6,8(r5)
    b6c4:	31c0020e 	bge	r6,r7,b6d0 <__fpcmp_parts_d+0x78>
    b6c8:	183ff61e 	bne	r3,zero,b6a4 <__fpcmp_parts_d+0x4c>
    b6cc:	f800283a 	ret
    b6d0:	39800a16 	blt	r7,r6,b6fc <__fpcmp_parts_d+0xa4>
    b6d4:	20800417 	ldw	r2,16(r4)
    b6d8:	29800417 	ldw	r6,16(r5)
    b6dc:	21c00317 	ldw	r7,12(r4)
    b6e0:	29000317 	ldw	r4,12(r5)
    b6e4:	30800936 	bltu	r6,r2,b70c <__fpcmp_parts_d+0xb4>
    b6e8:	1180011e 	bne	r2,r6,b6f0 <__fpcmp_parts_d+0x98>
    b6ec:	21c00736 	bltu	r4,r7,b70c <__fpcmp_parts_d+0xb4>
    b6f0:	11800236 	bltu	r2,r6,b6fc <__fpcmp_parts_d+0xa4>
    b6f4:	3080031e 	bne	r6,r2,b704 <__fpcmp_parts_d+0xac>
    b6f8:	3900022e 	bgeu	r7,r4,b704 <__fpcmp_parts_d+0xac>
    b6fc:	183fe926 	beq	r3,zero,b6a4 <__fpcmp_parts_d+0x4c>
    b700:	003fec06 	br	b6b4 <__fpcmp_parts_d+0x5c>
    b704:	0005883a 	mov	r2,zero
    b708:	f800283a 	ret
    b70c:	183fe926 	beq	r3,zero,b6b4 <__fpcmp_parts_d+0x5c>
    b710:	003fe406 	br	b6a4 <__fpcmp_parts_d+0x4c>
    b714:	30ffe51e 	bne	r6,r3,b6ac <__fpcmp_parts_d+0x54>
    b718:	28c00117 	ldw	r3,4(r5)
    b71c:	20800117 	ldw	r2,4(r4)
    b720:	1885c83a 	sub	r2,r3,r2
    b724:	f800283a 	ret

0000b728 <__lshrdi3>:
    b728:	2005883a 	mov	r2,r4
    b72c:	2807883a 	mov	r3,r5
    b730:	30000826 	beq	r6,zero,b754 <__lshrdi3+0x2c>
    b734:	01000804 	movi	r4,32
    b738:	2189c83a 	sub	r4,r4,r6
    b73c:	0100060e 	bge	zero,r4,b758 <__lshrdi3+0x30>
    b740:	1184d83a 	srl	r2,r2,r6
    b744:	2908983a 	sll	r4,r5,r4
    b748:	298cd83a 	srl	r6,r5,r6
    b74c:	2084b03a 	or	r2,r4,r2
    b750:	3007883a 	mov	r3,r6
    b754:	f800283a 	ret
    b758:	0105c83a 	sub	r2,zero,r4
    b75c:	000d883a 	mov	r6,zero
    b760:	2884d83a 	srl	r2,r5,r2
    b764:	3007883a 	mov	r3,r6
    b768:	003ffa06 	br	b754 <__lshrdi3+0x2c>

0000b76c <__ashldi3>:
    b76c:	2005883a 	mov	r2,r4
    b770:	2807883a 	mov	r3,r5
    b774:	30000826 	beq	r6,zero,b798 <__ashldi3+0x2c>
    b778:	01000804 	movi	r4,32
    b77c:	2189c83a 	sub	r4,r4,r6
    b780:	0100060e 	bge	zero,r4,b79c <__ashldi3+0x30>
    b784:	1108d83a 	srl	r4,r2,r4
    b788:	2986983a 	sll	r3,r5,r6
    b78c:	118c983a 	sll	r6,r2,r6
    b790:	20c6b03a 	or	r3,r4,r3
    b794:	3005883a 	mov	r2,r6
    b798:	f800283a 	ret
    b79c:	0107c83a 	sub	r3,zero,r4
    b7a0:	000d883a 	mov	r6,zero
    b7a4:	10c6983a 	sll	r3,r2,r3
    b7a8:	3005883a 	mov	r2,r6
    b7ac:	003ffa06 	br	b798 <__ashldi3+0x2c>

0000b7b0 <memset>:
    b7b0:	2005883a 	mov	r2,r4
    b7b4:	30000526 	beq	r6,zero,b7cc <memset+0x1c>
    b7b8:	218d883a 	add	r6,r4,r6
    b7bc:	2007883a 	mov	r3,r4
    b7c0:	19400005 	stb	r5,0(r3)
    b7c4:	18c00044 	addi	r3,r3,1
    b7c8:	19bffd1e 	bne	r3,r6,b7c0 <memset+0x10>
    b7cc:	f800283a 	ret

0000b7d0 <_printf_r>:
    b7d0:	defffd04 	addi	sp,sp,-12
    b7d4:	dfc00015 	stw	ra,0(sp)
    b7d8:	d9800115 	stw	r6,4(sp)
    b7dc:	d9c00215 	stw	r7,8(sp)
    b7e0:	20800217 	ldw	r2,8(r4)
    b7e4:	00c00074 	movhi	r3,1
    b7e8:	18f01b04 	addi	r3,r3,-16276
    b7ec:	280d883a 	mov	r6,r5
    b7f0:	10c00115 	stw	r3,4(r2)
    b7f4:	100b883a 	mov	r5,r2
    b7f8:	d9c00104 	addi	r7,sp,4
    b7fc:	000b9140 	call	b914 <___vfprintf_internal_r>
    b800:	dfc00017 	ldw	ra,0(sp)
    b804:	dec00304 	addi	sp,sp,12
    b808:	f800283a 	ret

0000b80c <printf>:
    b80c:	defffc04 	addi	sp,sp,-16
    b810:	dfc00015 	stw	ra,0(sp)
    b814:	d9400115 	stw	r5,4(sp)
    b818:	d9800215 	stw	r6,8(sp)
    b81c:	d9c00315 	stw	r7,12(sp)
    b820:	00800074 	movhi	r2,1
    b824:	10b81c04 	addi	r2,r2,-8080
    b828:	10800017 	ldw	r2,0(r2)
    b82c:	00c00074 	movhi	r3,1
    b830:	18f01b04 	addi	r3,r3,-16276
    b834:	200b883a 	mov	r5,r4
    b838:	10800217 	ldw	r2,8(r2)
    b83c:	d9800104 	addi	r6,sp,4
    b840:	10c00115 	stw	r3,4(r2)
    b844:	1009883a 	mov	r4,r2
    b848:	000c0480 	call	c048 <__vfprintf_internal>
    b84c:	dfc00017 	ldw	ra,0(sp)
    b850:	dec00404 	addi	sp,sp,16
    b854:	f800283a 	ret

0000b858 <_puts_r>:
    b858:	defffd04 	addi	sp,sp,-12
    b85c:	dc000015 	stw	r16,0(sp)
    b860:	2021883a 	mov	r16,r4
    b864:	2809883a 	mov	r4,r5
    b868:	dfc00215 	stw	ra,8(sp)
    b86c:	dc400115 	stw	r17,4(sp)
    b870:	2823883a 	mov	r17,r5
    b874:	000b8ec0 	call	b8ec <strlen>
    b878:	81400217 	ldw	r5,8(r16)
    b87c:	00c00074 	movhi	r3,1
    b880:	18f01b04 	addi	r3,r3,-16276
    b884:	880d883a 	mov	r6,r17
    b888:	8009883a 	mov	r4,r16
    b88c:	28c00115 	stw	r3,4(r5)
    b890:	100f883a 	mov	r7,r2
    b894:	183ee83a 	callr	r3
    b898:	047fffc4 	movi	r17,-1
    b89c:	14400926 	beq	r2,r17,b8c4 <_puts_r+0x6c>
    b8a0:	81400217 	ldw	r5,8(r16)
    b8a4:	8009883a 	mov	r4,r16
    b8a8:	01800074 	movhi	r6,1
    b8ac:	31b74504 	addi	r6,r6,-8940
    b8b0:	28800117 	ldw	r2,4(r5)
    b8b4:	01c00044 	movi	r7,1
    b8b8:	103ee83a 	callr	r2
    b8bc:	14400126 	beq	r2,r17,b8c4 <_puts_r+0x6c>
    b8c0:	0005883a 	mov	r2,zero
    b8c4:	dfc00217 	ldw	ra,8(sp)
    b8c8:	dc400117 	ldw	r17,4(sp)
    b8cc:	dc000017 	ldw	r16,0(sp)
    b8d0:	dec00304 	addi	sp,sp,12
    b8d4:	f800283a 	ret

0000b8d8 <puts>:
    b8d8:	00800074 	movhi	r2,1
    b8dc:	10b81c04 	addi	r2,r2,-8080
    b8e0:	200b883a 	mov	r5,r4
    b8e4:	11000017 	ldw	r4,0(r2)
    b8e8:	000b8581 	jmpi	b858 <_puts_r>

0000b8ec <strlen>:
    b8ec:	20800007 	ldb	r2,0(r4)
    b8f0:	10000626 	beq	r2,zero,b90c <strlen+0x20>
    b8f4:	2005883a 	mov	r2,r4
    b8f8:	10800044 	addi	r2,r2,1
    b8fc:	10c00007 	ldb	r3,0(r2)
    b900:	183ffd1e 	bne	r3,zero,b8f8 <strlen+0xc>
    b904:	1105c83a 	sub	r2,r2,r4
    b908:	f800283a 	ret
    b90c:	0005883a 	mov	r2,zero
    b910:	f800283a 	ret

0000b914 <___vfprintf_internal_r>:
    b914:	deffe004 	addi	sp,sp,-128
    b918:	d8c00804 	addi	r3,sp,32
    b91c:	ddc01d15 	stw	r23,116(sp)
    b920:	dd401b15 	stw	r21,108(sp)
    b924:	dd001a15 	stw	r20,104(sp)
    b928:	dcc01915 	stw	r19,100(sp)
    b92c:	dc801815 	stw	r18,96(sp)
    b930:	dc001615 	stw	r16,88(sp)
    b934:	dfc01f15 	stw	ra,124(sp)
    b938:	df001e15 	stw	fp,120(sp)
    b93c:	dd801c15 	stw	r22,112(sp)
    b940:	dc401715 	stw	r17,92(sp)
    b944:	d9000f15 	stw	r4,60(sp)
    b948:	d9c00e15 	stw	r7,56(sp)
    b94c:	3021883a 	mov	r16,r6
    b950:	0025883a 	mov	r18,zero
    b954:	d8001415 	stw	zero,80(sp)
    b958:	d8000d15 	stw	zero,52(sp)
    b95c:	0029883a 	mov	r20,zero
    b960:	d8000b15 	stw	zero,44(sp)
    b964:	d8000c15 	stw	zero,48(sp)
    b968:	d8001315 	stw	zero,76(sp)
    b96c:	d8001015 	stw	zero,64(sp)
    b970:	002b883a 	mov	r21,zero
    b974:	04c00044 	movi	r19,1
    b978:	d8c00a15 	stw	r3,40(sp)
    b97c:	282f883a 	mov	r23,r5
    b980:	80c00003 	ldbu	r3,0(r16)
    b984:	84000044 	addi	r16,r16,1
    b988:	18803fcc 	andi	r2,r3,255
    b98c:	1080201c 	xori	r2,r2,128
    b990:	10bfe004 	addi	r2,r2,-128
    b994:	10001426 	beq	r2,zero,b9e8 <___vfprintf_internal_r+0xd4>
    b998:	acc03026 	beq	r21,r19,ba5c <___vfprintf_internal_r+0x148>
    b99c:	9d401f16 	blt	r19,r21,ba1c <___vfprintf_internal_r+0x108>
    b9a0:	a83ff71e 	bne	r21,zero,b980 <___vfprintf_internal_r+0x6c>
    b9a4:	01000944 	movi	r4,37
    b9a8:	1100d926 	beq	r2,r4,bd10 <___vfprintf_internal_r+0x3fc>
    b9ac:	b8800117 	ldw	r2,4(r23)
    b9b0:	d9000f17 	ldw	r4,60(sp)
    b9b4:	d8c00905 	stb	r3,36(sp)
    b9b8:	b80b883a 	mov	r5,r23
    b9bc:	d9800904 	addi	r6,sp,36
    b9c0:	01c00044 	movi	r7,1
    b9c4:	103ee83a 	callr	r2
    b9c8:	1000a31e 	bne	r2,zero,bc58 <___vfprintf_internal_r+0x344>
    b9cc:	80c00003 	ldbu	r3,0(r16)
    b9d0:	94800044 	addi	r18,r18,1
    b9d4:	84000044 	addi	r16,r16,1
    b9d8:	18803fcc 	andi	r2,r3,255
    b9dc:	1080201c 	xori	r2,r2,128
    b9e0:	10bfe004 	addi	r2,r2,-128
    b9e4:	103fec1e 	bne	r2,zero,b998 <___vfprintf_internal_r+0x84>
    b9e8:	9005883a 	mov	r2,r18
    b9ec:	dfc01f17 	ldw	ra,124(sp)
    b9f0:	df001e17 	ldw	fp,120(sp)
    b9f4:	ddc01d17 	ldw	r23,116(sp)
    b9f8:	dd801c17 	ldw	r22,112(sp)
    b9fc:	dd401b17 	ldw	r21,108(sp)
    ba00:	dd001a17 	ldw	r20,104(sp)
    ba04:	dcc01917 	ldw	r19,100(sp)
    ba08:	dc801817 	ldw	r18,96(sp)
    ba0c:	dc401717 	ldw	r17,92(sp)
    ba10:	dc001617 	ldw	r16,88(sp)
    ba14:	dec02004 	addi	sp,sp,128
    ba18:	f800283a 	ret
    ba1c:	01000084 	movi	r4,2
    ba20:	a9001226 	beq	r21,r4,ba6c <___vfprintf_internal_r+0x158>
    ba24:	010000c4 	movi	r4,3
    ba28:	a93fd51e 	bne	r21,r4,b980 <___vfprintf_internal_r+0x6c>
    ba2c:	1c7ff404 	addi	r17,r3,-48
    ba30:	8c403fcc 	andi	r17,r17,255
    ba34:	01000244 	movi	r4,9
    ba38:	24401b36 	bltu	r4,r17,baa8 <___vfprintf_internal_r+0x194>
    ba3c:	d9000b17 	ldw	r4,44(sp)
    ba40:	00bfffc4 	movi	r2,-1
    ba44:	2080ea26 	beq	r4,r2,bdf0 <___vfprintf_internal_r+0x4dc>
    ba48:	01400284 	movi	r5,10
    ba4c:	000b14c0 	call	b14c <__mulsi3>
    ba50:	88a3883a 	add	r17,r17,r2
    ba54:	dc400b15 	stw	r17,44(sp)
    ba58:	003fc906 	br	b980 <___vfprintf_internal_r+0x6c>
    ba5c:	01000c04 	movi	r4,48
    ba60:	1100de26 	beq	r2,r4,bddc <___vfprintf_internal_r+0x4c8>
    ba64:	01000944 	movi	r4,37
    ba68:	1100fd26 	beq	r2,r4,be60 <___vfprintf_internal_r+0x54c>
    ba6c:	1c7ff404 	addi	r17,r3,-48
    ba70:	8c403fcc 	andi	r17,r17,255
    ba74:	01000244 	movi	r4,9
    ba78:	24400936 	bltu	r4,r17,baa0 <___vfprintf_internal_r+0x18c>
    ba7c:	d9000c17 	ldw	r4,48(sp)
    ba80:	00bfffc4 	movi	r2,-1
    ba84:	2080d826 	beq	r4,r2,bde8 <___vfprintf_internal_r+0x4d4>
    ba88:	01400284 	movi	r5,10
    ba8c:	000b14c0 	call	b14c <__mulsi3>
    ba90:	88a3883a 	add	r17,r17,r2
    ba94:	dc400c15 	stw	r17,48(sp)
    ba98:	05400084 	movi	r21,2
    ba9c:	003fb806 	br	b980 <___vfprintf_internal_r+0x6c>
    baa0:	01000b84 	movi	r4,46
    baa4:	1100a726 	beq	r2,r4,bd44 <___vfprintf_internal_r+0x430>
    baa8:	01401b04 	movi	r5,108
    baac:	1140a326 	beq	r2,r5,bd3c <___vfprintf_internal_r+0x428>
    bab0:	d9000b17 	ldw	r4,44(sp)
    bab4:	00bfffc4 	movi	r2,-1
    bab8:	2080e626 	beq	r4,r2,be54 <___vfprintf_internal_r+0x540>
    babc:	d8001015 	stw	zero,64(sp)
    bac0:	18ffea04 	addi	r3,r3,-88
    bac4:	18c03fcc 	andi	r3,r3,255
    bac8:	00800804 	movi	r2,32
    bacc:	10c0022e 	bgeu	r2,r3,bad8 <___vfprintf_internal_r+0x1c4>
    bad0:	002b883a 	mov	r21,zero
    bad4:	003faa06 	br	b980 <___vfprintf_internal_r+0x6c>
    bad8:	18c7883a 	add	r3,r3,r3
    badc:	18c7883a 	add	r3,r3,r3
    bae0:	01400074 	movhi	r5,1
    bae4:	296ebd04 	addi	r5,r5,-17676
    bae8:	1947883a 	add	r3,r3,r5
    baec:	18800017 	ldw	r2,0(r3)
    baf0:	1000683a 	jmp	r2
    baf4:	0000be8c 	andi	zero,zero,762
    baf8:	0000bad0 	cmplti	zero,zero,747
    bafc:	0000bad0 	cmplti	zero,zero,747
    bb00:	0000bad0 	cmplti	zero,zero,747
    bb04:	0000bad0 	cmplti	zero,zero,747
    bb08:	0000bad0 	cmplti	zero,zero,747
    bb0c:	0000bad0 	cmplti	zero,zero,747
    bb10:	0000bad0 	cmplti	zero,zero,747
    bb14:	0000bad0 	cmplti	zero,zero,747
    bb18:	0000bad0 	cmplti	zero,zero,747
    bb1c:	0000bad0 	cmplti	zero,zero,747
    bb20:	0000be9c 	xori	zero,zero,762
    bb24:	0000bb78 	rdprs	zero,zero,749
    bb28:	0000bad0 	cmplti	zero,zero,747
    bb2c:	0000bad0 	cmplti	zero,zero,747
    bb30:	0000bad0 	cmplti	zero,zero,747
    bb34:	0000bad0 	cmplti	zero,zero,747
    bb38:	0000bb78 	rdprs	zero,zero,749
    bb3c:	0000bad0 	cmplti	zero,zero,747
    bb40:	0000bad0 	cmplti	zero,zero,747
    bb44:	0000bad0 	cmplti	zero,zero,747
    bb48:	0000bad0 	cmplti	zero,zero,747
    bb4c:	0000bad0 	cmplti	zero,zero,747
    bb50:	0000bc60 	cmpeqi	zero,zero,753
    bb54:	0000bad0 	cmplti	zero,zero,747
    bb58:	0000bad0 	cmplti	zero,zero,747
    bb5c:	0000bad0 	cmplti	zero,zero,747
    bb60:	0000bee8 	cmpgeui	zero,zero,763
    bb64:	0000bad0 	cmplti	zero,zero,747
    bb68:	0000bc64 	muli	zero,zero,753
    bb6c:	0000bad0 	cmplti	zero,zero,747
    bb70:	0000bad0 	cmplti	zero,zero,747
    bb74:	0000be94 	movui	zero,762
    bb78:	d8c00d17 	ldw	r3,52(sp)
    bb7c:	18003926 	beq	r3,zero,bc64 <___vfprintf_internal_r+0x350>
    bb80:	d9000e17 	ldw	r4,56(sp)
    bb84:	00c00044 	movi	r3,1
    bb88:	25400017 	ldw	r21,0(r4)
    bb8c:	21000104 	addi	r4,r4,4
    bb90:	d9000e15 	stw	r4,56(sp)
    bb94:	d8c00d15 	stw	r3,52(sp)
    bb98:	a8012116 	blt	r21,zero,c020 <___vfprintf_internal_r+0x70c>
    bb9c:	d8001215 	stw	zero,72(sp)
    bba0:	d823883a 	mov	r17,sp
    bba4:	a800371e 	bne	r21,zero,bc84 <___vfprintf_internal_r+0x370>
    bba8:	d9400b17 	ldw	r5,44(sp)
    bbac:	d809883a 	mov	r4,sp
    bbb0:	01400b0e 	bge	zero,r5,bbe0 <___vfprintf_internal_r+0x2cc>
    bbb4:	d8800b17 	ldw	r2,44(sp)
    bbb8:	d823883a 	mov	r17,sp
    bbbc:	00c00c04 	movi	r3,48
    bbc0:	00000206 	br	bbcc <___vfprintf_internal_r+0x2b8>
    bbc4:	d9400a17 	ldw	r5,40(sp)
    bbc8:	89400426 	beq	r17,r5,bbdc <___vfprintf_internal_r+0x2c8>
    bbcc:	88c00005 	stb	r3,0(r17)
    bbd0:	10bfffc4 	addi	r2,r2,-1
    bbd4:	8c400044 	addi	r17,r17,1
    bbd8:	103ffa1e 	bne	r2,zero,bbc4 <___vfprintf_internal_r+0x2b0>
    bbdc:	892bc83a 	sub	r21,r17,r4
    bbe0:	d8c01217 	ldw	r3,72(sp)
    bbe4:	d9000c17 	ldw	r4,48(sp)
    bbe8:	a8c5883a 	add	r2,r21,r3
    bbec:	d8c01017 	ldw	r3,64(sp)
    bbf0:	2085c83a 	sub	r2,r4,r2
    bbf4:	d8801115 	stw	r2,68(sp)
    bbf8:	18007f26 	beq	r3,zero,bdf8 <___vfprintf_internal_r+0x4e4>
    bbfc:	d8c01217 	ldw	r3,72(sp)
    bc00:	1800fa1e 	bne	r3,zero,bfec <___vfprintf_internal_r+0x6d8>
    bc04:	d8c01117 	ldw	r3,68(sp)
    bc08:	00c0620e 	bge	zero,r3,bd94 <___vfprintf_internal_r+0x480>
    bc0c:	00800c04 	movi	r2,48
    bc10:	d88008c5 	stb	r2,35(sp)
    bc14:	b805883a 	mov	r2,r23
    bc18:	dc001215 	stw	r16,72(sp)
    bc1c:	882f883a 	mov	r23,r17
    bc20:	1f3fffc4 	addi	fp,r3,-1
    bc24:	05bfffc4 	movi	r22,-1
    bc28:	dc000f17 	ldw	r16,60(sp)
    bc2c:	1023883a 	mov	r17,r2
    bc30:	00000206 	br	bc3c <___vfprintf_internal_r+0x328>
    bc34:	e73fffc4 	addi	fp,fp,-1
    bc38:	e580fc26 	beq	fp,r22,c02c <___vfprintf_internal_r+0x718>
    bc3c:	88800117 	ldw	r2,4(r17)
    bc40:	8009883a 	mov	r4,r16
    bc44:	880b883a 	mov	r5,r17
    bc48:	d98008c4 	addi	r6,sp,35
    bc4c:	01c00044 	movi	r7,1
    bc50:	103ee83a 	callr	r2
    bc54:	103ff726 	beq	r2,zero,bc34 <___vfprintf_internal_r+0x320>
    bc58:	04bfffc4 	movi	r18,-1
    bc5c:	003f6206 	br	b9e8 <___vfprintf_internal_r+0xd4>
    bc60:	05000204 	movi	r20,8
    bc64:	d9400e17 	ldw	r5,56(sp)
    bc68:	2d400017 	ldw	r21,0(r5)
    bc6c:	29400104 	addi	r5,r5,4
    bc70:	d9400e15 	stw	r5,56(sp)
    bc74:	d8000d15 	stw	zero,52(sp)
    bc78:	d8001215 	stw	zero,72(sp)
    bc7c:	d823883a 	mov	r17,sp
    bc80:	a83fc926 	beq	r21,zero,bba8 <___vfprintf_internal_r+0x294>
    bc84:	05800244 	movi	r22,9
    bc88:	dc001115 	stw	r16,68(sp)
    bc8c:	df001417 	ldw	fp,80(sp)
    bc90:	00000506 	br	bca8 <___vfprintf_internal_r+0x394>
    bc94:	15400c04 	addi	r21,r2,48
    bc98:	8d400005 	stb	r21,0(r17)
    bc9c:	802b883a 	mov	r21,r16
    bca0:	8c400044 	addi	r17,r17,1
    bca4:	80000f26 	beq	r16,zero,bce4 <___vfprintf_internal_r+0x3d0>
    bca8:	a809883a 	mov	r4,r21
    bcac:	a00b883a 	mov	r5,r20
    bcb0:	000b13c0 	call	b13c <__udivsi3>
    bcb4:	a009883a 	mov	r4,r20
    bcb8:	100b883a 	mov	r5,r2
    bcbc:	1021883a 	mov	r16,r2
    bcc0:	000b14c0 	call	b14c <__mulsi3>
    bcc4:	a885c83a 	sub	r2,r21,r2
    bcc8:	b0bff20e 	bge	r22,r2,bc94 <___vfprintf_internal_r+0x380>
    bccc:	e0000e26 	beq	fp,zero,bd08 <___vfprintf_internal_r+0x3f4>
    bcd0:	15400dc4 	addi	r21,r2,55
    bcd4:	8d400005 	stb	r21,0(r17)
    bcd8:	802b883a 	mov	r21,r16
    bcdc:	8c400044 	addi	r17,r17,1
    bce0:	803ff11e 	bne	r16,zero,bca8 <___vfprintf_internal_r+0x394>
    bce4:	d9000b17 	ldw	r4,44(sp)
    bce8:	8eebc83a 	sub	r21,r17,sp
    bcec:	dc001117 	ldw	r16,68(sp)
    bcf0:	2545c83a 	sub	r2,r4,r21
    bcf4:	d809883a 	mov	r4,sp
    bcf8:	00bfb90e 	bge	zero,r2,bbe0 <___vfprintf_internal_r+0x2cc>
    bcfc:	d8c00a17 	ldw	r3,40(sp)
    bd00:	88ffae36 	bltu	r17,r3,bbbc <___vfprintf_internal_r+0x2a8>
    bd04:	003fb606 	br	bbe0 <___vfprintf_internal_r+0x2cc>
    bd08:	154015c4 	addi	r21,r2,87
    bd0c:	003fe206 	br	bc98 <___vfprintf_internal_r+0x384>
    bd10:	00c00044 	movi	r3,1
    bd14:	013fffc4 	movi	r4,-1
    bd18:	d8c00d15 	stw	r3,52(sp)
    bd1c:	d9000b15 	stw	r4,44(sp)
    bd20:	d8001415 	stw	zero,80(sp)
    bd24:	05000284 	movi	r20,10
    bd28:	d9000c15 	stw	r4,48(sp)
    bd2c:	d8001315 	stw	zero,76(sp)
    bd30:	d8001015 	stw	zero,64(sp)
    bd34:	182b883a 	mov	r21,r3
    bd38:	003f1106 	br	b980 <___vfprintf_internal_r+0x6c>
    bd3c:	00c00044 	movi	r3,1
    bd40:	d8c01315 	stw	r3,76(sp)
    bd44:	054000c4 	movi	r21,3
    bd48:	003f0d06 	br	b980 <___vfprintf_internal_r+0x6c>
    bd4c:	d8c01117 	ldw	r3,68(sp)
    bd50:	dc001517 	ldw	r16,84(sp)
    bd54:	8805883a 	mov	r2,r17
    bd58:	90e5883a 	add	r18,r18,r3
    bd5c:	b823883a 	mov	r17,r23
    bd60:	102f883a 	mov	r23,r2
    bd64:	d8c01217 	ldw	r3,72(sp)
    bd68:	18000a26 	beq	r3,zero,bd94 <___vfprintf_internal_r+0x480>
    bd6c:	b8800117 	ldw	r2,4(r23)
    bd70:	d9000f17 	ldw	r4,60(sp)
    bd74:	00c00b44 	movi	r3,45
    bd78:	d8c00905 	stb	r3,36(sp)
    bd7c:	b80b883a 	mov	r5,r23
    bd80:	d9800904 	addi	r6,sp,36
    bd84:	01c00044 	movi	r7,1
    bd88:	103ee83a 	callr	r2
    bd8c:	103fb21e 	bne	r2,zero,bc58 <___vfprintf_internal_r+0x344>
    bd90:	94800044 	addi	r18,r18,1
    bd94:	8d6dc83a 	sub	r22,r17,r21
    bd98:	057f4d0e 	bge	zero,r21,bad0 <___vfprintf_internal_r+0x1bc>
    bd9c:	dd400f17 	ldw	r21,60(sp)
    bda0:	00000206 	br	bdac <___vfprintf_internal_r+0x498>
    bda4:	94800044 	addi	r18,r18,1
    bda8:	8dbf4926 	beq	r17,r22,bad0 <___vfprintf_internal_r+0x1bc>
    bdac:	8c7fffc4 	addi	r17,r17,-1
    bdb0:	88c00003 	ldbu	r3,0(r17)
    bdb4:	b8800117 	ldw	r2,4(r23)
    bdb8:	a809883a 	mov	r4,r21
    bdbc:	d8c00905 	stb	r3,36(sp)
    bdc0:	b80b883a 	mov	r5,r23
    bdc4:	d9800904 	addi	r6,sp,36
    bdc8:	01c00044 	movi	r7,1
    bdcc:	103ee83a 	callr	r2
    bdd0:	103ff426 	beq	r2,zero,bda4 <___vfprintf_internal_r+0x490>
    bdd4:	04bfffc4 	movi	r18,-1
    bdd8:	003f0306 	br	b9e8 <___vfprintf_internal_r+0xd4>
    bddc:	dd401015 	stw	r21,64(sp)
    bde0:	05400084 	movi	r21,2
    bde4:	003ee606 	br	b980 <___vfprintf_internal_r+0x6c>
    bde8:	0005883a 	mov	r2,zero
    bdec:	003f2806 	br	ba90 <___vfprintf_internal_r+0x17c>
    bdf0:	0005883a 	mov	r2,zero
    bdf4:	003f1606 	br	ba50 <___vfprintf_internal_r+0x13c>
    bdf8:	d8c01117 	ldw	r3,68(sp)
    bdfc:	00ffd90e 	bge	zero,r3,bd64 <___vfprintf_internal_r+0x450>
    be00:	00800804 	movi	r2,32
    be04:	d8800885 	stb	r2,34(sp)
    be08:	b805883a 	mov	r2,r23
    be0c:	dc001515 	stw	r16,84(sp)
    be10:	882f883a 	mov	r23,r17
    be14:	1f3fffc4 	addi	fp,r3,-1
    be18:	05bfffc4 	movi	r22,-1
    be1c:	dc000f17 	ldw	r16,60(sp)
    be20:	1023883a 	mov	r17,r2
    be24:	00000206 	br	be30 <___vfprintf_internal_r+0x51c>
    be28:	e73fffc4 	addi	fp,fp,-1
    be2c:	e5bfc726 	beq	fp,r22,bd4c <___vfprintf_internal_r+0x438>
    be30:	88800117 	ldw	r2,4(r17)
    be34:	8009883a 	mov	r4,r16
    be38:	880b883a 	mov	r5,r17
    be3c:	d9800884 	addi	r6,sp,34
    be40:	01c00044 	movi	r7,1
    be44:	103ee83a 	callr	r2
    be48:	103ff726 	beq	r2,zero,be28 <___vfprintf_internal_r+0x514>
    be4c:	04bfffc4 	movi	r18,-1
    be50:	003ee506 	br	b9e8 <___vfprintf_internal_r+0xd4>
    be54:	01000044 	movi	r4,1
    be58:	d9000b15 	stw	r4,44(sp)
    be5c:	003f1806 	br	bac0 <___vfprintf_internal_r+0x1ac>
    be60:	b8c00117 	ldw	r3,4(r23)
    be64:	d9000f17 	ldw	r4,60(sp)
    be68:	d8800905 	stb	r2,36(sp)
    be6c:	b80b883a 	mov	r5,r23
    be70:	d9800904 	addi	r6,sp,36
    be74:	a80f883a 	mov	r7,r21
    be78:	183ee83a 	callr	r3
    be7c:	103f761e 	bne	r2,zero,bc58 <___vfprintf_internal_r+0x344>
    be80:	94800044 	addi	r18,r18,1
    be84:	002b883a 	mov	r21,zero
    be88:	003ebd06 	br	b980 <___vfprintf_internal_r+0x6c>
    be8c:	00c00044 	movi	r3,1
    be90:	d8c01415 	stw	r3,80(sp)
    be94:	05000404 	movi	r20,16
    be98:	003f7206 	br	bc64 <___vfprintf_internal_r+0x350>
    be9c:	d9000c17 	ldw	r4,48(sp)
    bea0:	9900420e 	bge	r19,r4,bfac <___vfprintf_internal_r+0x698>
    bea4:	df000f17 	ldw	fp,60(sp)
    bea8:	25bfffc4 	addi	r22,r4,-1
    beac:	00800804 	movi	r2,32
    beb0:	d8800845 	stb	r2,33(sp)
    beb4:	b023883a 	mov	r17,r22
    beb8:	057fffc4 	movi	r21,-1
    bebc:	8c7fffc4 	addi	r17,r17,-1
    bec0:	8d403926 	beq	r17,r21,bfa8 <___vfprintf_internal_r+0x694>
    bec4:	b8800117 	ldw	r2,4(r23)
    bec8:	e009883a 	mov	r4,fp
    becc:	b80b883a 	mov	r5,r23
    bed0:	d9800844 	addi	r6,sp,33
    bed4:	01c00044 	movi	r7,1
    bed8:	103ee83a 	callr	r2
    bedc:	103ff726 	beq	r2,zero,bebc <___vfprintf_internal_r+0x5a8>
    bee0:	04bfffc4 	movi	r18,-1
    bee4:	003ec006 	br	b9e8 <___vfprintf_internal_r+0xd4>
    bee8:	d9000e17 	ldw	r4,56(sp)
    beec:	d8c00e17 	ldw	r3,56(sp)
    bef0:	21000017 	ldw	r4,0(r4)
    bef4:	18c00104 	addi	r3,r3,4
    bef8:	d8c00e15 	stw	r3,56(sp)
    befc:	d9001215 	stw	r4,72(sp)
    bf00:	000b8ec0 	call	b8ec <strlen>
    bf04:	d9000c17 	ldw	r4,48(sp)
    bf08:	102d883a 	mov	r22,r2
    bf0c:	20b9c83a 	sub	fp,r4,r2
    bf10:	07001b0e 	bge	zero,fp,bf80 <___vfprintf_internal_r+0x66c>
    bf14:	00800804 	movi	r2,32
    bf18:	d8800805 	stb	r2,32(sp)
    bf1c:	b805883a 	mov	r2,r23
    bf20:	dc001115 	stw	r16,68(sp)
    bf24:	b02f883a 	mov	r23,r22
    bf28:	e47fffc4 	addi	r17,fp,-1
    bf2c:	902d883a 	mov	r22,r18
    bf30:	057fffc4 	movi	r21,-1
    bf34:	dc000f17 	ldw	r16,60(sp)
    bf38:	1025883a 	mov	r18,r2
    bf3c:	00000206 	br	bf48 <___vfprintf_internal_r+0x634>
    bf40:	8c7fffc4 	addi	r17,r17,-1
    bf44:	8d400826 	beq	r17,r21,bf68 <___vfprintf_internal_r+0x654>
    bf48:	90800117 	ldw	r2,4(r18)
    bf4c:	8009883a 	mov	r4,r16
    bf50:	900b883a 	mov	r5,r18
    bf54:	d9800804 	addi	r6,sp,32
    bf58:	01c00044 	movi	r7,1
    bf5c:	103ee83a 	callr	r2
    bf60:	103ff726 	beq	r2,zero,bf40 <___vfprintf_internal_r+0x62c>
    bf64:	003f3c06 	br	bc58 <___vfprintf_internal_r+0x344>
    bf68:	dc001117 	ldw	r16,68(sp)
    bf6c:	9005883a 	mov	r2,r18
    bf70:	b025883a 	mov	r18,r22
    bf74:	9725883a 	add	r18,r18,fp
    bf78:	b82d883a 	mov	r22,r23
    bf7c:	102f883a 	mov	r23,r2
    bf80:	b8800117 	ldw	r2,4(r23)
    bf84:	d9000f17 	ldw	r4,60(sp)
    bf88:	d9801217 	ldw	r6,72(sp)
    bf8c:	b80b883a 	mov	r5,r23
    bf90:	b00f883a 	mov	r7,r22
    bf94:	103ee83a 	callr	r2
    bf98:	103f2f1e 	bne	r2,zero,bc58 <___vfprintf_internal_r+0x344>
    bf9c:	95a5883a 	add	r18,r18,r22
    bfa0:	002b883a 	mov	r21,zero
    bfa4:	003e7606 	br	b980 <___vfprintf_internal_r+0x6c>
    bfa8:	95a5883a 	add	r18,r18,r22
    bfac:	d9400e17 	ldw	r5,56(sp)
    bfb0:	b8800117 	ldw	r2,4(r23)
    bfb4:	d9000f17 	ldw	r4,60(sp)
    bfb8:	28c00017 	ldw	r3,0(r5)
    bfbc:	d9800904 	addi	r6,sp,36
    bfc0:	b80b883a 	mov	r5,r23
    bfc4:	d8c00905 	stb	r3,36(sp)
    bfc8:	d8c00e17 	ldw	r3,56(sp)
    bfcc:	01c00044 	movi	r7,1
    bfd0:	1c400104 	addi	r17,r3,4
    bfd4:	103ee83a 	callr	r2
    bfd8:	103f1f1e 	bne	r2,zero,bc58 <___vfprintf_internal_r+0x344>
    bfdc:	94800044 	addi	r18,r18,1
    bfe0:	dc400e15 	stw	r17,56(sp)
    bfe4:	002b883a 	mov	r21,zero
    bfe8:	003e6506 	br	b980 <___vfprintf_internal_r+0x6c>
    bfec:	b8800117 	ldw	r2,4(r23)
    bff0:	d9000f17 	ldw	r4,60(sp)
    bff4:	00c00b44 	movi	r3,45
    bff8:	d8c00905 	stb	r3,36(sp)
    bffc:	b80b883a 	mov	r5,r23
    c000:	d9800904 	addi	r6,sp,36
    c004:	01c00044 	movi	r7,1
    c008:	103ee83a 	callr	r2
    c00c:	103f121e 	bne	r2,zero,bc58 <___vfprintf_internal_r+0x344>
    c010:	d8c01117 	ldw	r3,68(sp)
    c014:	94800044 	addi	r18,r18,1
    c018:	00fefc16 	blt	zero,r3,bc0c <___vfprintf_internal_r+0x2f8>
    c01c:	003f5d06 	br	bd94 <___vfprintf_internal_r+0x480>
    c020:	056bc83a 	sub	r21,zero,r21
    c024:	d8c01215 	stw	r3,72(sp)
    c028:	003f1406 	br	bc7c <___vfprintf_internal_r+0x368>
    c02c:	d8c01117 	ldw	r3,68(sp)
    c030:	8805883a 	mov	r2,r17
    c034:	dc001217 	ldw	r16,72(sp)
    c038:	b823883a 	mov	r17,r23
    c03c:	90e5883a 	add	r18,r18,r3
    c040:	102f883a 	mov	r23,r2
    c044:	003f5306 	br	bd94 <___vfprintf_internal_r+0x480>

0000c048 <__vfprintf_internal>:
    c048:	00800074 	movhi	r2,1
    c04c:	10b81c04 	addi	r2,r2,-8080
    c050:	2007883a 	mov	r3,r4
    c054:	11000017 	ldw	r4,0(r2)
    c058:	2805883a 	mov	r2,r5
    c05c:	300f883a 	mov	r7,r6
    c060:	180b883a 	mov	r5,r3
    c064:	100d883a 	mov	r6,r2
    c068:	000b9141 	jmpi	b914 <___vfprintf_internal_r>

0000c06c <__sfvwrite_small_dev>:
    c06c:	2880000b 	ldhu	r2,0(r5)
    c070:	defffa04 	addi	sp,sp,-24
    c074:	dcc00315 	stw	r19,12(sp)
    c078:	10c0020c 	andi	r3,r2,8
    c07c:	18ffffcc 	andi	r3,r3,65535
    c080:	18e0001c 	xori	r3,r3,32768
    c084:	dc800215 	stw	r18,8(sp)
    c088:	dc400115 	stw	r17,4(sp)
    c08c:	dfc00515 	stw	ra,20(sp)
    c090:	dd000415 	stw	r20,16(sp)
    c094:	dc000015 	stw	r16,0(sp)
    c098:	18e00004 	addi	r3,r3,-32768
    c09c:	2825883a 	mov	r18,r5
    c0a0:	2027883a 	mov	r19,r4
    c0a4:	3023883a 	mov	r17,r6
    c0a8:	18002626 	beq	r3,zero,c144 <__sfvwrite_small_dev+0xd8>
    c0ac:	2940008f 	ldh	r5,2(r5)
    c0b0:	28001016 	blt	r5,zero,c0f4 <__sfvwrite_small_dev+0x88>
    c0b4:	01c01a0e 	bge	zero,r7,c120 <__sfvwrite_small_dev+0xb4>
    c0b8:	3821883a 	mov	r16,r7
    c0bc:	05010004 	movi	r20,1024
    c0c0:	00000306 	br	c0d0 <__sfvwrite_small_dev+0x64>
    c0c4:	88a3883a 	add	r17,r17,r2
    c0c8:	0400150e 	bge	zero,r16,c120 <__sfvwrite_small_dev+0xb4>
    c0cc:	9140008f 	ldh	r5,2(r18)
    c0d0:	880d883a 	mov	r6,r17
    c0d4:	9809883a 	mov	r4,r19
    c0d8:	800f883a 	mov	r7,r16
    c0dc:	a400010e 	bge	r20,r16,c0e4 <__sfvwrite_small_dev+0x78>
    c0e0:	01c10004 	movi	r7,1024
    c0e4:	000c14c0 	call	c14c <_write_r>
    c0e8:	80a1c83a 	sub	r16,r16,r2
    c0ec:	00bff516 	blt	zero,r2,c0c4 <__sfvwrite_small_dev+0x58>
    c0f0:	9080000b 	ldhu	r2,0(r18)
    c0f4:	10801014 	ori	r2,r2,64
    c0f8:	9080000d 	sth	r2,0(r18)
    c0fc:	00bfffc4 	movi	r2,-1
    c100:	dfc00517 	ldw	ra,20(sp)
    c104:	dd000417 	ldw	r20,16(sp)
    c108:	dcc00317 	ldw	r19,12(sp)
    c10c:	dc800217 	ldw	r18,8(sp)
    c110:	dc400117 	ldw	r17,4(sp)
    c114:	dc000017 	ldw	r16,0(sp)
    c118:	dec00604 	addi	sp,sp,24
    c11c:	f800283a 	ret
    c120:	0005883a 	mov	r2,zero
    c124:	dfc00517 	ldw	ra,20(sp)
    c128:	dd000417 	ldw	r20,16(sp)
    c12c:	dcc00317 	ldw	r19,12(sp)
    c130:	dc800217 	ldw	r18,8(sp)
    c134:	dc400117 	ldw	r17,4(sp)
    c138:	dc000017 	ldw	r16,0(sp)
    c13c:	dec00604 	addi	sp,sp,24
    c140:	f800283a 	ret
    c144:	00bfffc4 	movi	r2,-1
    c148:	003fed06 	br	c100 <__sfvwrite_small_dev+0x94>

0000c14c <_write_r>:
    c14c:	defffd04 	addi	sp,sp,-12
    c150:	dc400115 	stw	r17,4(sp)
    c154:	dc000015 	stw	r16,0(sp)
    c158:	2023883a 	mov	r17,r4
    c15c:	04000074 	movhi	r16,1
    c160:	84390604 	addi	r16,r16,-7144
    c164:	2809883a 	mov	r4,r5
    c168:	300b883a 	mov	r5,r6
    c16c:	380d883a 	mov	r6,r7
    c170:	dfc00215 	stw	ra,8(sp)
    c174:	80000015 	stw	zero,0(r16)
    c178:	000c50c0 	call	c50c <write>
    c17c:	00ffffc4 	movi	r3,-1
    c180:	10c00526 	beq	r2,r3,c198 <_write_r+0x4c>
    c184:	dfc00217 	ldw	ra,8(sp)
    c188:	dc400117 	ldw	r17,4(sp)
    c18c:	dc000017 	ldw	r16,0(sp)
    c190:	dec00304 	addi	sp,sp,12
    c194:	f800283a 	ret
    c198:	80c00017 	ldw	r3,0(r16)
    c19c:	183ff926 	beq	r3,zero,c184 <_write_r+0x38>
    c1a0:	88c00015 	stw	r3,0(r17)
    c1a4:	dfc00217 	ldw	ra,8(sp)
    c1a8:	dc400117 	ldw	r17,4(sp)
    c1ac:	dc000017 	ldw	r16,0(sp)
    c1b0:	dec00304 	addi	sp,sp,12
    c1b4:	f800283a 	ret

0000c1b8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    c1b8:	defff004 	addi	sp,sp,-64
    c1bc:	df000f15 	stw	fp,60(sp)
    c1c0:	df000f04 	addi	fp,sp,60
    c1c4:	e13ffd15 	stw	r4,-12(fp)
    c1c8:	e17ffe15 	stw	r5,-8(fp)
    c1cc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    c1d0:	00bffa84 	movi	r2,-22
    c1d4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c1d8:	e0bffd17 	ldw	r2,-12(fp)
    c1dc:	10800828 	cmpgeui	r2,r2,32
    c1e0:	10005c1e 	bne	r2,zero,c354 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c1e4:	0005303a 	rdctl	r2,status
    c1e8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c1ec:	e0fff317 	ldw	r3,-52(fp)
    c1f0:	00bfff84 	movi	r2,-2
    c1f4:	1884703a 	and	r2,r3,r2
    c1f8:	1001703a 	wrctl	status,r2
  
  return context;
    c1fc:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    c200:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    c204:	00c00074 	movhi	r3,1
    c208:	18fb7904 	addi	r3,r3,-4636
    c20c:	e0bffd17 	ldw	r2,-12(fp)
    c210:	100490fa 	slli	r2,r2,3
    c214:	1885883a 	add	r2,r3,r2
    c218:	e0ffff17 	ldw	r3,-4(fp)
    c21c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    c220:	00c00074 	movhi	r3,1
    c224:	18fb7904 	addi	r3,r3,-4636
    c228:	e0bffd17 	ldw	r2,-12(fp)
    c22c:	100490fa 	slli	r2,r2,3
    c230:	1885883a 	add	r2,r3,r2
    c234:	10800104 	addi	r2,r2,4
    c238:	e0fffe17 	ldw	r3,-8(fp)
    c23c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    c240:	e0bfff17 	ldw	r2,-4(fp)
    c244:	10001f26 	beq	r2,zero,c2c4 <alt_irq_register+0x10c>
    c248:	e0bffd17 	ldw	r2,-12(fp)
    c24c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c250:	0005303a 	rdctl	r2,status
    c254:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c258:	e0fff517 	ldw	r3,-44(fp)
    c25c:	00bfff84 	movi	r2,-2
    c260:	1884703a 	and	r2,r3,r2
    c264:	1001703a 	wrctl	status,r2
  
  return context;
    c268:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c26c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    c270:	e0bff417 	ldw	r2,-48(fp)
    c274:	00c00044 	movi	r3,1
    c278:	1884983a 	sll	r2,r3,r2
    c27c:	1007883a 	mov	r3,r2
    c280:	00800074 	movhi	r2,1
    c284:	10b90704 	addi	r2,r2,-7140
    c288:	10800017 	ldw	r2,0(r2)
    c28c:	1886b03a 	or	r3,r3,r2
    c290:	00800074 	movhi	r2,1
    c294:	10b90704 	addi	r2,r2,-7140
    c298:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c29c:	00800074 	movhi	r2,1
    c2a0:	10b90704 	addi	r2,r2,-7140
    c2a4:	10800017 	ldw	r2,0(r2)
    c2a8:	100170fa 	wrctl	ienable,r2
    c2ac:	e0bff617 	ldw	r2,-40(fp)
    c2b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c2b4:	e0bff717 	ldw	r2,-36(fp)
    c2b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c2bc:	0005883a 	mov	r2,zero
    c2c0:	00001f06 	br	c340 <alt_irq_register+0x188>
    c2c4:	e0bffd17 	ldw	r2,-12(fp)
    c2c8:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c2cc:	0005303a 	rdctl	r2,status
    c2d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c2d4:	e0fff917 	ldw	r3,-28(fp)
    c2d8:	00bfff84 	movi	r2,-2
    c2dc:	1884703a 	and	r2,r3,r2
    c2e0:	1001703a 	wrctl	status,r2
  
  return context;
    c2e4:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c2e8:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    c2ec:	e0bff817 	ldw	r2,-32(fp)
    c2f0:	00c00044 	movi	r3,1
    c2f4:	1884983a 	sll	r2,r3,r2
    c2f8:	0084303a 	nor	r2,zero,r2
    c2fc:	1007883a 	mov	r3,r2
    c300:	00800074 	movhi	r2,1
    c304:	10b90704 	addi	r2,r2,-7140
    c308:	10800017 	ldw	r2,0(r2)
    c30c:	1886703a 	and	r3,r3,r2
    c310:	00800074 	movhi	r2,1
    c314:	10b90704 	addi	r2,r2,-7140
    c318:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c31c:	00800074 	movhi	r2,1
    c320:	10b90704 	addi	r2,r2,-7140
    c324:	10800017 	ldw	r2,0(r2)
    c328:	100170fa 	wrctl	ienable,r2
    c32c:	e0bffa17 	ldw	r2,-24(fp)
    c330:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c334:	e0bffb17 	ldw	r2,-20(fp)
    c338:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c33c:	0005883a 	mov	r2,zero
    c340:	e0bff115 	stw	r2,-60(fp)
    c344:	e0bff217 	ldw	r2,-56(fp)
    c348:	e0bffc15 	stw	r2,-16(fp)
    c34c:	e0bffc17 	ldw	r2,-16(fp)
    c350:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    c354:	e0bff117 	ldw	r2,-60(fp)
}
    c358:	e037883a 	mov	sp,fp
    c35c:	df000017 	ldw	fp,0(sp)
    c360:	dec00104 	addi	sp,sp,4
    c364:	f800283a 	ret

0000c368 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    c368:	defffc04 	addi	sp,sp,-16
    c36c:	df000315 	stw	fp,12(sp)
    c370:	df000304 	addi	fp,sp,12
    c374:	e13ffd15 	stw	r4,-12(fp)
    c378:	e17ffe15 	stw	r5,-8(fp)
    c37c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    c380:	e0fffe17 	ldw	r3,-8(fp)
    c384:	e0bffd17 	ldw	r2,-12(fp)
    c388:	18800e26 	beq	r3,r2,c3c4 <alt_load_section+0x5c>
  {
    while( to != end )
    c38c:	00000a06 	br	c3b8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    c390:	e0bffd17 	ldw	r2,-12(fp)
    c394:	10c00017 	ldw	r3,0(r2)
    c398:	e0bffe17 	ldw	r2,-8(fp)
    c39c:	10c00015 	stw	r3,0(r2)
    c3a0:	e0bffe17 	ldw	r2,-8(fp)
    c3a4:	10800104 	addi	r2,r2,4
    c3a8:	e0bffe15 	stw	r2,-8(fp)
    c3ac:	e0bffd17 	ldw	r2,-12(fp)
    c3b0:	10800104 	addi	r2,r2,4
    c3b4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    c3b8:	e0fffe17 	ldw	r3,-8(fp)
    c3bc:	e0bfff17 	ldw	r2,-4(fp)
    c3c0:	18bff31e 	bne	r3,r2,c390 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    c3c4:	e037883a 	mov	sp,fp
    c3c8:	df000017 	ldw	fp,0(sp)
    c3cc:	dec00104 	addi	sp,sp,4
    c3d0:	f800283a 	ret

0000c3d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    c3d4:	defffe04 	addi	sp,sp,-8
    c3d8:	dfc00115 	stw	ra,4(sp)
    c3dc:	df000015 	stw	fp,0(sp)
    c3e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    c3e4:	01000074 	movhi	r4,1
    c3e8:	21382604 	addi	r4,r4,-8040
    c3ec:	01400074 	movhi	r5,1
    c3f0:	29775404 	addi	r5,r5,-8880
    c3f4:	01800074 	movhi	r6,1
    c3f8:	31b82604 	addi	r6,r6,-8040
    c3fc:	000c3680 	call	c368 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    c400:	01000074 	movhi	r4,1
    c404:	21200804 	addi	r4,r4,-32736
    c408:	01400074 	movhi	r5,1
    c40c:	29600804 	addi	r5,r5,-32736
    c410:	01800074 	movhi	r6,1
    c414:	31a06f04 	addi	r6,r6,-32324
    c418:	000c3680 	call	c368 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    c41c:	01000074 	movhi	r4,1
    c420:	2136cc04 	addi	r4,r4,-9424
    c424:	01400074 	movhi	r5,1
    c428:	2976cc04 	addi	r5,r5,-9424
    c42c:	01800074 	movhi	r6,1
    c430:	31b75404 	addi	r6,r6,-8880
    c434:	000c3680 	call	c368 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    c438:	000ce1c0 	call	ce1c <alt_dcache_flush_all>
  alt_icache_flush_all();
    c43c:	000cf540 	call	cf54 <alt_icache_flush_all>
}
    c440:	e037883a 	mov	sp,fp
    c444:	dfc00117 	ldw	ra,4(sp)
    c448:	df000017 	ldw	fp,0(sp)
    c44c:	dec00204 	addi	sp,sp,8
    c450:	f800283a 	ret

0000c454 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    c454:	defffd04 	addi	sp,sp,-12
    c458:	dfc00215 	stw	ra,8(sp)
    c45c:	df000115 	stw	fp,4(sp)
    c460:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    c464:	0009883a 	mov	r4,zero
    c468:	000c6340 	call	c634 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    c46c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    c470:	000c6680 	call	c668 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    c474:	01000074 	movhi	r4,1
    c478:	21374604 	addi	r4,r4,-8936
    c47c:	01400074 	movhi	r5,1
    c480:	29774604 	addi	r5,r5,-8936
    c484:	01800074 	movhi	r6,1
    c488:	31b74604 	addi	r6,r6,-8936
    c48c:	000d0640 	call	d064 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    c490:	d120fc17 	ldw	r4,-31760(gp)
    c494:	d0e0fd17 	ldw	r3,-31756(gp)
    c498:	d0a0fe17 	ldw	r2,-31752(gp)
    c49c:	180b883a 	mov	r5,r3
    c4a0:	100d883a 	mov	r6,r2
    c4a4:	00087e80 	call	87e8 <main>
    c4a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    c4ac:	01000044 	movi	r4,1
    c4b0:	000cd500 	call	cd50 <close>
  exit (result);
    c4b4:	e13fff17 	ldw	r4,-4(fp)
    c4b8:	000d8b40 	call	d8b4 <exit>

0000c4bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c4bc:	defffe04 	addi	sp,sp,-8
    c4c0:	dfc00115 	stw	ra,4(sp)
    c4c4:	df000015 	stw	fp,0(sp)
    c4c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c4cc:	00800074 	movhi	r2,1
    c4d0:	10b82304 	addi	r2,r2,-8052
    c4d4:	10800017 	ldw	r2,0(r2)
    c4d8:	10000526 	beq	r2,zero,c4f0 <alt_get_errno+0x34>
    c4dc:	00800074 	movhi	r2,1
    c4e0:	10b82304 	addi	r2,r2,-8052
    c4e4:	10800017 	ldw	r2,0(r2)
    c4e8:	103ee83a 	callr	r2
    c4ec:	00000206 	br	c4f8 <alt_get_errno+0x3c>
    c4f0:	00800074 	movhi	r2,1
    c4f4:	10b90604 	addi	r2,r2,-7144
}
    c4f8:	e037883a 	mov	sp,fp
    c4fc:	dfc00117 	ldw	ra,4(sp)
    c500:	df000017 	ldw	fp,0(sp)
    c504:	dec00204 	addi	sp,sp,8
    c508:	f800283a 	ret

0000c50c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c50c:	defff904 	addi	sp,sp,-28
    c510:	dfc00615 	stw	ra,24(sp)
    c514:	df000515 	stw	fp,20(sp)
    c518:	df000504 	addi	fp,sp,20
    c51c:	e13ffd15 	stw	r4,-12(fp)
    c520:	e17ffe15 	stw	r5,-8(fp)
    c524:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c528:	e0bffd17 	ldw	r2,-12(fp)
    c52c:	10000716 	blt	r2,zero,c54c <write+0x40>
    c530:	e13ffd17 	ldw	r4,-12(fp)
    c534:	01400304 	movi	r5,12
    c538:	000b14c0 	call	b14c <__mulsi3>
    c53c:	00c00074 	movhi	r3,1
    c540:	18f7ac04 	addi	r3,r3,-8528
    c544:	10c5883a 	add	r2,r2,r3
    c548:	00000106 	br	c550 <write+0x44>
    c54c:	0005883a 	mov	r2,zero
    c550:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    c554:	e0bffb17 	ldw	r2,-20(fp)
    c558:	10001f26 	beq	r2,zero,c5d8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c55c:	e0bffb17 	ldw	r2,-20(fp)
    c560:	10800217 	ldw	r2,8(r2)
    c564:	108000cc 	andi	r2,r2,3
    c568:	10001726 	beq	r2,zero,c5c8 <write+0xbc>
    c56c:	e0bffb17 	ldw	r2,-20(fp)
    c570:	10800017 	ldw	r2,0(r2)
    c574:	10800617 	ldw	r2,24(r2)
    c578:	10001326 	beq	r2,zero,c5c8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c57c:	e0bffb17 	ldw	r2,-20(fp)
    c580:	10800017 	ldw	r2,0(r2)
    c584:	10c00617 	ldw	r3,24(r2)
    c588:	e0bfff17 	ldw	r2,-4(fp)
    c58c:	e13ffb17 	ldw	r4,-20(fp)
    c590:	e17ffe17 	ldw	r5,-8(fp)
    c594:	100d883a 	mov	r6,r2
    c598:	183ee83a 	callr	r3
    c59c:	e0bffc15 	stw	r2,-16(fp)
    c5a0:	e0bffc17 	ldw	r2,-16(fp)
    c5a4:	1000060e 	bge	r2,zero,c5c0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    c5a8:	000c4bc0 	call	c4bc <alt_get_errno>
    c5ac:	e0fffc17 	ldw	r3,-16(fp)
    c5b0:	00c7c83a 	sub	r3,zero,r3
    c5b4:	10c00015 	stw	r3,0(r2)
        return -1;
    c5b8:	00bfffc4 	movi	r2,-1
    c5bc:	00000a06 	br	c5e8 <write+0xdc>
      }
      return rval;
    c5c0:	e0bffc17 	ldw	r2,-16(fp)
    c5c4:	00000806 	br	c5e8 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c5c8:	000c4bc0 	call	c4bc <alt_get_errno>
    c5cc:	00c00344 	movi	r3,13
    c5d0:	10c00015 	stw	r3,0(r2)
    c5d4:	00000306 	br	c5e4 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c5d8:	000c4bc0 	call	c4bc <alt_get_errno>
    c5dc:	00c01444 	movi	r3,81
    c5e0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    c5e4:	00bfffc4 	movi	r2,-1
}
    c5e8:	e037883a 	mov	sp,fp
    c5ec:	dfc00117 	ldw	ra,4(sp)
    c5f0:	df000017 	ldw	fp,0(sp)
    c5f4:	dec00204 	addi	sp,sp,8
    c5f8:	f800283a 	ret

0000c5fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c5fc:	defffd04 	addi	sp,sp,-12
    c600:	dfc00215 	stw	ra,8(sp)
    c604:	df000115 	stw	fp,4(sp)
    c608:	df000104 	addi	fp,sp,4
    c60c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c610:	e13fff17 	ldw	r4,-4(fp)
    c614:	01400074 	movhi	r5,1
    c618:	29782004 	addi	r5,r5,-8064
    c61c:	000ceb40 	call	ceb4 <alt_dev_llist_insert>
}
    c620:	e037883a 	mov	sp,fp
    c624:	dfc00117 	ldw	ra,4(sp)
    c628:	df000017 	ldw	fp,0(sp)
    c62c:	dec00204 	addi	sp,sp,8
    c630:	f800283a 	ret

0000c634 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c634:	defffd04 	addi	sp,sp,-12
    c638:	dfc00215 	stw	ra,8(sp)
    c63c:	df000115 	stw	fp,4(sp)
    c640:	df000104 	addi	fp,sp,4
    c644:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    c648:	000d5900 	call	d590 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c64c:	00800044 	movi	r2,1
    c650:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c654:	e037883a 	mov	sp,fp
    c658:	dfc00117 	ldw	ra,4(sp)
    c65c:	df000017 	ldw	fp,0(sp)
    c660:	dec00204 	addi	sp,sp,8
    c664:	f800283a 	ret

0000c668 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c668:	defffe04 	addi	sp,sp,-8
    c66c:	dfc00115 	stw	ra,4(sp)
    c670:	df000015 	stw	fp,0(sp)
    c674:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLOCK_TIMER, sys_clock_timer);
    c678:	01000074 	movhi	r4,1
    c67c:	21050804 	addi	r4,r4,5152
    c680:	000b883a 	mov	r5,zero
    c684:	01800044 	movi	r6,1
    c688:	01c0fa04 	movi	r7,1000
    c68c:	000c9840 	call	c984 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    c690:	01000074 	movhi	r4,1
    c694:	21378c04 	addi	r4,r4,-8656
    c698:	000c5fc0 	call	c5fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    c69c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    c6a0:	01000074 	movhi	r4,1
    c6a4:	21379704 	addi	r4,r4,-8612
    c6a8:	000c5fc0 	call	c5fc <alt_dev_reg>
}
    c6ac:	e037883a 	mov	sp,fp
    c6b0:	dfc00117 	ldw	ra,4(sp)
    c6b4:	df000017 	ldw	fp,0(sp)
    c6b8:	dec00204 	addi	sp,sp,8
    c6bc:	f800283a 	ret

0000c6c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c6c0:	defffa04 	addi	sp,sp,-24
    c6c4:	dfc00515 	stw	ra,20(sp)
    c6c8:	df000415 	stw	fp,16(sp)
    c6cc:	df000404 	addi	fp,sp,16
    c6d0:	e13ffd15 	stw	r4,-12(fp)
    c6d4:	e17ffe15 	stw	r5,-8(fp)
    c6d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c6dc:	e0bffd17 	ldw	r2,-12(fp)
    c6e0:	10800017 	ldw	r2,0(r2)
    c6e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c6e8:	e0bffc17 	ldw	r2,-16(fp)
    c6ec:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    c6f0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c6f4:	10800217 	ldw	r2,8(r2)
    c6f8:	1809883a 	mov	r4,r3
    c6fc:	e17ffe17 	ldw	r5,-8(fp)
    c700:	e1bfff17 	ldw	r6,-4(fp)
    c704:	100f883a 	mov	r7,r2
    c708:	000c7800 	call	c780 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c70c:	e037883a 	mov	sp,fp
    c710:	dfc00117 	ldw	ra,4(sp)
    c714:	df000017 	ldw	fp,0(sp)
    c718:	dec00204 	addi	sp,sp,8
    c71c:	f800283a 	ret

0000c720 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c720:	defffa04 	addi	sp,sp,-24
    c724:	dfc00515 	stw	ra,20(sp)
    c728:	df000415 	stw	fp,16(sp)
    c72c:	df000404 	addi	fp,sp,16
    c730:	e13ffd15 	stw	r4,-12(fp)
    c734:	e17ffe15 	stw	r5,-8(fp)
    c738:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c73c:	e0bffd17 	ldw	r2,-12(fp)
    c740:	10800017 	ldw	r2,0(r2)
    c744:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c748:	e0bffc17 	ldw	r2,-16(fp)
    c74c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    c750:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c754:	10800217 	ldw	r2,8(r2)
    c758:	1809883a 	mov	r4,r3
    c75c:	e17ffe17 	ldw	r5,-8(fp)
    c760:	e1bfff17 	ldw	r6,-4(fp)
    c764:	100f883a 	mov	r7,r2
    c768:	000c8740 	call	c874 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c76c:	e037883a 	mov	sp,fp
    c770:	dfc00117 	ldw	ra,4(sp)
    c774:	df000017 	ldw	fp,0(sp)
    c778:	dec00204 	addi	sp,sp,8
    c77c:	f800283a 	ret

0000c780 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    c780:	defff704 	addi	sp,sp,-36
    c784:	df000815 	stw	fp,32(sp)
    c788:	df000804 	addi	fp,sp,32
    c78c:	e13ffc15 	stw	r4,-16(fp)
    c790:	e17ffd15 	stw	r5,-12(fp)
    c794:	e1bffe15 	stw	r6,-8(fp)
    c798:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    c79c:	e0bffc17 	ldw	r2,-16(fp)
    c7a0:	10800017 	ldw	r2,0(r2)
    c7a4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    c7a8:	e0bffd17 	ldw	r2,-12(fp)
    c7ac:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    c7b0:	e0bffe17 	ldw	r2,-8(fp)
    c7b4:	e0fffd17 	ldw	r3,-12(fp)
    c7b8:	1885883a 	add	r2,r3,r2
    c7bc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    c7c0:	00001406 	br	c814 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c7c4:	e0bff917 	ldw	r2,-28(fp)
    c7c8:	10800037 	ldwio	r2,0(r2)
    c7cc:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    c7d0:	e0bffb17 	ldw	r2,-20(fp)
    c7d4:	10a0000c 	andi	r2,r2,32768
    c7d8:	10000826 	beq	r2,zero,c7fc <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c7dc:	e0bffb17 	ldw	r2,-20(fp)
    c7e0:	1007883a 	mov	r3,r2
    c7e4:	e0bff817 	ldw	r2,-32(fp)
    c7e8:	10c00005 	stb	r3,0(r2)
    c7ec:	e0bff817 	ldw	r2,-32(fp)
    c7f0:	10800044 	addi	r2,r2,1
    c7f4:	e0bff815 	stw	r2,-32(fp)
    c7f8:	00000606 	br	c814 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    c7fc:	e0fff817 	ldw	r3,-32(fp)
    c800:	e0bffd17 	ldw	r2,-12(fp)
    c804:	1880071e 	bne	r3,r2,c824 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    c808:	e0bfff17 	ldw	r2,-4(fp)
    c80c:	1090000c 	andi	r2,r2,16384
    c810:	1000061e 	bne	r2,zero,c82c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    c814:	e0fff817 	ldw	r3,-32(fp)
    c818:	e0bffa17 	ldw	r2,-24(fp)
    c81c:	18bfe936 	bltu	r3,r2,c7c4 <altera_avalon_jtag_uart_read+0x44>
    c820:	00000306 	br	c830 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    c824:	0001883a 	nop
    c828:	00000106 	br	c830 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    c82c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    c830:	e0fff817 	ldw	r3,-32(fp)
    c834:	e0bffd17 	ldw	r2,-12(fp)
    c838:	18800426 	beq	r3,r2,c84c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    c83c:	e0fff817 	ldw	r3,-32(fp)
    c840:	e0bffd17 	ldw	r2,-12(fp)
    c844:	1885c83a 	sub	r2,r3,r2
    c848:	00000606 	br	c864 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    c84c:	e0bfff17 	ldw	r2,-4(fp)
    c850:	1090000c 	andi	r2,r2,16384
    c854:	10000226 	beq	r2,zero,c860 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    c858:	00bffd44 	movi	r2,-11
    c85c:	00000106 	br	c864 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    c860:	00bffec4 	movi	r2,-5
}
    c864:	e037883a 	mov	sp,fp
    c868:	df000017 	ldw	fp,0(sp)
    c86c:	dec00104 	addi	sp,sp,4
    c870:	f800283a 	ret

0000c874 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c874:	defff904 	addi	sp,sp,-28
    c878:	df000615 	stw	fp,24(sp)
    c87c:	df000604 	addi	fp,sp,24
    c880:	e13ffc15 	stw	r4,-16(fp)
    c884:	e17ffd15 	stw	r5,-12(fp)
    c888:	e1bffe15 	stw	r6,-8(fp)
    c88c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    c890:	e0bffc17 	ldw	r2,-16(fp)
    c894:	10800017 	ldw	r2,0(r2)
    c898:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    c89c:	e0bffe17 	ldw	r2,-8(fp)
    c8a0:	e0fffd17 	ldw	r3,-12(fp)
    c8a4:	1885883a 	add	r2,r3,r2
    c8a8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    c8ac:	00000f06 	br	c8ec <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    c8b0:	e0bffa17 	ldw	r2,-24(fp)
    c8b4:	10800104 	addi	r2,r2,4
    c8b8:	10800037 	ldwio	r2,0(r2)
    c8bc:	10bfffec 	andhi	r2,r2,65535
    c8c0:	10000a26 	beq	r2,zero,c8ec <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    c8c4:	e0bffa17 	ldw	r2,-24(fp)
    c8c8:	e0fffd17 	ldw	r3,-12(fp)
    c8cc:	18c00003 	ldbu	r3,0(r3)
    c8d0:	18c03fcc 	andi	r3,r3,255
    c8d4:	18c0201c 	xori	r3,r3,128
    c8d8:	18ffe004 	addi	r3,r3,-128
    c8dc:	e13ffd17 	ldw	r4,-12(fp)
    c8e0:	21000044 	addi	r4,r4,1
    c8e4:	e13ffd15 	stw	r4,-12(fp)
    c8e8:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    c8ec:	e0fffd17 	ldw	r3,-12(fp)
    c8f0:	e0bffb17 	ldw	r2,-20(fp)
    c8f4:	18bfee36 	bltu	r3,r2,c8b0 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    c8f8:	e0bffe17 	ldw	r2,-8(fp)
}
    c8fc:	e037883a 	mov	sp,fp
    c900:	df000017 	ldw	fp,0(sp)
    c904:	dec00104 	addi	sp,sp,4
    c908:	f800283a 	ret

0000c90c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c90c:	defff904 	addi	sp,sp,-28
    c910:	dfc00615 	stw	ra,24(sp)
    c914:	df000515 	stw	fp,20(sp)
    c918:	df000504 	addi	fp,sp,20
    c91c:	e13ffe15 	stw	r4,-8(fp)
    c920:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c924:	0007883a 	mov	r3,zero
    c928:	e0bffe17 	ldw	r2,-8(fp)
    c92c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c930:	e0bffe17 	ldw	r2,-8(fp)
    c934:	10800104 	addi	r2,r2,4
    c938:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c93c:	0005303a 	rdctl	r2,status
    c940:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c944:	e0fffc17 	ldw	r3,-16(fp)
    c948:	00bfff84 	movi	r2,-2
    c94c:	1884703a 	and	r2,r3,r2
    c950:	1001703a 	wrctl	status,r2
  
  return context;
    c954:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c958:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    c95c:	000d48c0 	call	d48c <alt_tick>
    c960:	e0bffb17 	ldw	r2,-20(fp)
    c964:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c968:	e0bffd17 	ldw	r2,-12(fp)
    c96c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c970:	e037883a 	mov	sp,fp
    c974:	dfc00117 	ldw	ra,4(sp)
    c978:	df000017 	ldw	fp,0(sp)
    c97c:	dec00204 	addi	sp,sp,8
    c980:	f800283a 	ret

0000c984 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c984:	defff904 	addi	sp,sp,-28
    c988:	dfc00615 	stw	ra,24(sp)
    c98c:	df000515 	stw	fp,20(sp)
    c990:	df000504 	addi	fp,sp,20
    c994:	e13ffc15 	stw	r4,-16(fp)
    c998:	e17ffd15 	stw	r5,-12(fp)
    c99c:	e1bffe15 	stw	r6,-8(fp)
    c9a0:	e1ffff15 	stw	r7,-4(fp)
    c9a4:	e0bfff17 	ldw	r2,-4(fp)
    c9a8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c9ac:	00800074 	movhi	r2,1
    c9b0:	10b90b04 	addi	r2,r2,-7124
    c9b4:	10800017 	ldw	r2,0(r2)
    c9b8:	1000041e 	bne	r2,zero,c9cc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    c9bc:	00800074 	movhi	r2,1
    c9c0:	10b90b04 	addi	r2,r2,-7124
    c9c4:	e0fffb17 	ldw	r3,-20(fp)
    c9c8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c9cc:	e0bffc17 	ldw	r2,-16(fp)
    c9d0:	10800104 	addi	r2,r2,4
    c9d4:	00c001c4 	movi	r3,7
    c9d8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    c9dc:	e13ffe17 	ldw	r4,-8(fp)
    c9e0:	e17ffc17 	ldw	r5,-16(fp)
    c9e4:	01800074 	movhi	r6,1
    c9e8:	31b24304 	addi	r6,r6,-14068
    c9ec:	000c1b80 	call	c1b8 <alt_irq_register>
#endif  
}
    c9f0:	e037883a 	mov	sp,fp
    c9f4:	dfc00117 	ldw	ra,4(sp)
    c9f8:	df000017 	ldw	fp,0(sp)
    c9fc:	dec00204 	addi	sp,sp,8
    ca00:	f800283a 	ret

0000ca04 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ca04:	defffa04 	addi	sp,sp,-24
    ca08:	dfc00515 	stw	ra,20(sp)
    ca0c:	df000415 	stw	fp,16(sp)
    ca10:	df000404 	addi	fp,sp,16
    ca14:	e13ffd15 	stw	r4,-12(fp)
    ca18:	e17ffe15 	stw	r5,-8(fp)
    ca1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    ca20:	e0bffd17 	ldw	r2,-12(fp)
    ca24:	10800017 	ldw	r2,0(r2)
    ca28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    ca2c:	e0bffc17 	ldw	r2,-16(fp)
    ca30:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    ca34:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    ca38:	10800217 	ldw	r2,8(r2)
    ca3c:	1809883a 	mov	r4,r3
    ca40:	e17ffe17 	ldw	r5,-8(fp)
    ca44:	e1bfff17 	ldw	r6,-4(fp)
    ca48:	100f883a 	mov	r7,r2
    ca4c:	000cb140 	call	cb14 <altera_avalon_uart_read>
      fd->fd_flags);
}
    ca50:	e037883a 	mov	sp,fp
    ca54:	dfc00117 	ldw	ra,4(sp)
    ca58:	df000017 	ldw	fp,0(sp)
    ca5c:	dec00204 	addi	sp,sp,8
    ca60:	f800283a 	ret

0000ca64 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ca64:	defffa04 	addi	sp,sp,-24
    ca68:	dfc00515 	stw	ra,20(sp)
    ca6c:	df000415 	stw	fp,16(sp)
    ca70:	df000404 	addi	fp,sp,16
    ca74:	e13ffd15 	stw	r4,-12(fp)
    ca78:	e17ffe15 	stw	r5,-8(fp)
    ca7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    ca80:	e0bffd17 	ldw	r2,-12(fp)
    ca84:	10800017 	ldw	r2,0(r2)
    ca88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    ca8c:	e0bffc17 	ldw	r2,-16(fp)
    ca90:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    ca94:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    ca98:	10800217 	ldw	r2,8(r2)
    ca9c:	1809883a 	mov	r4,r3
    caa0:	e17ffe17 	ldw	r5,-8(fp)
    caa4:	e1bfff17 	ldw	r6,-4(fp)
    caa8:	100f883a 	mov	r7,r2
    caac:	000cc240 	call	cc24 <altera_avalon_uart_write>
      fd->fd_flags);
}
    cab0:	e037883a 	mov	sp,fp
    cab4:	dfc00117 	ldw	ra,4(sp)
    cab8:	df000017 	ldw	fp,0(sp)
    cabc:	dec00204 	addi	sp,sp,8
    cac0:	f800283a 	ret

0000cac4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cac4:	defffe04 	addi	sp,sp,-8
    cac8:	dfc00115 	stw	ra,4(sp)
    cacc:	df000015 	stw	fp,0(sp)
    cad0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cad4:	00800074 	movhi	r2,1
    cad8:	10b82304 	addi	r2,r2,-8052
    cadc:	10800017 	ldw	r2,0(r2)
    cae0:	10000526 	beq	r2,zero,caf8 <alt_get_errno+0x34>
    cae4:	00800074 	movhi	r2,1
    cae8:	10b82304 	addi	r2,r2,-8052
    caec:	10800017 	ldw	r2,0(r2)
    caf0:	103ee83a 	callr	r2
    caf4:	00000206 	br	cb00 <alt_get_errno+0x3c>
    caf8:	00800074 	movhi	r2,1
    cafc:	10b90604 	addi	r2,r2,-7144
}
    cb00:	e037883a 	mov	sp,fp
    cb04:	dfc00117 	ldw	ra,4(sp)
    cb08:	df000017 	ldw	fp,0(sp)
    cb0c:	dec00204 	addi	sp,sp,8
    cb10:	f800283a 	ret

0000cb14 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    cb14:	defff804 	addi	sp,sp,-32
    cb18:	dfc00715 	stw	ra,28(sp)
    cb1c:	df000615 	stw	fp,24(sp)
    cb20:	df000604 	addi	fp,sp,24
    cb24:	e13ffc15 	stw	r4,-16(fp)
    cb28:	e17ffd15 	stw	r5,-12(fp)
    cb2c:	e1bffe15 	stw	r6,-8(fp)
    cb30:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    cb34:	e0bfff17 	ldw	r2,-4(fp)
    cb38:	1090000c 	andi	r2,r2,16384
    cb3c:	1005003a 	cmpeq	r2,r2,zero
    cb40:	10803fcc 	andi	r2,r2,255
    cb44:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    cb48:	e0bffc17 	ldw	r2,-16(fp)
    cb4c:	10800017 	ldw	r2,0(r2)
    cb50:	10800204 	addi	r2,r2,8
    cb54:	10800037 	ldwio	r2,0(r2)
    cb58:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    cb5c:	e0bffc17 	ldw	r2,-16(fp)
    cb60:	10800017 	ldw	r2,0(r2)
    cb64:	10800204 	addi	r2,r2,8
    cb68:	0007883a 	mov	r3,zero
    cb6c:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    cb70:	e0bffb17 	ldw	r2,-20(fp)
    cb74:	1080200c 	andi	r2,r2,128
    cb78:	10000b26 	beq	r2,zero,cba8 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    cb7c:	e0bffc17 	ldw	r2,-16(fp)
    cb80:	10800017 	ldw	r2,0(r2)
    cb84:	10800037 	ldwio	r2,0(r2)
    cb88:	1007883a 	mov	r3,r2
    cb8c:	e0bffd17 	ldw	r2,-12(fp)
    cb90:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    cb94:	e0bffb17 	ldw	r2,-20(fp)
    cb98:	108000cc 	andi	r2,r2,3
    cb9c:	1000021e 	bne	r2,zero,cba8 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    cba0:	00800044 	movi	r2,1
    cba4:	00000606 	br	cbc0 <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    cba8:	e0bffa17 	ldw	r2,-24(fp)
    cbac:	103fe61e 	bne	r2,zero,cb48 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
    cbb0:	000cac40 	call	cac4 <alt_get_errno>
    cbb4:	00c002c4 	movi	r3,11
    cbb8:	10c00015 	stw	r3,0(r2)
 
  return 0;
    cbbc:	0005883a 	mov	r2,zero
}
    cbc0:	e037883a 	mov	sp,fp
    cbc4:	dfc00117 	ldw	ra,4(sp)
    cbc8:	df000017 	ldw	fp,0(sp)
    cbcc:	dec00204 	addi	sp,sp,8
    cbd0:	f800283a 	ret

0000cbd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cbd4:	defffe04 	addi	sp,sp,-8
    cbd8:	dfc00115 	stw	ra,4(sp)
    cbdc:	df000015 	stw	fp,0(sp)
    cbe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cbe4:	00800074 	movhi	r2,1
    cbe8:	10b82304 	addi	r2,r2,-8052
    cbec:	10800017 	ldw	r2,0(r2)
    cbf0:	10000526 	beq	r2,zero,cc08 <alt_get_errno+0x34>
    cbf4:	00800074 	movhi	r2,1
    cbf8:	10b82304 	addi	r2,r2,-8052
    cbfc:	10800017 	ldw	r2,0(r2)
    cc00:	103ee83a 	callr	r2
    cc04:	00000206 	br	cc10 <alt_get_errno+0x3c>
    cc08:	00800074 	movhi	r2,1
    cc0c:	10b90604 	addi	r2,r2,-7144
}
    cc10:	e037883a 	mov	sp,fp
    cc14:	dfc00117 	ldw	ra,4(sp)
    cc18:	df000017 	ldw	fp,0(sp)
    cc1c:	dec00204 	addi	sp,sp,8
    cc20:	f800283a 	ret

0000cc24 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    cc24:	defff704 	addi	sp,sp,-36
    cc28:	dfc00815 	stw	ra,32(sp)
    cc2c:	df000715 	stw	fp,28(sp)
    cc30:	df000704 	addi	fp,sp,28
    cc34:	e13ffc15 	stw	r4,-16(fp)
    cc38:	e17ffd15 	stw	r5,-12(fp)
    cc3c:	e1bffe15 	stw	r6,-8(fp)
    cc40:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    cc44:	e0bfff17 	ldw	r2,-4(fp)
    cc48:	1090000c 	andi	r2,r2,16384
    cc4c:	1005003a 	cmpeq	r2,r2,zero
    cc50:	10803fcc 	andi	r2,r2,255
    cc54:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    cc58:	e0bffe17 	ldw	r2,-8(fp)
    cc5c:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    cc60:	e0bffc17 	ldw	r2,-16(fp)
    cc64:	10800017 	ldw	r2,0(r2)
    cc68:	10800204 	addi	r2,r2,8
    cc6c:	10800037 	ldwio	r2,0(r2)
    cc70:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    cc74:	e0bffb17 	ldw	r2,-20(fp)
    cc78:	1080100c 	andi	r2,r2,64
    cc7c:	10000f26 	beq	r2,zero,ccbc <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    cc80:	e0bffc17 	ldw	r2,-16(fp)
    cc84:	10800017 	ldw	r2,0(r2)
    cc88:	10800104 	addi	r2,r2,4
    cc8c:	e0fffd17 	ldw	r3,-12(fp)
    cc90:	18c00003 	ldbu	r3,0(r3)
    cc94:	18c03fcc 	andi	r3,r3,255
    cc98:	18c0201c 	xori	r3,r3,128
    cc9c:	18ffe004 	addi	r3,r3,-128
    cca0:	e13ffd17 	ldw	r4,-12(fp)
    cca4:	21000044 	addi	r4,r4,1
    cca8:	e13ffd15 	stw	r4,-12(fp)
    ccac:	10c00035 	stwio	r3,0(r2)
      count--;
    ccb0:	e0bff917 	ldw	r2,-28(fp)
    ccb4:	10bfffc4 	addi	r2,r2,-1
    ccb8:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    ccbc:	e0bffa17 	ldw	r2,-24(fp)
    ccc0:	10000226 	beq	r2,zero,cccc <altera_avalon_uart_write+0xa8>
    ccc4:	e0bff917 	ldw	r2,-28(fp)
    ccc8:	103fe51e 	bne	r2,zero,cc60 <altera_avalon_uart_write+0x3c>

  if (count)
    cccc:	e0bff917 	ldw	r2,-28(fp)
    ccd0:	10000326 	beq	r2,zero,cce0 <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    ccd4:	000cbd40 	call	cbd4 <alt_get_errno>
    ccd8:	00c002c4 	movi	r3,11
    ccdc:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    cce0:	e0fffe17 	ldw	r3,-8(fp)
    cce4:	e0bff917 	ldw	r2,-28(fp)
    cce8:	1885c83a 	sub	r2,r3,r2
}
    ccec:	e037883a 	mov	sp,fp
    ccf0:	dfc00117 	ldw	ra,4(sp)
    ccf4:	df000017 	ldw	fp,0(sp)
    ccf8:	dec00204 	addi	sp,sp,8
    ccfc:	f800283a 	ret

0000cd00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cd00:	defffe04 	addi	sp,sp,-8
    cd04:	dfc00115 	stw	ra,4(sp)
    cd08:	df000015 	stw	fp,0(sp)
    cd0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cd10:	00800074 	movhi	r2,1
    cd14:	10b82304 	addi	r2,r2,-8052
    cd18:	10800017 	ldw	r2,0(r2)
    cd1c:	10000526 	beq	r2,zero,cd34 <alt_get_errno+0x34>
    cd20:	00800074 	movhi	r2,1
    cd24:	10b82304 	addi	r2,r2,-8052
    cd28:	10800017 	ldw	r2,0(r2)
    cd2c:	103ee83a 	callr	r2
    cd30:	00000206 	br	cd3c <alt_get_errno+0x3c>
    cd34:	00800074 	movhi	r2,1
    cd38:	10b90604 	addi	r2,r2,-7144
}
    cd3c:	e037883a 	mov	sp,fp
    cd40:	dfc00117 	ldw	ra,4(sp)
    cd44:	df000017 	ldw	fp,0(sp)
    cd48:	dec00204 	addi	sp,sp,8
    cd4c:	f800283a 	ret

0000cd50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cd50:	defffb04 	addi	sp,sp,-20
    cd54:	dfc00415 	stw	ra,16(sp)
    cd58:	df000315 	stw	fp,12(sp)
    cd5c:	df000304 	addi	fp,sp,12
    cd60:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cd64:	e0bfff17 	ldw	r2,-4(fp)
    cd68:	10000716 	blt	r2,zero,cd88 <close+0x38>
    cd6c:	e13fff17 	ldw	r4,-4(fp)
    cd70:	01400304 	movi	r5,12
    cd74:	000b14c0 	call	b14c <__mulsi3>
    cd78:	00c00074 	movhi	r3,1
    cd7c:	18f7ac04 	addi	r3,r3,-8528
    cd80:	10c5883a 	add	r2,r2,r3
    cd84:	00000106 	br	cd8c <close+0x3c>
    cd88:	0005883a 	mov	r2,zero
    cd8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cd90:	e0bffd17 	ldw	r2,-12(fp)
    cd94:	10001826 	beq	r2,zero,cdf8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cd98:	e0bffd17 	ldw	r2,-12(fp)
    cd9c:	10800017 	ldw	r2,0(r2)
    cda0:	10800417 	ldw	r2,16(r2)
    cda4:	10000626 	beq	r2,zero,cdc0 <close+0x70>
    cda8:	e0bffd17 	ldw	r2,-12(fp)
    cdac:	10800017 	ldw	r2,0(r2)
    cdb0:	10800417 	ldw	r2,16(r2)
    cdb4:	e13ffd17 	ldw	r4,-12(fp)
    cdb8:	103ee83a 	callr	r2
    cdbc:	00000106 	br	cdc4 <close+0x74>
    cdc0:	0005883a 	mov	r2,zero
    cdc4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cdc8:	e13fff17 	ldw	r4,-4(fp)
    cdcc:	000d3740 	call	d374 <alt_release_fd>
    if (rval < 0)
    cdd0:	e0bffe17 	ldw	r2,-8(fp)
    cdd4:	1000060e 	bge	r2,zero,cdf0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cdd8:	000cd000 	call	cd00 <alt_get_errno>
    cddc:	e0fffe17 	ldw	r3,-8(fp)
    cde0:	00c7c83a 	sub	r3,zero,r3
    cde4:	10c00015 	stw	r3,0(r2)
      return -1;
    cde8:	00bfffc4 	movi	r2,-1
    cdec:	00000606 	br	ce08 <close+0xb8>
    }
    return 0;
    cdf0:	0005883a 	mov	r2,zero
    cdf4:	00000406 	br	ce08 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cdf8:	000cd000 	call	cd00 <alt_get_errno>
    cdfc:	00c01444 	movi	r3,81
    ce00:	10c00015 	stw	r3,0(r2)
    return -1;
    ce04:	00bfffc4 	movi	r2,-1
  }
}
    ce08:	e037883a 	mov	sp,fp
    ce0c:	dfc00117 	ldw	ra,4(sp)
    ce10:	df000017 	ldw	fp,0(sp)
    ce14:	dec00204 	addi	sp,sp,8
    ce18:	f800283a 	ret

0000ce1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ce1c:	deffff04 	addi	sp,sp,-4
    ce20:	df000015 	stw	fp,0(sp)
    ce24:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ce28:	e037883a 	mov	sp,fp
    ce2c:	df000017 	ldw	fp,0(sp)
    ce30:	dec00104 	addi	sp,sp,4
    ce34:	f800283a 	ret

0000ce38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ce38:	defffc04 	addi	sp,sp,-16
    ce3c:	df000315 	stw	fp,12(sp)
    ce40:	df000304 	addi	fp,sp,12
    ce44:	e13ffd15 	stw	r4,-12(fp)
    ce48:	e17ffe15 	stw	r5,-8(fp)
    ce4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ce50:	e0bfff17 	ldw	r2,-4(fp)
}
    ce54:	e037883a 	mov	sp,fp
    ce58:	df000017 	ldw	fp,0(sp)
    ce5c:	dec00104 	addi	sp,sp,4
    ce60:	f800283a 	ret

0000ce64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ce64:	defffe04 	addi	sp,sp,-8
    ce68:	dfc00115 	stw	ra,4(sp)
    ce6c:	df000015 	stw	fp,0(sp)
    ce70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ce74:	00800074 	movhi	r2,1
    ce78:	10b82304 	addi	r2,r2,-8052
    ce7c:	10800017 	ldw	r2,0(r2)
    ce80:	10000526 	beq	r2,zero,ce98 <alt_get_errno+0x34>
    ce84:	00800074 	movhi	r2,1
    ce88:	10b82304 	addi	r2,r2,-8052
    ce8c:	10800017 	ldw	r2,0(r2)
    ce90:	103ee83a 	callr	r2
    ce94:	00000206 	br	cea0 <alt_get_errno+0x3c>
    ce98:	00800074 	movhi	r2,1
    ce9c:	10b90604 	addi	r2,r2,-7144
}
    cea0:	e037883a 	mov	sp,fp
    cea4:	dfc00117 	ldw	ra,4(sp)
    cea8:	df000017 	ldw	fp,0(sp)
    ceac:	dec00204 	addi	sp,sp,8
    ceb0:	f800283a 	ret

0000ceb4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ceb4:	defffa04 	addi	sp,sp,-24
    ceb8:	dfc00515 	stw	ra,20(sp)
    cebc:	df000415 	stw	fp,16(sp)
    cec0:	df000404 	addi	fp,sp,16
    cec4:	e13ffe15 	stw	r4,-8(fp)
    cec8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    cecc:	e0bffe17 	ldw	r2,-8(fp)
    ced0:	10000326 	beq	r2,zero,cee0 <alt_dev_llist_insert+0x2c>
    ced4:	e0bffe17 	ldw	r2,-8(fp)
    ced8:	10800217 	ldw	r2,8(r2)
    cedc:	1000051e 	bne	r2,zero,cef4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    cee0:	000ce640 	call	ce64 <alt_get_errno>
    cee4:	00c00584 	movi	r3,22
    cee8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    ceec:	00bffa84 	movi	r2,-22
    cef0:	00001306 	br	cf40 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    cef4:	e0bffe17 	ldw	r2,-8(fp)
    cef8:	e0ffff17 	ldw	r3,-4(fp)
    cefc:	e0fffc15 	stw	r3,-16(fp)
    cf00:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cf04:	e0bffd17 	ldw	r2,-12(fp)
    cf08:	e0fffc17 	ldw	r3,-16(fp)
    cf0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    cf10:	e0bffc17 	ldw	r2,-16(fp)
    cf14:	10c00017 	ldw	r3,0(r2)
    cf18:	e0bffd17 	ldw	r2,-12(fp)
    cf1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cf20:	e0bffc17 	ldw	r2,-16(fp)
    cf24:	10800017 	ldw	r2,0(r2)
    cf28:	e0fffd17 	ldw	r3,-12(fp)
    cf2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    cf30:	e0bffc17 	ldw	r2,-16(fp)
    cf34:	e0fffd17 	ldw	r3,-12(fp)
    cf38:	10c00015 	stw	r3,0(r2)

  return 0;  
    cf3c:	0005883a 	mov	r2,zero
}
    cf40:	e037883a 	mov	sp,fp
    cf44:	dfc00117 	ldw	ra,4(sp)
    cf48:	df000017 	ldw	fp,0(sp)
    cf4c:	dec00204 	addi	sp,sp,8
    cf50:	f800283a 	ret

0000cf54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    cf54:	defffe04 	addi	sp,sp,-8
    cf58:	dfc00115 	stw	ra,4(sp)
    cf5c:	df000015 	stw	fp,0(sp)
    cf60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    cf64:	0009883a 	mov	r4,zero
    cf68:	01420004 	movi	r5,2048
    cf6c:	000d8280 	call	d828 <alt_icache_flush>
#endif
}
    cf70:	e037883a 	mov	sp,fp
    cf74:	dfc00117 	ldw	ra,4(sp)
    cf78:	df000017 	ldw	fp,0(sp)
    cf7c:	dec00204 	addi	sp,sp,8
    cf80:	f800283a 	ret

0000cf84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    cf84:	defff804 	addi	sp,sp,-32
    cf88:	dfc00715 	stw	ra,28(sp)
    cf8c:	df000615 	stw	fp,24(sp)
    cf90:	dc000515 	stw	r16,20(sp)
    cf94:	df000504 	addi	fp,sp,20
    cf98:	e13ffc15 	stw	r4,-16(fp)
    cf9c:	e17ffd15 	stw	r5,-12(fp)
    cfa0:	e1bffe15 	stw	r6,-8(fp)
    cfa4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    cfa8:	e13ffd17 	ldw	r4,-12(fp)
    cfac:	e17ffe17 	ldw	r5,-8(fp)
    cfb0:	e1bfff17 	ldw	r6,-4(fp)
    cfb4:	000d21c0 	call	d21c <open>
    cfb8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    cfbc:	e0bffb17 	ldw	r2,-20(fp)
    cfc0:	10002216 	blt	r2,zero,d04c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    cfc4:	04000074 	movhi	r16,1
    cfc8:	8437ac04 	addi	r16,r16,-8528
    cfcc:	e0bffb17 	ldw	r2,-20(fp)
    cfd0:	1009883a 	mov	r4,r2
    cfd4:	01400304 	movi	r5,12
    cfd8:	000b14c0 	call	b14c <__mulsi3>
    cfdc:	8085883a 	add	r2,r16,r2
    cfe0:	10c00017 	ldw	r3,0(r2)
    cfe4:	e0bffc17 	ldw	r2,-16(fp)
    cfe8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    cfec:	04000074 	movhi	r16,1
    cff0:	8437ac04 	addi	r16,r16,-8528
    cff4:	e0bffb17 	ldw	r2,-20(fp)
    cff8:	1009883a 	mov	r4,r2
    cffc:	01400304 	movi	r5,12
    d000:	000b14c0 	call	b14c <__mulsi3>
    d004:	8085883a 	add	r2,r16,r2
    d008:	10800104 	addi	r2,r2,4
    d00c:	10c00017 	ldw	r3,0(r2)
    d010:	e0bffc17 	ldw	r2,-16(fp)
    d014:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d018:	04000074 	movhi	r16,1
    d01c:	8437ac04 	addi	r16,r16,-8528
    d020:	e0bffb17 	ldw	r2,-20(fp)
    d024:	1009883a 	mov	r4,r2
    d028:	01400304 	movi	r5,12
    d02c:	000b14c0 	call	b14c <__mulsi3>
    d030:	8085883a 	add	r2,r16,r2
    d034:	10800204 	addi	r2,r2,8
    d038:	10c00017 	ldw	r3,0(r2)
    d03c:	e0bffc17 	ldw	r2,-16(fp)
    d040:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d044:	e13ffb17 	ldw	r4,-20(fp)
    d048:	000d3740 	call	d374 <alt_release_fd>
  }
} 
    d04c:	e037883a 	mov	sp,fp
    d050:	dfc00217 	ldw	ra,8(sp)
    d054:	df000117 	ldw	fp,4(sp)
    d058:	dc000017 	ldw	r16,0(sp)
    d05c:	dec00304 	addi	sp,sp,12
    d060:	f800283a 	ret

0000d064 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d064:	defffb04 	addi	sp,sp,-20
    d068:	dfc00415 	stw	ra,16(sp)
    d06c:	df000315 	stw	fp,12(sp)
    d070:	df000304 	addi	fp,sp,12
    d074:	e13ffd15 	stw	r4,-12(fp)
    d078:	e17ffe15 	stw	r5,-8(fp)
    d07c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d080:	01000074 	movhi	r4,1
    d084:	2137af04 	addi	r4,r4,-8516
    d088:	e17ffd17 	ldw	r5,-12(fp)
    d08c:	01800044 	movi	r6,1
    d090:	01c07fc4 	movi	r7,511
    d094:	000cf840 	call	cf84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d098:	01000074 	movhi	r4,1
    d09c:	2137ac04 	addi	r4,r4,-8528
    d0a0:	e17ffe17 	ldw	r5,-8(fp)
    d0a4:	000d883a 	mov	r6,zero
    d0a8:	01c07fc4 	movi	r7,511
    d0ac:	000cf840 	call	cf84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d0b0:	01000074 	movhi	r4,1
    d0b4:	2137b204 	addi	r4,r4,-8504
    d0b8:	e17fff17 	ldw	r5,-4(fp)
    d0bc:	01800044 	movi	r6,1
    d0c0:	01c07fc4 	movi	r7,511
    d0c4:	000cf840 	call	cf84 <alt_open_fd>
}  
    d0c8:	e037883a 	mov	sp,fp
    d0cc:	dfc00117 	ldw	ra,4(sp)
    d0d0:	df000017 	ldw	fp,0(sp)
    d0d4:	dec00204 	addi	sp,sp,8
    d0d8:	f800283a 	ret

0000d0dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0dc:	defffe04 	addi	sp,sp,-8
    d0e0:	dfc00115 	stw	ra,4(sp)
    d0e4:	df000015 	stw	fp,0(sp)
    d0e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0ec:	00800074 	movhi	r2,1
    d0f0:	10b82304 	addi	r2,r2,-8052
    d0f4:	10800017 	ldw	r2,0(r2)
    d0f8:	10000526 	beq	r2,zero,d110 <alt_get_errno+0x34>
    d0fc:	00800074 	movhi	r2,1
    d100:	10b82304 	addi	r2,r2,-8052
    d104:	10800017 	ldw	r2,0(r2)
    d108:	103ee83a 	callr	r2
    d10c:	00000206 	br	d118 <alt_get_errno+0x3c>
    d110:	00800074 	movhi	r2,1
    d114:	10b90604 	addi	r2,r2,-7144
}
    d118:	e037883a 	mov	sp,fp
    d11c:	dfc00117 	ldw	ra,4(sp)
    d120:	df000017 	ldw	fp,0(sp)
    d124:	dec00204 	addi	sp,sp,8
    d128:	f800283a 	ret

0000d12c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d12c:	defffb04 	addi	sp,sp,-20
    d130:	dfc00415 	stw	ra,16(sp)
    d134:	df000315 	stw	fp,12(sp)
    d138:	dc000215 	stw	r16,8(sp)
    d13c:	df000204 	addi	fp,sp,8
    d140:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d144:	e0bfff17 	ldw	r2,-4(fp)
    d148:	10800217 	ldw	r2,8(r2)
    d14c:	10d00034 	orhi	r3,r2,16384
    d150:	e0bfff17 	ldw	r2,-4(fp)
    d154:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d158:	e03ffe15 	stw	zero,-8(fp)
    d15c:	00002206 	br	d1e8 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d160:	04000074 	movhi	r16,1
    d164:	8437ac04 	addi	r16,r16,-8528
    d168:	e0bffe17 	ldw	r2,-8(fp)
    d16c:	1009883a 	mov	r4,r2
    d170:	01400304 	movi	r5,12
    d174:	000b14c0 	call	b14c <__mulsi3>
    d178:	8085883a 	add	r2,r16,r2
    d17c:	10c00017 	ldw	r3,0(r2)
    d180:	e0bfff17 	ldw	r2,-4(fp)
    d184:	10800017 	ldw	r2,0(r2)
    d188:	1880141e 	bne	r3,r2,d1dc <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d18c:	04000074 	movhi	r16,1
    d190:	8437ac04 	addi	r16,r16,-8528
    d194:	e0bffe17 	ldw	r2,-8(fp)
    d198:	1009883a 	mov	r4,r2
    d19c:	01400304 	movi	r5,12
    d1a0:	000b14c0 	call	b14c <__mulsi3>
    d1a4:	8085883a 	add	r2,r16,r2
    d1a8:	10800204 	addi	r2,r2,8
    d1ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d1b0:	10000a0e 	bge	r2,zero,d1dc <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    d1b4:	e13ffe17 	ldw	r4,-8(fp)
    d1b8:	01400304 	movi	r5,12
    d1bc:	000b14c0 	call	b14c <__mulsi3>
    d1c0:	00c00074 	movhi	r3,1
    d1c4:	18f7ac04 	addi	r3,r3,-8528
    d1c8:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d1cc:	e0bfff17 	ldw	r2,-4(fp)
    d1d0:	18800226 	beq	r3,r2,d1dc <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d1d4:	00bffcc4 	movi	r2,-13
    d1d8:	00000a06 	br	d204 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d1dc:	e0bffe17 	ldw	r2,-8(fp)
    d1e0:	10800044 	addi	r2,r2,1
    d1e4:	e0bffe15 	stw	r2,-8(fp)
    d1e8:	00800074 	movhi	r2,1
    d1ec:	10b82204 	addi	r2,r2,-8056
    d1f0:	10800017 	ldw	r2,0(r2)
    d1f4:	1007883a 	mov	r3,r2
    d1f8:	e0bffe17 	ldw	r2,-8(fp)
    d1fc:	18bfd82e 	bgeu	r3,r2,d160 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d200:	0005883a 	mov	r2,zero
}
    d204:	e037883a 	mov	sp,fp
    d208:	dfc00217 	ldw	ra,8(sp)
    d20c:	df000117 	ldw	fp,4(sp)
    d210:	dc000017 	ldw	r16,0(sp)
    d214:	dec00304 	addi	sp,sp,12
    d218:	f800283a 	ret

0000d21c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d21c:	defff604 	addi	sp,sp,-40
    d220:	dfc00915 	stw	ra,36(sp)
    d224:	df000815 	stw	fp,32(sp)
    d228:	df000804 	addi	fp,sp,32
    d22c:	e13ffd15 	stw	r4,-12(fp)
    d230:	e17ffe15 	stw	r5,-8(fp)
    d234:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d238:	00bfffc4 	movi	r2,-1
    d23c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    d240:	00bffb44 	movi	r2,-19
    d244:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    d248:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d24c:	e13ffd17 	ldw	r4,-12(fp)
    d250:	01400074 	movhi	r5,1
    d254:	29782004 	addi	r5,r5,-8064
    d258:	000d5b00 	call	d5b0 <alt_find_dev>
    d25c:	e0bff815 	stw	r2,-32(fp)
    d260:	e0bff817 	ldw	r2,-32(fp)
    d264:	1000051e 	bne	r2,zero,d27c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d268:	e13ffd17 	ldw	r4,-12(fp)
    d26c:	000d6400 	call	d640 <alt_find_file>
    d270:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    d274:	00800044 	movi	r2,1
    d278:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d27c:	e0bff817 	ldw	r2,-32(fp)
    d280:	10002a26 	beq	r2,zero,d32c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d284:	e13ff817 	ldw	r4,-32(fp)
    d288:	000d7540 	call	d754 <alt_get_fd>
    d28c:	e0bff915 	stw	r2,-28(fp)
    d290:	e0bff917 	ldw	r2,-28(fp)
    d294:	1000030e 	bge	r2,zero,d2a4 <open+0x88>
    {
      status = index;
    d298:	e0bff917 	ldw	r2,-28(fp)
    d29c:	e0bffa15 	stw	r2,-24(fp)
    d2a0:	00002406 	br	d334 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    d2a4:	e13ff917 	ldw	r4,-28(fp)
    d2a8:	01400304 	movi	r5,12
    d2ac:	000b14c0 	call	b14c <__mulsi3>
    d2b0:	00c00074 	movhi	r3,1
    d2b4:	18f7ac04 	addi	r3,r3,-8528
    d2b8:	10c5883a 	add	r2,r2,r3
    d2bc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d2c0:	e0fffe17 	ldw	r3,-8(fp)
    d2c4:	00900034 	movhi	r2,16384
    d2c8:	10bfffc4 	addi	r2,r2,-1
    d2cc:	1886703a 	and	r3,r3,r2
    d2d0:	e0bffc17 	ldw	r2,-16(fp)
    d2d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d2d8:	e0bffb17 	ldw	r2,-20(fp)
    d2dc:	1000051e 	bne	r2,zero,d2f4 <open+0xd8>
    d2e0:	e13ffc17 	ldw	r4,-16(fp)
    d2e4:	000d12c0 	call	d12c <alt_file_locked>
    d2e8:	e0bffa15 	stw	r2,-24(fp)
    d2ec:	e0bffa17 	ldw	r2,-24(fp)
    d2f0:	10001016 	blt	r2,zero,d334 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d2f4:	e0bff817 	ldw	r2,-32(fp)
    d2f8:	10800317 	ldw	r2,12(r2)
    d2fc:	10000826 	beq	r2,zero,d320 <open+0x104>
    d300:	e0bff817 	ldw	r2,-32(fp)
    d304:	10800317 	ldw	r2,12(r2)
    d308:	e13ffc17 	ldw	r4,-16(fp)
    d30c:	e17ffd17 	ldw	r5,-12(fp)
    d310:	e1bffe17 	ldw	r6,-8(fp)
    d314:	e1ffff17 	ldw	r7,-4(fp)
    d318:	103ee83a 	callr	r2
    d31c:	00000106 	br	d324 <open+0x108>
    d320:	0005883a 	mov	r2,zero
    d324:	e0bffa15 	stw	r2,-24(fp)
    d328:	00000206 	br	d334 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d32c:	00bffb44 	movi	r2,-19
    d330:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d334:	e0bffa17 	ldw	r2,-24(fp)
    d338:	1000080e 	bge	r2,zero,d35c <open+0x140>
  {
    alt_release_fd (index);  
    d33c:	e13ff917 	ldw	r4,-28(fp)
    d340:	000d3740 	call	d374 <alt_release_fd>
    ALT_ERRNO = -status;
    d344:	000d0dc0 	call	d0dc <alt_get_errno>
    d348:	e0fffa17 	ldw	r3,-24(fp)
    d34c:	00c7c83a 	sub	r3,zero,r3
    d350:	10c00015 	stw	r3,0(r2)
    return -1;
    d354:	00bfffc4 	movi	r2,-1
    d358:	00000106 	br	d360 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    d35c:	e0bff917 	ldw	r2,-28(fp)
}
    d360:	e037883a 	mov	sp,fp
    d364:	dfc00117 	ldw	ra,4(sp)
    d368:	df000017 	ldw	fp,0(sp)
    d36c:	dec00204 	addi	sp,sp,8
    d370:	f800283a 	ret

0000d374 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d374:	defffc04 	addi	sp,sp,-16
    d378:	dfc00315 	stw	ra,12(sp)
    d37c:	df000215 	stw	fp,8(sp)
    d380:	dc000115 	stw	r16,4(sp)
    d384:	df000104 	addi	fp,sp,4
    d388:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d38c:	e0bfff17 	ldw	r2,-4(fp)
    d390:	108000d0 	cmplti	r2,r2,3
    d394:	1000111e 	bne	r2,zero,d3dc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    d398:	04000074 	movhi	r16,1
    d39c:	8437ac04 	addi	r16,r16,-8528
    d3a0:	e0bfff17 	ldw	r2,-4(fp)
    d3a4:	1009883a 	mov	r4,r2
    d3a8:	01400304 	movi	r5,12
    d3ac:	000b14c0 	call	b14c <__mulsi3>
    d3b0:	8085883a 	add	r2,r16,r2
    d3b4:	10800204 	addi	r2,r2,8
    d3b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d3bc:	04000074 	movhi	r16,1
    d3c0:	8437ac04 	addi	r16,r16,-8528
    d3c4:	e0bfff17 	ldw	r2,-4(fp)
    d3c8:	1009883a 	mov	r4,r2
    d3cc:	01400304 	movi	r5,12
    d3d0:	000b14c0 	call	b14c <__mulsi3>
    d3d4:	8085883a 	add	r2,r16,r2
    d3d8:	10000015 	stw	zero,0(r2)
  }
}
    d3dc:	e037883a 	mov	sp,fp
    d3e0:	dfc00217 	ldw	ra,8(sp)
    d3e4:	df000117 	ldw	fp,4(sp)
    d3e8:	dc000017 	ldw	r16,0(sp)
    d3ec:	dec00304 	addi	sp,sp,12
    d3f0:	f800283a 	ret

0000d3f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d3f4:	defffa04 	addi	sp,sp,-24
    d3f8:	df000515 	stw	fp,20(sp)
    d3fc:	df000504 	addi	fp,sp,20
    d400:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d404:	0005303a 	rdctl	r2,status
    d408:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d40c:	e0fffc17 	ldw	r3,-16(fp)
    d410:	00bfff84 	movi	r2,-2
    d414:	1884703a 	and	r2,r3,r2
    d418:	1001703a 	wrctl	status,r2
  
  return context;
    d41c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d420:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    d424:	e0bfff17 	ldw	r2,-4(fp)
    d428:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d42c:	e0bffd17 	ldw	r2,-12(fp)
    d430:	10800017 	ldw	r2,0(r2)
    d434:	e0fffd17 	ldw	r3,-12(fp)
    d438:	18c00117 	ldw	r3,4(r3)
    d43c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    d440:	e0bffd17 	ldw	r2,-12(fp)
    d444:	10800117 	ldw	r2,4(r2)
    d448:	e0fffd17 	ldw	r3,-12(fp)
    d44c:	18c00017 	ldw	r3,0(r3)
    d450:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d454:	e0bffd17 	ldw	r2,-12(fp)
    d458:	e0fffd17 	ldw	r3,-12(fp)
    d45c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    d460:	e0bffd17 	ldw	r2,-12(fp)
    d464:	e0fffd17 	ldw	r3,-12(fp)
    d468:	10c00015 	stw	r3,0(r2)
    d46c:	e0bffb17 	ldw	r2,-20(fp)
    d470:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d474:	e0bffe17 	ldw	r2,-8(fp)
    d478:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    d47c:	e037883a 	mov	sp,fp
    d480:	df000017 	ldw	fp,0(sp)
    d484:	dec00104 	addi	sp,sp,4
    d488:	f800283a 	ret

0000d48c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d48c:	defffb04 	addi	sp,sp,-20
    d490:	dfc00415 	stw	ra,16(sp)
    d494:	df000315 	stw	fp,12(sp)
    d498:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d49c:	d0a01817 	ldw	r2,-32672(gp)
    d4a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d4a4:	d0a10017 	ldw	r2,-31744(gp)
    d4a8:	10800044 	addi	r2,r2,1
    d4ac:	d0a10015 	stw	r2,-31744(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d4b0:	00002e06 	br	d56c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    d4b4:	e0bffd17 	ldw	r2,-12(fp)
    d4b8:	10800017 	ldw	r2,0(r2)
    d4bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d4c0:	e0bffd17 	ldw	r2,-12(fp)
    d4c4:	10800403 	ldbu	r2,16(r2)
    d4c8:	10803fcc 	andi	r2,r2,255
    d4cc:	10000426 	beq	r2,zero,d4e0 <alt_tick+0x54>
    d4d0:	d0a10017 	ldw	r2,-31744(gp)
    d4d4:	1000021e 	bne	r2,zero,d4e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    d4d8:	e0bffd17 	ldw	r2,-12(fp)
    d4dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d4e0:	e0bffd17 	ldw	r2,-12(fp)
    d4e4:	10800217 	ldw	r2,8(r2)
    d4e8:	d0e10017 	ldw	r3,-31744(gp)
    d4ec:	18801d36 	bltu	r3,r2,d564 <alt_tick+0xd8>
    d4f0:	e0bffd17 	ldw	r2,-12(fp)
    d4f4:	10800403 	ldbu	r2,16(r2)
    d4f8:	10803fcc 	andi	r2,r2,255
    d4fc:	1000191e 	bne	r2,zero,d564 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    d500:	e0bffd17 	ldw	r2,-12(fp)
    d504:	10c00317 	ldw	r3,12(r2)
    d508:	e0bffd17 	ldw	r2,-12(fp)
    d50c:	10800517 	ldw	r2,20(r2)
    d510:	1009883a 	mov	r4,r2
    d514:	183ee83a 	callr	r3
    d518:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d51c:	e0bfff17 	ldw	r2,-4(fp)
    d520:	1000031e 	bne	r2,zero,d530 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    d524:	e13ffd17 	ldw	r4,-12(fp)
    d528:	000d3f40 	call	d3f4 <alt_alarm_stop>
    d52c:	00000d06 	br	d564 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    d530:	e0bffd17 	ldw	r2,-12(fp)
    d534:	10c00217 	ldw	r3,8(r2)
    d538:	e0bfff17 	ldw	r2,-4(fp)
    d53c:	1887883a 	add	r3,r3,r2
    d540:	e0bffd17 	ldw	r2,-12(fp)
    d544:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d548:	e0bffd17 	ldw	r2,-12(fp)
    d54c:	10c00217 	ldw	r3,8(r2)
    d550:	d0a10017 	ldw	r2,-31744(gp)
    d554:	1880032e 	bgeu	r3,r2,d564 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    d558:	e0bffd17 	ldw	r2,-12(fp)
    d55c:	00c00044 	movi	r3,1
    d560:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    d564:	e0bffe17 	ldw	r2,-8(fp)
    d568:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d56c:	e0fffd17 	ldw	r3,-12(fp)
    d570:	d0a01804 	addi	r2,gp,-32672
    d574:	18bfcf1e 	bne	r3,r2,d4b4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    d578:	0001883a 	nop
}
    d57c:	e037883a 	mov	sp,fp
    d580:	dfc00117 	ldw	ra,4(sp)
    d584:	df000017 	ldw	fp,0(sp)
    d588:	dec00204 	addi	sp,sp,8
    d58c:	f800283a 	ret

0000d590 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    d590:	deffff04 	addi	sp,sp,-4
    d594:	df000015 	stw	fp,0(sp)
    d598:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d59c:	000170fa 	wrctl	ienable,zero
}
    d5a0:	e037883a 	mov	sp,fp
    d5a4:	df000017 	ldw	fp,0(sp)
    d5a8:	dec00104 	addi	sp,sp,4
    d5ac:	f800283a 	ret

0000d5b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d5b0:	defffa04 	addi	sp,sp,-24
    d5b4:	dfc00515 	stw	ra,20(sp)
    d5b8:	df000415 	stw	fp,16(sp)
    d5bc:	df000404 	addi	fp,sp,16
    d5c0:	e13ffe15 	stw	r4,-8(fp)
    d5c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d5c8:	e0bfff17 	ldw	r2,-4(fp)
    d5cc:	10800017 	ldw	r2,0(r2)
    d5d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d5d4:	e13ffe17 	ldw	r4,-8(fp)
    d5d8:	000b8ec0 	call	b8ec <strlen>
    d5dc:	10800044 	addi	r2,r2,1
    d5e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d5e4:	00000d06 	br	d61c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d5e8:	e0bffc17 	ldw	r2,-16(fp)
    d5ec:	10c00217 	ldw	r3,8(r2)
    d5f0:	e0bffd17 	ldw	r2,-12(fp)
    d5f4:	1809883a 	mov	r4,r3
    d5f8:	e17ffe17 	ldw	r5,-8(fp)
    d5fc:	100d883a 	mov	r6,r2
    d600:	000d8d40 	call	d8d4 <memcmp>
    d604:	1000021e 	bne	r2,zero,d610 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d608:	e0bffc17 	ldw	r2,-16(fp)
    d60c:	00000706 	br	d62c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d610:	e0bffc17 	ldw	r2,-16(fp)
    d614:	10800017 	ldw	r2,0(r2)
    d618:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d61c:	e0fffc17 	ldw	r3,-16(fp)
    d620:	e0bfff17 	ldw	r2,-4(fp)
    d624:	18bff01e 	bne	r3,r2,d5e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d628:	0005883a 	mov	r2,zero
}
    d62c:	e037883a 	mov	sp,fp
    d630:	dfc00117 	ldw	ra,4(sp)
    d634:	df000017 	ldw	fp,0(sp)
    d638:	dec00204 	addi	sp,sp,8
    d63c:	f800283a 	ret

0000d640 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d640:	defffb04 	addi	sp,sp,-20
    d644:	dfc00415 	stw	ra,16(sp)
    d648:	df000315 	stw	fp,12(sp)
    d64c:	df000304 	addi	fp,sp,12
    d650:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d654:	00800074 	movhi	r2,1
    d658:	10b81e04 	addi	r2,r2,-8072
    d65c:	10800017 	ldw	r2,0(r2)
    d660:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d664:	00003106 	br	d72c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    d668:	e0bffd17 	ldw	r2,-12(fp)
    d66c:	10800217 	ldw	r2,8(r2)
    d670:	1009883a 	mov	r4,r2
    d674:	000b8ec0 	call	b8ec <strlen>
    d678:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    d67c:	e0bffd17 	ldw	r2,-12(fp)
    d680:	10c00217 	ldw	r3,8(r2)
    d684:	e0bffe17 	ldw	r2,-8(fp)
    d688:	10bfffc4 	addi	r2,r2,-1
    d68c:	1885883a 	add	r2,r3,r2
    d690:	10800003 	ldbu	r2,0(r2)
    d694:	10803fcc 	andi	r2,r2,255
    d698:	1080201c 	xori	r2,r2,128
    d69c:	10bfe004 	addi	r2,r2,-128
    d6a0:	10800bd8 	cmpnei	r2,r2,47
    d6a4:	1000031e 	bne	r2,zero,d6b4 <alt_find_file+0x74>
    {
      len -= 1;
    d6a8:	e0bffe17 	ldw	r2,-8(fp)
    d6ac:	10bfffc4 	addi	r2,r2,-1
    d6b0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d6b4:	e0bffe17 	ldw	r2,-8(fp)
    d6b8:	e0ffff17 	ldw	r3,-4(fp)
    d6bc:	1885883a 	add	r2,r3,r2
    d6c0:	10800003 	ldbu	r2,0(r2)
    d6c4:	10803fcc 	andi	r2,r2,255
    d6c8:	1080201c 	xori	r2,r2,128
    d6cc:	10bfe004 	addi	r2,r2,-128
    d6d0:	10800be0 	cmpeqi	r2,r2,47
    d6d4:	1000081e 	bne	r2,zero,d6f8 <alt_find_file+0xb8>
    d6d8:	e0bffe17 	ldw	r2,-8(fp)
    d6dc:	e0ffff17 	ldw	r3,-4(fp)
    d6e0:	1885883a 	add	r2,r3,r2
    d6e4:	10800003 	ldbu	r2,0(r2)
    d6e8:	10803fcc 	andi	r2,r2,255
    d6ec:	1080201c 	xori	r2,r2,128
    d6f0:	10bfe004 	addi	r2,r2,-128
    d6f4:	10000a1e 	bne	r2,zero,d720 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    d6f8:	e0bffd17 	ldw	r2,-12(fp)
    d6fc:	10c00217 	ldw	r3,8(r2)
    d700:	e0bffe17 	ldw	r2,-8(fp)
    d704:	1809883a 	mov	r4,r3
    d708:	e17fff17 	ldw	r5,-4(fp)
    d70c:	100d883a 	mov	r6,r2
    d710:	000d8d40 	call	d8d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d714:	1000021e 	bne	r2,zero,d720 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d718:	e0bffd17 	ldw	r2,-12(fp)
    d71c:	00000806 	br	d740 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    d720:	e0bffd17 	ldw	r2,-12(fp)
    d724:	10800017 	ldw	r2,0(r2)
    d728:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d72c:	e0fffd17 	ldw	r3,-12(fp)
    d730:	00800074 	movhi	r2,1
    d734:	10b81e04 	addi	r2,r2,-8072
    d738:	18bfcb1e 	bne	r3,r2,d668 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d73c:	0005883a 	mov	r2,zero
}
    d740:	e037883a 	mov	sp,fp
    d744:	dfc00117 	ldw	ra,4(sp)
    d748:	df000017 	ldw	fp,0(sp)
    d74c:	dec00204 	addi	sp,sp,8
    d750:	f800283a 	ret

0000d754 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d754:	defffa04 	addi	sp,sp,-24
    d758:	dfc00515 	stw	ra,20(sp)
    d75c:	df000415 	stw	fp,16(sp)
    d760:	dc000315 	stw	r16,12(sp)
    d764:	df000304 	addi	fp,sp,12
    d768:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d76c:	00bffa04 	movi	r2,-24
    d770:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d774:	e03ffd15 	stw	zero,-12(fp)
    d778:	00002106 	br	d800 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    d77c:	04000074 	movhi	r16,1
    d780:	8437ac04 	addi	r16,r16,-8528
    d784:	e0bffd17 	ldw	r2,-12(fp)
    d788:	1009883a 	mov	r4,r2
    d78c:	01400304 	movi	r5,12
    d790:	000b14c0 	call	b14c <__mulsi3>
    d794:	8085883a 	add	r2,r16,r2
    d798:	10800017 	ldw	r2,0(r2)
    d79c:	1000151e 	bne	r2,zero,d7f4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    d7a0:	04000074 	movhi	r16,1
    d7a4:	8437ac04 	addi	r16,r16,-8528
    d7a8:	e0bffd17 	ldw	r2,-12(fp)
    d7ac:	1009883a 	mov	r4,r2
    d7b0:	01400304 	movi	r5,12
    d7b4:	000b14c0 	call	b14c <__mulsi3>
    d7b8:	8085883a 	add	r2,r16,r2
    d7bc:	e0ffff17 	ldw	r3,-4(fp)
    d7c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    d7c4:	00800074 	movhi	r2,1
    d7c8:	10b82204 	addi	r2,r2,-8056
    d7cc:	10c00017 	ldw	r3,0(r2)
    d7d0:	e0bffd17 	ldw	r2,-12(fp)
    d7d4:	1880040e 	bge	r3,r2,d7e8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    d7d8:	00800074 	movhi	r2,1
    d7dc:	10b82204 	addi	r2,r2,-8056
    d7e0:	e0fffd17 	ldw	r3,-12(fp)
    d7e4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    d7e8:	e0bffd17 	ldw	r2,-12(fp)
    d7ec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    d7f0:	00000606 	br	d80c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d7f4:	e0bffd17 	ldw	r2,-12(fp)
    d7f8:	10800044 	addi	r2,r2,1
    d7fc:	e0bffd15 	stw	r2,-12(fp)
    d800:	e0bffd17 	ldw	r2,-12(fp)
    d804:	10800810 	cmplti	r2,r2,32
    d808:	103fdc1e 	bne	r2,zero,d77c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d80c:	e0bffe17 	ldw	r2,-8(fp)
}
    d810:	e037883a 	mov	sp,fp
    d814:	dfc00217 	ldw	ra,8(sp)
    d818:	df000117 	ldw	fp,4(sp)
    d81c:	dc000017 	ldw	r16,0(sp)
    d820:	dec00304 	addi	sp,sp,12
    d824:	f800283a 	ret

0000d828 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d828:	defffb04 	addi	sp,sp,-20
    d82c:	df000415 	stw	fp,16(sp)
    d830:	df000404 	addi	fp,sp,16
    d834:	e13ffe15 	stw	r4,-8(fp)
    d838:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d83c:	e0bfff17 	ldw	r2,-4(fp)
    d840:	10820070 	cmpltui	r2,r2,2049
    d844:	1000021e 	bne	r2,zero,d850 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d848:	00820004 	movi	r2,2048
    d84c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    d850:	e0fffe17 	ldw	r3,-8(fp)
    d854:	e0bfff17 	ldw	r2,-4(fp)
    d858:	1885883a 	add	r2,r3,r2
    d85c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d860:	e0bffe17 	ldw	r2,-8(fp)
    d864:	e0bffc15 	stw	r2,-16(fp)
    d868:	00000506 	br	d880 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d86c:	e0bffc17 	ldw	r2,-16(fp)
    d870:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d874:	e0bffc17 	ldw	r2,-16(fp)
    d878:	10800804 	addi	r2,r2,32
    d87c:	e0bffc15 	stw	r2,-16(fp)
    d880:	e0fffc17 	ldw	r3,-16(fp)
    d884:	e0bffd17 	ldw	r2,-12(fp)
    d888:	18bff836 	bltu	r3,r2,d86c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    d88c:	e0bffe17 	ldw	r2,-8(fp)
    d890:	108007cc 	andi	r2,r2,31
    d894:	10000226 	beq	r2,zero,d8a0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    d898:	e0bffc17 	ldw	r2,-16(fp)
    d89c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    d8a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    d8a4:	e037883a 	mov	sp,fp
    d8a8:	df000017 	ldw	fp,0(sp)
    d8ac:	dec00104 	addi	sp,sp,4
    d8b0:	f800283a 	ret

0000d8b4 <exit>:
    d8b4:	defffe04 	addi	sp,sp,-8
    d8b8:	000b883a 	mov	r5,zero
    d8bc:	dc000015 	stw	r16,0(sp)
    d8c0:	dfc00115 	stw	ra,4(sp)
    d8c4:	2021883a 	mov	r16,r4
    d8c8:	000d91c0 	call	d91c <__call_exitprocs>
    d8cc:	8009883a 	mov	r4,r16
    d8d0:	000daf40 	call	daf4 <_exit>

0000d8d4 <memcmp>:
    d8d4:	30000d26 	beq	r6,zero,d90c <memcmp+0x38>
    d8d8:	20c00003 	ldbu	r3,0(r4)
    d8dc:	28800003 	ldbu	r2,0(r5)
    d8e0:	18800c1e 	bne	r3,r2,d914 <memcmp+0x40>
    d8e4:	31bfff84 	addi	r6,r6,-2
    d8e8:	01ffffc4 	movi	r7,-1
    d8ec:	00000406 	br	d900 <memcmp+0x2c>
    d8f0:	20c00003 	ldbu	r3,0(r4)
    d8f4:	28800003 	ldbu	r2,0(r5)
    d8f8:	31bfffc4 	addi	r6,r6,-1
    d8fc:	1880051e 	bne	r3,r2,d914 <memcmp+0x40>
    d900:	21000044 	addi	r4,r4,1
    d904:	29400044 	addi	r5,r5,1
    d908:	31fff91e 	bne	r6,r7,d8f0 <memcmp+0x1c>
    d90c:	0005883a 	mov	r2,zero
    d910:	f800283a 	ret
    d914:	1885c83a 	sub	r2,r3,r2
    d918:	f800283a 	ret

0000d91c <__call_exitprocs>:
    d91c:	00800074 	movhi	r2,1
    d920:	10b81b04 	addi	r2,r2,-8084
    d924:	10800017 	ldw	r2,0(r2)
    d928:	defff204 	addi	sp,sp,-56
    d92c:	df000c15 	stw	fp,48(sp)
    d930:	d8800015 	stw	r2,0(sp)
    d934:	10800c04 	addi	r2,r2,48
    d938:	dd400915 	stw	r21,36(sp)
    d93c:	dfc00d15 	stw	ra,52(sp)
    d940:	ddc00b15 	stw	r23,44(sp)
    d944:	dd800a15 	stw	r22,40(sp)
    d948:	dd000815 	stw	r20,32(sp)
    d94c:	dcc00715 	stw	r19,28(sp)
    d950:	dc800615 	stw	r18,24(sp)
    d954:	dc400515 	stw	r17,20(sp)
    d958:	dc000415 	stw	r16,16(sp)
    d95c:	d9000115 	stw	r4,4(sp)
    d960:	2839883a 	mov	fp,r5
    d964:	d8800215 	stw	r2,8(sp)
    d968:	057fffc4 	movi	r21,-1
    d96c:	d8800017 	ldw	r2,0(sp)
    d970:	dd800217 	ldw	r22,8(sp)
    d974:	15c00c17 	ldw	r23,48(r2)
    d978:	b8001b26 	beq	r23,zero,d9e8 <__call_exitprocs+0xcc>
    d97c:	b9000117 	ldw	r4,4(r23)
    d980:	bd002217 	ldw	r20,136(r23)
    d984:	243fffc4 	addi	r16,r4,-1
    d988:	80001416 	blt	r16,zero,d9dc <__call_exitprocs+0xc0>
    d98c:	244007c4 	addi	r17,r4,31
    d990:	21000044 	addi	r4,r4,1
    d994:	8c63883a 	add	r17,r17,r17
    d998:	8427883a 	add	r19,r16,r16
    d99c:	2109883a 	add	r4,r4,r4
    d9a0:	8c63883a 	add	r17,r17,r17
    d9a4:	9ce7883a 	add	r19,r19,r19
    d9a8:	2109883a 	add	r4,r4,r4
    d9ac:	a463883a 	add	r17,r20,r17
    d9b0:	a4e7883a 	add	r19,r20,r19
    d9b4:	b925883a 	add	r18,r23,r4
    d9b8:	e0001726 	beq	fp,zero,da18 <__call_exitprocs+0xfc>
    d9bc:	a0000226 	beq	r20,zero,d9c8 <__call_exitprocs+0xac>
    d9c0:	89400017 	ldw	r5,0(r17)
    d9c4:	2f001426 	beq	r5,fp,da18 <__call_exitprocs+0xfc>
    d9c8:	843fffc4 	addi	r16,r16,-1
    d9cc:	8c7fff04 	addi	r17,r17,-4
    d9d0:	9cffff04 	addi	r19,r19,-4
    d9d4:	94bfff04 	addi	r18,r18,-4
    d9d8:	857ff71e 	bne	r16,r21,d9b8 <__call_exitprocs+0x9c>
    d9dc:	00800034 	movhi	r2,0
    d9e0:	10800004 	addi	r2,r2,0
    d9e4:	1000311e 	bne	r2,zero,daac <__call_exitprocs+0x190>
    d9e8:	dfc00d17 	ldw	ra,52(sp)
    d9ec:	df000c17 	ldw	fp,48(sp)
    d9f0:	ddc00b17 	ldw	r23,44(sp)
    d9f4:	dd800a17 	ldw	r22,40(sp)
    d9f8:	dd400917 	ldw	r21,36(sp)
    d9fc:	dd000817 	ldw	r20,32(sp)
    da00:	dcc00717 	ldw	r19,28(sp)
    da04:	dc800617 	ldw	r18,24(sp)
    da08:	dc400517 	ldw	r17,20(sp)
    da0c:	dc000417 	ldw	r16,16(sp)
    da10:	dec00e04 	addi	sp,sp,56
    da14:	f800283a 	ret
    da18:	b9000117 	ldw	r4,4(r23)
    da1c:	92000017 	ldw	r8,0(r18)
    da20:	213fffc4 	addi	r4,r4,-1
    da24:	24001a26 	beq	r4,r16,da90 <__call_exitprocs+0x174>
    da28:	90000015 	stw	zero,0(r18)
    da2c:	403fe626 	beq	r8,zero,d9c8 <__call_exitprocs+0xac>
    da30:	ba400117 	ldw	r9,4(r23)
    da34:	a0001226 	beq	r20,zero,da80 <__call_exitprocs+0x164>
    da38:	00800044 	movi	r2,1
    da3c:	1408983a 	sll	r4,r2,r16
    da40:	a1404017 	ldw	r5,256(r20)
    da44:	214a703a 	and	r5,r4,r5
    da48:	28000d26 	beq	r5,zero,da80 <__call_exitprocs+0x164>
    da4c:	a1404117 	ldw	r5,260(r20)
    da50:	2148703a 	and	r4,r4,r5
    da54:	2000101e 	bne	r4,zero,da98 <__call_exitprocs+0x17c>
    da58:	99400017 	ldw	r5,0(r19)
    da5c:	d9000117 	ldw	r4,4(sp)
    da60:	da400315 	stw	r9,12(sp)
    da64:	403ee83a 	callr	r8
    da68:	da400317 	ldw	r9,12(sp)
    da6c:	b9000117 	ldw	r4,4(r23)
    da70:	227fbe1e 	bne	r4,r9,d96c <__call_exitprocs+0x50>
    da74:	b1000017 	ldw	r4,0(r22)
    da78:	25ffd326 	beq	r4,r23,d9c8 <__call_exitprocs+0xac>
    da7c:	003fbb06 	br	d96c <__call_exitprocs+0x50>
    da80:	da400315 	stw	r9,12(sp)
    da84:	403ee83a 	callr	r8
    da88:	da400317 	ldw	r9,12(sp)
    da8c:	003ff706 	br	da6c <__call_exitprocs+0x150>
    da90:	bc000115 	stw	r16,4(r23)
    da94:	003fe506 	br	da2c <__call_exitprocs+0x110>
    da98:	99000017 	ldw	r4,0(r19)
    da9c:	da400315 	stw	r9,12(sp)
    daa0:	403ee83a 	callr	r8
    daa4:	da400317 	ldw	r9,12(sp)
    daa8:	003ff006 	br	da6c <__call_exitprocs+0x150>
    daac:	b9000117 	ldw	r4,4(r23)
    dab0:	20000e1e 	bne	r4,zero,daec <__call_exitprocs+0x1d0>
    dab4:	b9000017 	ldw	r4,0(r23)
    dab8:	20000826 	beq	r4,zero,dadc <__call_exitprocs+0x1c0>
    dabc:	b1000015 	stw	r4,0(r22)
    dac0:	a0000226 	beq	r20,zero,dacc <__call_exitprocs+0x1b0>
    dac4:	a009883a 	mov	r4,r20
    dac8:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    dacc:	b809883a 	mov	r4,r23
    dad0:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    dad4:	b5c00017 	ldw	r23,0(r22)
    dad8:	003fa706 	br	d978 <__call_exitprocs+0x5c>
    dadc:	0007883a 	mov	r3,zero
    dae0:	b82d883a 	mov	r22,r23
    dae4:	182f883a 	mov	r23,r3
    dae8:	003fa306 	br	d978 <__call_exitprocs+0x5c>
    daec:	b8c00017 	ldw	r3,0(r23)
    daf0:	003ffb06 	br	dae0 <__call_exitprocs+0x1c4>

0000daf4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    daf4:	defffc04 	addi	sp,sp,-16
    daf8:	df000315 	stw	fp,12(sp)
    dafc:	df000304 	addi	fp,sp,12
    db00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    db04:	0001883a 	nop
    db08:	e0bfff17 	ldw	r2,-4(fp)
    db0c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    db10:	e0bffd17 	ldw	r2,-12(fp)
    db14:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    db18:	e0bffe17 	ldw	r2,-8(fp)
    db1c:	10000226 	beq	r2,zero,db28 <_exit+0x34>
    ALT_SIM_FAIL();
    db20:	002af070 	cmpltui	zero,zero,43969
    db24:	00000106 	br	db2c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    db28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    db2c:	003fff06 	br	db2c <_exit+0x38>
