
20-sim_14.elf:     file format elf32-littlenios2
20-sim_14.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00005114 memsz 0x00005114 flags r-x
    LOAD off    0x00006134 vaddr 0x0000d134 paddr 0x0000d460 align 2**12
         filesz 0x0000032c memsz 0x0000032c flags rw-
    LOAD off    0x0000678c vaddr 0x0000d78c paddr 0x0000d78c align 2**12
         filesz 0x00000000 memsz 0x00000a1c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004d94  000081bc  000081bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001e4  0000cf50  0000cf50  00005f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000032c  0000d134  0000d460  00006134  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a1c  0000d78c  0000d78c  0000678c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00006460  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000880  00000000  00000000  00006488  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000bd13  00000000  00000000  00006d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000045c5  00000000  00000000  00012a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004385  00000000  00000000  00016fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000f04  00000000  00000000  0001b368  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001ff6  00000000  00000000  0001c26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003d2d  00000000  00000000  0001e262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  00021f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000480  00000000  00000000  00021fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0002491e  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00024921  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00024924  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00024925  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00024926  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0002492a  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0002492e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00024932  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0002493b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00024944  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  0002494d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  0002495f  2**0
                  CONTENTS, READONLY
 28 .jdi          00005585  00000000  00000000  000249b0  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003c04b  00000000  00000000  00029f35  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081bc l    d  .text	00000000 .text
0000cf50 l    d  .rodata	00000000 .rodata
0000d134 l    d  .rwdata	00000000 .rwdata
0000d78c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../20-sim_14_bsp//obj/HAL/src/crt0.o
000081f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 EulerAngles.c
00000000 l    df *ABS*	00000000 InterruptHandlerForUart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 motionprofiles.c
00000000 l    df *ABS*	00000000 xxfuncs.c
00000000 l    df *ABS*	00000000 xxinteg.c
00000000 l    df *ABS*	00000000 xxinverse.c
00000000 l    df *ABS*	00000000 xxmatrix.c
00000000 l    df *ABS*	00000000 xxmodel.c
00000000 l    df *ABS*	00000000 xxsubmod.c
00000000 l    df *ABS*	00000000 fp-bit.c
00009a08 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a43c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000d134 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000b788 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b8dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ba1c l     F .text	00000038 alt_dev_reg
0000d214 l     O .rwdata	0000002c jtag_uart
0000d240 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000bd2c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000bee4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000bff4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
0000c120 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000c258 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c284 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c3a4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000c4fc l     F .text	00000050 alt_get_errno
0000c54c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000b874 g     F .text	00000068 alt_main
0000ab8c g     F .text	00000044 __ashldi3
0000ac78 g     F .text	00000080 _puts_r
0000e0a8 g     O .bss	00000100 alt_irq
0000d790 g     O .bss	00000002 RxHead_0
0000d460 g       *ABS*	00000000 __flash_rwdata_start
0000ac2c g     F .text	0000004c printf
00008d48 g     F .text	00000038 XXDouble2String
0000d792 g     O .bss	00000002 RxTail_0
0000dfc8 g     O .bss	00000018 xx_R
0000d794 g     O .bss	00000008 xx_start_time
0000a2a8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000d7ac g     O .bss	00000004 errno
000081f8 g     F .text	00000060 InitUart0
0000d7b8 g     O .bss	00000004 alt_argv
00015414 g       *ABS*	00000000 _gp
0000d294 g     O .rwdata	00000180 alt_fd_list
00008d08 g     F .text	00000040 XXString2Double
0000c9d0 g     F .text	00000090 alt_find_dev
0000d78e g     O .bss	00000002 TxTail_0
0000a368 g     F .text	000000d4 __floatsidf
0000c484 g     F .text	00000078 alt_io_redirect
0000a30c g     F .text	0000005c __ltdf2
0000acf8 g     F .text	00000014 puts
000090f8 g     F .text	0000001c XXCalculateInput
00009898 g     F .text	000000a0 XXInitializeSubmodel
0000bba0 g     F .text	000000f4 altera_avalon_jtag_uart_read
0000abf0 g     F .text	0000003c _printf_r
0000a55c g     F .text	00000008 __udivsi3
0000cc48 g     F .text	0000008c alt_icache_flush
0000908c g     F .text	00000034 XXModelInitialize
0000d450 g     O .rwdata	00000004 alt_max_fd
0000a974 g     F .text	00000104 __unpack_d
0000837c g     F .text	0000003c EmptyUart0
0000b5d8 g     F .text	000001b0 alt_irq_register
00009d5c g     F .text	00000054 __adddf3
0000d434 g     O .rwdata	00000004 _global_impure_ptr
0000e1a8 g       *ABS*	00000000 __bss_end
00009938 g     F .text	00000068 XXCalculateSubmodel
0000c8ac g     F .text	00000104 alt_tick
0000d79c g     O .bss	00000008 xx_time
0000c814 g     F .text	00000098 alt_alarm_stop
000097b0 g     F .text	0000001c XXCalculateFinal
0000d7b0 g     O .bss	00000004 alt_irq_active
0000dfe0 g     O .bss	00000018 xx_I
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000d0 alt_irq_handler
0000d26c g     O .rwdata	00000028 alt_dev_null
0000dff8 g     O .bss	00000038 xx_P
000090dc g     F .text	0000001c XXCalculateStatic
00009774 g     F .text	0000003c XXCalculateOutput
00008258 g     F .text	00000124 IsrUart0
0000c23c g     F .text	0000001c alt_dcache_flush_all
00008fd8 g     F .text	0000007c XXModelInitialize_states
0000d460 g       *ABS*	00000000 __ram_rwdata_end
0000d448 g     O .rwdata	00000008 alt_dev_list
0000b92c g     F .text	000000f0 write
0000d134 g       *ABS*	00000000 __ram_rodata_end
0000ab48 g     F .text	00000044 __lshrdi3
0000a564 g     F .text	00000008 __umodsi3
00009054 g     F .text	00000038 XXModelInitialize_variables
0000d429 g     O .rwdata	00000001 xx_major
0000e1a8 g       *ABS*	00000000 end
0000c044 g     F .text	000000dc altera_avalon_uart_write
00008dac g     F .text	0000001c XXDiscreteTerminate
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000bda4 g     F .text	00000080 alt_avalon_timer_sc_init
0000be84 g     F .text	00000060 altera_avalon_uart_write_fd
0000a6a4 g     F .text	000000ac __clzsi2
0000bc94 g     F .text	00000098 altera_avalon_jtag_uart_write
0000ad34 g     F .text	00000734 ___vfprintf_internal_r
00008f8c g     F .text	0000004c XXModelInitialize_initialvalues
0000cd3c g     F .text	000001d8 __call_exitprocs
000081bc g     F .text	0000003c _start
0000d7c0 g     O .bss	00000004 _alt_tick_rate
0000985c g     F .text	0000003c XXCopyVariablesToOutputs
0000d42c g     O .rwdata	00000004 xx_number_of_inputs
0000d7c4 g     O .bss	00000004 _alt_nticks
0000ba88 g     F .text	00000058 alt_sys_init
000083b8 g     F .text	0000005c GetUart0
0000d414 g     O .rwdata	00000002 maxStepCount0
0000a56c g     F .text	00000028 __mulsi3
0000d134 g       *ABS*	00000000 __ram_rwdata_start
0000cf50 g       *ABS*	00000000 __ram_rodata_start
0000bae0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000cb74 g     F .text	000000d4 alt_get_fd
00008414 g     F .text	0000011c PutUart0
0000aa78 g     F .text	000000d0 __fpcmp_parts_d
0000ccf4 g     F .text	00000048 memcmp
0000e1a8 g       *ABS*	00000000 __alt_stack_base
0000a0f4 g     F .text	000001b4 __divdf3
0000d7a8 g     O .bss	00000001 xx_stop_simulation
000097cc g     F .text	0000001c XXModelTerminate
00009e10 g     F .text	000002e4 __muldf3
000090c0 g     F .text	0000001c XXCalculateInitial
0000ca60 g     F .text	00000114 alt_find_file
0000c2d4 g     F .text	000000a0 alt_dev_llist_insert
0000b48c g     F .text	000000e0 __sfvwrite_small_dev
0000d78c g       *ABS*	00000000 __bss_start
0000abd0 g     F .text	00000020 memset
000087e8 g     F .text	00000520 main
0000d7bc g     O .bss	00000004 alt_envp
0000bb40 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d416 g     O .rwdata	00000002 maxStepCount1
0000e030 g     O .bss	00000060 xx_V
0000d454 g     O .rwdata	00000004 alt_errno
0000a4b0 g     F .text	00000050 __divsi3
0000cfe4 g     O .rodata	00000014 __thenan_df
0000d420 g     O .rwdata	00000008 xx_step_size
0000d78c g     O .bss	00000002 TxHead_0
0000cf50 g       *ABS*	00000000 __flash_rodata_start
00008eac g     F .text	000000e0 XXModelInitialize_parameters
0000ba54 g     F .text	00000034 alt_irq_init
0000c794 g     F .text	00000080 alt_release_fd
0000cff8 g     O .rodata	00000100 __clz_tab
0000b56c g     F .text	0000006c _write_r
0000d7c8 g     O .bss	00000400 rx_buffer_0
0000d438 g     O .rwdata	00000004 _impure_ptr
0000d7b4 g     O .bss	00000004 alt_argc
00008530 g     F .text	000000b8 InitUart
00008020 g       .exceptions	00000000 alt_irq_entry
0000d7a4 g     O .bss	00000004 xx_steps
0000d440 g     O .rwdata	00000008 alt_fs_list
0000d418 g     O .rwdata	00000008 xx_finish_time
00008020 g       *ABS*	00000000 __ram_exceptions_start
000086e8 g     F .text	00000100 Stepcount0ToSI
00008dc8 g     F .text	000000e4 XXDiscreteStep
0000d460 g       *ABS*	00000000 _edata
0000be24 g     F .text	00000060 altera_avalon_uart_read_fd
0000e1a8 g       *ABS*	00000000 _end
000081bc g       *ABS*	00000000 __ram_exceptions_end
000099a0 g     F .text	00000068 XXTerminateSubmodel
0000c9b0 g     F .text	00000020 altera_nios2_qsys_irq_init
0000ccd4 g     F .text	00000020 exit
0000a500 g     F .text	0000005c __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000d428 g     O .rwdata	00000001 xx_initialize
0000cf14 g     F .text	0000003c _exit
0000a594 g     F .text	00000110 __muldi3
0000ad0c g     F .text	00000028 strlen
0000c63c g     F .text	00000158 open
0000d430 g     O .rwdata	00000004 xx_number_of_outputs
0000c374 g     F .text	00000030 alt_icache_flush_all
0000d43c g     O .rwdata	00000004 alt_priority_mask
000097e8 g     F .text	00000074 XXCopyInputsToVariables
0000b468 g     F .text	00000024 __vfprintf_internal
0000bf34 g     F .text	000000c0 altera_avalon_uart_read
00009db0 g     F .text	00000060 __subdf3
000085e8 g     F .text	00000100 Stepcount1ToSI
0000d458 g     O .rwdata	00000008 alt_alarm_list
0000dbc8 g     O .bss	00000400 tx_buffer_0
0000c170 g     F .text	000000cc close
0000b7f4 g     F .text	00000080 alt_load
0000a750 g     F .text	00000224 __pack_d
00008d80 g     F .text	0000002c XXDiscreteInitialize
00000000  w      *UND*	00000000 free
0000e090 g     O .bss	00000018 xx_s
00009114 g     F .text	00000660 XXCalculateDynamic



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606f14 	ori	at,at,33212
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001826 	beq	r2,zero,818c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
    812c:	00c00074 	movhi	r3,1
    8130:	18f82a04 	addi	r3,r3,-8024
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	21382a04 	addi	r4,r4,-8024
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	e17ffd17 	ldw	r5,-12(fp)
    8168:	183ee83a 	callr	r3
#endif
        break;
    816c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8178:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    817c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    8180:	e0bffb17 	ldw	r2,-20(fp)
    8184:	103fe21e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8188:	00000706 	br	81a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fdd06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a8:	e037883a 	mov	sp,fp
    81ac:	dfc00117 	ldw	ra,4(sp)
    81b0:	df000017 	ldw	fp,0(sp)
    81b4:	dec00204 	addi	sp,sp,8
    81b8:	f800283a 	ret

Disassembly of section .text:

000081bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81bc:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c8:	d6950514 	ori	gp,gp,21524
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81cc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81d0:	10b5e314 	ori	r2,r2,55180

    movhi r3, %hi(__bss_end)
    81d4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d8:	18f86a14 	ori	r3,r3,57768

    beq r2, r3, 1f
    81dc:	10c00326 	beq	r2,r3,81ec <_start+0x30>

0:
    stw zero, (r2)
    81e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e8:	10fffd36 	bltu	r2,r3,81e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81ec:	000b7f40 	call	b7f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81f0:	000b8740 	call	b874 <alt_main>

000081f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f4:	003fff06 	br	81f4 <alt_after_alt_main>

000081f8 <InitUart0>:
unsigned short RxHead_0=0;
unsigned short RxTail_0=0;
unsigned char rx_buffer_0[RX_BUFFER_SIZE_0];
 
void InitUart0(unsigned int BaudRate)
{
    81f8:	defffc04 	addi	sp,sp,-16
    81fc:	dfc00315 	stw	ra,12(sp)
    8200:	df000215 	stw	fp,8(sp)
    8204:	df000204 	addi	fp,sp,8
    8208:	e13fff15 	stw	r4,-4(fp)
    unsigned int divisor;
    
    divisor = (ALT_CPU_FREQ/BaudRate) + 1;
    820c:	0100bef4 	movhi	r4,763
    8210:	213c2004 	addi	r4,r4,-3968
    8214:	e17fff17 	ldw	r5,-4(fp)
    8218:	000a55c0 	call	a55c <__udivsi3>
    821c:	10800044 	addi	r2,r2,1
    8220:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
    8224:	e0fffe17 	ldw	r3,-8(fp)
    8228:	00800074 	movhi	r2,1
    822c:	10850404 	addi	r2,r2,5136
    8230:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    8234:	00c02004 	movi	r3,128
    8238:	00800074 	movhi	r2,1
    823c:	10850304 	addi	r2,r2,5132
    8240:	10c00035 	stwio	r3,0(r2)
}
    8244:	e037883a 	mov	sp,fp
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	df000017 	ldw	fp,0(sp)
    8250:	dec00204 	addi	sp,sp,8
    8254:	f800283a 	ret

00008258 <IsrUart0>:
 
void IsrUart0(void* context, unsigned int id)
{
    8258:	defffc04 	addi	sp,sp,-16
    825c:	df000315 	stw	fp,12(sp)
    8260:	df000304 	addi	fp,sp,12
    8264:	e13ffe15 	stw	r4,-8(fp)
    8268:	e17fff15 	stw	r5,-4(fp)
    int sr;
    
    sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    826c:	00800074 	movhi	r2,1
    8270:	10850204 	addi	r2,r2,5128
    8274:	10800037 	ldwio	r2,0(r2)
    8278:	e0bffd15 	stw	r2,-12(fp)

    if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
    827c:	e0bffd17 	ldw	r2,-12(fp)
    8280:	1080200c 	andi	r2,r2,128
    8284:	10001526 	beq	r2,zero,82dc <IsrUart0+0x84>
        rx_buffer_0[RxHead_0] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8288:	d0a0df0b 	ldhu	r2,-31876(gp)
    828c:	10bfffcc 	andi	r2,r2,65535
    8290:	00c00074 	movhi	r3,1
    8294:	18c50004 	addi	r3,r3,5120
    8298:	18c00037 	ldwio	r3,0(r3)
    829c:	01000074 	movhi	r4,1
    82a0:	2135f204 	addi	r4,r4,-10296
    82a4:	2085883a 	add	r2,r4,r2
    82a8:	10c00005 	stb	r3,0(r2)
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
    82ac:	0007883a 	mov	r3,zero
    82b0:	00800074 	movhi	r2,1
    82b4:	10850204 	addi	r2,r2,5128
    82b8:	10c00035 	stwio	r3,0(r2)
        if (++RxHead_0 > (RX_BUFFER_SIZE_0 - 1)) {
    82bc:	d0a0df0b 	ldhu	r2,-31876(gp)
    82c0:	10800044 	addi	r2,r2,1
    82c4:	d0a0df0d 	sth	r2,-31876(gp)
    82c8:	d0a0df0b 	ldhu	r2,-31876(gp)
    82cc:	10bfffcc 	andi	r2,r2,65535
    82d0:	10810030 	cmpltui	r2,r2,1024
    82d4:	1000011e 	bne	r2,zero,82dc <IsrUart0+0x84>
            RxHead_0 = 0;
    82d8:	d020df0d 	sth	zero,-31876(gp)
        }
    }

    if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
    82dc:	e0bffd17 	ldw	r2,-12(fp)
    82e0:	1080100c 	andi	r2,r2,64
    82e4:	10002126 	beq	r2,zero,836c <IsrUart0+0x114>
        if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK) {
    82e8:	00800074 	movhi	r2,1
    82ec:	10850304 	addi	r2,r2,5132
    82f0:	10800037 	ldwio	r2,0(r2)
    82f4:	1080100c 	andi	r2,r2,64
    82f8:	10001c26 	beq	r2,zero,836c <IsrUart0+0x114>
            if (TxTail_0 != TxHead_0) {
    82fc:	d0e0de8b 	ldhu	r3,-31878(gp)
    8300:	d0a0de0b 	ldhu	r2,-31880(gp)
    8304:	18ffffcc 	andi	r3,r3,65535
    8308:	10bfffcc 	andi	r2,r2,65535
    830c:	18801326 	beq	r3,r2,835c <IsrUart0+0x104>
                IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_0[TxTail_0]);
    8310:	d0a0de8b 	ldhu	r2,-31878(gp)
    8314:	10bfffcc 	andi	r2,r2,65535
    8318:	00c00074 	movhi	r3,1
    831c:	18f6f204 	addi	r3,r3,-9272
    8320:	1885883a 	add	r2,r3,r2
    8324:	10800003 	ldbu	r2,0(r2)
    8328:	10c03fcc 	andi	r3,r2,255
    832c:	00800074 	movhi	r2,1
    8330:	10850104 	addi	r2,r2,5124
    8334:	10c00035 	stwio	r3,0(r2)
                if (++TxTail_0 > (TX_BUFFER_SIZE_0 - 1)) {
    8338:	d0a0de8b 	ldhu	r2,-31878(gp)
    833c:	10800044 	addi	r2,r2,1
    8340:	d0a0de8d 	sth	r2,-31878(gp)
    8344:	d0a0de8b 	ldhu	r2,-31878(gp)
    8348:	10bfffcc 	andi	r2,r2,65535
    834c:	10810030 	cmpltui	r2,r2,1024
    8350:	1000061e 	bne	r2,zero,836c <IsrUart0+0x114>
                    TxTail_0 = 0;
    8354:	d020de8d 	sth	zero,-31878(gp)
    8358:	00000406 	br	836c <IsrUart0+0x114>
                }
            }
            else {
                IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    835c:	00c02004 	movi	r3,128
    8360:	00800074 	movhi	r2,1
    8364:	10850304 	addi	r2,r2,5132
    8368:	10c00035 	stwio	r3,0(r2)
            }
        }
    }
}
    836c:	e037883a 	mov	sp,fp
    8370:	df000017 	ldw	fp,0(sp)
    8374:	dec00104 	addi	sp,sp,4
    8378:	f800283a 	ret

0000837c <EmptyUart0>:
 
unsigned char EmptyUart0()
{
    837c:	deffff04 	addi	sp,sp,-4
    8380:	df000015 	stw	fp,0(sp)
    8384:	d839883a 	mov	fp,sp
    if(RxHead_0 == RxTail_0) {
    8388:	d0e0df0b 	ldhu	r3,-31876(gp)
    838c:	d0a0df8b 	ldhu	r2,-31874(gp)
    8390:	18ffffcc 	andi	r3,r3,65535
    8394:	10bfffcc 	andi	r2,r2,65535
    8398:	1880021e 	bne	r3,r2,83a4 <EmptyUart0+0x28>
        return 1;
    839c:	00800044 	movi	r2,1
    83a0:	00000106 	br	83a8 <EmptyUart0+0x2c>
    }
    
    return 0;
    83a4:	0005883a 	mov	r2,zero
} 
    83a8:	e037883a 	mov	sp,fp
    83ac:	df000017 	ldw	fp,0(sp)
    83b0:	dec00104 	addi	sp,sp,4
    83b4:	f800283a 	ret

000083b8 <GetUart0>:
    
unsigned char GetUart0(void)
{
    83b8:	defffe04 	addi	sp,sp,-8
    83bc:	df000115 	stw	fp,4(sp)
    83c0:	df000104 	addi	fp,sp,4
    unsigned char rxChar; 
    
    /* buffer is empty */
    
    rxChar=rx_buffer_0[RxTail_0];
    83c4:	d0a0df8b 	ldhu	r2,-31874(gp)
    83c8:	10bfffcc 	andi	r2,r2,65535
    83cc:	00c00074 	movhi	r3,1
    83d0:	18f5f204 	addi	r3,r3,-10296
    83d4:	1885883a 	add	r2,r3,r2
    83d8:	10800003 	ldbu	r2,0(r2)
    83dc:	e0bfff05 	stb	r2,-4(fp)
    if (++RxTail_0 > (RX_BUFFER_SIZE_0 - 1)) {
    83e0:	d0a0df8b 	ldhu	r2,-31874(gp)
    83e4:	10800044 	addi	r2,r2,1
    83e8:	d0a0df8d 	sth	r2,-31874(gp)
    83ec:	d0a0df8b 	ldhu	r2,-31874(gp)
    83f0:	10bfffcc 	andi	r2,r2,65535
    83f4:	10810030 	cmpltui	r2,r2,1024
    83f8:	1000011e 	bne	r2,zero,8400 <GetUart0+0x48>
        RxTail_0 = 0;
    83fc:	d020df8d 	sth	zero,-31874(gp)
    }
    
    return rxChar;
    8400:	e0bfff03 	ldbu	r2,-4(fp)
}
    8404:	e037883a 	mov	sp,fp
    8408:	df000017 	ldw	fp,0(sp)
    840c:	dec00104 	addi	sp,sp,4
    8410:	f800283a 	ret

00008414 <PutUart0>:
 
unsigned char PutUart0(unsigned char in_char)
{
    8414:	defffc04 	addi	sp,sp,-16
    8418:	df000315 	stw	fp,12(sp)
    841c:	df000304 	addi	fp,sp,12
    8420:	2005883a 	mov	r2,r4
    8424:	e0bfff05 	stb	r2,-4(fp)
    unsigned short size;
    unsigned int z;
    
    z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
    8428:	00800074 	movhi	r2,1
    842c:	10850204 	addi	r2,r2,5128
    8430:	10800037 	ldwio	r2,0(r2)
    8434:	1080100c 	andi	r2,r2,64
    8438:	e0bffe15 	stw	r2,-8(fp)
    
    if ((TxHead_0==TxTail_0) && z) {
    843c:	d0e0de0b 	ldhu	r3,-31880(gp)
    8440:	d0a0de8b 	ldhu	r2,-31878(gp)
    8444:	18ffffcc 	andi	r3,r3,65535
    8448:	10bfffcc 	andi	r2,r2,65535
    844c:	1880071e 	bne	r3,r2,846c <PutUart0+0x58>
    8450:	e0bffe17 	ldw	r2,-8(fp)
    8454:	10000526 	beq	r2,zero,846c <PutUart0+0x58>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
    8458:	e0ffff03 	ldbu	r3,-4(fp)
    845c:	00800074 	movhi	r2,1
    8460:	10850104 	addi	r2,r2,5124
    8464:	10c00035 	stwio	r3,0(r2)
    8468:	00002c06 	br	851c <PutUart0+0x108>
    } else {
        if (TxHead_0 >= TxTail_0) {
    846c:	d0e0de0b 	ldhu	r3,-31880(gp)
    8470:	d0a0de8b 	ldhu	r2,-31878(gp)
    8474:	18ffffcc 	andi	r3,r3,65535
    8478:	10bfffcc 	andi	r2,r2,65535
    847c:	18800536 	bltu	r3,r2,8494 <PutUart0+0x80>
            size = TxHead_0 - TxTail_0;
    8480:	d0e0de0b 	ldhu	r3,-31880(gp)
    8484:	d0a0de8b 	ldhu	r2,-31878(gp)
    8488:	1885c83a 	sub	r2,r3,r2
    848c:	e0bffd0d 	sth	r2,-12(fp)
    8490:	00000506 	br	84a8 <PutUart0+0x94>
        } else {
            size = ((TX_BUFFER_SIZE_0 - 1) - TxTail_0) + TxHead_0;
    8494:	d0e0de0b 	ldhu	r3,-31880(gp)
    8498:	d0a0de8b 	ldhu	r2,-31878(gp)
    849c:	1885c83a 	sub	r2,r3,r2
    84a0:	1080ffc4 	addi	r2,r2,1023
    84a4:	e0bffd0d 	sth	r2,-12(fp)
        }

        if (size > (TX_BUFFER_SIZE_0 - 3)) {
    84a8:	e0bffd0b 	ldhu	r2,-12(fp)
    84ac:	1080ffb0 	cmpltui	r2,r2,1022
    84b0:	1000021e 	bne	r2,zero,84bc <PutUart0+0xa8>
            return (-1);
    84b4:	00bfffc4 	movi	r2,-1
    84b8:	00001906 	br	8520 <PutUart0+0x10c>
        }
        
        tx_buffer_0[TxHead_0] = in_char;
    84bc:	d0a0de0b 	ldhu	r2,-31880(gp)
    84c0:	10bfffcc 	andi	r2,r2,65535
    84c4:	00c00074 	movhi	r3,1
    84c8:	18f6f204 	addi	r3,r3,-9272
    84cc:	1885883a 	add	r2,r3,r2
    84d0:	e0ffff03 	ldbu	r3,-4(fp)
    84d4:	10c00005 	stb	r3,0(r2)

        if (++TxHead_0 > (TX_BUFFER_SIZE_0-1)) {
    84d8:	d0a0de0b 	ldhu	r2,-31880(gp)
    84dc:	10800044 	addi	r2,r2,1
    84e0:	d0a0de0d 	sth	r2,-31880(gp)
    84e4:	d0a0de0b 	ldhu	r2,-31880(gp)
    84e8:	10bfffcc 	andi	r2,r2,65535
    84ec:	10810030 	cmpltui	r2,r2,1024
    84f0:	1000011e 	bne	r2,zero,84f8 <PutUart0+0xe4>
            TxHead_0 = 0;
    84f4:	d020de0d 	sth	zero,-31880(gp)
        }

        z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    84f8:	00800074 	movhi	r2,1
    84fc:	10850304 	addi	r2,r2,5132
    8500:	10800037 	ldwio	r2,0(r2)
    8504:	10801014 	ori	r2,r2,64
    8508:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
    850c:	e0fffe17 	ldw	r3,-8(fp)
    8510:	00800074 	movhi	r2,1
    8514:	10850304 	addi	r2,r2,5132
    8518:	10c00035 	stwio	r3,0(r2)
    }

    return(1);
    851c:	00800044 	movi	r2,1
}
    8520:	e037883a 	mov	sp,fp
    8524:	df000017 	ldw	fp,0(sp)
    8528:	dec00104 	addi	sp,sp,4
    852c:	f800283a 	ret

00008530 <InitUart>:
#define pi 3.1415926538
uint16_t maxStepCount0 = 1115;
uint16_t maxStepCount1 = 221;

void InitUart()
{
    8530:	defff904 	addi	sp,sp,-28
    8534:	dfc00615 	stw	ra,24(sp)
    8538:	df000515 	stw	fp,20(sp)
    853c:	df000504 	addi	fp,sp,20
    int context_uart0;

    InitUart0(BAUD_RATE_0);
    8540:	010000b4 	movhi	r4,2
    8544:	21308004 	addi	r4,r4,-15872
    8548:	00081f80 	call	81f8 <InitUart0>

    //alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ,&context_uart1,IsrUart1,NULL); // install UART1 ISR
    alt_irq_register(UART_0_IRQ,&context_uart0,IsrUart0); // install UART0 ISR
    854c:	e0bfff04 	addi	r2,fp,-4
    8550:	0009883a 	mov	r4,zero
    8554:	100b883a 	mov	r5,r2
    8558:	01800074 	movhi	r6,1
    855c:	31a09604 	addi	r6,r6,-32168
    8560:	000b5d80 	call	b5d8 <alt_irq_register>
    8564:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8568:	0005303a 	rdctl	r2,status
    856c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8570:	e0fffc17 	ldw	r3,-16(fp)
    8574:	00bfff84 	movi	r2,-2
    8578:	1884703a 	and	r2,r3,r2
    857c:	1001703a 	wrctl	status,r2
  
  return context;
    8580:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8584:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8588:	e0bffb17 	ldw	r2,-20(fp)
    858c:	00c00044 	movi	r3,1
    8590:	1884983a 	sll	r2,r3,r2
    8594:	1007883a 	mov	r3,r2
    8598:	00800074 	movhi	r2,1
    859c:	10b5ec04 	addi	r2,r2,-10320
    85a0:	10800017 	ldw	r2,0(r2)
    85a4:	1886b03a 	or	r3,r3,r2
    85a8:	00800074 	movhi	r2,1
    85ac:	10b5ec04 	addi	r2,r2,-10320
    85b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    85b4:	00800074 	movhi	r2,1
    85b8:	10b5ec04 	addi	r2,r2,-10320
    85bc:	10800017 	ldw	r2,0(r2)
    85c0:	100170fa 	wrctl	ienable,r2
    85c4:	e0bffd17 	ldw	r2,-12(fp)
    85c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    85cc:	e0bffe17 	ldw	r2,-8(fp)
    85d0:	1001703a 	wrctl	status,r2

    //alt_ic_irq_enable (UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ);
    alt_irq_enable (UART_0_IRQ);
}
    85d4:	e037883a 	mov	sp,fp
    85d8:	dfc00117 	ldw	ra,4(sp)
    85dc:	df000017 	ldw	fp,0(sp)
    85e0:	dec00204 	addi	sp,sp,8
    85e4:	f800283a 	ret

000085e8 <Stepcount1ToSI>:

double Stepcount1ToSI(int16_t steps)
{
    85e8:	defffb04 	addi	sp,sp,-20
    85ec:	dfc00415 	stw	ra,16(sp)
    85f0:	df000315 	stw	fp,12(sp)
    85f4:	df000304 	addi	fp,sp,12
    85f8:	2005883a 	mov	r2,r4
    85fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount1/170*360;
    8600:	d0a0008b 	ldhu	r2,-32766(gp)
    8604:	10bfffcc 	andi	r2,r2,65535
    8608:	1009883a 	mov	r4,r2
    860c:	01402a84 	movi	r5,170
    8610:	000a55c0 	call	a55c <__udivsi3>
    8614:	10bfffcc 	andi	r2,r2,65535
    8618:	1009883a 	mov	r4,r2
    861c:	01405a04 	movi	r5,360
    8620:	000a56c0 	call	a56c <__mulsi3>
    8624:	1009883a 	mov	r4,r2
    8628:	000a3680 	call	a368 <__floatsidf>
    862c:	1009883a 	mov	r4,r2
    8630:	180b883a 	mov	r5,r3
    8634:	e13ffd15 	stw	r4,-12(fp)
    8638:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    863c:	e0bfff0f 	ldh	r2,-4(fp)
    8640:	1009883a 	mov	r4,r2
    8644:	000a3680 	call	a368 <__floatsidf>
    8648:	100b883a 	mov	r5,r2
    864c:	180d883a 	mov	r6,r3
    8650:	2809883a 	mov	r4,r5
    8654:	300b883a 	mov	r5,r6
    8658:	e1bffd17 	ldw	r6,-12(fp)
    865c:	e1fffe17 	ldw	r7,-8(fp)
    8660:	000a0f40 	call	a0f4 <__divdf3>
    8664:	1009883a 	mov	r4,r2
    8668:	180b883a 	mov	r5,r3
    866c:	2005883a 	mov	r2,r4
    8670:	2807883a 	mov	r3,r5
    8674:	1009883a 	mov	r4,r2
    8678:	180b883a 	mov	r5,r3
    867c:	100d883a 	mov	r6,r2
    8680:	180f883a 	mov	r7,r3
    8684:	0009d5c0 	call	9d5c <__adddf3>
    8688:	1009883a 	mov	r4,r2
    868c:	180b883a 	mov	r5,r3
    8690:	2005883a 	mov	r2,r4
    8694:	2807883a 	mov	r3,r5
    8698:	1009883a 	mov	r4,r2
    869c:	180b883a 	mov	r5,r3
    86a0:	019512f4 	movhi	r6,21579
    86a4:	31998604 	addi	r6,r6,26136
    86a8:	01d00274 	movhi	r7,16393
    86ac:	39c87ec4 	addi	r7,r7,8699
    86b0:	0009e100 	call	9e10 <__muldf3>
    86b4:	100f883a 	mov	r7,r2
    86b8:	1811883a 	mov	r8,r3
    86bc:	380b883a 	mov	r5,r7
    86c0:	400d883a 	mov	r6,r8
    86c4:	2807883a 	mov	r3,r5
    86c8:	3009883a 	mov	r4,r6

}
    86cc:	1805883a 	mov	r2,r3
    86d0:	2007883a 	mov	r3,r4
    86d4:	e037883a 	mov	sp,fp
    86d8:	dfc00117 	ldw	ra,4(sp)
    86dc:	df000017 	ldw	fp,0(sp)
    86e0:	dec00204 	addi	sp,sp,8
    86e4:	f800283a 	ret

000086e8 <Stepcount0ToSI>:

double Stepcount0ToSI(int16_t steps)
{
    86e8:	defffb04 	addi	sp,sp,-20
    86ec:	dfc00415 	stw	ra,16(sp)
    86f0:	df000315 	stw	fp,12(sp)
    86f4:	df000304 	addi	fp,sp,12
    86f8:	2005883a 	mov	r2,r4
    86fc:	e0bfff0d 	sth	r2,-4(fp)
	double stepsPerRotation = maxStepCount0/325*360;
    8700:	d0a0000b 	ldhu	r2,-32768(gp)
    8704:	10bfffcc 	andi	r2,r2,65535
    8708:	1009883a 	mov	r4,r2
    870c:	01405144 	movi	r5,325
    8710:	000a55c0 	call	a55c <__udivsi3>
    8714:	10bfffcc 	andi	r2,r2,65535
    8718:	1009883a 	mov	r4,r2
    871c:	01405a04 	movi	r5,360
    8720:	000a56c0 	call	a56c <__mulsi3>
    8724:	1009883a 	mov	r4,r2
    8728:	000a3680 	call	a368 <__floatsidf>
    872c:	1009883a 	mov	r4,r2
    8730:	180b883a 	mov	r5,r3
    8734:	e13ffd15 	stw	r4,-12(fp)
    8738:	e17ffe15 	stw	r5,-8(fp)
	return steps/stepsPerRotation*2*pi;
    873c:	e0bfff0f 	ldh	r2,-4(fp)
    8740:	1009883a 	mov	r4,r2
    8744:	000a3680 	call	a368 <__floatsidf>
    8748:	100b883a 	mov	r5,r2
    874c:	180d883a 	mov	r6,r3
    8750:	2809883a 	mov	r4,r5
    8754:	300b883a 	mov	r5,r6
    8758:	e1bffd17 	ldw	r6,-12(fp)
    875c:	e1fffe17 	ldw	r7,-8(fp)
    8760:	000a0f40 	call	a0f4 <__divdf3>
    8764:	1009883a 	mov	r4,r2
    8768:	180b883a 	mov	r5,r3
    876c:	2005883a 	mov	r2,r4
    8770:	2807883a 	mov	r3,r5
    8774:	1009883a 	mov	r4,r2
    8778:	180b883a 	mov	r5,r3
    877c:	100d883a 	mov	r6,r2
    8780:	180f883a 	mov	r7,r3
    8784:	0009d5c0 	call	9d5c <__adddf3>
    8788:	1009883a 	mov	r4,r2
    878c:	180b883a 	mov	r5,r3
    8790:	2005883a 	mov	r2,r4
    8794:	2807883a 	mov	r3,r5
    8798:	1009883a 	mov	r4,r2
    879c:	180b883a 	mov	r5,r3
    87a0:	019512f4 	movhi	r6,21579
    87a4:	31998604 	addi	r6,r6,26136
    87a8:	01d00274 	movhi	r7,16393
    87ac:	39c87ec4 	addi	r7,r7,8699
    87b0:	0009e100 	call	9e10 <__muldf3>
    87b4:	100f883a 	mov	r7,r2
    87b8:	1811883a 	mov	r8,r3
    87bc:	380b883a 	mov	r5,r7
    87c0:	400d883a 	mov	r6,r8
    87c4:	2807883a 	mov	r3,r5
    87c8:	3009883a 	mov	r4,r6
}
    87cc:	1805883a 	mov	r2,r3
    87d0:	2007883a 	mov	r3,r4
    87d4:	e037883a 	mov	sp,fp
    87d8:	dfc00117 	ldw	ra,4(sp)
    87dc:	df000017 	ldw	fp,0(sp)
    87e0:	dec00204 	addi	sp,sp,8
    87e4:	f800283a 	ret

000087e8 <main>:

int main()
{
    87e8:	deffe404 	addi	sp,sp,-112
    87ec:	dfc01b15 	stw	ra,108(sp)
    87f0:	df001a15 	stw	fp,104(sp)
    87f4:	dc401915 	stw	r17,100(sp)
    87f8:	dc001815 	stw	r16,96(sp)
    87fc:	df001804 	addi	fp,sp,96
	int8_t ch;
	printf("\n\nHello NiosII!!!!!\n");
    8800:	01000074 	movhi	r4,1
    8804:	2133d404 	addi	r4,r4,-12464
    8808:	000acf80 	call	acf8 <puts>

	//IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000001000000000000000);
	IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,0b00000000000000000000000000000000);
    880c:	0007883a 	mov	r3,zero
    8810:	00800074 	movhi	r2,1
    8814:	10840004 	addi	r2,r2,4096
    8818:	10c00035 	stwio	r3,0(r2)
	InitUart();
    881c:	00085300 	call	8530 <InitUart>
	//initialize 20-sim
	XXDouble u [3 + 1];
	XXDouble y [1 + 1];

	/* Initialize the inputs and outputs with correct initial values */
	u[0] = 0.0;		/* corr */
    8820:	e03ff415 	stw	zero,-48(fp)
    8824:	e03ff515 	stw	zero,-44(fp)
	u[1] = 0.0;		/* in */
    8828:	e03ff615 	stw	zero,-40(fp)
    882c:	e03ff715 	stw	zero,-36(fp)
	u[2] = 0.0;		/* position */
    8830:	e03ff815 	stw	zero,-32(fp)
    8834:	e03ff915 	stw	zero,-28(fp)

	y[0] = 0.0;		/* out */
    8838:	e03ffc15 	stw	zero,-16(fp)
    883c:	e03ffd15 	stw	zero,-12(fp)


	/* Initialize the submodel itself */
	XXInitializeSubmodel (&u, &y, xx_time);
    8840:	01000074 	movhi	r4,1
    8844:	2135e704 	addi	r4,r4,-10340
    8848:	20800017 	ldw	r2,0(r4)
    884c:	20c00117 	ldw	r3,4(r4)
    8850:	e13ff404 	addi	r4,fp,-48
    8854:	e17ffc04 	addi	r5,fp,-16
    8858:	100d883a 	mov	r6,r2
    885c:	180f883a 	mov	r7,r3
    8860:	00098980 	call	9898 <XXInitializeSubmodel>
	
	//end initialize 20-sim
	
	//variables for avalon communication
	uint32_t nReadOut = 0;
    8864:	e03feb15 	stw	zero,-84(fp)
	uint16_t stepCount0 = 0;
    8868:	e03fe80d 	sth	zero,-96(fp)
	uint16_t stepCount1 = 0;
    886c:	e03fe88d 	sth	zero,-94(fp)
	uint16_t stepCount0Old = 0;
    8870:	e03fec0d 	sth	zero,-80(fp)
	uint16_t stepCount1Old = 0;
    8874:	e03fec8d 	sth	zero,-78(fp)
	int8_t PWM0 = 0;
    8878:	e03fe905 	stb	zero,-92(fp)
	int8_t PWM1 = 0;
    887c:	e03fe945 	stb	zero,-91(fp)
	int8_t panAngle = 0;
    8880:	e03fe985 	stb	zero,-90(fp)
	int8_t tiltAngle = 0;
    8884:	e03fe9c5 	stb	zero,-89(fp)
	int8_t messageID = 2;
    8888:	00800084 	movi	r2,2
    888c:	e0bfea05 	stb	r2,-88(fp)
	int8_t PID_counter = 0;
    8890:	e03fea45 	stb	zero,-87(fp)
	uint32_t avalondSend = 0;
    8894:	e03fed15 	stw	zero,-76(fp)
	while( (xx_stop_simulation == XXFALSE) ) {
    8898:	00010306 	br	8ca8 <main+0x4c0>

		//avalon bus communication
		nReadOut = IORD(ESL_NIOS_II_IP_0_BASE, 0x00);
    889c:	00800074 	movhi	r2,1
    88a0:	10840004 	addi	r2,r2,4096
    88a4:	10800037 	ldwio	r2,0(r2)
    88a8:	e0bfeb15 	stw	r2,-84(fp)
		unsigned int readID = nReadOut >> 29;
    88ac:	e0bfeb17 	ldw	r2,-84(fp)
    88b0:	1004d77a 	srli	r2,r2,29
    88b4:	e0bfee15 	stw	r2,-72(fp)
		nReadOut = nReadOut << 3;
    88b8:	e0bfeb17 	ldw	r2,-84(fp)
    88bc:	100490fa 	slli	r2,r2,3
    88c0:	e0bfeb15 	stw	r2,-84(fp)
		uint32_t temp32;

		switch(readID) {
    88c4:	e0bfee17 	ldw	r2,-72(fp)
    88c8:	10c00060 	cmpeqi	r3,r2,1
    88cc:	1800031e 	bne	r3,zero,88dc <main+0xf4>
    88d0:	108000a0 	cmpeqi	r2,r2,2
    88d4:	10000b1e 	bne	r2,zero,8904 <main+0x11c>
    88d8:	00002006 	br	895c <main+0x174>
			case 1:
				stepCount0 = nReadOut >> (32-11);
    88dc:	e0bfeb17 	ldw	r2,-84(fp)
    88e0:	1004d57a 	srli	r2,r2,21
    88e4:	e0bfe80d 	sth	r2,-96(fp)

				temp32 = nReadOut << 11;
    88e8:	e0bfeb17 	ldw	r2,-84(fp)
    88ec:	100492fa 	slli	r2,r2,11
    88f0:	e0bfef15 	stw	r2,-68(fp)
				stepCount1 = temp32 >> (32-11);
    88f4:	e0bfef17 	ldw	r2,-68(fp)
    88f8:	1004d57a 	srli	r2,r2,21
    88fc:	e0bfe88d 	sth	r2,-94(fp)
				break;
    8900:	00001a06 	br	896c <main+0x184>
			case 2:
				maxStepCount0 = nReadOut >> (32-11);
    8904:	e0bfeb17 	ldw	r2,-84(fp)
    8908:	1004d57a 	srli	r2,r2,21
    890c:	d0a0000d 	sth	r2,-32768(gp)
				temp32 = nReadOut << 11;
    8910:	e0bfeb17 	ldw	r2,-84(fp)
    8914:	100492fa 	slli	r2,r2,11
    8918:	e0bfef15 	stw	r2,-68(fp)
				maxStepCount1 = temp32 >> (32-11);
    891c:	e0bfef17 	ldw	r2,-68(fp)
    8920:	1004d57a 	srli	r2,r2,21
    8924:	d0a0008d 	sth	r2,-32766(gp)
				printf(".....................Received new calibration values!:\t");
    8928:	01000074 	movhi	r4,1
    892c:	2133d904 	addi	r4,r4,-12444
    8930:	000ac2c0 	call	ac2c <printf>
				printf("stepCount0_max: %d\t stepCount1_max: %d \n\r", maxStepCount0, maxStepCount1);
    8934:	d0a0000b 	ldhu	r2,-32768(gp)
    8938:	10ffffcc 	andi	r3,r2,65535
    893c:	d0a0008b 	ldhu	r2,-32766(gp)
    8940:	10bfffcc 	andi	r2,r2,65535
    8944:	01000074 	movhi	r4,1
    8948:	2133e704 	addi	r4,r4,-12388
    894c:	180b883a 	mov	r5,r3
    8950:	100d883a 	mov	r6,r2
    8954:	000ac2c0 	call	ac2c <printf>
				break;
    8958:	00000406 	br	896c <main+0x184>
			default:
				// default statements
				printf("Received incorrect message");
    895c:	01000074 	movhi	r4,1
    8960:	2133f204 	addi	r4,r4,-12344
    8964:	000ac2c0 	call	ac2c <printf>
				break;
    8968:	0001883a 	nop
		if(xx_time >= 20){

			u[1] = 0.5*pi;

		}*/
		if(PID_counter++ > 50){
    896c:	e0bfea47 	ldb	r2,-87(fp)
    8970:	10800cc8 	cmpgei	r2,r2,51
    8974:	e0ffea43 	ldbu	r3,-87(fp)
    8978:	18c00044 	addi	r3,r3,1
    897c:	e0ffea45 	stb	r3,-87(fp)
    8980:	10803fcc 	andi	r2,r2,255
    8984:	10000326 	beq	r2,zero,8994 <main+0x1ac>
			PWM0 = 0;
    8988:	e03fe905 	stb	zero,-92(fp)
			PWM1 = 0;
    898c:	e03fe945 	stb	zero,-91(fp)
			PID_counter = 0;
    8990:	e03fea45 	stb	zero,-87(fp)
		}
		//receive UART data as input
		if(!EmptyUart0()){
    8994:	000837c0 	call	837c <EmptyUart0>
    8998:	10803fcc 	andi	r2,r2,255
    899c:	10007d1e 	bne	r2,zero,8b94 <main+0x3ac>
			ch = GetUart0();
    89a0:	00083b80 	call	83b8 <GetUart0>
    89a4:	e0bff005 	stb	r2,-64(fp)
			//printf("received message: %d\n",ch);
			//PutUart0(ch);
			switch(messageID){
    89a8:	e0bfea07 	ldb	r2,-88(fp)
    89ac:	10000326 	beq	r2,zero,89bc <main+0x1d4>
    89b0:	10800060 	cmpeqi	r2,r2,1
    89b4:	1000071e 	bne	r2,zero,89d4 <main+0x1ec>
    89b8:	00000c06 	br	89ec <main+0x204>
				case 0: //set pan
					panAngle = ch;
    89bc:	e0bff003 	ldbu	r2,-64(fp)
    89c0:	e0bfe985 	stb	r2,-90(fp)
					messageID++;
    89c4:	e0bfea03 	ldbu	r2,-88(fp)
    89c8:	10800044 	addi	r2,r2,1
    89cc:	e0bfea05 	stb	r2,-88(fp)
					break;
    89d0:	00007006 	br	8b94 <main+0x3ac>
				case 1: //set tilt
					tiltAngle = ch;
    89d4:	e0bff003 	ldbu	r2,-64(fp)
    89d8:	e0bfe9c5 	stb	r2,-89(fp)
					messageID++;
    89dc:	e0bfea03 	ldbu	r2,-88(fp)
    89e0:	10800044 	addi	r2,r2,1
    89e4:	e0bfea05 	stb	r2,-88(fp)
					break;
    89e8:	00006a06 	br	8b94 <main+0x3ac>
				default: //line break
					if(ch == '\n'){
    89ec:	e0bff007 	ldb	r2,-64(fp)
    89f0:	10800298 	cmpnei	r2,r2,10
    89f4:	1000661e 	bne	r2,zero,8b90 <main+0x3a8>
						messageID = 0;
    89f8:	e03fea05 	stb	zero,-88(fp)
						if(panAngle != -128)
    89fc:	e0bfe987 	ldb	r2,-90(fp)
    8a00:	10bfe020 	cmpeqi	r2,r2,-128
    8a04:	1000061e 	bne	r2,zero,8a20 <main+0x238>
							PWM0 = -panAngle/2;
    8a08:	e0bfe987 	ldb	r2,-90(fp)
    8a0c:	0085c83a 	sub	r2,zero,r2
    8a10:	1006d7fa 	srli	r3,r2,31
    8a14:	1885883a 	add	r2,r3,r2
    8a18:	1005d07a 	srai	r2,r2,1
    8a1c:	e0bfe905 	stb	r2,-92(fp)
						if(tiltAngle != -128)
    8a20:	e0bfe9c7 	ldb	r2,-89(fp)
    8a24:	10bfe020 	cmpeqi	r2,r2,-128
    8a28:	1000061e 	bne	r2,zero,8a44 <main+0x25c>
							PWM1 = -tiltAngle/20;
    8a2c:	e0bfe9c7 	ldb	r2,-89(fp)
    8a30:	0085c83a 	sub	r2,zero,r2
    8a34:	1009883a 	mov	r4,r2
    8a38:	01400504 	movi	r5,20
    8a3c:	000a4b00 	call	a4b0 <__divsi3>
    8a40:	e0bfe945 	stb	r2,-91(fp)
						if(PWM0 > 0 && PWM0 < 40)
    8a44:	e0bfe907 	ldb	r2,-92(fp)
    8a48:	0080050e 	bge	zero,r2,8a60 <main+0x278>
    8a4c:	e0bfe907 	ldb	r2,-92(fp)
    8a50:	10800a08 	cmpgei	r2,r2,40
    8a54:	1000021e 	bne	r2,zero,8a60 <main+0x278>
							PWM0 = 40;
    8a58:	00800a04 	movi	r2,40
    8a5c:	e0bfe905 	stb	r2,-92(fp)
						if(PWM0 < 0 && PWM0 > -40)
    8a60:	e0bfe907 	ldb	r2,-92(fp)
    8a64:	1000050e 	bge	r2,zero,8a7c <main+0x294>
    8a68:	e0bfe907 	ldb	r2,-92(fp)
    8a6c:	10bff650 	cmplti	r2,r2,-39
    8a70:	1000021e 	bne	r2,zero,8a7c <main+0x294>
							PWM0 = -40;
    8a74:	00bff604 	movi	r2,-40
    8a78:	e0bfe905 	stb	r2,-92(fp)
						if(PWM1 > 0 && PWM1 < 5)
    8a7c:	e0bfe947 	ldb	r2,-91(fp)
    8a80:	0080050e 	bge	zero,r2,8a98 <main+0x2b0>
    8a84:	e0bfe947 	ldb	r2,-91(fp)
    8a88:	10800148 	cmpgei	r2,r2,5
    8a8c:	1000021e 	bne	r2,zero,8a98 <main+0x2b0>
							PWM1 = 5;
    8a90:	00800144 	movi	r2,5
    8a94:	e0bfe945 	stb	r2,-91(fp)
						if(PWM1 < 0 && PWM1 > -5)
    8a98:	e0bfe947 	ldb	r2,-91(fp)
    8a9c:	1000050e 	bge	r2,zero,8ab4 <main+0x2cc>
    8aa0:	e0bfe947 	ldb	r2,-91(fp)
    8aa4:	10bfff10 	cmplti	r2,r2,-4
    8aa8:	1000021e 	bne	r2,zero,8ab4 <main+0x2cc>
							PWM1 = -5;
    8aac:	00bffec4 	movi	r2,-5
    8ab0:	e0bfe945 	stb	r2,-91(fp)



						//check if an object is detected
						if (panAngle != -128 || tiltAngle != -128){
    8ab4:	e0bfe987 	ldb	r2,-90(fp)
    8ab8:	10bfe018 	cmpnei	r2,r2,-128
    8abc:	1000031e 	bne	r2,zero,8acc <main+0x2e4>
    8ac0:	e0bfe9c7 	ldb	r2,-89(fp)
    8ac4:	10bfe020 	cmpeqi	r2,r2,-128
    8ac8:	10002b1e 	bne	r2,zero,8b78 <main+0x390>
							u[1] += panAngle/360*2*pi*200;
    8acc:	e43ff617 	ldw	r16,-40(fp)
    8ad0:	e47ff717 	ldw	r17,-36(fp)
    8ad4:	e0bfe987 	ldb	r2,-90(fp)
    8ad8:	1009883a 	mov	r4,r2
    8adc:	01405a04 	movi	r5,360
    8ae0:	000a4b00 	call	a4b0 <__divsi3>
    8ae4:	1085883a 	add	r2,r2,r2
    8ae8:	1009883a 	mov	r4,r2
    8aec:	000a3680 	call	a368 <__floatsidf>
    8af0:	100b883a 	mov	r5,r2
    8af4:	180d883a 	mov	r6,r3
    8af8:	2809883a 	mov	r4,r5
    8afc:	300b883a 	mov	r5,r6
    8b00:	019512f4 	movhi	r6,21579
    8b04:	31998604 	addi	r6,r6,26136
    8b08:	01d00274 	movhi	r7,16393
    8b0c:	39c87ec4 	addi	r7,r7,8699
    8b10:	0009e100 	call	9e10 <__muldf3>
    8b14:	1009883a 	mov	r4,r2
    8b18:	180b883a 	mov	r5,r3
    8b1c:	2005883a 	mov	r2,r4
    8b20:	2807883a 	mov	r3,r5
    8b24:	1009883a 	mov	r4,r2
    8b28:	180b883a 	mov	r5,r3
    8b2c:	000d883a 	mov	r6,zero
    8b30:	01d01a74 	movhi	r7,16489
    8b34:	0009e100 	call	9e10 <__muldf3>
    8b38:	1009883a 	mov	r4,r2
    8b3c:	180b883a 	mov	r5,r3
    8b40:	2005883a 	mov	r2,r4
    8b44:	2807883a 	mov	r3,r5
    8b48:	8009883a 	mov	r4,r16
    8b4c:	880b883a 	mov	r5,r17
    8b50:	100d883a 	mov	r6,r2
    8b54:	180f883a 	mov	r7,r3
    8b58:	0009d5c0 	call	9d5c <__adddf3>
    8b5c:	1009883a 	mov	r4,r2
    8b60:	180b883a 	mov	r5,r3
    8b64:	2005883a 	mov	r2,r4
    8b68:	2807883a 	mov	r3,r5
    8b6c:	e0bff615 	stw	r2,-40(fp)
    8b70:	e0fff715 	stw	r3,-36(fp)
						else{
							u[1] = pi;
						}

					}
					break;
    8b74:	00000606 	br	8b90 <main+0x3a8>
						//check if an object is detected
						if (panAngle != -128 || tiltAngle != -128){
							u[1] += panAngle/360*2*pi*200;
						}
						else{
							u[1] = pi;
    8b78:	009512f4 	movhi	r2,21579
    8b7c:	10998604 	addi	r2,r2,26136
    8b80:	e0bff615 	stw	r2,-40(fp)
    8b84:	00900274 	movhi	r2,16393
    8b88:	10887ec4 	addi	r2,r2,8699
    8b8c:	e0bff715 	stw	r2,-36(fp)
						}

					}
					break;
    8b90:	0001883a 	nop
				}

		}

		if(u[1] < 0)
    8b94:	e0bff617 	ldw	r2,-40(fp)
    8b98:	e0fff717 	ldw	r3,-36(fp)
    8b9c:	1009883a 	mov	r4,r2
    8ba0:	180b883a 	mov	r5,r3
    8ba4:	000d883a 	mov	r6,zero
    8ba8:	000f883a 	mov	r7,zero
    8bac:	000a30c0 	call	a30c <__ltdf2>
    8bb0:	1000020e 	bge	r2,zero,8bbc <main+0x3d4>
			u[1] = 0;
    8bb4:	e03ff615 	stw	zero,-40(fp)
    8bb8:	e03ff715 	stw	zero,-36(fp)

		
		/* Call the 20-sim submodel to calculate the output */
		u[2] = Stepcount0ToSI(stepCount0);
    8bbc:	e0bfe80b 	ldhu	r2,-96(fp)
    8bc0:	10bfffcc 	andi	r2,r2,65535
    8bc4:	10a0001c 	xori	r2,r2,32768
    8bc8:	10a00004 	addi	r2,r2,-32768
    8bcc:	1009883a 	mov	r4,r2
    8bd0:	00086e80 	call	86e8 <Stepcount0ToSI>
    8bd4:	1009883a 	mov	r4,r2
    8bd8:	180b883a 	mov	r5,r3
    8bdc:	e13ff815 	stw	r4,-32(fp)
    8be0:	e17ff915 	stw	r5,-28(fp)
		double temp = y[0];
    8be4:	e0bffc17 	ldw	r2,-16(fp)
    8be8:	e0fffd17 	ldw	r3,-12(fp)
    8bec:	e0bff115 	stw	r2,-60(fp)
    8bf0:	e0fff215 	stw	r3,-56(fp)
		
		//printf("%f\n",temp);

		XXCalculateSubmodel (&u, &y, xx_time);
    8bf4:	01000074 	movhi	r4,1
    8bf8:	2135e704 	addi	r4,r4,-10340
    8bfc:	20800017 	ldw	r2,0(r4)
    8c00:	20c00117 	ldw	r3,4(r4)
    8c04:	e13ff404 	addi	r4,fp,-48
    8c08:	e17ffc04 	addi	r5,fp,-16
    8c0c:	100d883a 	mov	r6,r2
    8c10:	180f883a 	mov	r7,r3
    8c14:	00099380 	call	9938 <XXCalculateSubmodel>
		//printf("model setpoint: %f\t model input %f\t model output%f\n", u[1], u[2], y[0]);
		//PWM0 = y[0]*70;

		int16_t temp16 = 0;
    8c18:	e03ff30d 	sth	zero,-52(fp)
		avalondSend = PWM0 << 24 | PWM1 <<16 | temp16;
    8c1c:	e0bfe907 	ldb	r2,-92(fp)
    8c20:	1006963a 	slli	r3,r2,24
    8c24:	e0bfe947 	ldb	r2,-91(fp)
    8c28:	1004943a 	slli	r2,r2,16
    8c2c:	1886b03a 	or	r3,r3,r2
    8c30:	e0bff30f 	ldh	r2,-52(fp)
    8c34:	1884b03a 	or	r2,r3,r2
    8c38:	e0bfed15 	stw	r2,-76(fp)
		//printf("%x\n",avalondSend);
		IOWR(ESL_NIOS_II_IP_0_BASE, 0x00,avalondSend);
    8c3c:	e0ffed17 	ldw	r3,-76(fp)
    8c40:	00800074 	movhi	r2,1
    8c44:	10840004 	addi	r2,r2,4096
    8c48:	10c00035 	stwio	r3,0(r2)

		
		stepCount0Old = stepCount0;
    8c4c:	e0bfe80b 	ldhu	r2,-96(fp)
    8c50:	e0bfec0d 	sth	r2,-80(fp)
		stepCount1Old = stepCount1;
    8c54:	e0bfe88b 	ldhu	r2,-94(fp)
    8c58:	e0bfec8d 	sth	r2,-78(fp)
		xx_time+=0.0013;
    8c5c:	01000074 	movhi	r4,1
    8c60:	2135e704 	addi	r4,r4,-10340
    8c64:	20800017 	ldw	r2,0(r4)
    8c68:	20c00117 	ldw	r3,4(r4)
    8c6c:	1009883a 	mov	r4,r2
    8c70:	180b883a 	mov	r5,r3
    8c74:	0197c1f4 	movhi	r6,24327
    8c78:	31bda504 	addi	r6,r6,-2412
    8c7c:	01cfd574 	movhi	r7,16213
    8c80:	39d32604 	addi	r7,r7,19608
    8c84:	0009d5c0 	call	9d5c <__adddf3>
    8c88:	1009883a 	mov	r4,r2
    8c8c:	180b883a 	mov	r5,r3
    8c90:	2005883a 	mov	r2,r4
    8c94:	2807883a 	mov	r3,r5
    8c98:	01000074 	movhi	r4,1
    8c9c:	2135e704 	addi	r4,r4,-10340
    8ca0:	20800015 	stw	r2,0(r4)
    8ca4:	20c00115 	stw	r3,4(r4)
	int8_t panAngle = 0;
	int8_t tiltAngle = 0;
	int8_t messageID = 2;
	int8_t PID_counter = 0;
	uint32_t avalondSend = 0;
	while( (xx_stop_simulation == XXFALSE) ) {
    8ca8:	00800074 	movhi	r2,1
    8cac:	10b5ea04 	addi	r2,r2,-10328
    8cb0:	10800003 	ldbu	r2,0(r2)
    8cb4:	10803fcc 	andi	r2,r2,255
    8cb8:	1080201c 	xori	r2,r2,128
    8cbc:	10bfe004 	addi	r2,r2,-128
    8cc0:	103ef626 	beq	r2,zero,889c <main+0xb4>
		stepCount1Old = stepCount1;
		xx_time+=0.0013;
	} 

	/* Perform the final 20-sim calculations */
	XXTerminateSubmodel (&u, &y, xx_time);
    8cc4:	01000074 	movhi	r4,1
    8cc8:	2135e704 	addi	r4,r4,-10340
    8ccc:	20800017 	ldw	r2,0(r4)
    8cd0:	20c00117 	ldw	r3,4(r4)
    8cd4:	e13ff404 	addi	r4,fp,-48
    8cd8:	e17ffc04 	addi	r5,fp,-16
    8cdc:	100d883a 	mov	r6,r2
    8ce0:	180f883a 	mov	r7,r3
    8ce4:	00099a00 	call	99a0 <XXTerminateSubmodel>

return 0;
    8ce8:	0005883a 	mov	r2,zero

}
    8cec:	e037883a 	mov	sp,fp
    8cf0:	dfc00317 	ldw	ra,12(sp)
    8cf4:	df000217 	ldw	fp,8(sp)
    8cf8:	dc400117 	ldw	r17,4(sp)
    8cfc:	dc000017 	ldw	r16,0(sp)
    8d00:	dec00404 	addi	sp,sp,16
    8d04:	f800283a 	ret

00008d08 <XXString2Double>:
	double m_double;
	const char* m_char;
}str2dbl;

XXDouble XXString2Double(const char* argument)
{
    8d08:	defffc04 	addi	sp,sp,-16
    8d0c:	df000315 	stw	fp,12(sp)
    8d10:	df000304 	addi	fp,sp,12
    8d14:	e13fff15 	stw	r4,-4(fp)
	str2dbl myConversion;
	myConversion.m_char = argument;
    8d18:	e0bfff17 	ldw	r2,-4(fp)
    8d1c:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_double;
    8d20:	e17ffd17 	ldw	r5,-12(fp)
    8d24:	e1bffe17 	ldw	r6,-8(fp)
    8d28:	2807883a 	mov	r3,r5
    8d2c:	3009883a 	mov	r4,r6

}
    8d30:	1805883a 	mov	r2,r3
    8d34:	2007883a 	mov	r3,r4
    8d38:	e037883a 	mov	sp,fp
    8d3c:	df000017 	ldw	fp,0(sp)
    8d40:	dec00104 	addi	sp,sp,4
    8d44:	f800283a 	ret

00008d48 <XXDouble2String>:

const char* XXDouble2String(XXDouble argument)
{
    8d48:	defffb04 	addi	sp,sp,-20
    8d4c:	df000415 	stw	fp,16(sp)
    8d50:	df000404 	addi	fp,sp,16
    8d54:	e13ffe15 	stw	r4,-8(fp)
    8d58:	e17fff15 	stw	r5,-4(fp)
	str2dbl myConversion;
	myConversion.m_double = argument;
    8d5c:	e0bffe17 	ldw	r2,-8(fp)
    8d60:	e0bffc15 	stw	r2,-16(fp)
    8d64:	e0bfff17 	ldw	r2,-4(fp)
    8d68:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_char;
    8d6c:	e0bffc17 	ldw	r2,-16(fp)
}
    8d70:	e037883a 	mov	sp,fp
    8d74:	df000017 	ldw	fp,0(sp)
    8d78:	dec00104 	addi	sp,sp,4
    8d7c:	f800283a 	ret

00008d80 <XXDiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void XXDiscreteInitialize (void)
{
    8d80:	deffff04 	addi	sp,sp,-4
    8d84:	df000015 	stw	fp,0(sp)
    8d88:	d839883a 	mov	fp,sp
	/* nothing to be done */
	xx_major = XXTRUE;
    8d8c:	00800074 	movhi	r2,1
    8d90:	10b50a44 	addi	r2,r2,-11223
    8d94:	00c00044 	movi	r3,1
    8d98:	10c00005 	stb	r3,0(r2)
}
    8d9c:	e037883a 	mov	sp,fp
    8da0:	df000017 	ldw	fp,0(sp)
    8da4:	dec00104 	addi	sp,sp,4
    8da8:	f800283a 	ret

00008dac <XXDiscreteTerminate>:

/* the termination of the Discrete integration method */
void XXDiscreteTerminate (void)
{
    8dac:	deffff04 	addi	sp,sp,-4
    8db0:	df000015 	stw	fp,0(sp)
    8db4:	d839883a 	mov	fp,sp
	/* nothing to be done */
}
    8db8:	e037883a 	mov	sp,fp
    8dbc:	df000017 	ldw	fp,0(sp)
    8dc0:	dec00104 	addi	sp,sp,4
    8dc4:	f800283a 	ret

00008dc8 <XXDiscreteStep>:

/* the Discrete integration method itself */
void XXDiscreteStep (void)
{
    8dc8:	defffd04 	addi	sp,sp,-12
    8dcc:	dfc00215 	stw	ra,8(sp)
    8dd0:	df000115 	stw	fp,4(sp)
    8dd4:	df000104 	addi	fp,sp,4
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8dd8:	e03fff15 	stw	zero,-4(fp)
    8ddc:	00001106 	br	8e24 <XXDiscreteStep+0x5c>
	{
		/* just a move of the new state */
		xx_s [index] = xx_R [index];
    8de0:	00c00074 	movhi	r3,1
    8de4:	18f7f204 	addi	r3,r3,-8248
    8de8:	e0bfff17 	ldw	r2,-4(fp)
    8dec:	100490fa 	slli	r2,r2,3
    8df0:	1889883a 	add	r4,r3,r2
    8df4:	20800017 	ldw	r2,0(r4)
    8df8:	20c00117 	ldw	r3,4(r4)
    8dfc:	01400074 	movhi	r5,1
    8e00:	29782404 	addi	r5,r5,-8048
    8e04:	e13fff17 	ldw	r4,-4(fp)
    8e08:	200890fa 	slli	r4,r4,3
    8e0c:	2909883a 	add	r4,r5,r4
    8e10:	20800015 	stw	r2,0(r4)
    8e14:	20c00115 	stw	r3,4(r4)
void XXDiscreteStep (void)
{
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8e18:	e0bfff17 	ldw	r2,-4(fp)
    8e1c:	10800044 	addi	r2,r2,1
    8e20:	e0bfff15 	stw	r2,-4(fp)
    8e24:	e0bfff17 	ldw	r2,-4(fp)
    8e28:	108000d0 	cmplti	r2,r2,3
    8e2c:	103fec1e 	bne	r2,zero,8de0 <XXDiscreteStep+0x18>
	{
		/* just a move of the new state */
		xx_s [index] = xx_R [index];
	}
	/* increment the simulation time */
	xx_time += xx_step_size;
    8e30:	00800074 	movhi	r2,1
    8e34:	10b5e704 	addi	r2,r2,-10340
    8e38:	11400017 	ldw	r5,0(r2)
    8e3c:	11800117 	ldw	r6,4(r2)
    8e40:	01000074 	movhi	r4,1
    8e44:	21350804 	addi	r4,r4,-11232
    8e48:	20800017 	ldw	r2,0(r4)
    8e4c:	20c00117 	ldw	r3,4(r4)
    8e50:	2809883a 	mov	r4,r5
    8e54:	300b883a 	mov	r5,r6
    8e58:	100d883a 	mov	r6,r2
    8e5c:	180f883a 	mov	r7,r3
    8e60:	0009d5c0 	call	9d5c <__adddf3>
    8e64:	1009883a 	mov	r4,r2
    8e68:	180b883a 	mov	r5,r3
    8e6c:	2005883a 	mov	r2,r4
    8e70:	2807883a 	mov	r3,r5
    8e74:	01000074 	movhi	r4,1
    8e78:	2135e704 	addi	r4,r4,-10340
    8e7c:	20800015 	stw	r2,0(r4)
    8e80:	20c00115 	stw	r3,4(r4)

	xx_major = XXTRUE;
    8e84:	00800074 	movhi	r2,1
    8e88:	10b50a44 	addi	r2,r2,-11223
    8e8c:	00c00044 	movi	r3,1
    8e90:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	XXCalculateDynamic ();
    8e94:	00091140 	call	9114 <XXCalculateDynamic>
}
    8e98:	e037883a 	mov	sp,fp
    8e9c:	dfc00117 	ldw	ra,4(sp)
    8ea0:	df000017 	ldw	fp,0(sp)
    8ea4:	dec00204 	addi	sp,sp,8
    8ea8:	f800283a 	ret

00008eac <XXModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void XXModelInitialize_parameters(void)
{
    8eac:	deffff04 	addi	sp,sp,-4
    8eb0:	df000015 	stw	fp,0(sp)
    8eb4:	d839883a 	mov	fp,sp
	/* set the parameters */
	xx_P[0] = 0.0;		/* corrGain\K */
    8eb8:	00800074 	movhi	r2,1
    8ebc:	10b7fe04 	addi	r2,r2,-8200
    8ec0:	10000015 	stw	zero,0(r2)
    8ec4:	10000115 	stw	zero,4(r2)
	xx_P[1] = 1.6;		/* PID1\kp */
    8ec8:	00800074 	movhi	r2,1
    8ecc:	10b7fe04 	addi	r2,r2,-8200
    8ed0:	00e666b4 	movhi	r3,39322
    8ed4:	18e66684 	addi	r3,r3,-26214
    8ed8:	10c00215 	stw	r3,8(r2)
    8edc:	00cffeb4 	movhi	r3,16378
    8ee0:	18e66644 	addi	r3,r3,-26215
    8ee4:	10c00315 	stw	r3,12(r2)
	xx_P[2] = 0.05;		/* PID1\tauD */
    8ee8:	00800074 	movhi	r2,1
    8eec:	10b7fe04 	addi	r2,r2,-8200
    8ef0:	00e666b4 	movhi	r3,39322
    8ef4:	18e66684 	addi	r3,r3,-26214
    8ef8:	10c00415 	stw	r3,16(r2)
    8efc:	00cfeab4 	movhi	r3,16298
    8f00:	18e66644 	addi	r3,r3,-26215
    8f04:	10c00515 	stw	r3,20(r2)
	xx_P[3] = 0.001;		/* PID1\beta */
    8f08:	00800074 	movhi	r2,1
    8f0c:	10b7fe04 	addi	r2,r2,-8200
    8f10:	00f4bcb4 	movhi	r3,54002
    8f14:	18ea7f04 	addi	r3,r3,-22020
    8f18:	10c00615 	stw	r3,24(r2)
    8f1c:	00cfd434 	movhi	r3,16208
    8f20:	18d89344 	addi	r3,r3,25165
    8f24:	10c00715 	stw	r3,28(r2)
	xx_P[4] = 10.5;		/* PID1\tauI */
    8f28:	00800074 	movhi	r2,1
    8f2c:	10b7fe04 	addi	r2,r2,-8200
    8f30:	10000815 	stw	zero,32(r2)
    8f34:	00d00974 	movhi	r3,16421
    8f38:	10c00915 	stw	r3,36(r2)
	xx_P[5] = -0.99;		/* SignalLimiter2\minimum */
    8f3c:	00800074 	movhi	r2,1
    8f40:	10b7fe04 	addi	r2,r2,-8200
    8f44:	00deb874 	movhi	r3,31457
    8f48:	18d1eb84 	addi	r3,r3,18350
    8f4c:	10c00a15 	stw	r3,40(r2)
    8f50:	00effc34 	movhi	r3,49136
    8f54:	18eb8504 	addi	r3,r3,-20972
    8f58:	10c00b15 	stw	r3,44(r2)
	xx_P[6] = 0.99;		/* SignalLimiter2\maximum */
    8f5c:	00800074 	movhi	r2,1
    8f60:	10b7fe04 	addi	r2,r2,-8200
    8f64:	00deb874 	movhi	r3,31457
    8f68:	18d1eb84 	addi	r3,r3,18350
    8f6c:	10c00c15 	stw	r3,48(r2)
    8f70:	00cffc34 	movhi	r3,16368
    8f74:	18eb8504 	addi	r3,r3,-20972
    8f78:	10c00d15 	stw	r3,52(r2)

}
    8f7c:	e037883a 	mov	sp,fp
    8f80:	df000017 	ldw	fp,0(sp)
    8f84:	dec00104 	addi	sp,sp,4
    8f88:	f800283a 	ret

00008f8c <XXModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void XXModelInitialize_initialvalues(void)
{
    8f8c:	deffff04 	addi	sp,sp,-4
    8f90:	df000015 	stw	fp,0(sp)
    8f94:	d839883a 	mov	fp,sp
	/* set the initial values */
	xx_I[0] = 0.0;		/* PID1\uD_previous_initial */
    8f98:	00800074 	movhi	r2,1
    8f9c:	10b7f804 	addi	r2,r2,-8224
    8fa0:	10000015 	stw	zero,0(r2)
    8fa4:	10000115 	stw	zero,4(r2)
	xx_I[1] = 0.0;		/* PID1\error_previous_initial */
    8fa8:	00800074 	movhi	r2,1
    8fac:	10b7f804 	addi	r2,r2,-8224
    8fb0:	10000215 	stw	zero,8(r2)
    8fb4:	10000315 	stw	zero,12(r2)
	xx_I[2] = 0.0;		/* PID1\uI_previous_initial */
    8fb8:	00800074 	movhi	r2,1
    8fbc:	10b7f804 	addi	r2,r2,-8224
    8fc0:	10000415 	stw	zero,16(r2)
    8fc4:	10000515 	stw	zero,20(r2)

}
    8fc8:	e037883a 	mov	sp,fp
    8fcc:	df000017 	ldw	fp,0(sp)
    8fd0:	dec00104 	addi	sp,sp,4
    8fd4:	f800283a 	ret

00008fd8 <XXModelInitialize_states>:

void XXModelInitialize_states(void)
{
    8fd8:	deffff04 	addi	sp,sp,-4
    8fdc:	df000015 	stw	fp,0(sp)
    8fe0:	d839883a 	mov	fp,sp
	/* set the states */
	xx_s[0] = xx_I[0];		/* PID1\uD_previous */
    8fe4:	01000074 	movhi	r4,1
    8fe8:	2137f804 	addi	r4,r4,-8224
    8fec:	20800017 	ldw	r2,0(r4)
    8ff0:	20c00117 	ldw	r3,4(r4)
    8ff4:	01000074 	movhi	r4,1
    8ff8:	21382404 	addi	r4,r4,-8048
    8ffc:	20800015 	stw	r2,0(r4)
    9000:	20c00115 	stw	r3,4(r4)
	xx_s[1] = xx_I[1];		/* PID1\error_previous */
    9004:	01000074 	movhi	r4,1
    9008:	2137f804 	addi	r4,r4,-8224
    900c:	20800217 	ldw	r2,8(r4)
    9010:	20c00317 	ldw	r3,12(r4)
    9014:	01000074 	movhi	r4,1
    9018:	21382404 	addi	r4,r4,-8048
    901c:	20800215 	stw	r2,8(r4)
    9020:	20c00315 	stw	r3,12(r4)
	xx_s[2] = xx_I[2];		/* PID1\uI_previous */
    9024:	01000074 	movhi	r4,1
    9028:	2137f804 	addi	r4,r4,-8224
    902c:	20800417 	ldw	r2,16(r4)
    9030:	20c00517 	ldw	r3,20(r4)
    9034:	01000074 	movhi	r4,1
    9038:	21382404 	addi	r4,r4,-8048
    903c:	20800415 	stw	r2,16(r4)
    9040:	20c00515 	stw	r3,20(r4)

}
    9044:	e037883a 	mov	sp,fp
    9048:	df000017 	ldw	fp,0(sp)
    904c:	dec00104 	addi	sp,sp,4
    9050:	f800283a 	ret

00009054 <XXModelInitialize_variables>:

void XXModelInitialize_variables(void)
{
    9054:	defffe04 	addi	sp,sp,-8
    9058:	dfc00115 	stw	ra,4(sp)
    905c:	df000015 	stw	fp,0(sp)
    9060:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(xx_V, 0, xx_variables_size * sizeof(XXDouble));
    9064:	01000074 	movhi	r4,1
    9068:	21380c04 	addi	r4,r4,-8144
    906c:	000b883a 	mov	r5,zero
    9070:	01801804 	movi	r6,96
    9074:	000abd00 	call	abd0 <memset>
}
    9078:	e037883a 	mov	sp,fp
    907c:	dfc00117 	ldw	ra,4(sp)
    9080:	df000017 	ldw	fp,0(sp)
    9084:	dec00204 	addi	sp,sp,8
    9088:	f800283a 	ret

0000908c <XXModelInitialize>:

/* this method is called before calculation is possible */
void XXModelInitialize (void)
{
    908c:	defffe04 	addi	sp,sp,-8
    9090:	dfc00115 	stw	ra,4(sp)
    9094:	df000015 	stw	fp,0(sp)
    9098:	d839883a 	mov	fp,sp
	XXModelInitialize_parameters();
    909c:	0008eac0 	call	8eac <XXModelInitialize_parameters>
	XXModelInitialize_variables();
    90a0:	00090540 	call	9054 <XXModelInitialize_variables>
	XXModelInitialize_initialvalues();
    90a4:	0008f8c0 	call	8f8c <XXModelInitialize_initialvalues>
	XXModelInitialize_states();
    90a8:	0008fd80 	call	8fd8 <XXModelInitialize_states>
}
    90ac:	e037883a 	mov	sp,fp
    90b0:	dfc00117 	ldw	ra,4(sp)
    90b4:	df000017 	ldw	fp,0(sp)
    90b8:	dec00204 	addi	sp,sp,8
    90bc:	f800283a 	ret

000090c0 <XXCalculateInitial>:

/* This function calculates the initial equations of the model.
 * These equations are calculated before anything else
 */
void XXCalculateInitial (void)
{
    90c0:	deffff04 	addi	sp,sp,-4
    90c4:	df000015 	stw	fp,0(sp)
    90c8:	d839883a 	mov	fp,sp

}
    90cc:	e037883a 	mov	sp,fp
    90d0:	df000017 	ldw	fp,0(sp)
    90d4:	dec00104 	addi	sp,sp,4
    90d8:	f800283a 	ret

000090dc <XXCalculateStatic>:

/* This function calculates the static equations of the model.
 * These equations are only dependent from parameters and constants
 */
void XXCalculateStatic (void)
{
    90dc:	deffff04 	addi	sp,sp,-4
    90e0:	df000015 	stw	fp,0(sp)
    90e4:	d839883a 	mov	fp,sp

}
    90e8:	e037883a 	mov	sp,fp
    90ec:	df000017 	ldw	fp,0(sp)
    90f0:	dec00104 	addi	sp,sp,4
    90f4:	f800283a 	ret

000090f8 <XXCalculateInput>:
/* This function calculates the input equations of the model.
 * These equations are dynamic equations that must not change
 * in calls from the integration method (like random and delay).
 */
void XXCalculateInput (void)
{
    90f8:	deffff04 	addi	sp,sp,-4
    90fc:	df000015 	stw	fp,0(sp)
    9100:	d839883a 	mov	fp,sp

}
    9104:	e037883a 	mov	sp,fp
    9108:	df000017 	ldw	fp,0(sp)
    910c:	dec00104 	addi	sp,sp,4
    9110:	f800283a 	ret

00009114 <XXCalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void XXCalculateDynamic (void)
{
    9114:	defff804 	addi	sp,sp,-32
    9118:	dfc00715 	stw	ra,28(sp)
    911c:	df000615 	stw	fp,24(sp)
    9120:	dd400515 	stw	r21,20(sp)
    9124:	dd000415 	stw	r20,16(sp)
    9128:	dcc00315 	stw	r19,12(sp)
    912c:	dc800215 	stw	r18,8(sp)
    9130:	dc400115 	stw	r17,4(sp)
    9134:	dc000015 	stw	r16,0(sp)
    9138:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	xx_V[3] = 1.0 / (xx_step_size + xx_P[2] * xx_P[3]);
    913c:	00800074 	movhi	r2,1
    9140:	10b7fe04 	addi	r2,r2,-8200
    9144:	11400417 	ldw	r5,16(r2)
    9148:	11800517 	ldw	r6,20(r2)
    914c:	01000074 	movhi	r4,1
    9150:	2137fe04 	addi	r4,r4,-8200
    9154:	20800617 	ldw	r2,24(r4)
    9158:	20c00717 	ldw	r3,28(r4)
    915c:	2809883a 	mov	r4,r5
    9160:	300b883a 	mov	r5,r6
    9164:	100d883a 	mov	r6,r2
    9168:	180f883a 	mov	r7,r3
    916c:	0009e100 	call	9e10 <__muldf3>
    9170:	100f883a 	mov	r7,r2
    9174:	1811883a 	mov	r8,r3
    9178:	380b883a 	mov	r5,r7
    917c:	400d883a 	mov	r6,r8
    9180:	d0a00317 	ldw	r2,-32756(gp)
    9184:	01000074 	movhi	r4,1
    9188:	21350904 	addi	r4,r4,-11228
    918c:	20c00017 	ldw	r3,0(r4)
    9190:	2809883a 	mov	r4,r5
    9194:	300b883a 	mov	r5,r6
    9198:	100d883a 	mov	r6,r2
    919c:	180f883a 	mov	r7,r3
    91a0:	0009d5c0 	call	9d5c <__adddf3>
    91a4:	1009883a 	mov	r4,r2
    91a8:	180b883a 	mov	r5,r3
    91ac:	2005883a 	mov	r2,r4
    91b0:	2807883a 	mov	r3,r5
    91b4:	0009883a 	mov	r4,zero
    91b8:	014ffc34 	movhi	r5,16368
    91bc:	100d883a 	mov	r6,r2
    91c0:	180f883a 	mov	r7,r3
    91c4:	000a0f40 	call	a0f4 <__divdf3>
    91c8:	1009883a 	mov	r4,r2
    91cc:	180b883a 	mov	r5,r3
    91d0:	2005883a 	mov	r2,r4
    91d4:	2807883a 	mov	r3,r5
    91d8:	01000074 	movhi	r4,1
    91dc:	21380c04 	addi	r4,r4,-8144
    91e0:	20800615 	stw	r2,24(r4)
    91e4:	20c00715 	stw	r3,28(r4)

	/* corrGain\input = corr; */
	xx_V[0] = xx_V[8];
    91e8:	01000074 	movhi	r4,1
    91ec:	21380c04 	addi	r4,r4,-8144
    91f0:	20801017 	ldw	r2,64(r4)
    91f4:	20c01117 	ldw	r3,68(r4)
    91f8:	01000074 	movhi	r4,1
    91fc:	21380c04 	addi	r4,r4,-8144
    9200:	20800015 	stw	r2,0(r4)
    9204:	20c00115 	stw	r3,4(r4)

	/* PlusMinus2\plus1 = in; */
	xx_V[5] = xx_V[9];
    9208:	01000074 	movhi	r4,1
    920c:	21380c04 	addi	r4,r4,-8144
    9210:	20801217 	ldw	r2,72(r4)
    9214:	20c01317 	ldw	r3,76(r4)
    9218:	01000074 	movhi	r4,1
    921c:	21380c04 	addi	r4,r4,-8144
    9220:	20800a15 	stw	r2,40(r4)
    9224:	20c00b15 	stw	r3,44(r4)

	/* PlusMinus2\minus1 = position; */
	xx_V[6] = xx_V[10];
    9228:	01000074 	movhi	r4,1
    922c:	21380c04 	addi	r4,r4,-8144
    9230:	20801417 	ldw	r2,80(r4)
    9234:	20c01517 	ldw	r3,84(r4)
    9238:	01000074 	movhi	r4,1
    923c:	21380c04 	addi	r4,r4,-8144
    9240:	20800c15 	stw	r2,48(r4)
    9244:	20c00d15 	stw	r3,52(r4)

	/* corrGain\output = corrGain\K * corrGain\input; */
	xx_V[1] = xx_P[0] * xx_V[0];
    9248:	00800074 	movhi	r2,1
    924c:	10b7fe04 	addi	r2,r2,-8200
    9250:	11400017 	ldw	r5,0(r2)
    9254:	11800117 	ldw	r6,4(r2)
    9258:	01000074 	movhi	r4,1
    925c:	21380c04 	addi	r4,r4,-8144
    9260:	20800017 	ldw	r2,0(r4)
    9264:	20c00117 	ldw	r3,4(r4)
    9268:	2809883a 	mov	r4,r5
    926c:	300b883a 	mov	r5,r6
    9270:	100d883a 	mov	r6,r2
    9274:	180f883a 	mov	r7,r3
    9278:	0009e100 	call	9e10 <__muldf3>
    927c:	1009883a 	mov	r4,r2
    9280:	180b883a 	mov	r5,r3
    9284:	2005883a 	mov	r2,r4
    9288:	2807883a 	mov	r3,r5
    928c:	01000074 	movhi	r4,1
    9290:	21380c04 	addi	r4,r4,-8144
    9294:	20800215 	stw	r2,8(r4)
    9298:	20c00315 	stw	r3,12(r4)

	/* PID1\error = PlusMinus2\plus1 - PlusMinus2\minus1; */
	xx_R[1] = xx_V[5] - xx_V[6];
    929c:	00800074 	movhi	r2,1
    92a0:	10b80c04 	addi	r2,r2,-8144
    92a4:	11400a17 	ldw	r5,40(r2)
    92a8:	11800b17 	ldw	r6,44(r2)
    92ac:	01000074 	movhi	r4,1
    92b0:	21380c04 	addi	r4,r4,-8144
    92b4:	20800c17 	ldw	r2,48(r4)
    92b8:	20c00d17 	ldw	r3,52(r4)
    92bc:	2809883a 	mov	r4,r5
    92c0:	300b883a 	mov	r5,r6
    92c4:	100d883a 	mov	r6,r2
    92c8:	180f883a 	mov	r7,r3
    92cc:	0009db00 	call	9db0 <__subdf3>
    92d0:	1009883a 	mov	r4,r2
    92d4:	180b883a 	mov	r5,r3
    92d8:	2005883a 	mov	r2,r4
    92dc:	2807883a 	mov	r3,r5
    92e0:	01000074 	movhi	r4,1
    92e4:	2137f204 	addi	r4,r4,-8248
    92e8:	20800215 	stw	r2,8(r4)
    92ec:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	xx_R[0] = xx_V[3] * (((xx_P[2] * xx_s[0]) * xx_P[3] + (xx_P[2] * xx_P[1]) * (xx_R[1] - xx_s[1])) + (xx_step_size * xx_P[1]) * xx_R[1]);
    92f0:	00800074 	movhi	r2,1
    92f4:	10b80c04 	addi	r2,r2,-8144
    92f8:	14000617 	ldw	r16,24(r2)
    92fc:	14400717 	ldw	r17,28(r2)
    9300:	00800074 	movhi	r2,1
    9304:	10b7fe04 	addi	r2,r2,-8200
    9308:	11400417 	ldw	r5,16(r2)
    930c:	11800517 	ldw	r6,20(r2)
    9310:	01000074 	movhi	r4,1
    9314:	21382404 	addi	r4,r4,-8048
    9318:	20800017 	ldw	r2,0(r4)
    931c:	20c00117 	ldw	r3,4(r4)
    9320:	2809883a 	mov	r4,r5
    9324:	300b883a 	mov	r5,r6
    9328:	100d883a 	mov	r6,r2
    932c:	180f883a 	mov	r7,r3
    9330:	0009e100 	call	9e10 <__muldf3>
    9334:	100f883a 	mov	r7,r2
    9338:	1811883a 	mov	r8,r3
    933c:	380b883a 	mov	r5,r7
    9340:	400d883a 	mov	r6,r8
    9344:	01000074 	movhi	r4,1
    9348:	2137fe04 	addi	r4,r4,-8200
    934c:	20800617 	ldw	r2,24(r4)
    9350:	20c00717 	ldw	r3,28(r4)
    9354:	2809883a 	mov	r4,r5
    9358:	300b883a 	mov	r5,r6
    935c:	100d883a 	mov	r6,r2
    9360:	180f883a 	mov	r7,r3
    9364:	0009e100 	call	9e10 <__muldf3>
    9368:	1009883a 	mov	r4,r2
    936c:	180b883a 	mov	r5,r3
    9370:	2025883a 	mov	r18,r4
    9374:	2827883a 	mov	r19,r5
    9378:	00800074 	movhi	r2,1
    937c:	10b7fe04 	addi	r2,r2,-8200
    9380:	11400417 	ldw	r5,16(r2)
    9384:	11800517 	ldw	r6,20(r2)
    9388:	01000074 	movhi	r4,1
    938c:	2137fe04 	addi	r4,r4,-8200
    9390:	20800217 	ldw	r2,8(r4)
    9394:	20c00317 	ldw	r3,12(r4)
    9398:	2809883a 	mov	r4,r5
    939c:	300b883a 	mov	r5,r6
    93a0:	100d883a 	mov	r6,r2
    93a4:	180f883a 	mov	r7,r3
    93a8:	0009e100 	call	9e10 <__muldf3>
    93ac:	1009883a 	mov	r4,r2
    93b0:	180b883a 	mov	r5,r3
    93b4:	2029883a 	mov	r20,r4
    93b8:	282b883a 	mov	r21,r5
    93bc:	00800074 	movhi	r2,1
    93c0:	10b7f204 	addi	r2,r2,-8248
    93c4:	11400217 	ldw	r5,8(r2)
    93c8:	11800317 	ldw	r6,12(r2)
    93cc:	01000074 	movhi	r4,1
    93d0:	21382404 	addi	r4,r4,-8048
    93d4:	20800217 	ldw	r2,8(r4)
    93d8:	20c00317 	ldw	r3,12(r4)
    93dc:	2809883a 	mov	r4,r5
    93e0:	300b883a 	mov	r5,r6
    93e4:	100d883a 	mov	r6,r2
    93e8:	180f883a 	mov	r7,r3
    93ec:	0009db00 	call	9db0 <__subdf3>
    93f0:	1009883a 	mov	r4,r2
    93f4:	180b883a 	mov	r5,r3
    93f8:	2005883a 	mov	r2,r4
    93fc:	2807883a 	mov	r3,r5
    9400:	a009883a 	mov	r4,r20
    9404:	a80b883a 	mov	r5,r21
    9408:	100d883a 	mov	r6,r2
    940c:	180f883a 	mov	r7,r3
    9410:	0009e100 	call	9e10 <__muldf3>
    9414:	1009883a 	mov	r4,r2
    9418:	180b883a 	mov	r5,r3
    941c:	2005883a 	mov	r2,r4
    9420:	2807883a 	mov	r3,r5
    9424:	9009883a 	mov	r4,r18
    9428:	980b883a 	mov	r5,r19
    942c:	100d883a 	mov	r6,r2
    9430:	180f883a 	mov	r7,r3
    9434:	0009d5c0 	call	9d5c <__adddf3>
    9438:	1009883a 	mov	r4,r2
    943c:	180b883a 	mov	r5,r3
    9440:	2025883a 	mov	r18,r4
    9444:	2827883a 	mov	r19,r5
    9448:	00800074 	movhi	r2,1
    944c:	10b7fe04 	addi	r2,r2,-8200
    9450:	11400217 	ldw	r5,8(r2)
    9454:	11800317 	ldw	r6,12(r2)
    9458:	d0a00317 	ldw	r2,-32756(gp)
    945c:	01000074 	movhi	r4,1
    9460:	21350904 	addi	r4,r4,-11228
    9464:	20c00017 	ldw	r3,0(r4)
    9468:	2809883a 	mov	r4,r5
    946c:	300b883a 	mov	r5,r6
    9470:	100d883a 	mov	r6,r2
    9474:	180f883a 	mov	r7,r3
    9478:	0009e100 	call	9e10 <__muldf3>
    947c:	100f883a 	mov	r7,r2
    9480:	1811883a 	mov	r8,r3
    9484:	380b883a 	mov	r5,r7
    9488:	400d883a 	mov	r6,r8
    948c:	01000074 	movhi	r4,1
    9490:	2137f204 	addi	r4,r4,-8248
    9494:	20800217 	ldw	r2,8(r4)
    9498:	20c00317 	ldw	r3,12(r4)
    949c:	2809883a 	mov	r4,r5
    94a0:	300b883a 	mov	r5,r6
    94a4:	100d883a 	mov	r6,r2
    94a8:	180f883a 	mov	r7,r3
    94ac:	0009e100 	call	9e10 <__muldf3>
    94b0:	1009883a 	mov	r4,r2
    94b4:	180b883a 	mov	r5,r3
    94b8:	2005883a 	mov	r2,r4
    94bc:	2807883a 	mov	r3,r5
    94c0:	9009883a 	mov	r4,r18
    94c4:	980b883a 	mov	r5,r19
    94c8:	100d883a 	mov	r6,r2
    94cc:	180f883a 	mov	r7,r3
    94d0:	0009d5c0 	call	9d5c <__adddf3>
    94d4:	1009883a 	mov	r4,r2
    94d8:	180b883a 	mov	r5,r3
    94dc:	2005883a 	mov	r2,r4
    94e0:	2807883a 	mov	r3,r5
    94e4:	8009883a 	mov	r4,r16
    94e8:	880b883a 	mov	r5,r17
    94ec:	100d883a 	mov	r6,r2
    94f0:	180f883a 	mov	r7,r3
    94f4:	0009e100 	call	9e10 <__muldf3>
    94f8:	1009883a 	mov	r4,r2
    94fc:	180b883a 	mov	r5,r3
    9500:	2005883a 	mov	r2,r4
    9504:	2807883a 	mov	r3,r5
    9508:	01000074 	movhi	r4,1
    950c:	2137f204 	addi	r4,r4,-8248
    9510:	20800015 	stw	r2,0(r4)
    9514:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	xx_R[2] = xx_s[2] + (xx_step_size * xx_R[0]) / xx_P[4];
    9518:	00800074 	movhi	r2,1
    951c:	10b82404 	addi	r2,r2,-8048
    9520:	14000417 	ldw	r16,16(r2)
    9524:	14400517 	ldw	r17,20(r2)
    9528:	00800074 	movhi	r2,1
    952c:	10b7f204 	addi	r2,r2,-8248
    9530:	11400017 	ldw	r5,0(r2)
    9534:	11800117 	ldw	r6,4(r2)
    9538:	d0a00317 	ldw	r2,-32756(gp)
    953c:	01000074 	movhi	r4,1
    9540:	21350904 	addi	r4,r4,-11228
    9544:	20c00017 	ldw	r3,0(r4)
    9548:	2809883a 	mov	r4,r5
    954c:	300b883a 	mov	r5,r6
    9550:	100d883a 	mov	r6,r2
    9554:	180f883a 	mov	r7,r3
    9558:	0009e100 	call	9e10 <__muldf3>
    955c:	100f883a 	mov	r7,r2
    9560:	1811883a 	mov	r8,r3
    9564:	380b883a 	mov	r5,r7
    9568:	400d883a 	mov	r6,r8
    956c:	01000074 	movhi	r4,1
    9570:	2137fe04 	addi	r4,r4,-8200
    9574:	20800817 	ldw	r2,32(r4)
    9578:	20c00917 	ldw	r3,36(r4)
    957c:	2809883a 	mov	r4,r5
    9580:	300b883a 	mov	r5,r6
    9584:	100d883a 	mov	r6,r2
    9588:	180f883a 	mov	r7,r3
    958c:	000a0f40 	call	a0f4 <__divdf3>
    9590:	1009883a 	mov	r4,r2
    9594:	180b883a 	mov	r5,r3
    9598:	2005883a 	mov	r2,r4
    959c:	2807883a 	mov	r3,r5
    95a0:	8009883a 	mov	r4,r16
    95a4:	880b883a 	mov	r5,r17
    95a8:	100d883a 	mov	r6,r2
    95ac:	180f883a 	mov	r7,r3
    95b0:	0009d5c0 	call	9d5c <__adddf3>
    95b4:	1009883a 	mov	r4,r2
    95b8:	180b883a 	mov	r5,r3
    95bc:	2005883a 	mov	r2,r4
    95c0:	2807883a 	mov	r3,r5
    95c4:	01000074 	movhi	r4,1
    95c8:	2137f204 	addi	r4,r4,-8248
    95cc:	20800415 	stw	r2,16(r4)
    95d0:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	xx_V[2] = xx_R[2] + xx_R[0];
    95d4:	00800074 	movhi	r2,1
    95d8:	10b7f204 	addi	r2,r2,-8248
    95dc:	11400417 	ldw	r5,16(r2)
    95e0:	11800517 	ldw	r6,20(r2)
    95e4:	01000074 	movhi	r4,1
    95e8:	2137f204 	addi	r4,r4,-8248
    95ec:	20800017 	ldw	r2,0(r4)
    95f0:	20c00117 	ldw	r3,4(r4)
    95f4:	2809883a 	mov	r4,r5
    95f8:	300b883a 	mov	r5,r6
    95fc:	100d883a 	mov	r6,r2
    9600:	180f883a 	mov	r7,r3
    9604:	0009d5c0 	call	9d5c <__adddf3>
    9608:	1009883a 	mov	r4,r2
    960c:	180b883a 	mov	r5,r3
    9610:	2005883a 	mov	r2,r4
    9614:	2807883a 	mov	r3,r5
    9618:	01000074 	movhi	r4,1
    961c:	21380c04 	addi	r4,r4,-8144
    9620:	20800415 	stw	r2,16(r4)
    9624:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	xx_V[4] = xx_V[1] + xx_V[2];
    9628:	00800074 	movhi	r2,1
    962c:	10b80c04 	addi	r2,r2,-8144
    9630:	11400217 	ldw	r5,8(r2)
    9634:	11800317 	ldw	r6,12(r2)
    9638:	01000074 	movhi	r4,1
    963c:	21380c04 	addi	r4,r4,-8144
    9640:	20800417 	ldw	r2,16(r4)
    9644:	20c00517 	ldw	r3,20(r4)
    9648:	2809883a 	mov	r4,r5
    964c:	300b883a 	mov	r5,r6
    9650:	100d883a 	mov	r6,r2
    9654:	180f883a 	mov	r7,r3
    9658:	0009d5c0 	call	9d5c <__adddf3>
    965c:	1009883a 	mov	r4,r2
    9660:	180b883a 	mov	r5,r3
    9664:	2005883a 	mov	r2,r4
    9668:	2807883a 	mov	r3,r5
    966c:	01000074 	movhi	r4,1
    9670:	21380c04 	addi	r4,r4,-8144
    9674:	20800815 	stw	r2,32(r4)
    9678:	20c00915 	stw	r3,36(r4)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	xx_V[7] = ((xx_V[4] < xx_P[5]) ? 
    967c:	00800074 	movhi	r2,1
    9680:	10b80c04 	addi	r2,r2,-8144
    9684:	11400817 	ldw	r5,32(r2)
    9688:	11800917 	ldw	r6,36(r2)
    968c:	01000074 	movhi	r4,1
    9690:	2137fe04 	addi	r4,r4,-8200
    9694:	20800a17 	ldw	r2,40(r4)
    9698:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		xx_P[5]
	:
    969c:	2809883a 	mov	r4,r5
    96a0:	300b883a 	mov	r5,r6
    96a4:	100d883a 	mov	r6,r2
    96a8:	180f883a 	mov	r7,r3
    96ac:	000a30c0 	call	a30c <__ltdf2>
    96b0:	1000050e 	bge	r2,zero,96c8 <XXCalculateDynamic+0x5b4>
    96b4:	01000074 	movhi	r4,1
    96b8:	2137fe04 	addi	r4,r4,-8200
    96bc:	20800a17 	ldw	r2,40(r4)
    96c0:	20c00b17 	ldw	r3,44(r4)
    96c4:	00001906 	br	972c <XXCalculateDynamic+0x618>
		/* (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) */
		((xx_V[4] > xx_P[6]) ? 
    96c8:	00800074 	movhi	r2,1
    96cc:	10b80c04 	addi	r2,r2,-8144
    96d0:	11400817 	ldw	r5,32(r2)
    96d4:	11800917 	ldw	r6,36(r2)
    96d8:	01000074 	movhi	r4,1
    96dc:	2137fe04 	addi	r4,r4,-8200
    96e0:	20800c17 	ldw	r2,48(r4)
    96e4:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			xx_P[6]
		:
    96e8:	2809883a 	mov	r4,r5
    96ec:	300b883a 	mov	r5,r6
    96f0:	100d883a 	mov	r6,r2
    96f4:	180f883a 	mov	r7,r3
    96f8:	000a2a80 	call	a2a8 <__gtdf2>
    96fc:	0080050e 	bge	zero,r2,9714 <XXCalculateDynamic+0x600>
    9700:	00800074 	movhi	r2,1
    9704:	10b7fe04 	addi	r2,r2,-8200
    9708:	11000c17 	ldw	r4,48(r2)
    970c:	11400d17 	ldw	r5,52(r2)
    9710:	00000406 	br	9724 <XXCalculateDynamic+0x610>
    9714:	00800074 	movhi	r2,1
    9718:	10b80c04 	addi	r2,r2,-8144
    971c:	11000817 	ldw	r4,32(r2)
    9720:	11400917 	ldw	r5,36(r2)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	xx_V[7] = ((xx_V[4] < xx_P[5]) ? 
		/* SignalLimiter2\minimum */
		xx_P[5]
	:
    9724:	2005883a 	mov	r2,r4
    9728:	2807883a 	mov	r3,r5

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	xx_V[4] = xx_V[1] + xx_V[2];

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	xx_V[7] = ((xx_V[4] < xx_P[5]) ? 
    972c:	01000074 	movhi	r4,1
    9730:	21380c04 	addi	r4,r4,-8144
    9734:	20800e15 	stw	r2,56(r4)
    9738:	20c00f15 	stw	r3,60(r4)
		)
	);


	/* increment the step counter */
	xx_steps++;
    973c:	d0a0e417 	ldw	r2,-31856(gp)
    9740:	10800044 	addi	r2,r2,1
    9744:	d0a0e415 	stw	r2,-31856(gp)
}
    9748:	e037883a 	mov	sp,fp
    974c:	dfc00717 	ldw	ra,28(sp)
    9750:	df000617 	ldw	fp,24(sp)
    9754:	dd400517 	ldw	r21,20(sp)
    9758:	dd000417 	ldw	r20,16(sp)
    975c:	dcc00317 	ldw	r19,12(sp)
    9760:	dc800217 	ldw	r18,8(sp)
    9764:	dc400117 	ldw	r17,4(sp)
    9768:	dc000017 	ldw	r16,0(sp)
    976c:	dec00804 	addi	sp,sp,32
    9770:	f800283a 	ret

00009774 <XXCalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void XXCalculateOutput (void)
{
    9774:	deffff04 	addi	sp,sp,-4
    9778:	df000015 	stw	fp,0(sp)
    977c:	d839883a 	mov	fp,sp
	/* out = SignalLimiter2\output; */
	xx_V[11] = xx_V[7];
    9780:	01000074 	movhi	r4,1
    9784:	21380c04 	addi	r4,r4,-8144
    9788:	20800e17 	ldw	r2,56(r4)
    978c:	20c00f17 	ldw	r3,60(r4)
    9790:	01000074 	movhi	r4,1
    9794:	21380c04 	addi	r4,r4,-8144
    9798:	20801615 	stw	r2,88(r4)
    979c:	20c01715 	stw	r3,92(r4)

}
    97a0:	e037883a 	mov	sp,fp
    97a4:	df000017 	ldw	fp,0(sp)
    97a8:	dec00104 	addi	sp,sp,4
    97ac:	f800283a 	ret

000097b0 <XXCalculateFinal>:
/* This function calculates the final equations of the model.
 * These equations are calculated after all the calculations
 * are performed
 */
void XXCalculateFinal (void)
{
    97b0:	deffff04 	addi	sp,sp,-4
    97b4:	df000015 	stw	fp,0(sp)
    97b8:	d839883a 	mov	fp,sp

}
    97bc:	e037883a 	mov	sp,fp
    97c0:	df000017 	ldw	fp,0(sp)
    97c4:	dec00104 	addi	sp,sp,4
    97c8:	f800283a 	ret

000097cc <XXModelTerminate>:

/* this method is called after all calculations are performed */
void XXModelTerminate(void)
{
    97cc:	deffff04 	addi	sp,sp,-4
    97d0:	df000015 	stw	fp,0(sp)
    97d4:	d839883a 	mov	fp,sp
}
    97d8:	e037883a 	mov	sp,fp
    97dc:	df000017 	ldw	fp,0(sp)
    97e0:	dec00104 	addi	sp,sp,4
    97e4:	f800283a 	ret

000097e8 <XXCopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void XXCopyInputsToVariables (XXDouble *u)
{
    97e8:	defffe04 	addi	sp,sp,-8
    97ec:	df000115 	stw	fp,4(sp)
    97f0:	df000104 	addi	fp,sp,4
    97f4:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	xx_V[8] = u[0];		/* corr */
    97f8:	e13fff17 	ldw	r4,-4(fp)
    97fc:	20800017 	ldw	r2,0(r4)
    9800:	20c00117 	ldw	r3,4(r4)
    9804:	01000074 	movhi	r4,1
    9808:	21380c04 	addi	r4,r4,-8144
    980c:	20801015 	stw	r2,64(r4)
    9810:	20c01115 	stw	r3,68(r4)
	xx_V[9] = u[1];		/* in */
    9814:	e13fff17 	ldw	r4,-4(fp)
    9818:	20800217 	ldw	r2,8(r4)
    981c:	20c00317 	ldw	r3,12(r4)
    9820:	01000074 	movhi	r4,1
    9824:	21380c04 	addi	r4,r4,-8144
    9828:	20801215 	stw	r2,72(r4)
    982c:	20c01315 	stw	r3,76(r4)
	xx_V[10] = u[2];		/* position */
    9830:	e13fff17 	ldw	r4,-4(fp)
    9834:	20800417 	ldw	r2,16(r4)
    9838:	20c00517 	ldw	r3,20(r4)
    983c:	01000074 	movhi	r4,1
    9840:	21380c04 	addi	r4,r4,-8144
    9844:	20801415 	stw	r2,80(r4)
    9848:	20c01515 	stw	r3,84(r4)

}
    984c:	e037883a 	mov	sp,fp
    9850:	df000017 	ldw	fp,0(sp)
    9854:	dec00104 	addi	sp,sp,4
    9858:	f800283a 	ret

0000985c <XXCopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void XXCopyVariablesToOutputs (XXDouble *y)
{
    985c:	defffe04 	addi	sp,sp,-8
    9860:	df000115 	stw	fp,4(sp)
    9864:	df000104 	addi	fp,sp,4
    9868:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	xx_V[11];		/* out */
    986c:	01000074 	movhi	r4,1
    9870:	21380c04 	addi	r4,r4,-8144
    9874:	20801617 	ldw	r2,88(r4)
    9878:	20c01717 	ldw	r3,92(r4)
    987c:	e13fff17 	ldw	r4,-4(fp)
    9880:	20800015 	stw	r2,0(r4)
    9884:	20c00115 	stw	r3,4(r4)

}
    9888:	e037883a 	mov	sp,fp
    988c:	df000017 	ldw	fp,0(sp)
    9890:	dec00104 	addi	sp,sp,4
    9894:	f800283a 	ret

00009898 <XXInitializeSubmodel>:

/* The initialization function for submodel */
void XXInitializeSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    9898:	defffa04 	addi	sp,sp,-24
    989c:	dfc00515 	stw	ra,20(sp)
    98a0:	df000415 	stw	fp,16(sp)
    98a4:	df000404 	addi	fp,sp,16
    98a8:	e13ffc15 	stw	r4,-16(fp)
    98ac:	e17ffd15 	stw	r5,-12(fp)
    98b0:	e1bffe15 	stw	r6,-8(fp)
    98b4:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	xx_initialize = XXTRUE;
    98b8:	00800074 	movhi	r2,1
    98bc:	10b50a04 	addi	r2,r2,-11224
    98c0:	00c00044 	movi	r3,1
    98c4:	10c00005 	stb	r3,0(r2)
	xx_steps = 0;
    98c8:	00800074 	movhi	r2,1
    98cc:	10b5e904 	addi	r2,r2,-10332
    98d0:	10000015 	stw	zero,0(r2)
	XXModelInitialize ();
    98d4:	000908c0 	call	908c <XXModelInitialize>
	XXDiscreteInitialize ();
    98d8:	0008d800 	call	8d80 <XXDiscreteInitialize>

	/* Copy the inputs */
	xx_time = t;
    98dc:	00800074 	movhi	r2,1
    98e0:	10b5e704 	addi	r2,r2,-10340
    98e4:	e0fffe17 	ldw	r3,-8(fp)
    98e8:	10c00015 	stw	r3,0(r2)
    98ec:	e0ffff17 	ldw	r3,-4(fp)
    98f0:	10c00115 	stw	r3,4(r2)
	XXCopyInputsToVariables (u);
    98f4:	e13ffc17 	ldw	r4,-16(fp)
    98f8:	00097e80 	call	97e8 <XXCopyInputsToVariables>

	/* Calculate the model for the first time */
	XXCalculateInitial ();
    98fc:	00090c00 	call	90c0 <XXCalculateInitial>
	XXCalculateStatic ();
    9900:	00090dc0 	call	90dc <XXCalculateStatic>
	XXCalculateInput ();
    9904:	00090f80 	call	90f8 <XXCalculateInput>
	XXCalculateDynamic ();
    9908:	00091140 	call	9114 <XXCalculateDynamic>
	XXCalculateOutput ();
    990c:	00097740 	call	9774 <XXCalculateOutput>

	/* Set the outputs */
	XXCopyVariablesToOutputs (y);
    9910:	e13ffd17 	ldw	r4,-12(fp)
    9914:	000985c0 	call	985c <XXCopyVariablesToOutputs>

	/* End of initialization phase */
	xx_initialize = XXFALSE;
    9918:	00800074 	movhi	r2,1
    991c:	10b50a04 	addi	r2,r2,-11224
    9920:	10000005 	stb	zero,0(r2)
}
    9924:	e037883a 	mov	sp,fp
    9928:	dfc00117 	ldw	ra,4(sp)
    992c:	df000017 	ldw	fp,0(sp)
    9930:	dec00204 	addi	sp,sp,8
    9934:	f800283a 	ret

00009938 <XXCalculateSubmodel>:

/* The function that calculates the submodel */
void XXCalculateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    9938:	defffa04 	addi	sp,sp,-24
    993c:	dfc00515 	stw	ra,20(sp)
    9940:	df000415 	stw	fp,16(sp)
    9944:	df000404 	addi	fp,sp,16
    9948:	e13ffc15 	stw	r4,-16(fp)
    994c:	e17ffd15 	stw	r5,-12(fp)
    9950:	e1bffe15 	stw	r6,-8(fp)
    9954:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	xx_time = t;
    9958:	00800074 	movhi	r2,1
    995c:	10b5e704 	addi	r2,r2,-10340
    9960:	e0fffe17 	ldw	r3,-8(fp)
    9964:	10c00015 	stw	r3,0(r2)
    9968:	e0ffff17 	ldw	r3,-4(fp)
    996c:	10c00115 	stw	r3,4(r2)
	XXCopyInputsToVariables (u);
    9970:	e13ffc17 	ldw	r4,-16(fp)
    9974:	00097e80 	call	97e8 <XXCopyInputsToVariables>

	/* Calculate the model */
	XXCalculateInput ();
    9978:	00090f80 	call	90f8 <XXCalculateInput>
	XXDiscreteStep ();
    997c:	0008dc80 	call	8dc8 <XXDiscreteStep>
	XXCalculateOutput ();
    9980:	00097740 	call	9774 <XXCalculateOutput>

	/* Copy the outputs */
	XXCopyVariablesToOutputs (y);
    9984:	e13ffd17 	ldw	r4,-12(fp)
    9988:	000985c0 	call	985c <XXCopyVariablesToOutputs>
}
    998c:	e037883a 	mov	sp,fp
    9990:	dfc00117 	ldw	ra,4(sp)
    9994:	df000017 	ldw	fp,0(sp)
    9998:	dec00204 	addi	sp,sp,8
    999c:	f800283a 	ret

000099a0 <XXTerminateSubmodel>:

/* The termination function for submodel */
void XXTerminateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    99a0:	defffa04 	addi	sp,sp,-24
    99a4:	dfc00515 	stw	ra,20(sp)
    99a8:	df000415 	stw	fp,16(sp)
    99ac:	df000404 	addi	fp,sp,16
    99b0:	e13ffc15 	stw	r4,-16(fp)
    99b4:	e17ffd15 	stw	r5,-12(fp)
    99b8:	e1bffe15 	stw	r6,-8(fp)
    99bc:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	xx_time = t;
    99c0:	00800074 	movhi	r2,1
    99c4:	10b5e704 	addi	r2,r2,-10340
    99c8:	e0fffe17 	ldw	r3,-8(fp)
    99cc:	10c00015 	stw	r3,0(r2)
    99d0:	e0ffff17 	ldw	r3,-4(fp)
    99d4:	10c00115 	stw	r3,4(r2)
	XXCopyInputsToVariables (u);
    99d8:	e13ffc17 	ldw	r4,-16(fp)
    99dc:	00097e80 	call	97e8 <XXCopyInputsToVariables>

	/* Calculate the final model equations */
	XXCalculateFinal ();
    99e0:	00097b00 	call	97b0 <XXCalculateFinal>

	/* Set the outputs */
	XXCopyVariablesToOutputs (y);
    99e4:	e13ffd17 	ldw	r4,-12(fp)
    99e8:	000985c0 	call	985c <XXCopyVariablesToOutputs>

	/* and terminate the model itself (releasing memory) */
	XXModelTerminate ();
    99ec:	00097cc0 	call	97cc <XXModelTerminate>
	XXDiscreteTerminate ();
    99f0:	0008dac0 	call	8dac <XXDiscreteTerminate>
}
    99f4:	e037883a 	mov	sp,fp
    99f8:	dfc00117 	ldw	ra,4(sp)
    99fc:	df000017 	ldw	fp,0(sp)
    9a00:	dec00204 	addi	sp,sp,8
    9a04:	f800283a 	ret

00009a08 <_fpadd_parts>:
    9a08:	2005883a 	mov	r2,r4
    9a0c:	21000017 	ldw	r4,0(r4)
    9a10:	01c00044 	movi	r7,1
    9a14:	3900622e 	bgeu	r7,r4,9ba0 <_fpadd_parts+0x198>
    9a18:	28c00017 	ldw	r3,0(r5)
    9a1c:	38c05f2e 	bgeu	r7,r3,9b9c <_fpadd_parts+0x194>
    9a20:	01c00104 	movi	r7,4
    9a24:	21c0c626 	beq	r4,r7,9d40 <_fpadd_parts+0x338>
    9a28:	19c05c26 	beq	r3,r7,9b9c <_fpadd_parts+0x194>
    9a2c:	01c00084 	movi	r7,2
    9a30:	19c06b26 	beq	r3,r7,9be0 <_fpadd_parts+0x1d8>
    9a34:	21c05926 	beq	r4,r7,9b9c <_fpadd_parts+0x194>
    9a38:	11c00217 	ldw	r7,8(r2)
    9a3c:	2ac00217 	ldw	r11,8(r5)
    9a40:	13000317 	ldw	r12,12(r2)
    9a44:	13400417 	ldw	r13,16(r2)
    9a48:	3ac9c83a 	sub	r4,r7,r11
    9a4c:	2a000317 	ldw	r8,12(r5)
    9a50:	2a400417 	ldw	r9,16(r5)
    9a54:	2015883a 	mov	r10,r4
    9a58:	20007516 	blt	r4,zero,9c30 <_fpadd_parts+0x228>
    9a5c:	00c00fc4 	movi	r3,63
    9a60:	1a805016 	blt	r3,r10,9ba4 <_fpadd_parts+0x19c>
    9a64:	0100870e 	bge	zero,r4,9c84 <_fpadd_parts+0x27c>
    9a68:	50fff804 	addi	r3,r10,-32
    9a6c:	18009916 	blt	r3,zero,9cd4 <_fpadd_parts+0x2cc>
    9a70:	48d6d83a 	srl	r11,r9,r3
    9a74:	001d883a 	mov	r14,zero
    9a78:	18009e16 	blt	r3,zero,9cf4 <_fpadd_parts+0x2ec>
    9a7c:	01000044 	movi	r4,1
    9a80:	20c6983a 	sll	r3,r4,r3
    9a84:	0015883a 	mov	r10,zero
    9a88:	513fffc4 	addi	r4,r10,-1
    9a8c:	2295403a 	cmpgeu	r10,r4,r10
    9a90:	1a87c83a 	sub	r3,r3,r10
    9a94:	1a52703a 	and	r9,r3,r9
    9a98:	2210703a 	and	r8,r4,r8
    9a9c:	4250b03a 	or	r8,r8,r9
    9aa0:	4010c03a 	cmpne	r8,r8,zero
    9aa4:	42d0b03a 	or	r8,r8,r11
    9aa8:	7013883a 	mov	r9,r14
    9aac:	11000117 	ldw	r4,4(r2)
    9ab0:	28800117 	ldw	r2,4(r5)
    9ab4:	20804126 	beq	r4,r2,9bbc <_fpadd_parts+0x1b4>
    9ab8:	20006326 	beq	r4,zero,9c48 <_fpadd_parts+0x240>
    9abc:	4305c83a 	sub	r2,r8,r12
    9ac0:	4091803a 	cmpltu	r8,r8,r2
    9ac4:	4b47c83a 	sub	r3,r9,r13
    9ac8:	1a07c83a 	sub	r3,r3,r8
    9acc:	18006316 	blt	r3,zero,9c5c <_fpadd_parts+0x254>
    9ad0:	30000115 	stw	zero,4(r6)
    9ad4:	31c00215 	stw	r7,8(r6)
    9ad8:	30800315 	stw	r2,12(r6)
    9adc:	30c00415 	stw	r3,16(r6)
    9ae0:	11ffffc4 	addi	r7,r2,-1
    9ae4:	388b403a 	cmpgeu	r5,r7,r2
    9ae8:	194bc83a 	sub	r5,r3,r5
    9aec:	01040034 	movhi	r4,4096
    9af0:	213fffc4 	addi	r4,r4,-1
    9af4:	21401736 	bltu	r4,r5,9b54 <_fpadd_parts+0x14c>
    9af8:	29008226 	beq	r5,r4,9d04 <_fpadd_parts+0x2fc>
    9afc:	31400217 	ldw	r5,8(r6)
    9b00:	02840034 	movhi	r10,4096
    9b04:	52bfffc4 	addi	r10,r10,-1
    9b08:	033fff84 	movi	r12,-2
    9b0c:	297fffc4 	addi	r5,r5,-1
    9b10:	00000106 	br	9b18 <_fpadd_parts+0x110>
    9b14:	3a804a26 	beq	r7,r10,9c40 <_fpadd_parts+0x238>
    9b18:	1089883a 	add	r4,r2,r2
    9b1c:	2091803a 	cmpltu	r8,r4,r2
    9b20:	18c7883a 	add	r3,r3,r3
    9b24:	227fffc4 	addi	r9,r4,-1
    9b28:	40d1883a 	add	r8,r8,r3
    9b2c:	490f403a 	cmpgeu	r7,r9,r4
    9b30:	41cfc83a 	sub	r7,r8,r7
    9b34:	2817883a 	mov	r11,r5
    9b38:	2005883a 	mov	r2,r4
    9b3c:	4007883a 	mov	r3,r8
    9b40:	297fffc4 	addi	r5,r5,-1
    9b44:	51fff32e 	bgeu	r10,r7,9b14 <_fpadd_parts+0x10c>
    9b48:	31000315 	stw	r4,12(r6)
    9b4c:	32000415 	stw	r8,16(r6)
    9b50:	32c00215 	stw	r11,8(r6)
    9b54:	010000c4 	movi	r4,3
    9b58:	31000015 	stw	r4,0(r6)
    9b5c:	01080034 	movhi	r4,8192
    9b60:	213fffc4 	addi	r4,r4,-1
    9b64:	20c00b2e 	bgeu	r4,r3,9b94 <_fpadd_parts+0x18c>
    9b68:	180e97fa 	slli	r7,r3,31
    9b6c:	1008d07a 	srli	r4,r2,1
    9b70:	31400217 	ldw	r5,8(r6)
    9b74:	1806d07a 	srli	r3,r3,1
    9b78:	1080004c 	andi	r2,r2,1
    9b7c:	3908b03a 	or	r4,r7,r4
    9b80:	1108b03a 	or	r4,r2,r4
    9b84:	29400044 	addi	r5,r5,1
    9b88:	31000315 	stw	r4,12(r6)
    9b8c:	30c00415 	stw	r3,16(r6)
    9b90:	31400215 	stw	r5,8(r6)
    9b94:	3005883a 	mov	r2,r6
    9b98:	f800283a 	ret
    9b9c:	2805883a 	mov	r2,r5
    9ba0:	f800283a 	ret
    9ba4:	59c01e0e 	bge	r11,r7,9c20 <_fpadd_parts+0x218>
    9ba8:	11000117 	ldw	r4,4(r2)
    9bac:	28800117 	ldw	r2,4(r5)
    9bb0:	0011883a 	mov	r8,zero
    9bb4:	0013883a 	mov	r9,zero
    9bb8:	20bfbf1e 	bne	r4,r2,9ab8 <_fpadd_parts+0xb0>
    9bbc:	4305883a 	add	r2,r8,r12
    9bc0:	1207803a 	cmpltu	r3,r2,r8
    9bc4:	4b53883a 	add	r9,r9,r13
    9bc8:	1a47883a 	add	r3,r3,r9
    9bcc:	31000115 	stw	r4,4(r6)
    9bd0:	31c00215 	stw	r7,8(r6)
    9bd4:	30800315 	stw	r2,12(r6)
    9bd8:	30c00415 	stw	r3,16(r6)
    9bdc:	003fdd06 	br	9b54 <_fpadd_parts+0x14c>
    9be0:	20ffef1e 	bne	r4,r3,9ba0 <_fpadd_parts+0x198>
    9be4:	31000015 	stw	r4,0(r6)
    9be8:	10c00117 	ldw	r3,4(r2)
    9bec:	30c00115 	stw	r3,4(r6)
    9bf0:	10c00217 	ldw	r3,8(r2)
    9bf4:	11000117 	ldw	r4,4(r2)
    9bf8:	29400117 	ldw	r5,4(r5)
    9bfc:	30c00215 	stw	r3,8(r6)
    9c00:	10c00317 	ldw	r3,12(r2)
    9c04:	2908703a 	and	r4,r5,r4
    9c08:	30c00315 	stw	r3,12(r6)
    9c0c:	10c00417 	ldw	r3,16(r2)
    9c10:	31000115 	stw	r4,4(r6)
    9c14:	3005883a 	mov	r2,r6
    9c18:	30c00415 	stw	r3,16(r6)
    9c1c:	f800283a 	ret
    9c20:	580f883a 	mov	r7,r11
    9c24:	0019883a 	mov	r12,zero
    9c28:	001b883a 	mov	r13,zero
    9c2c:	003f9f06 	br	9aac <_fpadd_parts+0xa4>
    9c30:	0115c83a 	sub	r10,zero,r4
    9c34:	00c00fc4 	movi	r3,63
    9c38:	1abfda16 	blt	r3,r10,9ba4 <_fpadd_parts+0x19c>
    9c3c:	003f8906 	br	9a64 <_fpadd_parts+0x5c>
    9c40:	627fb52e 	bgeu	r12,r9,9b18 <_fpadd_parts+0x110>
    9c44:	003fc006 	br	9b48 <_fpadd_parts+0x140>
    9c48:	6205c83a 	sub	r2,r12,r8
    9c4c:	6099803a 	cmpltu	r12,r12,r2
    9c50:	6a47c83a 	sub	r3,r13,r9
    9c54:	1b07c83a 	sub	r3,r3,r12
    9c58:	183f9d0e 	bge	r3,zero,9ad0 <_fpadd_parts+0xc8>
    9c5c:	0085c83a 	sub	r2,zero,r2
    9c60:	1008c03a 	cmpne	r4,r2,zero
    9c64:	00c7c83a 	sub	r3,zero,r3
    9c68:	1907c83a 	sub	r3,r3,r4
    9c6c:	01000044 	movi	r4,1
    9c70:	31000115 	stw	r4,4(r6)
    9c74:	31c00215 	stw	r7,8(r6)
    9c78:	30800315 	stw	r2,12(r6)
    9c7c:	30c00415 	stw	r3,16(r6)
    9c80:	003f9706 	br	9ae0 <_fpadd_parts+0xd8>
    9c84:	203f8926 	beq	r4,zero,9aac <_fpadd_parts+0xa4>
    9c88:	50fff804 	addi	r3,r10,-32
    9c8c:	3a8f883a 	add	r7,r7,r10
    9c90:	18002316 	blt	r3,zero,9d20 <_fpadd_parts+0x318>
    9c94:	68d6d83a 	srl	r11,r13,r3
    9c98:	001d883a 	mov	r14,zero
    9c9c:	18001c16 	blt	r3,zero,9d10 <_fpadd_parts+0x308>
    9ca0:	01000044 	movi	r4,1
    9ca4:	20c6983a 	sll	r3,r4,r3
    9ca8:	0015883a 	mov	r10,zero
    9cac:	513fffc4 	addi	r4,r10,-1
    9cb0:	2295403a 	cmpgeu	r10,r4,r10
    9cb4:	1a87c83a 	sub	r3,r3,r10
    9cb8:	1b5a703a 	and	r13,r3,r13
    9cbc:	2318703a 	and	r12,r4,r12
    9cc0:	6358b03a 	or	r12,r12,r13
    9cc4:	6018c03a 	cmpne	r12,r12,zero
    9cc8:	62d8b03a 	or	r12,r12,r11
    9ccc:	701b883a 	mov	r13,r14
    9cd0:	003f7606 	br	9aac <_fpadd_parts+0xa4>
    9cd4:	4808907a 	slli	r4,r9,1
    9cd8:	02c007c4 	movi	r11,31
    9cdc:	5a97c83a 	sub	r11,r11,r10
    9ce0:	22c8983a 	sll	r4,r4,r11
    9ce4:	4296d83a 	srl	r11,r8,r10
    9ce8:	4a9cd83a 	srl	r14,r9,r10
    9cec:	22d6b03a 	or	r11,r4,r11
    9cf0:	003f6106 	br	9a78 <_fpadd_parts+0x70>
    9cf4:	00c00044 	movi	r3,1
    9cf8:	1a94983a 	sll	r10,r3,r10
    9cfc:	0007883a 	mov	r3,zero
    9d00:	003f6106 	br	9a88 <_fpadd_parts+0x80>
    9d04:	013fff84 	movi	r4,-2
    9d08:	21ff7c2e 	bgeu	r4,r7,9afc <_fpadd_parts+0xf4>
    9d0c:	003f9106 	br	9b54 <_fpadd_parts+0x14c>
    9d10:	00c00044 	movi	r3,1
    9d14:	1a94983a 	sll	r10,r3,r10
    9d18:	0007883a 	mov	r3,zero
    9d1c:	003fe306 	br	9cac <_fpadd_parts+0x2a4>
    9d20:	6816907a 	slli	r11,r13,1
    9d24:	010007c4 	movi	r4,31
    9d28:	2289c83a 	sub	r4,r4,r10
    9d2c:	5908983a 	sll	r4,r11,r4
    9d30:	6296d83a 	srl	r11,r12,r10
    9d34:	6a9cd83a 	srl	r14,r13,r10
    9d38:	22d6b03a 	or	r11,r4,r11
    9d3c:	003fd706 	br	9c9c <_fpadd_parts+0x294>
    9d40:	193f971e 	bne	r3,r4,9ba0 <_fpadd_parts+0x198>
    9d44:	11000117 	ldw	r4,4(r2)
    9d48:	28c00117 	ldw	r3,4(r5)
    9d4c:	20ff9426 	beq	r4,r3,9ba0 <_fpadd_parts+0x198>
    9d50:	00800074 	movhi	r2,1
    9d54:	10b3f904 	addi	r2,r2,-12316
    9d58:	f800283a 	ret

00009d5c <__adddf3>:
    9d5c:	deffec04 	addi	sp,sp,-80
    9d60:	d9001115 	stw	r4,68(sp)
    9d64:	d9401215 	stw	r5,72(sp)
    9d68:	d9001104 	addi	r4,sp,68
    9d6c:	d9400a04 	addi	r5,sp,40
    9d70:	dfc01315 	stw	ra,76(sp)
    9d74:	d9c01015 	stw	r7,64(sp)
    9d78:	d9800f15 	stw	r6,60(sp)
    9d7c:	000a9740 	call	a974 <__unpack_d>
    9d80:	d9000f04 	addi	r4,sp,60
    9d84:	d9400504 	addi	r5,sp,20
    9d88:	000a9740 	call	a974 <__unpack_d>
    9d8c:	d9000a04 	addi	r4,sp,40
    9d90:	d9400504 	addi	r5,sp,20
    9d94:	d80d883a 	mov	r6,sp
    9d98:	0009a080 	call	9a08 <_fpadd_parts>
    9d9c:	1009883a 	mov	r4,r2
    9da0:	000a7500 	call	a750 <__pack_d>
    9da4:	dfc01317 	ldw	ra,76(sp)
    9da8:	dec01404 	addi	sp,sp,80
    9dac:	f800283a 	ret

00009db0 <__subdf3>:
    9db0:	deffec04 	addi	sp,sp,-80
    9db4:	d9001115 	stw	r4,68(sp)
    9db8:	d9401215 	stw	r5,72(sp)
    9dbc:	d9001104 	addi	r4,sp,68
    9dc0:	d9400a04 	addi	r5,sp,40
    9dc4:	dfc01315 	stw	ra,76(sp)
    9dc8:	d9c01015 	stw	r7,64(sp)
    9dcc:	d9800f15 	stw	r6,60(sp)
    9dd0:	000a9740 	call	a974 <__unpack_d>
    9dd4:	d9000f04 	addi	r4,sp,60
    9dd8:	d9400504 	addi	r5,sp,20
    9ddc:	000a9740 	call	a974 <__unpack_d>
    9de0:	d8800617 	ldw	r2,24(sp)
    9de4:	d9000a04 	addi	r4,sp,40
    9de8:	d9400504 	addi	r5,sp,20
    9dec:	d80d883a 	mov	r6,sp
    9df0:	1080005c 	xori	r2,r2,1
    9df4:	d8800615 	stw	r2,24(sp)
    9df8:	0009a080 	call	9a08 <_fpadd_parts>
    9dfc:	1009883a 	mov	r4,r2
    9e00:	000a7500 	call	a750 <__pack_d>
    9e04:	dfc01317 	ldw	ra,76(sp)
    9e08:	dec01404 	addi	sp,sp,80
    9e0c:	f800283a 	ret

00009e10 <__muldf3>:
    9e10:	deffe404 	addi	sp,sp,-112
    9e14:	d9001115 	stw	r4,68(sp)
    9e18:	d9401215 	stw	r5,72(sp)
    9e1c:	d9001104 	addi	r4,sp,68
    9e20:	d9400a04 	addi	r5,sp,40
    9e24:	dfc01b15 	stw	ra,108(sp)
    9e28:	d9800f15 	stw	r6,60(sp)
    9e2c:	d9c01015 	stw	r7,64(sp)
    9e30:	ddc01a15 	stw	r23,104(sp)
    9e34:	dd801915 	stw	r22,100(sp)
    9e38:	dd401815 	stw	r21,96(sp)
    9e3c:	dd001715 	stw	r20,92(sp)
    9e40:	dcc01615 	stw	r19,88(sp)
    9e44:	dc801515 	stw	r18,84(sp)
    9e48:	dc401415 	stw	r17,80(sp)
    9e4c:	dc001315 	stw	r16,76(sp)
    9e50:	000a9740 	call	a974 <__unpack_d>
    9e54:	d9000f04 	addi	r4,sp,60
    9e58:	d9400504 	addi	r5,sp,20
    9e5c:	000a9740 	call	a974 <__unpack_d>
    9e60:	d8c00a17 	ldw	r3,40(sp)
    9e64:	00800044 	movi	r2,1
    9e68:	10c01136 	bltu	r2,r3,9eb0 <__muldf3+0xa0>
    9e6c:	d8c00b17 	ldw	r3,44(sp)
    9e70:	d8800617 	ldw	r2,24(sp)
    9e74:	d9000a04 	addi	r4,sp,40
    9e78:	1884c03a 	cmpne	r2,r3,r2
    9e7c:	d8800b15 	stw	r2,44(sp)
    9e80:	000a7500 	call	a750 <__pack_d>
    9e84:	dfc01b17 	ldw	ra,108(sp)
    9e88:	ddc01a17 	ldw	r23,104(sp)
    9e8c:	dd801917 	ldw	r22,100(sp)
    9e90:	dd401817 	ldw	r21,96(sp)
    9e94:	dd001717 	ldw	r20,92(sp)
    9e98:	dcc01617 	ldw	r19,88(sp)
    9e9c:	dc801517 	ldw	r18,84(sp)
    9ea0:	dc401417 	ldw	r17,80(sp)
    9ea4:	dc001317 	ldw	r16,76(sp)
    9ea8:	dec01c04 	addi	sp,sp,112
    9eac:	f800283a 	ret
    9eb0:	d9000517 	ldw	r4,20(sp)
    9eb4:	11000636 	bltu	r2,r4,9ed0 <__muldf3+0xc0>
    9eb8:	d8800617 	ldw	r2,24(sp)
    9ebc:	d8c00b17 	ldw	r3,44(sp)
    9ec0:	d9000504 	addi	r4,sp,20
    9ec4:	1884c03a 	cmpne	r2,r3,r2
    9ec8:	d8800615 	stw	r2,24(sp)
    9ecc:	003fec06 	br	9e80 <__muldf3+0x70>
    9ed0:	00800104 	movi	r2,4
    9ed4:	1880051e 	bne	r3,r2,9eec <__muldf3+0xdc>
    9ed8:	00800084 	movi	r2,2
    9edc:	20bfe31e 	bne	r4,r2,9e6c <__muldf3+0x5c>
    9ee0:	01000074 	movhi	r4,1
    9ee4:	2133f904 	addi	r4,r4,-12316
    9ee8:	003fe506 	br	9e80 <__muldf3+0x70>
    9eec:	2080031e 	bne	r4,r2,9efc <__muldf3+0xec>
    9ef0:	00800084 	movi	r2,2
    9ef4:	18bffa26 	beq	r3,r2,9ee0 <__muldf3+0xd0>
    9ef8:	003fef06 	br	9eb8 <__muldf3+0xa8>
    9efc:	00800084 	movi	r2,2
    9f00:	18bfda26 	beq	r3,r2,9e6c <__muldf3+0x5c>
    9f04:	20bfec26 	beq	r4,r2,9eb8 <__muldf3+0xa8>
    9f08:	dc000d17 	ldw	r16,52(sp)
    9f0c:	dd000817 	ldw	r20,32(sp)
    9f10:	dc800917 	ldw	r18,36(sp)
    9f14:	8009883a 	mov	r4,r16
    9f18:	000b883a 	mov	r5,zero
    9f1c:	a00d883a 	mov	r6,r20
    9f20:	000f883a 	mov	r7,zero
    9f24:	000a5940 	call	a594 <__muldi3>
    9f28:	dc400e17 	ldw	r17,56(sp)
    9f2c:	9009883a 	mov	r4,r18
    9f30:	800d883a 	mov	r6,r16
    9f34:	000b883a 	mov	r5,zero
    9f38:	000f883a 	mov	r7,zero
    9f3c:	102f883a 	mov	r23,r2
    9f40:	1827883a 	mov	r19,r3
    9f44:	000a5940 	call	a594 <__muldi3>
    9f48:	900d883a 	mov	r6,r18
    9f4c:	8809883a 	mov	r4,r17
    9f50:	000b883a 	mov	r5,zero
    9f54:	000f883a 	mov	r7,zero
    9f58:	102b883a 	mov	r21,r2
    9f5c:	1821883a 	mov	r16,r3
    9f60:	000a5940 	call	a594 <__muldi3>
    9f64:	8809883a 	mov	r4,r17
    9f68:	000b883a 	mov	r5,zero
    9f6c:	a00d883a 	mov	r6,r20
    9f70:	000f883a 	mov	r7,zero
    9f74:	102d883a 	mov	r22,r2
    9f78:	1825883a 	mov	r18,r3
    9f7c:	000a5940 	call	a594 <__muldi3>
    9f80:	154b883a 	add	r5,r2,r21
    9f84:	2889803a 	cmpltu	r4,r5,r2
    9f88:	1c07883a 	add	r3,r3,r16
    9f8c:	20c9883a 	add	r4,r4,r3
    9f90:	24004b36 	bltu	r4,r16,a0c0 <__muldf3+0x2b0>
    9f94:	8100011e 	bne	r16,r4,9f9c <__muldf3+0x18c>
    9f98:	2d404936 	bltu	r5,r21,a0c0 <__muldf3+0x2b0>
    9f9c:	0011883a 	mov	r8,zero
    9fa0:	0007883a 	mov	r3,zero
    9fa4:	2ccb883a 	add	r5,r5,r19
    9fa8:	b80d883a 	mov	r6,r23
    9fac:	2cc0012e 	bgeu	r5,r19,9fb4 <__muldf3+0x1a4>
    9fb0:	02000044 	movi	r8,1
    9fb4:	258f883a 	add	r7,r4,r22
    9fb8:	3909803a 	cmpltu	r4,r7,r4
    9fbc:	da400c17 	ldw	r9,48(sp)
    9fc0:	2489883a 	add	r4,r4,r18
    9fc4:	d8800717 	ldw	r2,28(sp)
    9fc8:	20c9883a 	add	r4,r4,r3
    9fcc:	da800b17 	ldw	r10,44(sp)
    9fd0:	d8c00617 	ldw	r3,24(sp)
    9fd4:	3a11883a 	add	r8,r7,r8
    9fd8:	4885883a 	add	r2,r9,r2
    9fdc:	50c6c03a 	cmpne	r3,r10,r3
    9fe0:	41cf803a 	cmpltu	r7,r8,r7
    9fe4:	12400104 	addi	r9,r2,4
    9fe8:	d8c00115 	stw	r3,4(sp)
    9fec:	3909883a 	add	r4,r7,r4
    9ff0:	da400215 	stw	r9,8(sp)
    9ff4:	03480034 	movhi	r13,8192
    9ff8:	6b7fffc4 	addi	r13,r13,-1
    9ffc:	4007883a 	mov	r3,r8
    a000:	6900102e 	bgeu	r13,r4,a044 <__muldf3+0x234>
    a004:	10800144 	addi	r2,r2,5
    a008:	180ed07a 	srli	r7,r3,1
    a00c:	18c0004c 	andi	r3,r3,1
    a010:	201097fa 	slli	r8,r4,31
    a014:	281697fa 	slli	r11,r5,31
    a018:	2008d07a 	srli	r4,r4,1
    a01c:	3014d07a 	srli	r10,r6,1
    a020:	2812d07a 	srli	r9,r5,1
    a024:	1019883a 	mov	r12,r2
    a028:	18000226 	beq	r3,zero,a034 <__muldf3+0x224>
    a02c:	5a8cb03a 	or	r6,r11,r10
    a030:	49600034 	orhi	r5,r9,32768
    a034:	41c6b03a 	or	r3,r8,r7
    a038:	10800044 	addi	r2,r2,1
    a03c:	693ff236 	bltu	r13,r4,a008 <__muldf3+0x1f8>
    a040:	db000215 	stw	r12,8(sp)
    a044:	03440034 	movhi	r13,4096
    a048:	6b7fffc4 	addi	r13,r13,-1
    a04c:	69001336 	bltu	r13,r4,a09c <__muldf3+0x28c>
    a050:	d8800217 	ldw	r2,8(sp)
    a054:	10bfffc4 	addi	r2,r2,-1
    a058:	18d3883a 	add	r9,r3,r3
    a05c:	48c7803a 	cmpltu	r3,r9,r3
    a060:	2109883a 	add	r4,r4,r4
    a064:	190f883a 	add	r7,r3,r4
    a068:	3191883a 	add	r8,r6,r6
    a06c:	4197803a 	cmpltu	r11,r8,r6
    a070:	2955883a 	add	r10,r5,r5
    a074:	1019883a 	mov	r12,r2
    a078:	4807883a 	mov	r3,r9
    a07c:	3809883a 	mov	r4,r7
    a080:	2800010e 	bge	r5,zero,a088 <__muldf3+0x278>
    a084:	48c00054 	ori	r3,r9,1
    a088:	400d883a 	mov	r6,r8
    a08c:	5a8b883a 	add	r5,r11,r10
    a090:	10bfffc4 	addi	r2,r2,-1
    a094:	69fff02e 	bgeu	r13,r7,a058 <__muldf3+0x248>
    a098:	db000215 	stw	r12,8(sp)
    a09c:	18803fcc 	andi	r2,r3,255
    a0a0:	01c02004 	movi	r7,128
    a0a4:	11c00926 	beq	r2,r7,a0cc <__muldf3+0x2bc>
    a0a8:	008000c4 	movi	r2,3
    a0ac:	d9000415 	stw	r4,16(sp)
    a0b0:	d8c00315 	stw	r3,12(sp)
    a0b4:	d8800015 	stw	r2,0(sp)
    a0b8:	d809883a 	mov	r4,sp
    a0bc:	003f7006 	br	9e80 <__muldf3+0x70>
    a0c0:	0011883a 	mov	r8,zero
    a0c4:	00c00044 	movi	r3,1
    a0c8:	003fb606 	br	9fa4 <__muldf3+0x194>
    a0cc:	19c0400c 	andi	r7,r3,256
    a0d0:	383ff51e 	bne	r7,zero,a0a8 <__muldf3+0x298>
    a0d4:	314ab03a 	or	r5,r6,r5
    a0d8:	283ff326 	beq	r5,zero,a0a8 <__muldf3+0x298>
    a0dc:	1885883a 	add	r2,r3,r2
    a0e0:	10cb803a 	cmpltu	r5,r2,r3
    a0e4:	00ffc004 	movi	r3,-256
    a0e8:	10c6703a 	and	r3,r2,r3
    a0ec:	2909883a 	add	r4,r5,r4
    a0f0:	003fed06 	br	a0a8 <__muldf3+0x298>

0000a0f4 <__divdf3>:
    a0f4:	defff104 	addi	sp,sp,-60
    a0f8:	d9000c15 	stw	r4,48(sp)
    a0fc:	d9400d15 	stw	r5,52(sp)
    a100:	d9000c04 	addi	r4,sp,48
    a104:	d9400504 	addi	r5,sp,20
    a108:	dfc00e15 	stw	ra,56(sp)
    a10c:	d9800a15 	stw	r6,40(sp)
    a110:	d9c00b15 	stw	r7,44(sp)
    a114:	000a9740 	call	a974 <__unpack_d>
    a118:	d9000a04 	addi	r4,sp,40
    a11c:	d80b883a 	mov	r5,sp
    a120:	000a9740 	call	a974 <__unpack_d>
    a124:	d8c00517 	ldw	r3,20(sp)
    a128:	00800044 	movi	r2,1
    a12c:	10c00536 	bltu	r2,r3,a144 <__divdf3+0x50>
    a130:	d9000504 	addi	r4,sp,20
    a134:	000a7500 	call	a750 <__pack_d>
    a138:	dfc00e17 	ldw	ra,56(sp)
    a13c:	dec00f04 	addi	sp,sp,60
    a140:	f800283a 	ret
    a144:	d9000017 	ldw	r4,0(sp)
    a148:	11000536 	bltu	r2,r4,a160 <__divdf3+0x6c>
    a14c:	d809883a 	mov	r4,sp
    a150:	000a7500 	call	a750 <__pack_d>
    a154:	dfc00e17 	ldw	ra,56(sp)
    a158:	dec00f04 	addi	sp,sp,60
    a15c:	f800283a 	ret
    a160:	d9800617 	ldw	r6,24(sp)
    a164:	d9400117 	ldw	r5,4(sp)
    a168:	00800104 	movi	r2,4
    a16c:	314af03a 	xor	r5,r6,r5
    a170:	d9400615 	stw	r5,24(sp)
    a174:	18800226 	beq	r3,r2,a180 <__divdf3+0x8c>
    a178:	01400084 	movi	r5,2
    a17c:	1940041e 	bne	r3,r5,a190 <__divdf3+0x9c>
    a180:	193feb1e 	bne	r3,r4,a130 <__divdf3+0x3c>
    a184:	01000074 	movhi	r4,1
    a188:	2133f904 	addi	r4,r4,-12316
    a18c:	003fe906 	br	a134 <__divdf3+0x40>
    a190:	20803326 	beq	r4,r2,a260 <__divdf3+0x16c>
    a194:	21403726 	beq	r4,r5,a274 <__divdf3+0x180>
    a198:	d8800217 	ldw	r2,8(sp)
    a19c:	d9000717 	ldw	r4,28(sp)
    a1a0:	d8c00917 	ldw	r3,36(sp)
    a1a4:	da000417 	ldw	r8,16(sp)
    a1a8:	2089c83a 	sub	r4,r4,r2
    a1ac:	d9000715 	stw	r4,28(sp)
    a1b0:	d8800817 	ldw	r2,32(sp)
    a1b4:	dbc00317 	ldw	r15,12(sp)
    a1b8:	1a000236 	bltu	r3,r8,a1c4 <__divdf3+0xd0>
    a1bc:	40c0081e 	bne	r8,r3,a1e0 <__divdf3+0xec>
    a1c0:	13c0072e 	bgeu	r2,r15,a1e0 <__divdf3+0xec>
    a1c4:	108b883a 	add	r5,r2,r2
    a1c8:	288d803a 	cmpltu	r6,r5,r2
    a1cc:	18c7883a 	add	r3,r3,r3
    a1d0:	213fffc4 	addi	r4,r4,-1
    a1d4:	2805883a 	mov	r2,r5
    a1d8:	30c7883a 	add	r3,r6,r3
    a1dc:	d9000715 	stw	r4,28(sp)
    a1e0:	01400f44 	movi	r5,61
    a1e4:	000f883a 	mov	r7,zero
    a1e8:	01040034 	movhi	r4,4096
    a1ec:	0019883a 	mov	r12,zero
    a1f0:	001b883a 	mov	r13,zero
    a1f4:	201697fa 	slli	r11,r4,31
    a1f8:	3814d07a 	srli	r10,r7,1
    a1fc:	297fffc4 	addi	r5,r5,-1
    a200:	1a000936 	bltu	r3,r8,a228 <__divdf3+0x134>
    a204:	13cdc83a 	sub	r6,r2,r15
    a208:	1193803a 	cmpltu	r9,r2,r6
    a20c:	1a1dc83a 	sub	r14,r3,r8
    a210:	40c0011e 	bne	r8,r3,a218 <__divdf3+0x124>
    a214:	13c00436 	bltu	r2,r15,a228 <__divdf3+0x134>
    a218:	3005883a 	mov	r2,r6
    a21c:	7247c83a 	sub	r3,r14,r9
    a220:	61d8b03a 	or	r12,r12,r7
    a224:	691ab03a 	or	r13,r13,r4
    a228:	108d883a 	add	r6,r2,r2
    a22c:	3093803a 	cmpltu	r9,r6,r2
    a230:	18c7883a 	add	r3,r3,r3
    a234:	5a8eb03a 	or	r7,r11,r10
    a238:	2008d07a 	srli	r4,r4,1
    a23c:	3005883a 	mov	r2,r6
    a240:	48c7883a 	add	r3,r9,r3
    a244:	283feb1e 	bne	r5,zero,a1f4 <__divdf3+0x100>
    a248:	61003fcc 	andi	r4,r12,255
    a24c:	01402004 	movi	r5,128
    a250:	21400b26 	beq	r4,r5,a280 <__divdf3+0x18c>
    a254:	db000815 	stw	r12,32(sp)
    a258:	db400915 	stw	r13,36(sp)
    a25c:	003fb406 	br	a130 <__divdf3+0x3c>
    a260:	d8000815 	stw	zero,32(sp)
    a264:	d8000915 	stw	zero,36(sp)
    a268:	d8000715 	stw	zero,28(sp)
    a26c:	d9000504 	addi	r4,sp,20
    a270:	003fb006 	br	a134 <__divdf3+0x40>
    a274:	d8800515 	stw	r2,20(sp)
    a278:	d9000504 	addi	r4,sp,20
    a27c:	003fad06 	br	a134 <__divdf3+0x40>
    a280:	6140400c 	andi	r5,r12,256
    a284:	283ff31e 	bne	r5,zero,a254 <__divdf3+0x160>
    a288:	30c4b03a 	or	r2,r6,r3
    a28c:	103ff126 	beq	r2,zero,a254 <__divdf3+0x160>
    a290:	6109883a 	add	r4,r12,r4
    a294:	2305803a 	cmpltu	r2,r4,r12
    a298:	033fc004 	movi	r12,-256
    a29c:	2318703a 	and	r12,r4,r12
    a2a0:	135b883a 	add	r13,r2,r13
    a2a4:	003feb06 	br	a254 <__divdf3+0x160>

0000a2a8 <__gtdf2>:
    a2a8:	defff104 	addi	sp,sp,-60
    a2ac:	d9000c15 	stw	r4,48(sp)
    a2b0:	d9400d15 	stw	r5,52(sp)
    a2b4:	d9000c04 	addi	r4,sp,48
    a2b8:	d9400504 	addi	r5,sp,20
    a2bc:	dfc00e15 	stw	ra,56(sp)
    a2c0:	d9800a15 	stw	r6,40(sp)
    a2c4:	d9c00b15 	stw	r7,44(sp)
    a2c8:	000a9740 	call	a974 <__unpack_d>
    a2cc:	d9000a04 	addi	r4,sp,40
    a2d0:	d80b883a 	mov	r5,sp
    a2d4:	000a9740 	call	a974 <__unpack_d>
    a2d8:	d8c00517 	ldw	r3,20(sp)
    a2dc:	00800044 	movi	r2,1
    a2e0:	10c0082e 	bgeu	r2,r3,a304 <__gtdf2+0x5c>
    a2e4:	d8c00017 	ldw	r3,0(sp)
    a2e8:	10c0062e 	bgeu	r2,r3,a304 <__gtdf2+0x5c>
    a2ec:	d9000504 	addi	r4,sp,20
    a2f0:	d80b883a 	mov	r5,sp
    a2f4:	000aa780 	call	aa78 <__fpcmp_parts_d>
    a2f8:	dfc00e17 	ldw	ra,56(sp)
    a2fc:	dec00f04 	addi	sp,sp,60
    a300:	f800283a 	ret
    a304:	00bfffc4 	movi	r2,-1
    a308:	003ffb06 	br	a2f8 <__gtdf2+0x50>

0000a30c <__ltdf2>:
    a30c:	defff104 	addi	sp,sp,-60
    a310:	d9000c15 	stw	r4,48(sp)
    a314:	d9400d15 	stw	r5,52(sp)
    a318:	d9000c04 	addi	r4,sp,48
    a31c:	d9400504 	addi	r5,sp,20
    a320:	dfc00e15 	stw	ra,56(sp)
    a324:	d9800a15 	stw	r6,40(sp)
    a328:	d9c00b15 	stw	r7,44(sp)
    a32c:	000a9740 	call	a974 <__unpack_d>
    a330:	d9000a04 	addi	r4,sp,40
    a334:	d80b883a 	mov	r5,sp
    a338:	000a9740 	call	a974 <__unpack_d>
    a33c:	d8c00517 	ldw	r3,20(sp)
    a340:	00800044 	movi	r2,1
    a344:	10c0052e 	bgeu	r2,r3,a35c <__ltdf2+0x50>
    a348:	d8c00017 	ldw	r3,0(sp)
    a34c:	10c0032e 	bgeu	r2,r3,a35c <__ltdf2+0x50>
    a350:	d9000504 	addi	r4,sp,20
    a354:	d80b883a 	mov	r5,sp
    a358:	000aa780 	call	aa78 <__fpcmp_parts_d>
    a35c:	dfc00e17 	ldw	ra,56(sp)
    a360:	dec00f04 	addi	sp,sp,60
    a364:	f800283a 	ret

0000a368 <__floatsidf>:
    a368:	2004d7fa 	srli	r2,r4,31
    a36c:	defff904 	addi	sp,sp,-28
    a370:	00c000c4 	movi	r3,3
    a374:	dfc00615 	stw	ra,24(sp)
    a378:	dc000515 	stw	r16,20(sp)
    a37c:	d8c00015 	stw	r3,0(sp)
    a380:	d8800115 	stw	r2,4(sp)
    a384:	2000081e 	bne	r4,zero,a3a8 <__floatsidf+0x40>
    a388:	00800084 	movi	r2,2
    a38c:	d8800015 	stw	r2,0(sp)
    a390:	d809883a 	mov	r4,sp
    a394:	000a7500 	call	a750 <__pack_d>
    a398:	dfc00617 	ldw	ra,24(sp)
    a39c:	dc000517 	ldw	r16,20(sp)
    a3a0:	dec00704 	addi	sp,sp,28
    a3a4:	f800283a 	ret
    a3a8:	00c00f04 	movi	r3,60
    a3ac:	d8c00215 	stw	r3,8(sp)
    a3b0:	10000f1e 	bne	r2,zero,a3f0 <__floatsidf+0x88>
    a3b4:	2021883a 	mov	r16,r4
    a3b8:	8009883a 	mov	r4,r16
    a3bc:	000a6a40 	call	a6a4 <__clzsi2>
    a3c0:	11000744 	addi	r4,r2,29
    a3c4:	0100110e 	bge	zero,r4,a40c <__floatsidf+0xa4>
    a3c8:	10ffff44 	addi	r3,r2,-3
    a3cc:	18001216 	blt	r3,zero,a418 <__floatsidf+0xb0>
    a3d0:	80c6983a 	sll	r3,r16,r3
    a3d4:	0009883a 	mov	r4,zero
    a3d8:	014007c4 	movi	r5,31
    a3dc:	2885c83a 	sub	r2,r5,r2
    a3e0:	d9000315 	stw	r4,12(sp)
    a3e4:	d8c00415 	stw	r3,16(sp)
    a3e8:	d8800215 	stw	r2,8(sp)
    a3ec:	003fe806 	br	a390 <__floatsidf+0x28>
    a3f0:	00a00034 	movhi	r2,32768
    a3f4:	20800e26 	beq	r4,r2,a430 <__floatsidf+0xc8>
    a3f8:	0121c83a 	sub	r16,zero,r4
    a3fc:	8009883a 	mov	r4,r16
    a400:	000a6a40 	call	a6a4 <__clzsi2>
    a404:	11000744 	addi	r4,r2,29
    a408:	013fef16 	blt	zero,r4,a3c8 <__floatsidf+0x60>
    a40c:	dc000315 	stw	r16,12(sp)
    a410:	d8000415 	stw	zero,16(sp)
    a414:	003fde06 	br	a390 <__floatsidf+0x28>
    a418:	800ad07a 	srli	r5,r16,1
    a41c:	00c007c4 	movi	r3,31
    a420:	1907c83a 	sub	r3,r3,r4
    a424:	28c6d83a 	srl	r3,r5,r3
    a428:	8108983a 	sll	r4,r16,r4
    a42c:	003fea06 	br	a3d8 <__floatsidf+0x70>
    a430:	0005883a 	mov	r2,zero
    a434:	00f07834 	movhi	r3,49632
    a438:	003fd706 	br	a398 <__floatsidf+0x30>

0000a43c <udivmodsi4>:
    a43c:	2005883a 	mov	r2,r4
    a440:	2900182e 	bgeu	r5,r4,a4a4 <udivmodsi4+0x68>
    a444:	28001716 	blt	r5,zero,a4a4 <udivmodsi4+0x68>
    a448:	01000804 	movi	r4,32
    a44c:	00c00044 	movi	r3,1
    a450:	00000206 	br	a45c <udivmodsi4+0x20>
    a454:	20001126 	beq	r4,zero,a49c <udivmodsi4+0x60>
    a458:	28000516 	blt	r5,zero,a470 <udivmodsi4+0x34>
    a45c:	294b883a 	add	r5,r5,r5
    a460:	213fffc4 	addi	r4,r4,-1
    a464:	18c7883a 	add	r3,r3,r3
    a468:	28bffa36 	bltu	r5,r2,a454 <udivmodsi4+0x18>
    a46c:	18000b26 	beq	r3,zero,a49c <udivmodsi4+0x60>
    a470:	0009883a 	mov	r4,zero
    a474:	11400236 	bltu	r2,r5,a480 <udivmodsi4+0x44>
    a478:	1145c83a 	sub	r2,r2,r5
    a47c:	20c8b03a 	or	r4,r4,r3
    a480:	1806d07a 	srli	r3,r3,1
    a484:	280ad07a 	srli	r5,r5,1
    a488:	183ffa1e 	bne	r3,zero,a474 <udivmodsi4+0x38>
    a48c:	3000021e 	bne	r6,zero,a498 <udivmodsi4+0x5c>
    a490:	2005883a 	mov	r2,r4
    a494:	f800283a 	ret
    a498:	f800283a 	ret
    a49c:	0009883a 	mov	r4,zero
    a4a0:	003ffa06 	br	a48c <udivmodsi4+0x50>
    a4a4:	00c00044 	movi	r3,1
    a4a8:	0009883a 	mov	r4,zero
    a4ac:	003ff106 	br	a474 <udivmodsi4+0x38>

0000a4b0 <__divsi3>:
    a4b0:	defffe04 	addi	sp,sp,-8
    a4b4:	dfc00115 	stw	ra,4(sp)
    a4b8:	dc000015 	stw	r16,0(sp)
    a4bc:	20000a16 	blt	r4,zero,a4e8 <__divsi3+0x38>
    a4c0:	0021883a 	mov	r16,zero
    a4c4:	28000b16 	blt	r5,zero,a4f4 <__divsi3+0x44>
    a4c8:	000d883a 	mov	r6,zero
    a4cc:	000a43c0 	call	a43c <udivmodsi4>
    a4d0:	80000126 	beq	r16,zero,a4d8 <__divsi3+0x28>
    a4d4:	0085c83a 	sub	r2,zero,r2
    a4d8:	dfc00117 	ldw	ra,4(sp)
    a4dc:	dc000017 	ldw	r16,0(sp)
    a4e0:	dec00204 	addi	sp,sp,8
    a4e4:	f800283a 	ret
    a4e8:	0109c83a 	sub	r4,zero,r4
    a4ec:	04000044 	movi	r16,1
    a4f0:	283ff50e 	bge	r5,zero,a4c8 <__divsi3+0x18>
    a4f4:	014bc83a 	sub	r5,zero,r5
    a4f8:	8400005c 	xori	r16,r16,1
    a4fc:	003ff206 	br	a4c8 <__divsi3+0x18>

0000a500 <__modsi3>:
    a500:	deffff04 	addi	sp,sp,-4
    a504:	dfc00015 	stw	ra,0(sp)
    a508:	20000516 	blt	r4,zero,a520 <__modsi3+0x20>
    a50c:	28000c16 	blt	r5,zero,a540 <__modsi3+0x40>
    a510:	01800044 	movi	r6,1
    a514:	dfc00017 	ldw	ra,0(sp)
    a518:	dec00104 	addi	sp,sp,4
    a51c:	000a43c1 	jmpi	a43c <udivmodsi4>
    a520:	0109c83a 	sub	r4,zero,r4
    a524:	28000b16 	blt	r5,zero,a554 <__modsi3+0x54>
    a528:	01800044 	movi	r6,1
    a52c:	000a43c0 	call	a43c <udivmodsi4>
    a530:	0085c83a 	sub	r2,zero,r2
    a534:	dfc00017 	ldw	ra,0(sp)
    a538:	dec00104 	addi	sp,sp,4
    a53c:	f800283a 	ret
    a540:	014bc83a 	sub	r5,zero,r5
    a544:	01800044 	movi	r6,1
    a548:	dfc00017 	ldw	ra,0(sp)
    a54c:	dec00104 	addi	sp,sp,4
    a550:	000a43c1 	jmpi	a43c <udivmodsi4>
    a554:	014bc83a 	sub	r5,zero,r5
    a558:	003ff306 	br	a528 <__modsi3+0x28>

0000a55c <__udivsi3>:
    a55c:	000d883a 	mov	r6,zero
    a560:	000a43c1 	jmpi	a43c <udivmodsi4>

0000a564 <__umodsi3>:
    a564:	01800044 	movi	r6,1
    a568:	000a43c1 	jmpi	a43c <udivmodsi4>

0000a56c <__mulsi3>:
    a56c:	0005883a 	mov	r2,zero
    a570:	20000726 	beq	r4,zero,a590 <__mulsi3+0x24>
    a574:	20c0004c 	andi	r3,r4,1
    a578:	2008d07a 	srli	r4,r4,1
    a57c:	18000126 	beq	r3,zero,a584 <__mulsi3+0x18>
    a580:	1145883a 	add	r2,r2,r5
    a584:	294b883a 	add	r5,r5,r5
    a588:	203ffa1e 	bne	r4,zero,a574 <__mulsi3+0x8>
    a58c:	f800283a 	ret
    a590:	f800283a 	ret

0000a594 <__muldi3>:
    a594:	defff604 	addi	sp,sp,-40
    a598:	dd400515 	stw	r21,20(sp)
    a59c:	dd000415 	stw	r20,16(sp)
    a5a0:	257fffcc 	andi	r21,r4,65535
    a5a4:	353fffcc 	andi	r20,r6,65535
    a5a8:	dcc00315 	stw	r19,12(sp)
    a5ac:	3026d43a 	srli	r19,r6,16
    a5b0:	dd800615 	stw	r22,24(sp)
    a5b4:	dc800215 	stw	r18,8(sp)
    a5b8:	dc400115 	stw	r17,4(sp)
    a5bc:	2024d43a 	srli	r18,r4,16
    a5c0:	2023883a 	mov	r17,r4
    a5c4:	282d883a 	mov	r22,r5
    a5c8:	a009883a 	mov	r4,r20
    a5cc:	a80b883a 	mov	r5,r21
    a5d0:	dfc00915 	stw	ra,36(sp)
    a5d4:	df000815 	stw	fp,32(sp)
    a5d8:	ddc00715 	stw	r23,28(sp)
    a5dc:	3839883a 	mov	fp,r7
    a5e0:	dc000015 	stw	r16,0(sp)
    a5e4:	3021883a 	mov	r16,r6
    a5e8:	000a56c0 	call	a56c <__mulsi3>
    a5ec:	a80b883a 	mov	r5,r21
    a5f0:	9809883a 	mov	r4,r19
    a5f4:	102f883a 	mov	r23,r2
    a5f8:	000a56c0 	call	a56c <__mulsi3>
    a5fc:	a009883a 	mov	r4,r20
    a600:	900b883a 	mov	r5,r18
    a604:	102b883a 	mov	r21,r2
    a608:	000a56c0 	call	a56c <__mulsi3>
    a60c:	9809883a 	mov	r4,r19
    a610:	900b883a 	mov	r5,r18
    a614:	1029883a 	mov	r20,r2
    a618:	000a56c0 	call	a56c <__mulsi3>
    a61c:	1007883a 	mov	r3,r2
    a620:	b804d43a 	srli	r2,r23,16
    a624:	a549883a 	add	r4,r20,r21
    a628:	2089883a 	add	r4,r4,r2
    a62c:	2500022e 	bgeu	r4,r20,a638 <__muldi3+0xa4>
    a630:	00800074 	movhi	r2,1
    a634:	1887883a 	add	r3,r3,r2
    a638:	200cd43a 	srli	r6,r4,16
    a63c:	2004943a 	slli	r2,r4,16
    a640:	e00b883a 	mov	r5,fp
    a644:	8809883a 	mov	r4,r17
    a648:	bdffffcc 	andi	r23,r23,65535
    a64c:	19a3883a 	add	r17,r3,r6
    a650:	15ef883a 	add	r23,r2,r23
    a654:	000a56c0 	call	a56c <__mulsi3>
    a658:	8009883a 	mov	r4,r16
    a65c:	b00b883a 	mov	r5,r22
    a660:	1025883a 	mov	r18,r2
    a664:	000a56c0 	call	a56c <__mulsi3>
    a668:	9085883a 	add	r2,r18,r2
    a66c:	1447883a 	add	r3,r2,r17
    a670:	b805883a 	mov	r2,r23
    a674:	dfc00917 	ldw	ra,36(sp)
    a678:	df000817 	ldw	fp,32(sp)
    a67c:	ddc00717 	ldw	r23,28(sp)
    a680:	dd800617 	ldw	r22,24(sp)
    a684:	dd400517 	ldw	r21,20(sp)
    a688:	dd000417 	ldw	r20,16(sp)
    a68c:	dcc00317 	ldw	r19,12(sp)
    a690:	dc800217 	ldw	r18,8(sp)
    a694:	dc400117 	ldw	r17,4(sp)
    a698:	dc000017 	ldw	r16,0(sp)
    a69c:	dec00a04 	addi	sp,sp,40
    a6a0:	f800283a 	ret

0000a6a4 <__clzsi2>:
    a6a4:	00bfffd4 	movui	r2,65535
    a6a8:	11000b36 	bltu	r2,r4,a6d8 <__clzsi2+0x34>
    a6ac:	00803fc4 	movi	r2,255
    a6b0:	11001e2e 	bgeu	r2,r4,a72c <__clzsi2+0x88>
    a6b4:	00c00204 	movi	r3,8
    a6b8:	20c8d83a 	srl	r4,r4,r3
    a6bc:	00c00074 	movhi	r3,1
    a6c0:	18f3fe04 	addi	r3,r3,-12296
    a6c4:	00800604 	movi	r2,24
    a6c8:	1909883a 	add	r4,r3,r4
    a6cc:	20c00003 	ldbu	r3,0(r4)
    a6d0:	10c5c83a 	sub	r2,r2,r3
    a6d4:	f800283a 	ret
    a6d8:	00804034 	movhi	r2,256
    a6dc:	10bfffc4 	addi	r2,r2,-1
    a6e0:	11000936 	bltu	r2,r4,a708 <__clzsi2+0x64>
    a6e4:	00800404 	movi	r2,16
    a6e8:	1007883a 	mov	r3,r2
    a6ec:	20c8d83a 	srl	r4,r4,r3
    a6f0:	00c00074 	movhi	r3,1
    a6f4:	18f3fe04 	addi	r3,r3,-12296
    a6f8:	1909883a 	add	r4,r3,r4
    a6fc:	20c00003 	ldbu	r3,0(r4)
    a700:	10c5c83a 	sub	r2,r2,r3
    a704:	f800283a 	ret
    a708:	00c00604 	movi	r3,24
    a70c:	20c8d83a 	srl	r4,r4,r3
    a710:	00c00074 	movhi	r3,1
    a714:	18f3fe04 	addi	r3,r3,-12296
    a718:	00800204 	movi	r2,8
    a71c:	1909883a 	add	r4,r3,r4
    a720:	20c00003 	ldbu	r3,0(r4)
    a724:	10c5c83a 	sub	r2,r2,r3
    a728:	f800283a 	ret
    a72c:	0007883a 	mov	r3,zero
    a730:	20c8d83a 	srl	r4,r4,r3
    a734:	00c00074 	movhi	r3,1
    a738:	18f3fe04 	addi	r3,r3,-12296
    a73c:	00800804 	movi	r2,32
    a740:	1909883a 	add	r4,r3,r4
    a744:	20c00003 	ldbu	r3,0(r4)
    a748:	10c5c83a 	sub	r2,r2,r3
    a74c:	f800283a 	ret

0000a750 <__pack_d>:
    a750:	20800017 	ldw	r2,0(r4)
    a754:	defff804 	addi	sp,sp,-32
    a758:	dcc00315 	stw	r19,12(sp)
    a75c:	dc800215 	stw	r18,8(sp)
    a760:	dfc00715 	stw	ra,28(sp)
    a764:	dd800615 	stw	r22,24(sp)
    a768:	dd400515 	stw	r21,20(sp)
    a76c:	dd000415 	stw	r20,16(sp)
    a770:	dc400115 	stw	r17,4(sp)
    a774:	dc000015 	stw	r16,0(sp)
    a778:	04800044 	movi	r18,1
    a77c:	24400317 	ldw	r17,12(r4)
    a780:	24000417 	ldw	r16,16(r4)
    a784:	24c00117 	ldw	r19,4(r4)
    a788:	9080422e 	bgeu	r18,r2,a894 <__pack_d+0x144>
    a78c:	00c00104 	movi	r3,4
    a790:	10c03c26 	beq	r2,r3,a884 <__pack_d+0x134>
    a794:	00c00084 	movi	r3,2
    a798:	10c01926 	beq	r2,r3,a800 <__pack_d+0xb0>
    a79c:	8c04b03a 	or	r2,r17,r16
    a7a0:	10001726 	beq	r2,zero,a800 <__pack_d+0xb0>
    a7a4:	21000217 	ldw	r4,8(r4)
    a7a8:	00bf0084 	movi	r2,-1022
    a7ac:	20804016 	blt	r4,r2,a8b0 <__pack_d+0x160>
    a7b0:	0080ffc4 	movi	r2,1023
    a7b4:	11003316 	blt	r2,r4,a884 <__pack_d+0x134>
    a7b8:	88803fcc 	andi	r2,r17,255
    a7bc:	00c02004 	movi	r3,128
    a7c0:	10c02926 	beq	r2,r3,a868 <__pack_d+0x118>
    a7c4:	88801fc4 	addi	r2,r17,127
    a7c8:	1463803a 	cmpltu	r17,r2,r17
    a7cc:	8c21883a 	add	r16,r17,r16
    a7d0:	1023883a 	mov	r17,r2
    a7d4:	00880034 	movhi	r2,8192
    a7d8:	10bfffc4 	addi	r2,r2,-1
    a7dc:	14001c36 	bltu	r2,r16,a850 <__pack_d+0x100>
    a7e0:	2100ffc4 	addi	r4,r4,1023
    a7e4:	8006963a 	slli	r3,r16,24
    a7e8:	8804d23a 	srli	r2,r17,8
    a7ec:	8020913a 	slli	r16,r16,4
    a7f0:	2101ffcc 	andi	r4,r4,2047
    a7f4:	1884b03a 	or	r2,r3,r2
    a7f8:	8020d33a 	srli	r16,r16,12
    a7fc:	00000306 	br	a80c <__pack_d+0xbc>
    a800:	0009883a 	mov	r4,zero
    a804:	0005883a 	mov	r2,zero
    a808:	0021883a 	mov	r16,zero
    a80c:	2008953a 	slli	r4,r4,20
    a810:	982697fa 	slli	r19,r19,31
    a814:	00c00434 	movhi	r3,16
    a818:	18ffffc4 	addi	r3,r3,-1
    a81c:	80e0703a 	and	r16,r16,r3
    a820:	8106b03a 	or	r3,r16,r4
    a824:	1cc6b03a 	or	r3,r3,r19
    a828:	dfc00717 	ldw	ra,28(sp)
    a82c:	dd800617 	ldw	r22,24(sp)
    a830:	dd400517 	ldw	r21,20(sp)
    a834:	dd000417 	ldw	r20,16(sp)
    a838:	dcc00317 	ldw	r19,12(sp)
    a83c:	dc800217 	ldw	r18,8(sp)
    a840:	dc400117 	ldw	r17,4(sp)
    a844:	dc000017 	ldw	r16,0(sp)
    a848:	dec00804 	addi	sp,sp,32
    a84c:	f800283a 	ret
    a850:	800697fa 	slli	r3,r16,31
    a854:	8804d07a 	srli	r2,r17,1
    a858:	21010004 	addi	r4,r4,1024
    a85c:	8020d07a 	srli	r16,r16,1
    a860:	18a2b03a 	or	r17,r3,r2
    a864:	003fdf06 	br	a7e4 <__pack_d+0x94>
    a868:	88c0400c 	andi	r3,r17,256
    a86c:	183fd926 	beq	r3,zero,a7d4 <__pack_d+0x84>
    a870:	8885883a 	add	r2,r17,r2
    a874:	1463803a 	cmpltu	r17,r2,r17
    a878:	8c21883a 	add	r16,r17,r16
    a87c:	1023883a 	mov	r17,r2
    a880:	003fd406 	br	a7d4 <__pack_d+0x84>
    a884:	0101ffc4 	movi	r4,2047
    a888:	0005883a 	mov	r2,zero
    a88c:	0021883a 	mov	r16,zero
    a890:	003fde06 	br	a80c <__pack_d+0xbc>
    a894:	84000234 	orhi	r16,r16,8
    a898:	00c00434 	movhi	r3,16
    a89c:	18ffffc4 	addi	r3,r3,-1
    a8a0:	8805883a 	mov	r2,r17
    a8a4:	80e0703a 	and	r16,r16,r3
    a8a8:	0101ffc4 	movi	r4,2047
    a8ac:	003fd706 	br	a80c <__pack_d+0xbc>
    a8b0:	1129c83a 	sub	r20,r2,r4
    a8b4:	00800e04 	movi	r2,56
    a8b8:	15002716 	blt	r2,r20,a958 <__pack_d+0x208>
    a8bc:	800b883a 	mov	r5,r16
    a8c0:	a00d883a 	mov	r6,r20
    a8c4:	8809883a 	mov	r4,r17
    a8c8:	000ab480 	call	ab48 <__lshrdi3>
    a8cc:	9009883a 	mov	r4,r18
    a8d0:	000b883a 	mov	r5,zero
    a8d4:	a00d883a 	mov	r6,r20
    a8d8:	102d883a 	mov	r22,r2
    a8dc:	182b883a 	mov	r21,r3
    a8e0:	000ab8c0 	call	ab8c <__ashldi3>
    a8e4:	1009003a 	cmpeq	r4,r2,zero
    a8e8:	1907c83a 	sub	r3,r3,r4
    a8ec:	10bfffc4 	addi	r2,r2,-1
    a8f0:	1c20703a 	and	r16,r3,r16
    a8f4:	1444703a 	and	r2,r2,r17
    a8f8:	1404b03a 	or	r2,r2,r16
    a8fc:	1004c03a 	cmpne	r2,r2,zero
    a900:	1584b03a 	or	r2,r2,r22
    a904:	11003fcc 	andi	r4,r2,255
    a908:	01402004 	movi	r5,128
    a90c:	a807883a 	mov	r3,r21
    a910:	2140131e 	bne	r4,r5,a960 <__pack_d+0x210>
    a914:	1140400c 	andi	r5,r2,256
    a918:	28000426 	beq	r5,zero,a92c <__pack_d+0x1dc>
    a91c:	1109883a 	add	r4,r2,r4
    a920:	2085803a 	cmpltu	r2,r4,r2
    a924:	1547883a 	add	r3,r2,r21
    a928:	2005883a 	mov	r2,r4
    a92c:	1808963a 	slli	r4,r3,24
    a930:	1004d23a 	srli	r2,r2,8
    a934:	1820913a 	slli	r16,r3,4
    a938:	01440034 	movhi	r5,4096
    a93c:	297fffc4 	addi	r5,r5,-1
    a940:	2084b03a 	or	r2,r4,r2
    a944:	8020d33a 	srli	r16,r16,12
    a948:	01000044 	movi	r4,1
    a94c:	28ffaf36 	bltu	r5,r3,a80c <__pack_d+0xbc>
    a950:	0009883a 	mov	r4,zero
    a954:	003fad06 	br	a80c <__pack_d+0xbc>
    a958:	0005883a 	mov	r2,zero
    a95c:	0007883a 	mov	r3,zero
    a960:	11001fc4 	addi	r4,r2,127
    a964:	2085803a 	cmpltu	r2,r4,r2
    a968:	10c7883a 	add	r3,r2,r3
    a96c:	2005883a 	mov	r2,r4
    a970:	003fee06 	br	a92c <__pack_d+0x1dc>

0000a974 <__unpack_d>:
    a974:	21800117 	ldw	r6,4(r4)
    a978:	20c00017 	ldw	r3,0(r4)
    a97c:	3004d7fa 	srli	r2,r6,31
    a980:	3008d53a 	srli	r4,r6,20
    a984:	28800115 	stw	r2,4(r5)
    a988:	2101ffcc 	andi	r4,r4,2047
    a98c:	00800434 	movhi	r2,16
    a990:	10bfffc4 	addi	r2,r2,-1
    a994:	3084703a 	and	r2,r6,r2
    a998:	20001a1e 	bne	r4,zero,aa04 <__unpack_d+0x90>
    a99c:	1888b03a 	or	r4,r3,r2
    a9a0:	20002626 	beq	r4,zero,aa3c <__unpack_d+0xc8>
    a9a4:	1808d63a 	srli	r4,r3,24
    a9a8:	1004923a 	slli	r2,r2,8
    a9ac:	01bf0084 	movi	r6,-1022
    a9b0:	29800215 	stw	r6,8(r5)
    a9b4:	2084b03a 	or	r2,r4,r2
    a9b8:	010000c4 	movi	r4,3
    a9bc:	29000015 	stw	r4,0(r5)
    a9c0:	02040034 	movhi	r8,4096
    a9c4:	423fffc4 	addi	r8,r8,-1
    a9c8:	1806923a 	slli	r3,r3,8
    a9cc:	40801836 	bltu	r8,r2,aa30 <__unpack_d+0xbc>
    a9d0:	013f0044 	movi	r4,-1023
    a9d4:	18cd883a 	add	r6,r3,r3
    a9d8:	30c7803a 	cmpltu	r3,r6,r3
    a9dc:	1085883a 	add	r2,r2,r2
    a9e0:	1885883a 	add	r2,r3,r2
    a9e4:	200f883a 	mov	r7,r4
    a9e8:	3007883a 	mov	r3,r6
    a9ec:	213fffc4 	addi	r4,r4,-1
    a9f0:	40bff82e 	bgeu	r8,r2,a9d4 <__unpack_d+0x60>
    a9f4:	29c00215 	stw	r7,8(r5)
    a9f8:	28c00315 	stw	r3,12(r5)
    a9fc:	28800415 	stw	r2,16(r5)
    aa00:	f800283a 	ret
    aa04:	01c1ffc4 	movi	r7,2047
    aa08:	21c00f26 	beq	r4,r7,aa48 <__unpack_d+0xd4>
    aa0c:	180cd63a 	srli	r6,r3,24
    aa10:	1004923a 	slli	r2,r2,8
    aa14:	213f0044 	addi	r4,r4,-1023
    aa18:	1806923a 	slli	r3,r3,8
    aa1c:	3084b03a 	or	r2,r6,r2
    aa20:	29000215 	stw	r4,8(r5)
    aa24:	010000c4 	movi	r4,3
    aa28:	10840034 	orhi	r2,r2,4096
    aa2c:	29000015 	stw	r4,0(r5)
    aa30:	28c00315 	stw	r3,12(r5)
    aa34:	28800415 	stw	r2,16(r5)
    aa38:	f800283a 	ret
    aa3c:	00800084 	movi	r2,2
    aa40:	28800015 	stw	r2,0(r5)
    aa44:	f800283a 	ret
    aa48:	1888b03a 	or	r4,r3,r2
    aa4c:	20000526 	beq	r4,zero,aa64 <__unpack_d+0xf0>
    aa50:	3180022c 	andhi	r6,r6,8
    aa54:	30000626 	beq	r6,zero,aa70 <__unpack_d+0xfc>
    aa58:	01000044 	movi	r4,1
    aa5c:	29000015 	stw	r4,0(r5)
    aa60:	003ff306 	br	aa30 <__unpack_d+0xbc>
    aa64:	00800104 	movi	r2,4
    aa68:	28800015 	stw	r2,0(r5)
    aa6c:	f800283a 	ret
    aa70:	28000015 	stw	zero,0(r5)
    aa74:	003fee06 	br	aa30 <__unpack_d+0xbc>

0000aa78 <__fpcmp_parts_d>:
    aa78:	20c00017 	ldw	r3,0(r4)
    aa7c:	00800044 	movi	r2,1
    aa80:	10c0142e 	bgeu	r2,r3,aad4 <__fpcmp_parts_d+0x5c>
    aa84:	29800017 	ldw	r6,0(r5)
    aa88:	1180122e 	bgeu	r2,r6,aad4 <__fpcmp_parts_d+0x5c>
    aa8c:	01c00104 	movi	r7,4
    aa90:	19c02826 	beq	r3,r7,ab34 <__fpcmp_parts_d+0xbc>
    aa94:	31c00926 	beq	r6,r7,aabc <__fpcmp_parts_d+0x44>
    aa98:	01c00084 	movi	r7,2
    aa9c:	19c00626 	beq	r3,r7,aab8 <__fpcmp_parts_d+0x40>
    aaa0:	31c00a26 	beq	r6,r7,aacc <__fpcmp_parts_d+0x54>
    aaa4:	20c00117 	ldw	r3,4(r4)
    aaa8:	29800117 	ldw	r6,4(r5)
    aaac:	19800b26 	beq	r3,r6,aadc <__fpcmp_parts_d+0x64>
    aab0:	1800041e 	bne	r3,zero,aac4 <__fpcmp_parts_d+0x4c>
    aab4:	f800283a 	ret
    aab8:	30c01a26 	beq	r6,r3,ab24 <__fpcmp_parts_d+0xac>
    aabc:	28800117 	ldw	r2,4(r5)
    aac0:	1000041e 	bne	r2,zero,aad4 <__fpcmp_parts_d+0x5c>
    aac4:	00bfffc4 	movi	r2,-1
    aac8:	f800283a 	ret
    aacc:	20800117 	ldw	r2,4(r4)
    aad0:	103ffc1e 	bne	r2,zero,aac4 <__fpcmp_parts_d+0x4c>
    aad4:	00800044 	movi	r2,1
    aad8:	f800283a 	ret
    aadc:	21c00217 	ldw	r7,8(r4)
    aae0:	29800217 	ldw	r6,8(r5)
    aae4:	31c0020e 	bge	r6,r7,aaf0 <__fpcmp_parts_d+0x78>
    aae8:	183ff61e 	bne	r3,zero,aac4 <__fpcmp_parts_d+0x4c>
    aaec:	f800283a 	ret
    aaf0:	39800a16 	blt	r7,r6,ab1c <__fpcmp_parts_d+0xa4>
    aaf4:	20800417 	ldw	r2,16(r4)
    aaf8:	29800417 	ldw	r6,16(r5)
    aafc:	21c00317 	ldw	r7,12(r4)
    ab00:	29000317 	ldw	r4,12(r5)
    ab04:	30800936 	bltu	r6,r2,ab2c <__fpcmp_parts_d+0xb4>
    ab08:	1180011e 	bne	r2,r6,ab10 <__fpcmp_parts_d+0x98>
    ab0c:	21c00736 	bltu	r4,r7,ab2c <__fpcmp_parts_d+0xb4>
    ab10:	11800236 	bltu	r2,r6,ab1c <__fpcmp_parts_d+0xa4>
    ab14:	3080031e 	bne	r6,r2,ab24 <__fpcmp_parts_d+0xac>
    ab18:	3900022e 	bgeu	r7,r4,ab24 <__fpcmp_parts_d+0xac>
    ab1c:	183fe926 	beq	r3,zero,aac4 <__fpcmp_parts_d+0x4c>
    ab20:	003fec06 	br	aad4 <__fpcmp_parts_d+0x5c>
    ab24:	0005883a 	mov	r2,zero
    ab28:	f800283a 	ret
    ab2c:	183fe926 	beq	r3,zero,aad4 <__fpcmp_parts_d+0x5c>
    ab30:	003fe406 	br	aac4 <__fpcmp_parts_d+0x4c>
    ab34:	30ffe51e 	bne	r6,r3,aacc <__fpcmp_parts_d+0x54>
    ab38:	28c00117 	ldw	r3,4(r5)
    ab3c:	20800117 	ldw	r2,4(r4)
    ab40:	1885c83a 	sub	r2,r3,r2
    ab44:	f800283a 	ret

0000ab48 <__lshrdi3>:
    ab48:	2005883a 	mov	r2,r4
    ab4c:	2807883a 	mov	r3,r5
    ab50:	30000826 	beq	r6,zero,ab74 <__lshrdi3+0x2c>
    ab54:	01000804 	movi	r4,32
    ab58:	2189c83a 	sub	r4,r4,r6
    ab5c:	0100060e 	bge	zero,r4,ab78 <__lshrdi3+0x30>
    ab60:	1184d83a 	srl	r2,r2,r6
    ab64:	2908983a 	sll	r4,r5,r4
    ab68:	298cd83a 	srl	r6,r5,r6
    ab6c:	2084b03a 	or	r2,r4,r2
    ab70:	3007883a 	mov	r3,r6
    ab74:	f800283a 	ret
    ab78:	0105c83a 	sub	r2,zero,r4
    ab7c:	000d883a 	mov	r6,zero
    ab80:	2884d83a 	srl	r2,r5,r2
    ab84:	3007883a 	mov	r3,r6
    ab88:	003ffa06 	br	ab74 <__lshrdi3+0x2c>

0000ab8c <__ashldi3>:
    ab8c:	2005883a 	mov	r2,r4
    ab90:	2807883a 	mov	r3,r5
    ab94:	30000826 	beq	r6,zero,abb8 <__ashldi3+0x2c>
    ab98:	01000804 	movi	r4,32
    ab9c:	2189c83a 	sub	r4,r4,r6
    aba0:	0100060e 	bge	zero,r4,abbc <__ashldi3+0x30>
    aba4:	1108d83a 	srl	r4,r2,r4
    aba8:	2986983a 	sll	r3,r5,r6
    abac:	118c983a 	sll	r6,r2,r6
    abb0:	20c6b03a 	or	r3,r4,r3
    abb4:	3005883a 	mov	r2,r6
    abb8:	f800283a 	ret
    abbc:	0107c83a 	sub	r3,zero,r4
    abc0:	000d883a 	mov	r6,zero
    abc4:	10c6983a 	sll	r3,r2,r3
    abc8:	3005883a 	mov	r2,r6
    abcc:	003ffa06 	br	abb8 <__ashldi3+0x2c>

0000abd0 <memset>:
    abd0:	2005883a 	mov	r2,r4
    abd4:	30000526 	beq	r6,zero,abec <memset+0x1c>
    abd8:	218d883a 	add	r6,r4,r6
    abdc:	2007883a 	mov	r3,r4
    abe0:	19400005 	stb	r5,0(r3)
    abe4:	18c00044 	addi	r3,r3,1
    abe8:	19bffd1e 	bne	r3,r6,abe0 <memset+0x10>
    abec:	f800283a 	ret

0000abf0 <_printf_r>:
    abf0:	defffd04 	addi	sp,sp,-12
    abf4:	dfc00015 	stw	ra,0(sp)
    abf8:	d9800115 	stw	r6,4(sp)
    abfc:	d9c00215 	stw	r7,8(sp)
    ac00:	20800217 	ldw	r2,8(r4)
    ac04:	00c00074 	movhi	r3,1
    ac08:	18ed2304 	addi	r3,r3,-19316
    ac0c:	280d883a 	mov	r6,r5
    ac10:	10c00115 	stw	r3,4(r2)
    ac14:	100b883a 	mov	r5,r2
    ac18:	d9c00104 	addi	r7,sp,4
    ac1c:	000ad340 	call	ad34 <___vfprintf_internal_r>
    ac20:	dfc00017 	ldw	ra,0(sp)
    ac24:	dec00304 	addi	sp,sp,12
    ac28:	f800283a 	ret

0000ac2c <printf>:
    ac2c:	defffc04 	addi	sp,sp,-16
    ac30:	dfc00015 	stw	ra,0(sp)
    ac34:	d9400115 	stw	r5,4(sp)
    ac38:	d9800215 	stw	r6,8(sp)
    ac3c:	d9c00315 	stw	r7,12(sp)
    ac40:	00800074 	movhi	r2,1
    ac44:	10b50e04 	addi	r2,r2,-11208
    ac48:	10800017 	ldw	r2,0(r2)
    ac4c:	00c00074 	movhi	r3,1
    ac50:	18ed2304 	addi	r3,r3,-19316
    ac54:	200b883a 	mov	r5,r4
    ac58:	10800217 	ldw	r2,8(r2)
    ac5c:	d9800104 	addi	r6,sp,4
    ac60:	10c00115 	stw	r3,4(r2)
    ac64:	1009883a 	mov	r4,r2
    ac68:	000b4680 	call	b468 <__vfprintf_internal>
    ac6c:	dfc00017 	ldw	ra,0(sp)
    ac70:	dec00404 	addi	sp,sp,16
    ac74:	f800283a 	ret

0000ac78 <_puts_r>:
    ac78:	defffd04 	addi	sp,sp,-12
    ac7c:	dc000015 	stw	r16,0(sp)
    ac80:	2021883a 	mov	r16,r4
    ac84:	2809883a 	mov	r4,r5
    ac88:	dfc00215 	stw	ra,8(sp)
    ac8c:	dc400115 	stw	r17,4(sp)
    ac90:	2823883a 	mov	r17,r5
    ac94:	000ad0c0 	call	ad0c <strlen>
    ac98:	81400217 	ldw	r5,8(r16)
    ac9c:	00c00074 	movhi	r3,1
    aca0:	18ed2304 	addi	r3,r3,-19316
    aca4:	880d883a 	mov	r6,r17
    aca8:	8009883a 	mov	r4,r16
    acac:	28c00115 	stw	r3,4(r5)
    acb0:	100f883a 	mov	r7,r2
    acb4:	183ee83a 	callr	r3
    acb8:	047fffc4 	movi	r17,-1
    acbc:	14400926 	beq	r2,r17,ace4 <_puts_r+0x6c>
    acc0:	81400217 	ldw	r5,8(r16)
    acc4:	8009883a 	mov	r4,r16
    acc8:	01800074 	movhi	r6,1
    accc:	31b43e04 	addi	r6,r6,-12040
    acd0:	28800117 	ldw	r2,4(r5)
    acd4:	01c00044 	movi	r7,1
    acd8:	103ee83a 	callr	r2
    acdc:	14400126 	beq	r2,r17,ace4 <_puts_r+0x6c>
    ace0:	0005883a 	mov	r2,zero
    ace4:	dfc00217 	ldw	ra,8(sp)
    ace8:	dc400117 	ldw	r17,4(sp)
    acec:	dc000017 	ldw	r16,0(sp)
    acf0:	dec00304 	addi	sp,sp,12
    acf4:	f800283a 	ret

0000acf8 <puts>:
    acf8:	00800074 	movhi	r2,1
    acfc:	10b50e04 	addi	r2,r2,-11208
    ad00:	200b883a 	mov	r5,r4
    ad04:	11000017 	ldw	r4,0(r2)
    ad08:	000ac781 	jmpi	ac78 <_puts_r>

0000ad0c <strlen>:
    ad0c:	20800007 	ldb	r2,0(r4)
    ad10:	10000626 	beq	r2,zero,ad2c <strlen+0x20>
    ad14:	2005883a 	mov	r2,r4
    ad18:	10800044 	addi	r2,r2,1
    ad1c:	10c00007 	ldb	r3,0(r2)
    ad20:	183ffd1e 	bne	r3,zero,ad18 <strlen+0xc>
    ad24:	1105c83a 	sub	r2,r2,r4
    ad28:	f800283a 	ret
    ad2c:	0005883a 	mov	r2,zero
    ad30:	f800283a 	ret

0000ad34 <___vfprintf_internal_r>:
    ad34:	deffe004 	addi	sp,sp,-128
    ad38:	d8c00804 	addi	r3,sp,32
    ad3c:	ddc01d15 	stw	r23,116(sp)
    ad40:	dd401b15 	stw	r21,108(sp)
    ad44:	dd001a15 	stw	r20,104(sp)
    ad48:	dcc01915 	stw	r19,100(sp)
    ad4c:	dc801815 	stw	r18,96(sp)
    ad50:	dc001615 	stw	r16,88(sp)
    ad54:	dfc01f15 	stw	ra,124(sp)
    ad58:	df001e15 	stw	fp,120(sp)
    ad5c:	dd801c15 	stw	r22,112(sp)
    ad60:	dc401715 	stw	r17,92(sp)
    ad64:	d9000f15 	stw	r4,60(sp)
    ad68:	d9c00e15 	stw	r7,56(sp)
    ad6c:	3021883a 	mov	r16,r6
    ad70:	0025883a 	mov	r18,zero
    ad74:	d8001415 	stw	zero,80(sp)
    ad78:	d8000d15 	stw	zero,52(sp)
    ad7c:	0029883a 	mov	r20,zero
    ad80:	d8000b15 	stw	zero,44(sp)
    ad84:	d8000c15 	stw	zero,48(sp)
    ad88:	d8001315 	stw	zero,76(sp)
    ad8c:	d8001015 	stw	zero,64(sp)
    ad90:	002b883a 	mov	r21,zero
    ad94:	04c00044 	movi	r19,1
    ad98:	d8c00a15 	stw	r3,40(sp)
    ad9c:	282f883a 	mov	r23,r5
    ada0:	80c00003 	ldbu	r3,0(r16)
    ada4:	84000044 	addi	r16,r16,1
    ada8:	18803fcc 	andi	r2,r3,255
    adac:	1080201c 	xori	r2,r2,128
    adb0:	10bfe004 	addi	r2,r2,-128
    adb4:	10001426 	beq	r2,zero,ae08 <___vfprintf_internal_r+0xd4>
    adb8:	acc03026 	beq	r21,r19,ae7c <___vfprintf_internal_r+0x148>
    adbc:	9d401f16 	blt	r19,r21,ae3c <___vfprintf_internal_r+0x108>
    adc0:	a83ff71e 	bne	r21,zero,ada0 <___vfprintf_internal_r+0x6c>
    adc4:	01000944 	movi	r4,37
    adc8:	1100d926 	beq	r2,r4,b130 <___vfprintf_internal_r+0x3fc>
    adcc:	b8800117 	ldw	r2,4(r23)
    add0:	d9000f17 	ldw	r4,60(sp)
    add4:	d8c00905 	stb	r3,36(sp)
    add8:	b80b883a 	mov	r5,r23
    addc:	d9800904 	addi	r6,sp,36
    ade0:	01c00044 	movi	r7,1
    ade4:	103ee83a 	callr	r2
    ade8:	1000a31e 	bne	r2,zero,b078 <___vfprintf_internal_r+0x344>
    adec:	80c00003 	ldbu	r3,0(r16)
    adf0:	94800044 	addi	r18,r18,1
    adf4:	84000044 	addi	r16,r16,1
    adf8:	18803fcc 	andi	r2,r3,255
    adfc:	1080201c 	xori	r2,r2,128
    ae00:	10bfe004 	addi	r2,r2,-128
    ae04:	103fec1e 	bne	r2,zero,adb8 <___vfprintf_internal_r+0x84>
    ae08:	9005883a 	mov	r2,r18
    ae0c:	dfc01f17 	ldw	ra,124(sp)
    ae10:	df001e17 	ldw	fp,120(sp)
    ae14:	ddc01d17 	ldw	r23,116(sp)
    ae18:	dd801c17 	ldw	r22,112(sp)
    ae1c:	dd401b17 	ldw	r21,108(sp)
    ae20:	dd001a17 	ldw	r20,104(sp)
    ae24:	dcc01917 	ldw	r19,100(sp)
    ae28:	dc801817 	ldw	r18,96(sp)
    ae2c:	dc401717 	ldw	r17,92(sp)
    ae30:	dc001617 	ldw	r16,88(sp)
    ae34:	dec02004 	addi	sp,sp,128
    ae38:	f800283a 	ret
    ae3c:	01000084 	movi	r4,2
    ae40:	a9001226 	beq	r21,r4,ae8c <___vfprintf_internal_r+0x158>
    ae44:	010000c4 	movi	r4,3
    ae48:	a93fd51e 	bne	r21,r4,ada0 <___vfprintf_internal_r+0x6c>
    ae4c:	1c7ff404 	addi	r17,r3,-48
    ae50:	8c403fcc 	andi	r17,r17,255
    ae54:	01000244 	movi	r4,9
    ae58:	24401b36 	bltu	r4,r17,aec8 <___vfprintf_internal_r+0x194>
    ae5c:	d9000b17 	ldw	r4,44(sp)
    ae60:	00bfffc4 	movi	r2,-1
    ae64:	2080ea26 	beq	r4,r2,b210 <___vfprintf_internal_r+0x4dc>
    ae68:	01400284 	movi	r5,10
    ae6c:	000a56c0 	call	a56c <__mulsi3>
    ae70:	88a3883a 	add	r17,r17,r2
    ae74:	dc400b15 	stw	r17,44(sp)
    ae78:	003fc906 	br	ada0 <___vfprintf_internal_r+0x6c>
    ae7c:	01000c04 	movi	r4,48
    ae80:	1100de26 	beq	r2,r4,b1fc <___vfprintf_internal_r+0x4c8>
    ae84:	01000944 	movi	r4,37
    ae88:	1100fd26 	beq	r2,r4,b280 <___vfprintf_internal_r+0x54c>
    ae8c:	1c7ff404 	addi	r17,r3,-48
    ae90:	8c403fcc 	andi	r17,r17,255
    ae94:	01000244 	movi	r4,9
    ae98:	24400936 	bltu	r4,r17,aec0 <___vfprintf_internal_r+0x18c>
    ae9c:	d9000c17 	ldw	r4,48(sp)
    aea0:	00bfffc4 	movi	r2,-1
    aea4:	2080d826 	beq	r4,r2,b208 <___vfprintf_internal_r+0x4d4>
    aea8:	01400284 	movi	r5,10
    aeac:	000a56c0 	call	a56c <__mulsi3>
    aeb0:	88a3883a 	add	r17,r17,r2
    aeb4:	dc400c15 	stw	r17,48(sp)
    aeb8:	05400084 	movi	r21,2
    aebc:	003fb806 	br	ada0 <___vfprintf_internal_r+0x6c>
    aec0:	01000b84 	movi	r4,46
    aec4:	1100a726 	beq	r2,r4,b164 <___vfprintf_internal_r+0x430>
    aec8:	01401b04 	movi	r5,108
    aecc:	1140a326 	beq	r2,r5,b15c <___vfprintf_internal_r+0x428>
    aed0:	d9000b17 	ldw	r4,44(sp)
    aed4:	00bfffc4 	movi	r2,-1
    aed8:	2080e626 	beq	r4,r2,b274 <___vfprintf_internal_r+0x540>
    aedc:	d8001015 	stw	zero,64(sp)
    aee0:	18ffea04 	addi	r3,r3,-88
    aee4:	18c03fcc 	andi	r3,r3,255
    aee8:	00800804 	movi	r2,32
    aeec:	10c0022e 	bgeu	r2,r3,aef8 <___vfprintf_internal_r+0x1c4>
    aef0:	002b883a 	mov	r21,zero
    aef4:	003faa06 	br	ada0 <___vfprintf_internal_r+0x6c>
    aef8:	18c7883a 	add	r3,r3,r3
    aefc:	18c7883a 	add	r3,r3,r3
    af00:	01400074 	movhi	r5,1
    af04:	296bc504 	addi	r5,r5,-20716
    af08:	1947883a 	add	r3,r3,r5
    af0c:	18800017 	ldw	r2,0(r3)
    af10:	1000683a 	jmp	r2
    af14:	0000b2ac 	andhi	zero,zero,714
    af18:	0000aef0 	cmpltui	zero,zero,699
    af1c:	0000aef0 	cmpltui	zero,zero,699
    af20:	0000aef0 	cmpltui	zero,zero,699
    af24:	0000aef0 	cmpltui	zero,zero,699
    af28:	0000aef0 	cmpltui	zero,zero,699
    af2c:	0000aef0 	cmpltui	zero,zero,699
    af30:	0000aef0 	cmpltui	zero,zero,699
    af34:	0000aef0 	cmpltui	zero,zero,699
    af38:	0000aef0 	cmpltui	zero,zero,699
    af3c:	0000aef0 	cmpltui	zero,zero,699
    af40:	0000b2bc 	xorhi	zero,zero,714
    af44:	0000af98 	cmpnei	zero,zero,702
    af48:	0000aef0 	cmpltui	zero,zero,699
    af4c:	0000aef0 	cmpltui	zero,zero,699
    af50:	0000aef0 	cmpltui	zero,zero,699
    af54:	0000aef0 	cmpltui	zero,zero,699
    af58:	0000af98 	cmpnei	zero,zero,702
    af5c:	0000aef0 	cmpltui	zero,zero,699
    af60:	0000aef0 	cmpltui	zero,zero,699
    af64:	0000aef0 	cmpltui	zero,zero,699
    af68:	0000aef0 	cmpltui	zero,zero,699
    af6c:	0000aef0 	cmpltui	zero,zero,699
    af70:	0000b080 	call	b08 <__alt_mem_onchip_mem-0x74f8>
    af74:	0000aef0 	cmpltui	zero,zero,699
    af78:	0000aef0 	cmpltui	zero,zero,699
    af7c:	0000aef0 	cmpltui	zero,zero,699
    af80:	0000b308 	cmpgei	zero,zero,716
    af84:	0000aef0 	cmpltui	zero,zero,699
    af88:	0000b084 	movi	zero,706
    af8c:	0000aef0 	cmpltui	zero,zero,699
    af90:	0000aef0 	cmpltui	zero,zero,699
    af94:	0000b2b4 	movhi	zero,714
    af98:	d8c00d17 	ldw	r3,52(sp)
    af9c:	18003926 	beq	r3,zero,b084 <___vfprintf_internal_r+0x350>
    afa0:	d9000e17 	ldw	r4,56(sp)
    afa4:	00c00044 	movi	r3,1
    afa8:	25400017 	ldw	r21,0(r4)
    afac:	21000104 	addi	r4,r4,4
    afb0:	d9000e15 	stw	r4,56(sp)
    afb4:	d8c00d15 	stw	r3,52(sp)
    afb8:	a8012116 	blt	r21,zero,b440 <___vfprintf_internal_r+0x70c>
    afbc:	d8001215 	stw	zero,72(sp)
    afc0:	d823883a 	mov	r17,sp
    afc4:	a800371e 	bne	r21,zero,b0a4 <___vfprintf_internal_r+0x370>
    afc8:	d9400b17 	ldw	r5,44(sp)
    afcc:	d809883a 	mov	r4,sp
    afd0:	01400b0e 	bge	zero,r5,b000 <___vfprintf_internal_r+0x2cc>
    afd4:	d8800b17 	ldw	r2,44(sp)
    afd8:	d823883a 	mov	r17,sp
    afdc:	00c00c04 	movi	r3,48
    afe0:	00000206 	br	afec <___vfprintf_internal_r+0x2b8>
    afe4:	d9400a17 	ldw	r5,40(sp)
    afe8:	89400426 	beq	r17,r5,affc <___vfprintf_internal_r+0x2c8>
    afec:	88c00005 	stb	r3,0(r17)
    aff0:	10bfffc4 	addi	r2,r2,-1
    aff4:	8c400044 	addi	r17,r17,1
    aff8:	103ffa1e 	bne	r2,zero,afe4 <___vfprintf_internal_r+0x2b0>
    affc:	892bc83a 	sub	r21,r17,r4
    b000:	d8c01217 	ldw	r3,72(sp)
    b004:	d9000c17 	ldw	r4,48(sp)
    b008:	a8c5883a 	add	r2,r21,r3
    b00c:	d8c01017 	ldw	r3,64(sp)
    b010:	2085c83a 	sub	r2,r4,r2
    b014:	d8801115 	stw	r2,68(sp)
    b018:	18007f26 	beq	r3,zero,b218 <___vfprintf_internal_r+0x4e4>
    b01c:	d8c01217 	ldw	r3,72(sp)
    b020:	1800fa1e 	bne	r3,zero,b40c <___vfprintf_internal_r+0x6d8>
    b024:	d8c01117 	ldw	r3,68(sp)
    b028:	00c0620e 	bge	zero,r3,b1b4 <___vfprintf_internal_r+0x480>
    b02c:	00800c04 	movi	r2,48
    b030:	d88008c5 	stb	r2,35(sp)
    b034:	b805883a 	mov	r2,r23
    b038:	dc001215 	stw	r16,72(sp)
    b03c:	882f883a 	mov	r23,r17
    b040:	1f3fffc4 	addi	fp,r3,-1
    b044:	05bfffc4 	movi	r22,-1
    b048:	dc000f17 	ldw	r16,60(sp)
    b04c:	1023883a 	mov	r17,r2
    b050:	00000206 	br	b05c <___vfprintf_internal_r+0x328>
    b054:	e73fffc4 	addi	fp,fp,-1
    b058:	e580fc26 	beq	fp,r22,b44c <___vfprintf_internal_r+0x718>
    b05c:	88800117 	ldw	r2,4(r17)
    b060:	8009883a 	mov	r4,r16
    b064:	880b883a 	mov	r5,r17
    b068:	d98008c4 	addi	r6,sp,35
    b06c:	01c00044 	movi	r7,1
    b070:	103ee83a 	callr	r2
    b074:	103ff726 	beq	r2,zero,b054 <___vfprintf_internal_r+0x320>
    b078:	04bfffc4 	movi	r18,-1
    b07c:	003f6206 	br	ae08 <___vfprintf_internal_r+0xd4>
    b080:	05000204 	movi	r20,8
    b084:	d9400e17 	ldw	r5,56(sp)
    b088:	2d400017 	ldw	r21,0(r5)
    b08c:	29400104 	addi	r5,r5,4
    b090:	d9400e15 	stw	r5,56(sp)
    b094:	d8000d15 	stw	zero,52(sp)
    b098:	d8001215 	stw	zero,72(sp)
    b09c:	d823883a 	mov	r17,sp
    b0a0:	a83fc926 	beq	r21,zero,afc8 <___vfprintf_internal_r+0x294>
    b0a4:	05800244 	movi	r22,9
    b0a8:	dc001115 	stw	r16,68(sp)
    b0ac:	df001417 	ldw	fp,80(sp)
    b0b0:	00000506 	br	b0c8 <___vfprintf_internal_r+0x394>
    b0b4:	15400c04 	addi	r21,r2,48
    b0b8:	8d400005 	stb	r21,0(r17)
    b0bc:	802b883a 	mov	r21,r16
    b0c0:	8c400044 	addi	r17,r17,1
    b0c4:	80000f26 	beq	r16,zero,b104 <___vfprintf_internal_r+0x3d0>
    b0c8:	a809883a 	mov	r4,r21
    b0cc:	a00b883a 	mov	r5,r20
    b0d0:	000a55c0 	call	a55c <__udivsi3>
    b0d4:	a009883a 	mov	r4,r20
    b0d8:	100b883a 	mov	r5,r2
    b0dc:	1021883a 	mov	r16,r2
    b0e0:	000a56c0 	call	a56c <__mulsi3>
    b0e4:	a885c83a 	sub	r2,r21,r2
    b0e8:	b0bff20e 	bge	r22,r2,b0b4 <___vfprintf_internal_r+0x380>
    b0ec:	e0000e26 	beq	fp,zero,b128 <___vfprintf_internal_r+0x3f4>
    b0f0:	15400dc4 	addi	r21,r2,55
    b0f4:	8d400005 	stb	r21,0(r17)
    b0f8:	802b883a 	mov	r21,r16
    b0fc:	8c400044 	addi	r17,r17,1
    b100:	803ff11e 	bne	r16,zero,b0c8 <___vfprintf_internal_r+0x394>
    b104:	d9000b17 	ldw	r4,44(sp)
    b108:	8eebc83a 	sub	r21,r17,sp
    b10c:	dc001117 	ldw	r16,68(sp)
    b110:	2545c83a 	sub	r2,r4,r21
    b114:	d809883a 	mov	r4,sp
    b118:	00bfb90e 	bge	zero,r2,b000 <___vfprintf_internal_r+0x2cc>
    b11c:	d8c00a17 	ldw	r3,40(sp)
    b120:	88ffae36 	bltu	r17,r3,afdc <___vfprintf_internal_r+0x2a8>
    b124:	003fb606 	br	b000 <___vfprintf_internal_r+0x2cc>
    b128:	154015c4 	addi	r21,r2,87
    b12c:	003fe206 	br	b0b8 <___vfprintf_internal_r+0x384>
    b130:	00c00044 	movi	r3,1
    b134:	013fffc4 	movi	r4,-1
    b138:	d8c00d15 	stw	r3,52(sp)
    b13c:	d9000b15 	stw	r4,44(sp)
    b140:	d8001415 	stw	zero,80(sp)
    b144:	05000284 	movi	r20,10
    b148:	d9000c15 	stw	r4,48(sp)
    b14c:	d8001315 	stw	zero,76(sp)
    b150:	d8001015 	stw	zero,64(sp)
    b154:	182b883a 	mov	r21,r3
    b158:	003f1106 	br	ada0 <___vfprintf_internal_r+0x6c>
    b15c:	00c00044 	movi	r3,1
    b160:	d8c01315 	stw	r3,76(sp)
    b164:	054000c4 	movi	r21,3
    b168:	003f0d06 	br	ada0 <___vfprintf_internal_r+0x6c>
    b16c:	d8c01117 	ldw	r3,68(sp)
    b170:	dc001517 	ldw	r16,84(sp)
    b174:	8805883a 	mov	r2,r17
    b178:	90e5883a 	add	r18,r18,r3
    b17c:	b823883a 	mov	r17,r23
    b180:	102f883a 	mov	r23,r2
    b184:	d8c01217 	ldw	r3,72(sp)
    b188:	18000a26 	beq	r3,zero,b1b4 <___vfprintf_internal_r+0x480>
    b18c:	b8800117 	ldw	r2,4(r23)
    b190:	d9000f17 	ldw	r4,60(sp)
    b194:	00c00b44 	movi	r3,45
    b198:	d8c00905 	stb	r3,36(sp)
    b19c:	b80b883a 	mov	r5,r23
    b1a0:	d9800904 	addi	r6,sp,36
    b1a4:	01c00044 	movi	r7,1
    b1a8:	103ee83a 	callr	r2
    b1ac:	103fb21e 	bne	r2,zero,b078 <___vfprintf_internal_r+0x344>
    b1b0:	94800044 	addi	r18,r18,1
    b1b4:	8d6dc83a 	sub	r22,r17,r21
    b1b8:	057f4d0e 	bge	zero,r21,aef0 <___vfprintf_internal_r+0x1bc>
    b1bc:	dd400f17 	ldw	r21,60(sp)
    b1c0:	00000206 	br	b1cc <___vfprintf_internal_r+0x498>
    b1c4:	94800044 	addi	r18,r18,1
    b1c8:	8dbf4926 	beq	r17,r22,aef0 <___vfprintf_internal_r+0x1bc>
    b1cc:	8c7fffc4 	addi	r17,r17,-1
    b1d0:	88c00003 	ldbu	r3,0(r17)
    b1d4:	b8800117 	ldw	r2,4(r23)
    b1d8:	a809883a 	mov	r4,r21
    b1dc:	d8c00905 	stb	r3,36(sp)
    b1e0:	b80b883a 	mov	r5,r23
    b1e4:	d9800904 	addi	r6,sp,36
    b1e8:	01c00044 	movi	r7,1
    b1ec:	103ee83a 	callr	r2
    b1f0:	103ff426 	beq	r2,zero,b1c4 <___vfprintf_internal_r+0x490>
    b1f4:	04bfffc4 	movi	r18,-1
    b1f8:	003f0306 	br	ae08 <___vfprintf_internal_r+0xd4>
    b1fc:	dd401015 	stw	r21,64(sp)
    b200:	05400084 	movi	r21,2
    b204:	003ee606 	br	ada0 <___vfprintf_internal_r+0x6c>
    b208:	0005883a 	mov	r2,zero
    b20c:	003f2806 	br	aeb0 <___vfprintf_internal_r+0x17c>
    b210:	0005883a 	mov	r2,zero
    b214:	003f1606 	br	ae70 <___vfprintf_internal_r+0x13c>
    b218:	d8c01117 	ldw	r3,68(sp)
    b21c:	00ffd90e 	bge	zero,r3,b184 <___vfprintf_internal_r+0x450>
    b220:	00800804 	movi	r2,32
    b224:	d8800885 	stb	r2,34(sp)
    b228:	b805883a 	mov	r2,r23
    b22c:	dc001515 	stw	r16,84(sp)
    b230:	882f883a 	mov	r23,r17
    b234:	1f3fffc4 	addi	fp,r3,-1
    b238:	05bfffc4 	movi	r22,-1
    b23c:	dc000f17 	ldw	r16,60(sp)
    b240:	1023883a 	mov	r17,r2
    b244:	00000206 	br	b250 <___vfprintf_internal_r+0x51c>
    b248:	e73fffc4 	addi	fp,fp,-1
    b24c:	e5bfc726 	beq	fp,r22,b16c <___vfprintf_internal_r+0x438>
    b250:	88800117 	ldw	r2,4(r17)
    b254:	8009883a 	mov	r4,r16
    b258:	880b883a 	mov	r5,r17
    b25c:	d9800884 	addi	r6,sp,34
    b260:	01c00044 	movi	r7,1
    b264:	103ee83a 	callr	r2
    b268:	103ff726 	beq	r2,zero,b248 <___vfprintf_internal_r+0x514>
    b26c:	04bfffc4 	movi	r18,-1
    b270:	003ee506 	br	ae08 <___vfprintf_internal_r+0xd4>
    b274:	01000044 	movi	r4,1
    b278:	d9000b15 	stw	r4,44(sp)
    b27c:	003f1806 	br	aee0 <___vfprintf_internal_r+0x1ac>
    b280:	b8c00117 	ldw	r3,4(r23)
    b284:	d9000f17 	ldw	r4,60(sp)
    b288:	d8800905 	stb	r2,36(sp)
    b28c:	b80b883a 	mov	r5,r23
    b290:	d9800904 	addi	r6,sp,36
    b294:	a80f883a 	mov	r7,r21
    b298:	183ee83a 	callr	r3
    b29c:	103f761e 	bne	r2,zero,b078 <___vfprintf_internal_r+0x344>
    b2a0:	94800044 	addi	r18,r18,1
    b2a4:	002b883a 	mov	r21,zero
    b2a8:	003ebd06 	br	ada0 <___vfprintf_internal_r+0x6c>
    b2ac:	00c00044 	movi	r3,1
    b2b0:	d8c01415 	stw	r3,80(sp)
    b2b4:	05000404 	movi	r20,16
    b2b8:	003f7206 	br	b084 <___vfprintf_internal_r+0x350>
    b2bc:	d9000c17 	ldw	r4,48(sp)
    b2c0:	9900420e 	bge	r19,r4,b3cc <___vfprintf_internal_r+0x698>
    b2c4:	df000f17 	ldw	fp,60(sp)
    b2c8:	25bfffc4 	addi	r22,r4,-1
    b2cc:	00800804 	movi	r2,32
    b2d0:	d8800845 	stb	r2,33(sp)
    b2d4:	b023883a 	mov	r17,r22
    b2d8:	057fffc4 	movi	r21,-1
    b2dc:	8c7fffc4 	addi	r17,r17,-1
    b2e0:	8d403926 	beq	r17,r21,b3c8 <___vfprintf_internal_r+0x694>
    b2e4:	b8800117 	ldw	r2,4(r23)
    b2e8:	e009883a 	mov	r4,fp
    b2ec:	b80b883a 	mov	r5,r23
    b2f0:	d9800844 	addi	r6,sp,33
    b2f4:	01c00044 	movi	r7,1
    b2f8:	103ee83a 	callr	r2
    b2fc:	103ff726 	beq	r2,zero,b2dc <___vfprintf_internal_r+0x5a8>
    b300:	04bfffc4 	movi	r18,-1
    b304:	003ec006 	br	ae08 <___vfprintf_internal_r+0xd4>
    b308:	d9000e17 	ldw	r4,56(sp)
    b30c:	d8c00e17 	ldw	r3,56(sp)
    b310:	21000017 	ldw	r4,0(r4)
    b314:	18c00104 	addi	r3,r3,4
    b318:	d8c00e15 	stw	r3,56(sp)
    b31c:	d9001215 	stw	r4,72(sp)
    b320:	000ad0c0 	call	ad0c <strlen>
    b324:	d9000c17 	ldw	r4,48(sp)
    b328:	102d883a 	mov	r22,r2
    b32c:	20b9c83a 	sub	fp,r4,r2
    b330:	07001b0e 	bge	zero,fp,b3a0 <___vfprintf_internal_r+0x66c>
    b334:	00800804 	movi	r2,32
    b338:	d8800805 	stb	r2,32(sp)
    b33c:	b805883a 	mov	r2,r23
    b340:	dc001115 	stw	r16,68(sp)
    b344:	b02f883a 	mov	r23,r22
    b348:	e47fffc4 	addi	r17,fp,-1
    b34c:	902d883a 	mov	r22,r18
    b350:	057fffc4 	movi	r21,-1
    b354:	dc000f17 	ldw	r16,60(sp)
    b358:	1025883a 	mov	r18,r2
    b35c:	00000206 	br	b368 <___vfprintf_internal_r+0x634>
    b360:	8c7fffc4 	addi	r17,r17,-1
    b364:	8d400826 	beq	r17,r21,b388 <___vfprintf_internal_r+0x654>
    b368:	90800117 	ldw	r2,4(r18)
    b36c:	8009883a 	mov	r4,r16
    b370:	900b883a 	mov	r5,r18
    b374:	d9800804 	addi	r6,sp,32
    b378:	01c00044 	movi	r7,1
    b37c:	103ee83a 	callr	r2
    b380:	103ff726 	beq	r2,zero,b360 <___vfprintf_internal_r+0x62c>
    b384:	003f3c06 	br	b078 <___vfprintf_internal_r+0x344>
    b388:	dc001117 	ldw	r16,68(sp)
    b38c:	9005883a 	mov	r2,r18
    b390:	b025883a 	mov	r18,r22
    b394:	9725883a 	add	r18,r18,fp
    b398:	b82d883a 	mov	r22,r23
    b39c:	102f883a 	mov	r23,r2
    b3a0:	b8800117 	ldw	r2,4(r23)
    b3a4:	d9000f17 	ldw	r4,60(sp)
    b3a8:	d9801217 	ldw	r6,72(sp)
    b3ac:	b80b883a 	mov	r5,r23
    b3b0:	b00f883a 	mov	r7,r22
    b3b4:	103ee83a 	callr	r2
    b3b8:	103f2f1e 	bne	r2,zero,b078 <___vfprintf_internal_r+0x344>
    b3bc:	95a5883a 	add	r18,r18,r22
    b3c0:	002b883a 	mov	r21,zero
    b3c4:	003e7606 	br	ada0 <___vfprintf_internal_r+0x6c>
    b3c8:	95a5883a 	add	r18,r18,r22
    b3cc:	d9400e17 	ldw	r5,56(sp)
    b3d0:	b8800117 	ldw	r2,4(r23)
    b3d4:	d9000f17 	ldw	r4,60(sp)
    b3d8:	28c00017 	ldw	r3,0(r5)
    b3dc:	d9800904 	addi	r6,sp,36
    b3e0:	b80b883a 	mov	r5,r23
    b3e4:	d8c00905 	stb	r3,36(sp)
    b3e8:	d8c00e17 	ldw	r3,56(sp)
    b3ec:	01c00044 	movi	r7,1
    b3f0:	1c400104 	addi	r17,r3,4
    b3f4:	103ee83a 	callr	r2
    b3f8:	103f1f1e 	bne	r2,zero,b078 <___vfprintf_internal_r+0x344>
    b3fc:	94800044 	addi	r18,r18,1
    b400:	dc400e15 	stw	r17,56(sp)
    b404:	002b883a 	mov	r21,zero
    b408:	003e6506 	br	ada0 <___vfprintf_internal_r+0x6c>
    b40c:	b8800117 	ldw	r2,4(r23)
    b410:	d9000f17 	ldw	r4,60(sp)
    b414:	00c00b44 	movi	r3,45
    b418:	d8c00905 	stb	r3,36(sp)
    b41c:	b80b883a 	mov	r5,r23
    b420:	d9800904 	addi	r6,sp,36
    b424:	01c00044 	movi	r7,1
    b428:	103ee83a 	callr	r2
    b42c:	103f121e 	bne	r2,zero,b078 <___vfprintf_internal_r+0x344>
    b430:	d8c01117 	ldw	r3,68(sp)
    b434:	94800044 	addi	r18,r18,1
    b438:	00fefc16 	blt	zero,r3,b02c <___vfprintf_internal_r+0x2f8>
    b43c:	003f5d06 	br	b1b4 <___vfprintf_internal_r+0x480>
    b440:	056bc83a 	sub	r21,zero,r21
    b444:	d8c01215 	stw	r3,72(sp)
    b448:	003f1406 	br	b09c <___vfprintf_internal_r+0x368>
    b44c:	d8c01117 	ldw	r3,68(sp)
    b450:	8805883a 	mov	r2,r17
    b454:	dc001217 	ldw	r16,72(sp)
    b458:	b823883a 	mov	r17,r23
    b45c:	90e5883a 	add	r18,r18,r3
    b460:	102f883a 	mov	r23,r2
    b464:	003f5306 	br	b1b4 <___vfprintf_internal_r+0x480>

0000b468 <__vfprintf_internal>:
    b468:	00800074 	movhi	r2,1
    b46c:	10b50e04 	addi	r2,r2,-11208
    b470:	2007883a 	mov	r3,r4
    b474:	11000017 	ldw	r4,0(r2)
    b478:	2805883a 	mov	r2,r5
    b47c:	300f883a 	mov	r7,r6
    b480:	180b883a 	mov	r5,r3
    b484:	100d883a 	mov	r6,r2
    b488:	000ad341 	jmpi	ad34 <___vfprintf_internal_r>

0000b48c <__sfvwrite_small_dev>:
    b48c:	2880000b 	ldhu	r2,0(r5)
    b490:	defffa04 	addi	sp,sp,-24
    b494:	dcc00315 	stw	r19,12(sp)
    b498:	10c0020c 	andi	r3,r2,8
    b49c:	18ffffcc 	andi	r3,r3,65535
    b4a0:	18e0001c 	xori	r3,r3,32768
    b4a4:	dc800215 	stw	r18,8(sp)
    b4a8:	dc400115 	stw	r17,4(sp)
    b4ac:	dfc00515 	stw	ra,20(sp)
    b4b0:	dd000415 	stw	r20,16(sp)
    b4b4:	dc000015 	stw	r16,0(sp)
    b4b8:	18e00004 	addi	r3,r3,-32768
    b4bc:	2825883a 	mov	r18,r5
    b4c0:	2027883a 	mov	r19,r4
    b4c4:	3023883a 	mov	r17,r6
    b4c8:	18002626 	beq	r3,zero,b564 <__sfvwrite_small_dev+0xd8>
    b4cc:	2940008f 	ldh	r5,2(r5)
    b4d0:	28001016 	blt	r5,zero,b514 <__sfvwrite_small_dev+0x88>
    b4d4:	01c01a0e 	bge	zero,r7,b540 <__sfvwrite_small_dev+0xb4>
    b4d8:	3821883a 	mov	r16,r7
    b4dc:	05010004 	movi	r20,1024
    b4e0:	00000306 	br	b4f0 <__sfvwrite_small_dev+0x64>
    b4e4:	88a3883a 	add	r17,r17,r2
    b4e8:	0400150e 	bge	zero,r16,b540 <__sfvwrite_small_dev+0xb4>
    b4ec:	9140008f 	ldh	r5,2(r18)
    b4f0:	880d883a 	mov	r6,r17
    b4f4:	9809883a 	mov	r4,r19
    b4f8:	800f883a 	mov	r7,r16
    b4fc:	a400010e 	bge	r20,r16,b504 <__sfvwrite_small_dev+0x78>
    b500:	01c10004 	movi	r7,1024
    b504:	000b56c0 	call	b56c <_write_r>
    b508:	80a1c83a 	sub	r16,r16,r2
    b50c:	00bff516 	blt	zero,r2,b4e4 <__sfvwrite_small_dev+0x58>
    b510:	9080000b 	ldhu	r2,0(r18)
    b514:	10801014 	ori	r2,r2,64
    b518:	9080000d 	sth	r2,0(r18)
    b51c:	00bfffc4 	movi	r2,-1
    b520:	dfc00517 	ldw	ra,20(sp)
    b524:	dd000417 	ldw	r20,16(sp)
    b528:	dcc00317 	ldw	r19,12(sp)
    b52c:	dc800217 	ldw	r18,8(sp)
    b530:	dc400117 	ldw	r17,4(sp)
    b534:	dc000017 	ldw	r16,0(sp)
    b538:	dec00604 	addi	sp,sp,24
    b53c:	f800283a 	ret
    b540:	0005883a 	mov	r2,zero
    b544:	dfc00517 	ldw	ra,20(sp)
    b548:	dd000417 	ldw	r20,16(sp)
    b54c:	dcc00317 	ldw	r19,12(sp)
    b550:	dc800217 	ldw	r18,8(sp)
    b554:	dc400117 	ldw	r17,4(sp)
    b558:	dc000017 	ldw	r16,0(sp)
    b55c:	dec00604 	addi	sp,sp,24
    b560:	f800283a 	ret
    b564:	00bfffc4 	movi	r2,-1
    b568:	003fed06 	br	b520 <__sfvwrite_small_dev+0x94>

0000b56c <_write_r>:
    b56c:	defffd04 	addi	sp,sp,-12
    b570:	dc400115 	stw	r17,4(sp)
    b574:	dc000015 	stw	r16,0(sp)
    b578:	2023883a 	mov	r17,r4
    b57c:	04000074 	movhi	r16,1
    b580:	8435eb04 	addi	r16,r16,-10324
    b584:	2809883a 	mov	r4,r5
    b588:	300b883a 	mov	r5,r6
    b58c:	380d883a 	mov	r6,r7
    b590:	dfc00215 	stw	ra,8(sp)
    b594:	80000015 	stw	zero,0(r16)
    b598:	000b92c0 	call	b92c <write>
    b59c:	00ffffc4 	movi	r3,-1
    b5a0:	10c00526 	beq	r2,r3,b5b8 <_write_r+0x4c>
    b5a4:	dfc00217 	ldw	ra,8(sp)
    b5a8:	dc400117 	ldw	r17,4(sp)
    b5ac:	dc000017 	ldw	r16,0(sp)
    b5b0:	dec00304 	addi	sp,sp,12
    b5b4:	f800283a 	ret
    b5b8:	80c00017 	ldw	r3,0(r16)
    b5bc:	183ff926 	beq	r3,zero,b5a4 <_write_r+0x38>
    b5c0:	88c00015 	stw	r3,0(r17)
    b5c4:	dfc00217 	ldw	ra,8(sp)
    b5c8:	dc400117 	ldw	r17,4(sp)
    b5cc:	dc000017 	ldw	r16,0(sp)
    b5d0:	dec00304 	addi	sp,sp,12
    b5d4:	f800283a 	ret

0000b5d8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b5d8:	defff004 	addi	sp,sp,-64
    b5dc:	df000f15 	stw	fp,60(sp)
    b5e0:	df000f04 	addi	fp,sp,60
    b5e4:	e13ffd15 	stw	r4,-12(fp)
    b5e8:	e17ffe15 	stw	r5,-8(fp)
    b5ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    b5f0:	00bffa84 	movi	r2,-22
    b5f4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b5f8:	e0bffd17 	ldw	r2,-12(fp)
    b5fc:	10800828 	cmpgeui	r2,r2,32
    b600:	10005c1e 	bne	r2,zero,b774 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b604:	0005303a 	rdctl	r2,status
    b608:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b60c:	e0fff317 	ldw	r3,-52(fp)
    b610:	00bfff84 	movi	r2,-2
    b614:	1884703a 	and	r2,r3,r2
    b618:	1001703a 	wrctl	status,r2
  
  return context;
    b61c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b620:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    b624:	00c00074 	movhi	r3,1
    b628:	18f82a04 	addi	r3,r3,-8024
    b62c:	e0bffd17 	ldw	r2,-12(fp)
    b630:	100490fa 	slli	r2,r2,3
    b634:	1885883a 	add	r2,r3,r2
    b638:	e0ffff17 	ldw	r3,-4(fp)
    b63c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    b640:	00c00074 	movhi	r3,1
    b644:	18f82a04 	addi	r3,r3,-8024
    b648:	e0bffd17 	ldw	r2,-12(fp)
    b64c:	100490fa 	slli	r2,r2,3
    b650:	1885883a 	add	r2,r3,r2
    b654:	10800104 	addi	r2,r2,4
    b658:	e0fffe17 	ldw	r3,-8(fp)
    b65c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b660:	e0bfff17 	ldw	r2,-4(fp)
    b664:	10001f26 	beq	r2,zero,b6e4 <alt_irq_register+0x10c>
    b668:	e0bffd17 	ldw	r2,-12(fp)
    b66c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b670:	0005303a 	rdctl	r2,status
    b674:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b678:	e0fff517 	ldw	r3,-44(fp)
    b67c:	00bfff84 	movi	r2,-2
    b680:	1884703a 	and	r2,r3,r2
    b684:	1001703a 	wrctl	status,r2
  
  return context;
    b688:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b68c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    b690:	e0bff417 	ldw	r2,-48(fp)
    b694:	00c00044 	movi	r3,1
    b698:	1884983a 	sll	r2,r3,r2
    b69c:	1007883a 	mov	r3,r2
    b6a0:	00800074 	movhi	r2,1
    b6a4:	10b5ec04 	addi	r2,r2,-10320
    b6a8:	10800017 	ldw	r2,0(r2)
    b6ac:	1886b03a 	or	r3,r3,r2
    b6b0:	00800074 	movhi	r2,1
    b6b4:	10b5ec04 	addi	r2,r2,-10320
    b6b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b6bc:	00800074 	movhi	r2,1
    b6c0:	10b5ec04 	addi	r2,r2,-10320
    b6c4:	10800017 	ldw	r2,0(r2)
    b6c8:	100170fa 	wrctl	ienable,r2
    b6cc:	e0bff617 	ldw	r2,-40(fp)
    b6d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6d4:	e0bff717 	ldw	r2,-36(fp)
    b6d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b6dc:	0005883a 	mov	r2,zero
    b6e0:	00001f06 	br	b760 <alt_irq_register+0x188>
    b6e4:	e0bffd17 	ldw	r2,-12(fp)
    b6e8:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b6ec:	0005303a 	rdctl	r2,status
    b6f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b6f4:	e0fff917 	ldw	r3,-28(fp)
    b6f8:	00bfff84 	movi	r2,-2
    b6fc:	1884703a 	and	r2,r3,r2
    b700:	1001703a 	wrctl	status,r2
  
  return context;
    b704:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b708:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    b70c:	e0bff817 	ldw	r2,-32(fp)
    b710:	00c00044 	movi	r3,1
    b714:	1884983a 	sll	r2,r3,r2
    b718:	0084303a 	nor	r2,zero,r2
    b71c:	1007883a 	mov	r3,r2
    b720:	00800074 	movhi	r2,1
    b724:	10b5ec04 	addi	r2,r2,-10320
    b728:	10800017 	ldw	r2,0(r2)
    b72c:	1886703a 	and	r3,r3,r2
    b730:	00800074 	movhi	r2,1
    b734:	10b5ec04 	addi	r2,r2,-10320
    b738:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b73c:	00800074 	movhi	r2,1
    b740:	10b5ec04 	addi	r2,r2,-10320
    b744:	10800017 	ldw	r2,0(r2)
    b748:	100170fa 	wrctl	ienable,r2
    b74c:	e0bffa17 	ldw	r2,-24(fp)
    b750:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b754:	e0bffb17 	ldw	r2,-20(fp)
    b758:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b75c:	0005883a 	mov	r2,zero
    b760:	e0bff115 	stw	r2,-60(fp)
    b764:	e0bff217 	ldw	r2,-56(fp)
    b768:	e0bffc15 	stw	r2,-16(fp)
    b76c:	e0bffc17 	ldw	r2,-16(fp)
    b770:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    b774:	e0bff117 	ldw	r2,-60(fp)
}
    b778:	e037883a 	mov	sp,fp
    b77c:	df000017 	ldw	fp,0(sp)
    b780:	dec00104 	addi	sp,sp,4
    b784:	f800283a 	ret

0000b788 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b788:	defffc04 	addi	sp,sp,-16
    b78c:	df000315 	stw	fp,12(sp)
    b790:	df000304 	addi	fp,sp,12
    b794:	e13ffd15 	stw	r4,-12(fp)
    b798:	e17ffe15 	stw	r5,-8(fp)
    b79c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b7a0:	e0fffe17 	ldw	r3,-8(fp)
    b7a4:	e0bffd17 	ldw	r2,-12(fp)
    b7a8:	18800e26 	beq	r3,r2,b7e4 <alt_load_section+0x5c>
  {
    while( to != end )
    b7ac:	00000a06 	br	b7d8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b7b0:	e0bffd17 	ldw	r2,-12(fp)
    b7b4:	10c00017 	ldw	r3,0(r2)
    b7b8:	e0bffe17 	ldw	r2,-8(fp)
    b7bc:	10c00015 	stw	r3,0(r2)
    b7c0:	e0bffe17 	ldw	r2,-8(fp)
    b7c4:	10800104 	addi	r2,r2,4
    b7c8:	e0bffe15 	stw	r2,-8(fp)
    b7cc:	e0bffd17 	ldw	r2,-12(fp)
    b7d0:	10800104 	addi	r2,r2,4
    b7d4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b7d8:	e0fffe17 	ldw	r3,-8(fp)
    b7dc:	e0bfff17 	ldw	r2,-4(fp)
    b7e0:	18bff31e 	bne	r3,r2,b7b0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b7e4:	e037883a 	mov	sp,fp
    b7e8:	df000017 	ldw	fp,0(sp)
    b7ec:	dec00104 	addi	sp,sp,4
    b7f0:	f800283a 	ret

0000b7f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b7f4:	defffe04 	addi	sp,sp,-8
    b7f8:	dfc00115 	stw	ra,4(sp)
    b7fc:	df000015 	stw	fp,0(sp)
    b800:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b804:	01000074 	movhi	r4,1
    b808:	21351804 	addi	r4,r4,-11168
    b80c:	01400074 	movhi	r5,1
    b810:	29744d04 	addi	r5,r5,-11980
    b814:	01800074 	movhi	r6,1
    b818:	31b51804 	addi	r6,r6,-11168
    b81c:	000b7880 	call	b788 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b820:	01000074 	movhi	r4,1
    b824:	21200804 	addi	r4,r4,-32736
    b828:	01400074 	movhi	r5,1
    b82c:	29600804 	addi	r5,r5,-32736
    b830:	01800074 	movhi	r6,1
    b834:	31a06f04 	addi	r6,r6,-32324
    b838:	000b7880 	call	b788 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b83c:	01000074 	movhi	r4,1
    b840:	2133d404 	addi	r4,r4,-12464
    b844:	01400074 	movhi	r5,1
    b848:	2973d404 	addi	r5,r5,-12464
    b84c:	01800074 	movhi	r6,1
    b850:	31b44d04 	addi	r6,r6,-11980
    b854:	000b7880 	call	b788 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b858:	000c23c0 	call	c23c <alt_dcache_flush_all>
  alt_icache_flush_all();
    b85c:	000c3740 	call	c374 <alt_icache_flush_all>
}
    b860:	e037883a 	mov	sp,fp
    b864:	dfc00117 	ldw	ra,4(sp)
    b868:	df000017 	ldw	fp,0(sp)
    b86c:	dec00204 	addi	sp,sp,8
    b870:	f800283a 	ret

0000b874 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b874:	defffd04 	addi	sp,sp,-12
    b878:	dfc00215 	stw	ra,8(sp)
    b87c:	df000115 	stw	fp,4(sp)
    b880:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b884:	0009883a 	mov	r4,zero
    b888:	000ba540 	call	ba54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b88c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b890:	000ba880 	call	ba88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b894:	01000074 	movhi	r4,1
    b898:	21343f04 	addi	r4,r4,-12036
    b89c:	01400074 	movhi	r5,1
    b8a0:	29743f04 	addi	r5,r5,-12036
    b8a4:	01800074 	movhi	r6,1
    b8a8:	31b43f04 	addi	r6,r6,-12036
    b8ac:	000c4840 	call	c484 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b8b0:	d120e817 	ldw	r4,-31840(gp)
    b8b4:	d0e0e917 	ldw	r3,-31836(gp)
    b8b8:	d0a0ea17 	ldw	r2,-31832(gp)
    b8bc:	180b883a 	mov	r5,r3
    b8c0:	100d883a 	mov	r6,r2
    b8c4:	00087e80 	call	87e8 <main>
    b8c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b8cc:	01000044 	movi	r4,1
    b8d0:	000c1700 	call	c170 <close>
  exit (result);
    b8d4:	e13fff17 	ldw	r4,-4(fp)
    b8d8:	000ccd40 	call	ccd4 <exit>

0000b8dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b8dc:	defffe04 	addi	sp,sp,-8
    b8e0:	dfc00115 	stw	ra,4(sp)
    b8e4:	df000015 	stw	fp,0(sp)
    b8e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b8ec:	00800074 	movhi	r2,1
    b8f0:	10b51504 	addi	r2,r2,-11180
    b8f4:	10800017 	ldw	r2,0(r2)
    b8f8:	10000526 	beq	r2,zero,b910 <alt_get_errno+0x34>
    b8fc:	00800074 	movhi	r2,1
    b900:	10b51504 	addi	r2,r2,-11180
    b904:	10800017 	ldw	r2,0(r2)
    b908:	103ee83a 	callr	r2
    b90c:	00000206 	br	b918 <alt_get_errno+0x3c>
    b910:	00800074 	movhi	r2,1
    b914:	10b5eb04 	addi	r2,r2,-10324
}
    b918:	e037883a 	mov	sp,fp
    b91c:	dfc00117 	ldw	ra,4(sp)
    b920:	df000017 	ldw	fp,0(sp)
    b924:	dec00204 	addi	sp,sp,8
    b928:	f800283a 	ret

0000b92c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b92c:	defff904 	addi	sp,sp,-28
    b930:	dfc00615 	stw	ra,24(sp)
    b934:	df000515 	stw	fp,20(sp)
    b938:	df000504 	addi	fp,sp,20
    b93c:	e13ffd15 	stw	r4,-12(fp)
    b940:	e17ffe15 	stw	r5,-8(fp)
    b944:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b948:	e0bffd17 	ldw	r2,-12(fp)
    b94c:	10000716 	blt	r2,zero,b96c <write+0x40>
    b950:	e13ffd17 	ldw	r4,-12(fp)
    b954:	01400304 	movi	r5,12
    b958:	000a56c0 	call	a56c <__mulsi3>
    b95c:	00c00074 	movhi	r3,1
    b960:	18f4a504 	addi	r3,r3,-11628
    b964:	10c5883a 	add	r2,r2,r3
    b968:	00000106 	br	b970 <write+0x44>
    b96c:	0005883a 	mov	r2,zero
    b970:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b974:	e0bffb17 	ldw	r2,-20(fp)
    b978:	10001f26 	beq	r2,zero,b9f8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b97c:	e0bffb17 	ldw	r2,-20(fp)
    b980:	10800217 	ldw	r2,8(r2)
    b984:	108000cc 	andi	r2,r2,3
    b988:	10001726 	beq	r2,zero,b9e8 <write+0xbc>
    b98c:	e0bffb17 	ldw	r2,-20(fp)
    b990:	10800017 	ldw	r2,0(r2)
    b994:	10800617 	ldw	r2,24(r2)
    b998:	10001326 	beq	r2,zero,b9e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b99c:	e0bffb17 	ldw	r2,-20(fp)
    b9a0:	10800017 	ldw	r2,0(r2)
    b9a4:	10c00617 	ldw	r3,24(r2)
    b9a8:	e0bfff17 	ldw	r2,-4(fp)
    b9ac:	e13ffb17 	ldw	r4,-20(fp)
    b9b0:	e17ffe17 	ldw	r5,-8(fp)
    b9b4:	100d883a 	mov	r6,r2
    b9b8:	183ee83a 	callr	r3
    b9bc:	e0bffc15 	stw	r2,-16(fp)
    b9c0:	e0bffc17 	ldw	r2,-16(fp)
    b9c4:	1000060e 	bge	r2,zero,b9e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    b9c8:	000b8dc0 	call	b8dc <alt_get_errno>
    b9cc:	e0fffc17 	ldw	r3,-16(fp)
    b9d0:	00c7c83a 	sub	r3,zero,r3
    b9d4:	10c00015 	stw	r3,0(r2)
        return -1;
    b9d8:	00bfffc4 	movi	r2,-1
    b9dc:	00000a06 	br	ba08 <write+0xdc>
      }
      return rval;
    b9e0:	e0bffc17 	ldw	r2,-16(fp)
    b9e4:	00000806 	br	ba08 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b9e8:	000b8dc0 	call	b8dc <alt_get_errno>
    b9ec:	00c00344 	movi	r3,13
    b9f0:	10c00015 	stw	r3,0(r2)
    b9f4:	00000306 	br	ba04 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b9f8:	000b8dc0 	call	b8dc <alt_get_errno>
    b9fc:	00c01444 	movi	r3,81
    ba00:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    ba04:	00bfffc4 	movi	r2,-1
}
    ba08:	e037883a 	mov	sp,fp
    ba0c:	dfc00117 	ldw	ra,4(sp)
    ba10:	df000017 	ldw	fp,0(sp)
    ba14:	dec00204 	addi	sp,sp,8
    ba18:	f800283a 	ret

0000ba1c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ba1c:	defffd04 	addi	sp,sp,-12
    ba20:	dfc00215 	stw	ra,8(sp)
    ba24:	df000115 	stw	fp,4(sp)
    ba28:	df000104 	addi	fp,sp,4
    ba2c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ba30:	e13fff17 	ldw	r4,-4(fp)
    ba34:	01400074 	movhi	r5,1
    ba38:	29751204 	addi	r5,r5,-11192
    ba3c:	000c2d40 	call	c2d4 <alt_dev_llist_insert>
}
    ba40:	e037883a 	mov	sp,fp
    ba44:	dfc00117 	ldw	ra,4(sp)
    ba48:	df000017 	ldw	fp,0(sp)
    ba4c:	dec00204 	addi	sp,sp,8
    ba50:	f800283a 	ret

0000ba54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ba54:	defffd04 	addi	sp,sp,-12
    ba58:	dfc00215 	stw	ra,8(sp)
    ba5c:	df000115 	stw	fp,4(sp)
    ba60:	df000104 	addi	fp,sp,4
    ba64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    ba68:	000c9b00 	call	c9b0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ba6c:	00800044 	movi	r2,1
    ba70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ba74:	e037883a 	mov	sp,fp
    ba78:	dfc00117 	ldw	ra,4(sp)
    ba7c:	df000017 	ldw	fp,0(sp)
    ba80:	dec00204 	addi	sp,sp,8
    ba84:	f800283a 	ret

0000ba88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ba88:	defffe04 	addi	sp,sp,-8
    ba8c:	dfc00115 	stw	ra,4(sp)
    ba90:	df000015 	stw	fp,0(sp)
    ba94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLOCK_TIMER, sys_clock_timer);
    ba98:	01000074 	movhi	r4,1
    ba9c:	21050804 	addi	r4,r4,5152
    baa0:	000b883a 	mov	r5,zero
    baa4:	01800044 	movi	r6,1
    baa8:	01c0fa04 	movi	r7,1000
    baac:	000bda40 	call	bda4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    bab0:	01000074 	movhi	r4,1
    bab4:	21348504 	addi	r4,r4,-11756
    bab8:	000ba1c0 	call	ba1c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    babc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    bac0:	01000074 	movhi	r4,1
    bac4:	21349004 	addi	r4,r4,-11712
    bac8:	000ba1c0 	call	ba1c <alt_dev_reg>
}
    bacc:	e037883a 	mov	sp,fp
    bad0:	dfc00117 	ldw	ra,4(sp)
    bad4:	df000017 	ldw	fp,0(sp)
    bad8:	dec00204 	addi	sp,sp,8
    badc:	f800283a 	ret

0000bae0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bae0:	defffa04 	addi	sp,sp,-24
    bae4:	dfc00515 	stw	ra,20(sp)
    bae8:	df000415 	stw	fp,16(sp)
    baec:	df000404 	addi	fp,sp,16
    baf0:	e13ffd15 	stw	r4,-12(fp)
    baf4:	e17ffe15 	stw	r5,-8(fp)
    baf8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bafc:	e0bffd17 	ldw	r2,-12(fp)
    bb00:	10800017 	ldw	r2,0(r2)
    bb04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bb08:	e0bffc17 	ldw	r2,-16(fp)
    bb0c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    bb10:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bb14:	10800217 	ldw	r2,8(r2)
    bb18:	1809883a 	mov	r4,r3
    bb1c:	e17ffe17 	ldw	r5,-8(fp)
    bb20:	e1bfff17 	ldw	r6,-4(fp)
    bb24:	100f883a 	mov	r7,r2
    bb28:	000bba00 	call	bba0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bb2c:	e037883a 	mov	sp,fp
    bb30:	dfc00117 	ldw	ra,4(sp)
    bb34:	df000017 	ldw	fp,0(sp)
    bb38:	dec00204 	addi	sp,sp,8
    bb3c:	f800283a 	ret

0000bb40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bb40:	defffa04 	addi	sp,sp,-24
    bb44:	dfc00515 	stw	ra,20(sp)
    bb48:	df000415 	stw	fp,16(sp)
    bb4c:	df000404 	addi	fp,sp,16
    bb50:	e13ffd15 	stw	r4,-12(fp)
    bb54:	e17ffe15 	stw	r5,-8(fp)
    bb58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bb5c:	e0bffd17 	ldw	r2,-12(fp)
    bb60:	10800017 	ldw	r2,0(r2)
    bb64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bb68:	e0bffc17 	ldw	r2,-16(fp)
    bb6c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    bb70:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bb74:	10800217 	ldw	r2,8(r2)
    bb78:	1809883a 	mov	r4,r3
    bb7c:	e17ffe17 	ldw	r5,-8(fp)
    bb80:	e1bfff17 	ldw	r6,-4(fp)
    bb84:	100f883a 	mov	r7,r2
    bb88:	000bc940 	call	bc94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bb8c:	e037883a 	mov	sp,fp
    bb90:	dfc00117 	ldw	ra,4(sp)
    bb94:	df000017 	ldw	fp,0(sp)
    bb98:	dec00204 	addi	sp,sp,8
    bb9c:	f800283a 	ret

0000bba0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    bba0:	defff704 	addi	sp,sp,-36
    bba4:	df000815 	stw	fp,32(sp)
    bba8:	df000804 	addi	fp,sp,32
    bbac:	e13ffc15 	stw	r4,-16(fp)
    bbb0:	e17ffd15 	stw	r5,-12(fp)
    bbb4:	e1bffe15 	stw	r6,-8(fp)
    bbb8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bbbc:	e0bffc17 	ldw	r2,-16(fp)
    bbc0:	10800017 	ldw	r2,0(r2)
    bbc4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    bbc8:	e0bffd17 	ldw	r2,-12(fp)
    bbcc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    bbd0:	e0bffe17 	ldw	r2,-8(fp)
    bbd4:	e0fffd17 	ldw	r3,-12(fp)
    bbd8:	1885883a 	add	r2,r3,r2
    bbdc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    bbe0:	00001406 	br	bc34 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bbe4:	e0bff917 	ldw	r2,-28(fp)
    bbe8:	10800037 	ldwio	r2,0(r2)
    bbec:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    bbf0:	e0bffb17 	ldw	r2,-20(fp)
    bbf4:	10a0000c 	andi	r2,r2,32768
    bbf8:	10000826 	beq	r2,zero,bc1c <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bbfc:	e0bffb17 	ldw	r2,-20(fp)
    bc00:	1007883a 	mov	r3,r2
    bc04:	e0bff817 	ldw	r2,-32(fp)
    bc08:	10c00005 	stb	r3,0(r2)
    bc0c:	e0bff817 	ldw	r2,-32(fp)
    bc10:	10800044 	addi	r2,r2,1
    bc14:	e0bff815 	stw	r2,-32(fp)
    bc18:	00000606 	br	bc34 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    bc1c:	e0fff817 	ldw	r3,-32(fp)
    bc20:	e0bffd17 	ldw	r2,-12(fp)
    bc24:	1880071e 	bne	r3,r2,bc44 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    bc28:	e0bfff17 	ldw	r2,-4(fp)
    bc2c:	1090000c 	andi	r2,r2,16384
    bc30:	1000061e 	bne	r2,zero,bc4c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    bc34:	e0fff817 	ldw	r3,-32(fp)
    bc38:	e0bffa17 	ldw	r2,-24(fp)
    bc3c:	18bfe936 	bltu	r3,r2,bbe4 <altera_avalon_jtag_uart_read+0x44>
    bc40:	00000306 	br	bc50 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    bc44:	0001883a 	nop
    bc48:	00000106 	br	bc50 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    bc4c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    bc50:	e0fff817 	ldw	r3,-32(fp)
    bc54:	e0bffd17 	ldw	r2,-12(fp)
    bc58:	18800426 	beq	r3,r2,bc6c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    bc5c:	e0fff817 	ldw	r3,-32(fp)
    bc60:	e0bffd17 	ldw	r2,-12(fp)
    bc64:	1885c83a 	sub	r2,r3,r2
    bc68:	00000606 	br	bc84 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    bc6c:	e0bfff17 	ldw	r2,-4(fp)
    bc70:	1090000c 	andi	r2,r2,16384
    bc74:	10000226 	beq	r2,zero,bc80 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    bc78:	00bffd44 	movi	r2,-11
    bc7c:	00000106 	br	bc84 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    bc80:	00bffec4 	movi	r2,-5
}
    bc84:	e037883a 	mov	sp,fp
    bc88:	df000017 	ldw	fp,0(sp)
    bc8c:	dec00104 	addi	sp,sp,4
    bc90:	f800283a 	ret

0000bc94 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bc94:	defff904 	addi	sp,sp,-28
    bc98:	df000615 	stw	fp,24(sp)
    bc9c:	df000604 	addi	fp,sp,24
    bca0:	e13ffc15 	stw	r4,-16(fp)
    bca4:	e17ffd15 	stw	r5,-12(fp)
    bca8:	e1bffe15 	stw	r6,-8(fp)
    bcac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bcb0:	e0bffc17 	ldw	r2,-16(fp)
    bcb4:	10800017 	ldw	r2,0(r2)
    bcb8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    bcbc:	e0bffe17 	ldw	r2,-8(fp)
    bcc0:	e0fffd17 	ldw	r3,-12(fp)
    bcc4:	1885883a 	add	r2,r3,r2
    bcc8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    bccc:	00000f06 	br	bd0c <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    bcd0:	e0bffa17 	ldw	r2,-24(fp)
    bcd4:	10800104 	addi	r2,r2,4
    bcd8:	10800037 	ldwio	r2,0(r2)
    bcdc:	10bfffec 	andhi	r2,r2,65535
    bce0:	10000a26 	beq	r2,zero,bd0c <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    bce4:	e0bffa17 	ldw	r2,-24(fp)
    bce8:	e0fffd17 	ldw	r3,-12(fp)
    bcec:	18c00003 	ldbu	r3,0(r3)
    bcf0:	18c03fcc 	andi	r3,r3,255
    bcf4:	18c0201c 	xori	r3,r3,128
    bcf8:	18ffe004 	addi	r3,r3,-128
    bcfc:	e13ffd17 	ldw	r4,-12(fp)
    bd00:	21000044 	addi	r4,r4,1
    bd04:	e13ffd15 	stw	r4,-12(fp)
    bd08:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    bd0c:	e0fffd17 	ldw	r3,-12(fp)
    bd10:	e0bffb17 	ldw	r2,-20(fp)
    bd14:	18bfee36 	bltu	r3,r2,bcd0 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    bd18:	e0bffe17 	ldw	r2,-8(fp)
}
    bd1c:	e037883a 	mov	sp,fp
    bd20:	df000017 	ldw	fp,0(sp)
    bd24:	dec00104 	addi	sp,sp,4
    bd28:	f800283a 	ret

0000bd2c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    bd2c:	defff904 	addi	sp,sp,-28
    bd30:	dfc00615 	stw	ra,24(sp)
    bd34:	df000515 	stw	fp,20(sp)
    bd38:	df000504 	addi	fp,sp,20
    bd3c:	e13ffe15 	stw	r4,-8(fp)
    bd40:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    bd44:	0007883a 	mov	r3,zero
    bd48:	e0bffe17 	ldw	r2,-8(fp)
    bd4c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    bd50:	e0bffe17 	ldw	r2,-8(fp)
    bd54:	10800104 	addi	r2,r2,4
    bd58:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd5c:	0005303a 	rdctl	r2,status
    bd60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd64:	e0fffc17 	ldw	r3,-16(fp)
    bd68:	00bfff84 	movi	r2,-2
    bd6c:	1884703a 	and	r2,r3,r2
    bd70:	1001703a 	wrctl	status,r2
  
  return context;
    bd74:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    bd78:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    bd7c:	000c8ac0 	call	c8ac <alt_tick>
    bd80:	e0bffb17 	ldw	r2,-20(fp)
    bd84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd88:	e0bffd17 	ldw	r2,-12(fp)
    bd8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    bd90:	e037883a 	mov	sp,fp
    bd94:	dfc00117 	ldw	ra,4(sp)
    bd98:	df000017 	ldw	fp,0(sp)
    bd9c:	dec00204 	addi	sp,sp,8
    bda0:	f800283a 	ret

0000bda4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    bda4:	defff904 	addi	sp,sp,-28
    bda8:	dfc00615 	stw	ra,24(sp)
    bdac:	df000515 	stw	fp,20(sp)
    bdb0:	df000504 	addi	fp,sp,20
    bdb4:	e13ffc15 	stw	r4,-16(fp)
    bdb8:	e17ffd15 	stw	r5,-12(fp)
    bdbc:	e1bffe15 	stw	r6,-8(fp)
    bdc0:	e1ffff15 	stw	r7,-4(fp)
    bdc4:	e0bfff17 	ldw	r2,-4(fp)
    bdc8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    bdcc:	00800074 	movhi	r2,1
    bdd0:	10b5f004 	addi	r2,r2,-10304
    bdd4:	10800017 	ldw	r2,0(r2)
    bdd8:	1000041e 	bne	r2,zero,bdec <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    bddc:	00800074 	movhi	r2,1
    bde0:	10b5f004 	addi	r2,r2,-10304
    bde4:	e0fffb17 	ldw	r3,-20(fp)
    bde8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    bdec:	e0bffc17 	ldw	r2,-16(fp)
    bdf0:	10800104 	addi	r2,r2,4
    bdf4:	00c001c4 	movi	r3,7
    bdf8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    bdfc:	e13ffe17 	ldw	r4,-8(fp)
    be00:	e17ffc17 	ldw	r5,-16(fp)
    be04:	01800074 	movhi	r6,1
    be08:	31af4b04 	addi	r6,r6,-17108
    be0c:	000b5d80 	call	b5d8 <alt_irq_register>
#endif  
}
    be10:	e037883a 	mov	sp,fp
    be14:	dfc00117 	ldw	ra,4(sp)
    be18:	df000017 	ldw	fp,0(sp)
    be1c:	dec00204 	addi	sp,sp,8
    be20:	f800283a 	ret

0000be24 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    be24:	defffa04 	addi	sp,sp,-24
    be28:	dfc00515 	stw	ra,20(sp)
    be2c:	df000415 	stw	fp,16(sp)
    be30:	df000404 	addi	fp,sp,16
    be34:	e13ffd15 	stw	r4,-12(fp)
    be38:	e17ffe15 	stw	r5,-8(fp)
    be3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    be40:	e0bffd17 	ldw	r2,-12(fp)
    be44:	10800017 	ldw	r2,0(r2)
    be48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    be4c:	e0bffc17 	ldw	r2,-16(fp)
    be50:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    be54:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    be58:	10800217 	ldw	r2,8(r2)
    be5c:	1809883a 	mov	r4,r3
    be60:	e17ffe17 	ldw	r5,-8(fp)
    be64:	e1bfff17 	ldw	r6,-4(fp)
    be68:	100f883a 	mov	r7,r2
    be6c:	000bf340 	call	bf34 <altera_avalon_uart_read>
      fd->fd_flags);
}
    be70:	e037883a 	mov	sp,fp
    be74:	dfc00117 	ldw	ra,4(sp)
    be78:	df000017 	ldw	fp,0(sp)
    be7c:	dec00204 	addi	sp,sp,8
    be80:	f800283a 	ret

0000be84 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    be84:	defffa04 	addi	sp,sp,-24
    be88:	dfc00515 	stw	ra,20(sp)
    be8c:	df000415 	stw	fp,16(sp)
    be90:	df000404 	addi	fp,sp,16
    be94:	e13ffd15 	stw	r4,-12(fp)
    be98:	e17ffe15 	stw	r5,-8(fp)
    be9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    bea0:	e0bffd17 	ldw	r2,-12(fp)
    bea4:	10800017 	ldw	r2,0(r2)
    bea8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    beac:	e0bffc17 	ldw	r2,-16(fp)
    beb0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    beb4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    beb8:	10800217 	ldw	r2,8(r2)
    bebc:	1809883a 	mov	r4,r3
    bec0:	e17ffe17 	ldw	r5,-8(fp)
    bec4:	e1bfff17 	ldw	r6,-4(fp)
    bec8:	100f883a 	mov	r7,r2
    becc:	000c0440 	call	c044 <altera_avalon_uart_write>
      fd->fd_flags);
}
    bed0:	e037883a 	mov	sp,fp
    bed4:	dfc00117 	ldw	ra,4(sp)
    bed8:	df000017 	ldw	fp,0(sp)
    bedc:	dec00204 	addi	sp,sp,8
    bee0:	f800283a 	ret

0000bee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bee4:	defffe04 	addi	sp,sp,-8
    bee8:	dfc00115 	stw	ra,4(sp)
    beec:	df000015 	stw	fp,0(sp)
    bef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bef4:	00800074 	movhi	r2,1
    bef8:	10b51504 	addi	r2,r2,-11180
    befc:	10800017 	ldw	r2,0(r2)
    bf00:	10000526 	beq	r2,zero,bf18 <alt_get_errno+0x34>
    bf04:	00800074 	movhi	r2,1
    bf08:	10b51504 	addi	r2,r2,-11180
    bf0c:	10800017 	ldw	r2,0(r2)
    bf10:	103ee83a 	callr	r2
    bf14:	00000206 	br	bf20 <alt_get_errno+0x3c>
    bf18:	00800074 	movhi	r2,1
    bf1c:	10b5eb04 	addi	r2,r2,-10324
}
    bf20:	e037883a 	mov	sp,fp
    bf24:	dfc00117 	ldw	ra,4(sp)
    bf28:	df000017 	ldw	fp,0(sp)
    bf2c:	dec00204 	addi	sp,sp,8
    bf30:	f800283a 	ret

0000bf34 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    bf34:	defff804 	addi	sp,sp,-32
    bf38:	dfc00715 	stw	ra,28(sp)
    bf3c:	df000615 	stw	fp,24(sp)
    bf40:	df000604 	addi	fp,sp,24
    bf44:	e13ffc15 	stw	r4,-16(fp)
    bf48:	e17ffd15 	stw	r5,-12(fp)
    bf4c:	e1bffe15 	stw	r6,-8(fp)
    bf50:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    bf54:	e0bfff17 	ldw	r2,-4(fp)
    bf58:	1090000c 	andi	r2,r2,16384
    bf5c:	1005003a 	cmpeq	r2,r2,zero
    bf60:	10803fcc 	andi	r2,r2,255
    bf64:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    bf68:	e0bffc17 	ldw	r2,-16(fp)
    bf6c:	10800017 	ldw	r2,0(r2)
    bf70:	10800204 	addi	r2,r2,8
    bf74:	10800037 	ldwio	r2,0(r2)
    bf78:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    bf7c:	e0bffc17 	ldw	r2,-16(fp)
    bf80:	10800017 	ldw	r2,0(r2)
    bf84:	10800204 	addi	r2,r2,8
    bf88:	0007883a 	mov	r3,zero
    bf8c:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    bf90:	e0bffb17 	ldw	r2,-20(fp)
    bf94:	1080200c 	andi	r2,r2,128
    bf98:	10000b26 	beq	r2,zero,bfc8 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    bf9c:	e0bffc17 	ldw	r2,-16(fp)
    bfa0:	10800017 	ldw	r2,0(r2)
    bfa4:	10800037 	ldwio	r2,0(r2)
    bfa8:	1007883a 	mov	r3,r2
    bfac:	e0bffd17 	ldw	r2,-12(fp)
    bfb0:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    bfb4:	e0bffb17 	ldw	r2,-20(fp)
    bfb8:	108000cc 	andi	r2,r2,3
    bfbc:	1000021e 	bne	r2,zero,bfc8 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    bfc0:	00800044 	movi	r2,1
    bfc4:	00000606 	br	bfe0 <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    bfc8:	e0bffa17 	ldw	r2,-24(fp)
    bfcc:	103fe61e 	bne	r2,zero,bf68 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
    bfd0:	000bee40 	call	bee4 <alt_get_errno>
    bfd4:	00c002c4 	movi	r3,11
    bfd8:	10c00015 	stw	r3,0(r2)
 
  return 0;
    bfdc:	0005883a 	mov	r2,zero
}
    bfe0:	e037883a 	mov	sp,fp
    bfe4:	dfc00117 	ldw	ra,4(sp)
    bfe8:	df000017 	ldw	fp,0(sp)
    bfec:	dec00204 	addi	sp,sp,8
    bff0:	f800283a 	ret

0000bff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bff4:	defffe04 	addi	sp,sp,-8
    bff8:	dfc00115 	stw	ra,4(sp)
    bffc:	df000015 	stw	fp,0(sp)
    c000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c004:	00800074 	movhi	r2,1
    c008:	10b51504 	addi	r2,r2,-11180
    c00c:	10800017 	ldw	r2,0(r2)
    c010:	10000526 	beq	r2,zero,c028 <alt_get_errno+0x34>
    c014:	00800074 	movhi	r2,1
    c018:	10b51504 	addi	r2,r2,-11180
    c01c:	10800017 	ldw	r2,0(r2)
    c020:	103ee83a 	callr	r2
    c024:	00000206 	br	c030 <alt_get_errno+0x3c>
    c028:	00800074 	movhi	r2,1
    c02c:	10b5eb04 	addi	r2,r2,-10324
}
    c030:	e037883a 	mov	sp,fp
    c034:	dfc00117 	ldw	ra,4(sp)
    c038:	df000017 	ldw	fp,0(sp)
    c03c:	dec00204 	addi	sp,sp,8
    c040:	f800283a 	ret

0000c044 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    c044:	defff704 	addi	sp,sp,-36
    c048:	dfc00815 	stw	ra,32(sp)
    c04c:	df000715 	stw	fp,28(sp)
    c050:	df000704 	addi	fp,sp,28
    c054:	e13ffc15 	stw	r4,-16(fp)
    c058:	e17ffd15 	stw	r5,-12(fp)
    c05c:	e1bffe15 	stw	r6,-8(fp)
    c060:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    c064:	e0bfff17 	ldw	r2,-4(fp)
    c068:	1090000c 	andi	r2,r2,16384
    c06c:	1005003a 	cmpeq	r2,r2,zero
    c070:	10803fcc 	andi	r2,r2,255
    c074:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    c078:	e0bffe17 	ldw	r2,-8(fp)
    c07c:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    c080:	e0bffc17 	ldw	r2,-16(fp)
    c084:	10800017 	ldw	r2,0(r2)
    c088:	10800204 	addi	r2,r2,8
    c08c:	10800037 	ldwio	r2,0(r2)
    c090:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    c094:	e0bffb17 	ldw	r2,-20(fp)
    c098:	1080100c 	andi	r2,r2,64
    c09c:	10000f26 	beq	r2,zero,c0dc <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    c0a0:	e0bffc17 	ldw	r2,-16(fp)
    c0a4:	10800017 	ldw	r2,0(r2)
    c0a8:	10800104 	addi	r2,r2,4
    c0ac:	e0fffd17 	ldw	r3,-12(fp)
    c0b0:	18c00003 	ldbu	r3,0(r3)
    c0b4:	18c03fcc 	andi	r3,r3,255
    c0b8:	18c0201c 	xori	r3,r3,128
    c0bc:	18ffe004 	addi	r3,r3,-128
    c0c0:	e13ffd17 	ldw	r4,-12(fp)
    c0c4:	21000044 	addi	r4,r4,1
    c0c8:	e13ffd15 	stw	r4,-12(fp)
    c0cc:	10c00035 	stwio	r3,0(r2)
      count--;
    c0d0:	e0bff917 	ldw	r2,-28(fp)
    c0d4:	10bfffc4 	addi	r2,r2,-1
    c0d8:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    c0dc:	e0bffa17 	ldw	r2,-24(fp)
    c0e0:	10000226 	beq	r2,zero,c0ec <altera_avalon_uart_write+0xa8>
    c0e4:	e0bff917 	ldw	r2,-28(fp)
    c0e8:	103fe51e 	bne	r2,zero,c080 <altera_avalon_uart_write+0x3c>

  if (count)
    c0ec:	e0bff917 	ldw	r2,-28(fp)
    c0f0:	10000326 	beq	r2,zero,c100 <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    c0f4:	000bff40 	call	bff4 <alt_get_errno>
    c0f8:	00c002c4 	movi	r3,11
    c0fc:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    c100:	e0fffe17 	ldw	r3,-8(fp)
    c104:	e0bff917 	ldw	r2,-28(fp)
    c108:	1885c83a 	sub	r2,r3,r2
}
    c10c:	e037883a 	mov	sp,fp
    c110:	dfc00117 	ldw	ra,4(sp)
    c114:	df000017 	ldw	fp,0(sp)
    c118:	dec00204 	addi	sp,sp,8
    c11c:	f800283a 	ret

0000c120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c120:	defffe04 	addi	sp,sp,-8
    c124:	dfc00115 	stw	ra,4(sp)
    c128:	df000015 	stw	fp,0(sp)
    c12c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c130:	00800074 	movhi	r2,1
    c134:	10b51504 	addi	r2,r2,-11180
    c138:	10800017 	ldw	r2,0(r2)
    c13c:	10000526 	beq	r2,zero,c154 <alt_get_errno+0x34>
    c140:	00800074 	movhi	r2,1
    c144:	10b51504 	addi	r2,r2,-11180
    c148:	10800017 	ldw	r2,0(r2)
    c14c:	103ee83a 	callr	r2
    c150:	00000206 	br	c15c <alt_get_errno+0x3c>
    c154:	00800074 	movhi	r2,1
    c158:	10b5eb04 	addi	r2,r2,-10324
}
    c15c:	e037883a 	mov	sp,fp
    c160:	dfc00117 	ldw	ra,4(sp)
    c164:	df000017 	ldw	fp,0(sp)
    c168:	dec00204 	addi	sp,sp,8
    c16c:	f800283a 	ret

0000c170 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c170:	defffb04 	addi	sp,sp,-20
    c174:	dfc00415 	stw	ra,16(sp)
    c178:	df000315 	stw	fp,12(sp)
    c17c:	df000304 	addi	fp,sp,12
    c180:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c184:	e0bfff17 	ldw	r2,-4(fp)
    c188:	10000716 	blt	r2,zero,c1a8 <close+0x38>
    c18c:	e13fff17 	ldw	r4,-4(fp)
    c190:	01400304 	movi	r5,12
    c194:	000a56c0 	call	a56c <__mulsi3>
    c198:	00c00074 	movhi	r3,1
    c19c:	18f4a504 	addi	r3,r3,-11628
    c1a0:	10c5883a 	add	r2,r2,r3
    c1a4:	00000106 	br	c1ac <close+0x3c>
    c1a8:	0005883a 	mov	r2,zero
    c1ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    c1b0:	e0bffd17 	ldw	r2,-12(fp)
    c1b4:	10001826 	beq	r2,zero,c218 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c1b8:	e0bffd17 	ldw	r2,-12(fp)
    c1bc:	10800017 	ldw	r2,0(r2)
    c1c0:	10800417 	ldw	r2,16(r2)
    c1c4:	10000626 	beq	r2,zero,c1e0 <close+0x70>
    c1c8:	e0bffd17 	ldw	r2,-12(fp)
    c1cc:	10800017 	ldw	r2,0(r2)
    c1d0:	10800417 	ldw	r2,16(r2)
    c1d4:	e13ffd17 	ldw	r4,-12(fp)
    c1d8:	103ee83a 	callr	r2
    c1dc:	00000106 	br	c1e4 <close+0x74>
    c1e0:	0005883a 	mov	r2,zero
    c1e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c1e8:	e13fff17 	ldw	r4,-4(fp)
    c1ec:	000c7940 	call	c794 <alt_release_fd>
    if (rval < 0)
    c1f0:	e0bffe17 	ldw	r2,-8(fp)
    c1f4:	1000060e 	bge	r2,zero,c210 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    c1f8:	000c1200 	call	c120 <alt_get_errno>
    c1fc:	e0fffe17 	ldw	r3,-8(fp)
    c200:	00c7c83a 	sub	r3,zero,r3
    c204:	10c00015 	stw	r3,0(r2)
      return -1;
    c208:	00bfffc4 	movi	r2,-1
    c20c:	00000606 	br	c228 <close+0xb8>
    }
    return 0;
    c210:	0005883a 	mov	r2,zero
    c214:	00000406 	br	c228 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c218:	000c1200 	call	c120 <alt_get_errno>
    c21c:	00c01444 	movi	r3,81
    c220:	10c00015 	stw	r3,0(r2)
    return -1;
    c224:	00bfffc4 	movi	r2,-1
  }
}
    c228:	e037883a 	mov	sp,fp
    c22c:	dfc00117 	ldw	ra,4(sp)
    c230:	df000017 	ldw	fp,0(sp)
    c234:	dec00204 	addi	sp,sp,8
    c238:	f800283a 	ret

0000c23c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c23c:	deffff04 	addi	sp,sp,-4
    c240:	df000015 	stw	fp,0(sp)
    c244:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c248:	e037883a 	mov	sp,fp
    c24c:	df000017 	ldw	fp,0(sp)
    c250:	dec00104 	addi	sp,sp,4
    c254:	f800283a 	ret

0000c258 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c258:	defffc04 	addi	sp,sp,-16
    c25c:	df000315 	stw	fp,12(sp)
    c260:	df000304 	addi	fp,sp,12
    c264:	e13ffd15 	stw	r4,-12(fp)
    c268:	e17ffe15 	stw	r5,-8(fp)
    c26c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c270:	e0bfff17 	ldw	r2,-4(fp)
}
    c274:	e037883a 	mov	sp,fp
    c278:	df000017 	ldw	fp,0(sp)
    c27c:	dec00104 	addi	sp,sp,4
    c280:	f800283a 	ret

0000c284 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c284:	defffe04 	addi	sp,sp,-8
    c288:	dfc00115 	stw	ra,4(sp)
    c28c:	df000015 	stw	fp,0(sp)
    c290:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c294:	00800074 	movhi	r2,1
    c298:	10b51504 	addi	r2,r2,-11180
    c29c:	10800017 	ldw	r2,0(r2)
    c2a0:	10000526 	beq	r2,zero,c2b8 <alt_get_errno+0x34>
    c2a4:	00800074 	movhi	r2,1
    c2a8:	10b51504 	addi	r2,r2,-11180
    c2ac:	10800017 	ldw	r2,0(r2)
    c2b0:	103ee83a 	callr	r2
    c2b4:	00000206 	br	c2c0 <alt_get_errno+0x3c>
    c2b8:	00800074 	movhi	r2,1
    c2bc:	10b5eb04 	addi	r2,r2,-10324
}
    c2c0:	e037883a 	mov	sp,fp
    c2c4:	dfc00117 	ldw	ra,4(sp)
    c2c8:	df000017 	ldw	fp,0(sp)
    c2cc:	dec00204 	addi	sp,sp,8
    c2d0:	f800283a 	ret

0000c2d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c2d4:	defffa04 	addi	sp,sp,-24
    c2d8:	dfc00515 	stw	ra,20(sp)
    c2dc:	df000415 	stw	fp,16(sp)
    c2e0:	df000404 	addi	fp,sp,16
    c2e4:	e13ffe15 	stw	r4,-8(fp)
    c2e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c2ec:	e0bffe17 	ldw	r2,-8(fp)
    c2f0:	10000326 	beq	r2,zero,c300 <alt_dev_llist_insert+0x2c>
    c2f4:	e0bffe17 	ldw	r2,-8(fp)
    c2f8:	10800217 	ldw	r2,8(r2)
    c2fc:	1000051e 	bne	r2,zero,c314 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    c300:	000c2840 	call	c284 <alt_get_errno>
    c304:	00c00584 	movi	r3,22
    c308:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    c30c:	00bffa84 	movi	r2,-22
    c310:	00001306 	br	c360 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c314:	e0bffe17 	ldw	r2,-8(fp)
    c318:	e0ffff17 	ldw	r3,-4(fp)
    c31c:	e0fffc15 	stw	r3,-16(fp)
    c320:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c324:	e0bffd17 	ldw	r2,-12(fp)
    c328:	e0fffc17 	ldw	r3,-16(fp)
    c32c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c330:	e0bffc17 	ldw	r2,-16(fp)
    c334:	10c00017 	ldw	r3,0(r2)
    c338:	e0bffd17 	ldw	r2,-12(fp)
    c33c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c340:	e0bffc17 	ldw	r2,-16(fp)
    c344:	10800017 	ldw	r2,0(r2)
    c348:	e0fffd17 	ldw	r3,-12(fp)
    c34c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c350:	e0bffc17 	ldw	r2,-16(fp)
    c354:	e0fffd17 	ldw	r3,-12(fp)
    c358:	10c00015 	stw	r3,0(r2)

  return 0;  
    c35c:	0005883a 	mov	r2,zero
}
    c360:	e037883a 	mov	sp,fp
    c364:	dfc00117 	ldw	ra,4(sp)
    c368:	df000017 	ldw	fp,0(sp)
    c36c:	dec00204 	addi	sp,sp,8
    c370:	f800283a 	ret

0000c374 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c374:	defffe04 	addi	sp,sp,-8
    c378:	dfc00115 	stw	ra,4(sp)
    c37c:	df000015 	stw	fp,0(sp)
    c380:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c384:	0009883a 	mov	r4,zero
    c388:	01420004 	movi	r5,2048
    c38c:	000cc480 	call	cc48 <alt_icache_flush>
#endif
}
    c390:	e037883a 	mov	sp,fp
    c394:	dfc00117 	ldw	ra,4(sp)
    c398:	df000017 	ldw	fp,0(sp)
    c39c:	dec00204 	addi	sp,sp,8
    c3a0:	f800283a 	ret

0000c3a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c3a4:	defff804 	addi	sp,sp,-32
    c3a8:	dfc00715 	stw	ra,28(sp)
    c3ac:	df000615 	stw	fp,24(sp)
    c3b0:	dc000515 	stw	r16,20(sp)
    c3b4:	df000504 	addi	fp,sp,20
    c3b8:	e13ffc15 	stw	r4,-16(fp)
    c3bc:	e17ffd15 	stw	r5,-12(fp)
    c3c0:	e1bffe15 	stw	r6,-8(fp)
    c3c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c3c8:	e13ffd17 	ldw	r4,-12(fp)
    c3cc:	e17ffe17 	ldw	r5,-8(fp)
    c3d0:	e1bfff17 	ldw	r6,-4(fp)
    c3d4:	000c63c0 	call	c63c <open>
    c3d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c3dc:	e0bffb17 	ldw	r2,-20(fp)
    c3e0:	10002216 	blt	r2,zero,c46c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    c3e4:	04000074 	movhi	r16,1
    c3e8:	8434a504 	addi	r16,r16,-11628
    c3ec:	e0bffb17 	ldw	r2,-20(fp)
    c3f0:	1009883a 	mov	r4,r2
    c3f4:	01400304 	movi	r5,12
    c3f8:	000a56c0 	call	a56c <__mulsi3>
    c3fc:	8085883a 	add	r2,r16,r2
    c400:	10c00017 	ldw	r3,0(r2)
    c404:	e0bffc17 	ldw	r2,-16(fp)
    c408:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c40c:	04000074 	movhi	r16,1
    c410:	8434a504 	addi	r16,r16,-11628
    c414:	e0bffb17 	ldw	r2,-20(fp)
    c418:	1009883a 	mov	r4,r2
    c41c:	01400304 	movi	r5,12
    c420:	000a56c0 	call	a56c <__mulsi3>
    c424:	8085883a 	add	r2,r16,r2
    c428:	10800104 	addi	r2,r2,4
    c42c:	10c00017 	ldw	r3,0(r2)
    c430:	e0bffc17 	ldw	r2,-16(fp)
    c434:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c438:	04000074 	movhi	r16,1
    c43c:	8434a504 	addi	r16,r16,-11628
    c440:	e0bffb17 	ldw	r2,-20(fp)
    c444:	1009883a 	mov	r4,r2
    c448:	01400304 	movi	r5,12
    c44c:	000a56c0 	call	a56c <__mulsi3>
    c450:	8085883a 	add	r2,r16,r2
    c454:	10800204 	addi	r2,r2,8
    c458:	10c00017 	ldw	r3,0(r2)
    c45c:	e0bffc17 	ldw	r2,-16(fp)
    c460:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c464:	e13ffb17 	ldw	r4,-20(fp)
    c468:	000c7940 	call	c794 <alt_release_fd>
  }
} 
    c46c:	e037883a 	mov	sp,fp
    c470:	dfc00217 	ldw	ra,8(sp)
    c474:	df000117 	ldw	fp,4(sp)
    c478:	dc000017 	ldw	r16,0(sp)
    c47c:	dec00304 	addi	sp,sp,12
    c480:	f800283a 	ret

0000c484 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c484:	defffb04 	addi	sp,sp,-20
    c488:	dfc00415 	stw	ra,16(sp)
    c48c:	df000315 	stw	fp,12(sp)
    c490:	df000304 	addi	fp,sp,12
    c494:	e13ffd15 	stw	r4,-12(fp)
    c498:	e17ffe15 	stw	r5,-8(fp)
    c49c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c4a0:	01000074 	movhi	r4,1
    c4a4:	2134a804 	addi	r4,r4,-11616
    c4a8:	e17ffd17 	ldw	r5,-12(fp)
    c4ac:	01800044 	movi	r6,1
    c4b0:	01c07fc4 	movi	r7,511
    c4b4:	000c3a40 	call	c3a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c4b8:	01000074 	movhi	r4,1
    c4bc:	2134a504 	addi	r4,r4,-11628
    c4c0:	e17ffe17 	ldw	r5,-8(fp)
    c4c4:	000d883a 	mov	r6,zero
    c4c8:	01c07fc4 	movi	r7,511
    c4cc:	000c3a40 	call	c3a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c4d0:	01000074 	movhi	r4,1
    c4d4:	2134ab04 	addi	r4,r4,-11604
    c4d8:	e17fff17 	ldw	r5,-4(fp)
    c4dc:	01800044 	movi	r6,1
    c4e0:	01c07fc4 	movi	r7,511
    c4e4:	000c3a40 	call	c3a4 <alt_open_fd>
}  
    c4e8:	e037883a 	mov	sp,fp
    c4ec:	dfc00117 	ldw	ra,4(sp)
    c4f0:	df000017 	ldw	fp,0(sp)
    c4f4:	dec00204 	addi	sp,sp,8
    c4f8:	f800283a 	ret

0000c4fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c4fc:	defffe04 	addi	sp,sp,-8
    c500:	dfc00115 	stw	ra,4(sp)
    c504:	df000015 	stw	fp,0(sp)
    c508:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c50c:	00800074 	movhi	r2,1
    c510:	10b51504 	addi	r2,r2,-11180
    c514:	10800017 	ldw	r2,0(r2)
    c518:	10000526 	beq	r2,zero,c530 <alt_get_errno+0x34>
    c51c:	00800074 	movhi	r2,1
    c520:	10b51504 	addi	r2,r2,-11180
    c524:	10800017 	ldw	r2,0(r2)
    c528:	103ee83a 	callr	r2
    c52c:	00000206 	br	c538 <alt_get_errno+0x3c>
    c530:	00800074 	movhi	r2,1
    c534:	10b5eb04 	addi	r2,r2,-10324
}
    c538:	e037883a 	mov	sp,fp
    c53c:	dfc00117 	ldw	ra,4(sp)
    c540:	df000017 	ldw	fp,0(sp)
    c544:	dec00204 	addi	sp,sp,8
    c548:	f800283a 	ret

0000c54c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c54c:	defffb04 	addi	sp,sp,-20
    c550:	dfc00415 	stw	ra,16(sp)
    c554:	df000315 	stw	fp,12(sp)
    c558:	dc000215 	stw	r16,8(sp)
    c55c:	df000204 	addi	fp,sp,8
    c560:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c564:	e0bfff17 	ldw	r2,-4(fp)
    c568:	10800217 	ldw	r2,8(r2)
    c56c:	10d00034 	orhi	r3,r2,16384
    c570:	e0bfff17 	ldw	r2,-4(fp)
    c574:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c578:	e03ffe15 	stw	zero,-8(fp)
    c57c:	00002206 	br	c608 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c580:	04000074 	movhi	r16,1
    c584:	8434a504 	addi	r16,r16,-11628
    c588:	e0bffe17 	ldw	r2,-8(fp)
    c58c:	1009883a 	mov	r4,r2
    c590:	01400304 	movi	r5,12
    c594:	000a56c0 	call	a56c <__mulsi3>
    c598:	8085883a 	add	r2,r16,r2
    c59c:	10c00017 	ldw	r3,0(r2)
    c5a0:	e0bfff17 	ldw	r2,-4(fp)
    c5a4:	10800017 	ldw	r2,0(r2)
    c5a8:	1880141e 	bne	r3,r2,c5fc <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c5ac:	04000074 	movhi	r16,1
    c5b0:	8434a504 	addi	r16,r16,-11628
    c5b4:	e0bffe17 	ldw	r2,-8(fp)
    c5b8:	1009883a 	mov	r4,r2
    c5bc:	01400304 	movi	r5,12
    c5c0:	000a56c0 	call	a56c <__mulsi3>
    c5c4:	8085883a 	add	r2,r16,r2
    c5c8:	10800204 	addi	r2,r2,8
    c5cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c5d0:	10000a0e 	bge	r2,zero,c5fc <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c5d4:	e13ffe17 	ldw	r4,-8(fp)
    c5d8:	01400304 	movi	r5,12
    c5dc:	000a56c0 	call	a56c <__mulsi3>
    c5e0:	00c00074 	movhi	r3,1
    c5e4:	18f4a504 	addi	r3,r3,-11628
    c5e8:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c5ec:	e0bfff17 	ldw	r2,-4(fp)
    c5f0:	18800226 	beq	r3,r2,c5fc <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c5f4:	00bffcc4 	movi	r2,-13
    c5f8:	00000a06 	br	c624 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c5fc:	e0bffe17 	ldw	r2,-8(fp)
    c600:	10800044 	addi	r2,r2,1
    c604:	e0bffe15 	stw	r2,-8(fp)
    c608:	00800074 	movhi	r2,1
    c60c:	10b51404 	addi	r2,r2,-11184
    c610:	10800017 	ldw	r2,0(r2)
    c614:	1007883a 	mov	r3,r2
    c618:	e0bffe17 	ldw	r2,-8(fp)
    c61c:	18bfd82e 	bgeu	r3,r2,c580 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c620:	0005883a 	mov	r2,zero
}
    c624:	e037883a 	mov	sp,fp
    c628:	dfc00217 	ldw	ra,8(sp)
    c62c:	df000117 	ldw	fp,4(sp)
    c630:	dc000017 	ldw	r16,0(sp)
    c634:	dec00304 	addi	sp,sp,12
    c638:	f800283a 	ret

0000c63c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c63c:	defff604 	addi	sp,sp,-40
    c640:	dfc00915 	stw	ra,36(sp)
    c644:	df000815 	stw	fp,32(sp)
    c648:	df000804 	addi	fp,sp,32
    c64c:	e13ffd15 	stw	r4,-12(fp)
    c650:	e17ffe15 	stw	r5,-8(fp)
    c654:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c658:	00bfffc4 	movi	r2,-1
    c65c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c660:	00bffb44 	movi	r2,-19
    c664:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c668:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c66c:	e13ffd17 	ldw	r4,-12(fp)
    c670:	01400074 	movhi	r5,1
    c674:	29751204 	addi	r5,r5,-11192
    c678:	000c9d00 	call	c9d0 <alt_find_dev>
    c67c:	e0bff815 	stw	r2,-32(fp)
    c680:	e0bff817 	ldw	r2,-32(fp)
    c684:	1000051e 	bne	r2,zero,c69c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c688:	e13ffd17 	ldw	r4,-12(fp)
    c68c:	000ca600 	call	ca60 <alt_find_file>
    c690:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c694:	00800044 	movi	r2,1
    c698:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c69c:	e0bff817 	ldw	r2,-32(fp)
    c6a0:	10002a26 	beq	r2,zero,c74c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c6a4:	e13ff817 	ldw	r4,-32(fp)
    c6a8:	000cb740 	call	cb74 <alt_get_fd>
    c6ac:	e0bff915 	stw	r2,-28(fp)
    c6b0:	e0bff917 	ldw	r2,-28(fp)
    c6b4:	1000030e 	bge	r2,zero,c6c4 <open+0x88>
    {
      status = index;
    c6b8:	e0bff917 	ldw	r2,-28(fp)
    c6bc:	e0bffa15 	stw	r2,-24(fp)
    c6c0:	00002406 	br	c754 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c6c4:	e13ff917 	ldw	r4,-28(fp)
    c6c8:	01400304 	movi	r5,12
    c6cc:	000a56c0 	call	a56c <__mulsi3>
    c6d0:	00c00074 	movhi	r3,1
    c6d4:	18f4a504 	addi	r3,r3,-11628
    c6d8:	10c5883a 	add	r2,r2,r3
    c6dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c6e0:	e0fffe17 	ldw	r3,-8(fp)
    c6e4:	00900034 	movhi	r2,16384
    c6e8:	10bfffc4 	addi	r2,r2,-1
    c6ec:	1886703a 	and	r3,r3,r2
    c6f0:	e0bffc17 	ldw	r2,-16(fp)
    c6f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c6f8:	e0bffb17 	ldw	r2,-20(fp)
    c6fc:	1000051e 	bne	r2,zero,c714 <open+0xd8>
    c700:	e13ffc17 	ldw	r4,-16(fp)
    c704:	000c54c0 	call	c54c <alt_file_locked>
    c708:	e0bffa15 	stw	r2,-24(fp)
    c70c:	e0bffa17 	ldw	r2,-24(fp)
    c710:	10001016 	blt	r2,zero,c754 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c714:	e0bff817 	ldw	r2,-32(fp)
    c718:	10800317 	ldw	r2,12(r2)
    c71c:	10000826 	beq	r2,zero,c740 <open+0x104>
    c720:	e0bff817 	ldw	r2,-32(fp)
    c724:	10800317 	ldw	r2,12(r2)
    c728:	e13ffc17 	ldw	r4,-16(fp)
    c72c:	e17ffd17 	ldw	r5,-12(fp)
    c730:	e1bffe17 	ldw	r6,-8(fp)
    c734:	e1ffff17 	ldw	r7,-4(fp)
    c738:	103ee83a 	callr	r2
    c73c:	00000106 	br	c744 <open+0x108>
    c740:	0005883a 	mov	r2,zero
    c744:	e0bffa15 	stw	r2,-24(fp)
    c748:	00000206 	br	c754 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c74c:	00bffb44 	movi	r2,-19
    c750:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c754:	e0bffa17 	ldw	r2,-24(fp)
    c758:	1000080e 	bge	r2,zero,c77c <open+0x140>
  {
    alt_release_fd (index);  
    c75c:	e13ff917 	ldw	r4,-28(fp)
    c760:	000c7940 	call	c794 <alt_release_fd>
    ALT_ERRNO = -status;
    c764:	000c4fc0 	call	c4fc <alt_get_errno>
    c768:	e0fffa17 	ldw	r3,-24(fp)
    c76c:	00c7c83a 	sub	r3,zero,r3
    c770:	10c00015 	stw	r3,0(r2)
    return -1;
    c774:	00bfffc4 	movi	r2,-1
    c778:	00000106 	br	c780 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    c77c:	e0bff917 	ldw	r2,-28(fp)
}
    c780:	e037883a 	mov	sp,fp
    c784:	dfc00117 	ldw	ra,4(sp)
    c788:	df000017 	ldw	fp,0(sp)
    c78c:	dec00204 	addi	sp,sp,8
    c790:	f800283a 	ret

0000c794 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c794:	defffc04 	addi	sp,sp,-16
    c798:	dfc00315 	stw	ra,12(sp)
    c79c:	df000215 	stw	fp,8(sp)
    c7a0:	dc000115 	stw	r16,4(sp)
    c7a4:	df000104 	addi	fp,sp,4
    c7a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c7ac:	e0bfff17 	ldw	r2,-4(fp)
    c7b0:	108000d0 	cmplti	r2,r2,3
    c7b4:	1000111e 	bne	r2,zero,c7fc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    c7b8:	04000074 	movhi	r16,1
    c7bc:	8434a504 	addi	r16,r16,-11628
    c7c0:	e0bfff17 	ldw	r2,-4(fp)
    c7c4:	1009883a 	mov	r4,r2
    c7c8:	01400304 	movi	r5,12
    c7cc:	000a56c0 	call	a56c <__mulsi3>
    c7d0:	8085883a 	add	r2,r16,r2
    c7d4:	10800204 	addi	r2,r2,8
    c7d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c7dc:	04000074 	movhi	r16,1
    c7e0:	8434a504 	addi	r16,r16,-11628
    c7e4:	e0bfff17 	ldw	r2,-4(fp)
    c7e8:	1009883a 	mov	r4,r2
    c7ec:	01400304 	movi	r5,12
    c7f0:	000a56c0 	call	a56c <__mulsi3>
    c7f4:	8085883a 	add	r2,r16,r2
    c7f8:	10000015 	stw	zero,0(r2)
  }
}
    c7fc:	e037883a 	mov	sp,fp
    c800:	dfc00217 	ldw	ra,8(sp)
    c804:	df000117 	ldw	fp,4(sp)
    c808:	dc000017 	ldw	r16,0(sp)
    c80c:	dec00304 	addi	sp,sp,12
    c810:	f800283a 	ret

0000c814 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c814:	defffa04 	addi	sp,sp,-24
    c818:	df000515 	stw	fp,20(sp)
    c81c:	df000504 	addi	fp,sp,20
    c820:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c824:	0005303a 	rdctl	r2,status
    c828:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c82c:	e0fffc17 	ldw	r3,-16(fp)
    c830:	00bfff84 	movi	r2,-2
    c834:	1884703a 	and	r2,r3,r2
    c838:	1001703a 	wrctl	status,r2
  
  return context;
    c83c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c840:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c844:	e0bfff17 	ldw	r2,-4(fp)
    c848:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c84c:	e0bffd17 	ldw	r2,-12(fp)
    c850:	10800017 	ldw	r2,0(r2)
    c854:	e0fffd17 	ldw	r3,-12(fp)
    c858:	18c00117 	ldw	r3,4(r3)
    c85c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c860:	e0bffd17 	ldw	r2,-12(fp)
    c864:	10800117 	ldw	r2,4(r2)
    c868:	e0fffd17 	ldw	r3,-12(fp)
    c86c:	18c00017 	ldw	r3,0(r3)
    c870:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c874:	e0bffd17 	ldw	r2,-12(fp)
    c878:	e0fffd17 	ldw	r3,-12(fp)
    c87c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c880:	e0bffd17 	ldw	r2,-12(fp)
    c884:	e0fffd17 	ldw	r3,-12(fp)
    c888:	10c00015 	stw	r3,0(r2)
    c88c:	e0bffb17 	ldw	r2,-20(fp)
    c890:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c894:	e0bffe17 	ldw	r2,-8(fp)
    c898:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c89c:	e037883a 	mov	sp,fp
    c8a0:	df000017 	ldw	fp,0(sp)
    c8a4:	dec00104 	addi	sp,sp,4
    c8a8:	f800283a 	ret

0000c8ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c8ac:	defffb04 	addi	sp,sp,-20
    c8b0:	dfc00415 	stw	ra,16(sp)
    c8b4:	df000315 	stw	fp,12(sp)
    c8b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c8bc:	d0a01117 	ldw	r2,-32700(gp)
    c8c0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c8c4:	d0a0ec17 	ldw	r2,-31824(gp)
    c8c8:	10800044 	addi	r2,r2,1
    c8cc:	d0a0ec15 	stw	r2,-31824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c8d0:	00002e06 	br	c98c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c8d4:	e0bffd17 	ldw	r2,-12(fp)
    c8d8:	10800017 	ldw	r2,0(r2)
    c8dc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c8e0:	e0bffd17 	ldw	r2,-12(fp)
    c8e4:	10800403 	ldbu	r2,16(r2)
    c8e8:	10803fcc 	andi	r2,r2,255
    c8ec:	10000426 	beq	r2,zero,c900 <alt_tick+0x54>
    c8f0:	d0a0ec17 	ldw	r2,-31824(gp)
    c8f4:	1000021e 	bne	r2,zero,c900 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c8f8:	e0bffd17 	ldw	r2,-12(fp)
    c8fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c900:	e0bffd17 	ldw	r2,-12(fp)
    c904:	10800217 	ldw	r2,8(r2)
    c908:	d0e0ec17 	ldw	r3,-31824(gp)
    c90c:	18801d36 	bltu	r3,r2,c984 <alt_tick+0xd8>
    c910:	e0bffd17 	ldw	r2,-12(fp)
    c914:	10800403 	ldbu	r2,16(r2)
    c918:	10803fcc 	andi	r2,r2,255
    c91c:	1000191e 	bne	r2,zero,c984 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c920:	e0bffd17 	ldw	r2,-12(fp)
    c924:	10c00317 	ldw	r3,12(r2)
    c928:	e0bffd17 	ldw	r2,-12(fp)
    c92c:	10800517 	ldw	r2,20(r2)
    c930:	1009883a 	mov	r4,r2
    c934:	183ee83a 	callr	r3
    c938:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c93c:	e0bfff17 	ldw	r2,-4(fp)
    c940:	1000031e 	bne	r2,zero,c950 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c944:	e13ffd17 	ldw	r4,-12(fp)
    c948:	000c8140 	call	c814 <alt_alarm_stop>
    c94c:	00000d06 	br	c984 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c950:	e0bffd17 	ldw	r2,-12(fp)
    c954:	10c00217 	ldw	r3,8(r2)
    c958:	e0bfff17 	ldw	r2,-4(fp)
    c95c:	1887883a 	add	r3,r3,r2
    c960:	e0bffd17 	ldw	r2,-12(fp)
    c964:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c968:	e0bffd17 	ldw	r2,-12(fp)
    c96c:	10c00217 	ldw	r3,8(r2)
    c970:	d0a0ec17 	ldw	r2,-31824(gp)
    c974:	1880032e 	bgeu	r3,r2,c984 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c978:	e0bffd17 	ldw	r2,-12(fp)
    c97c:	00c00044 	movi	r3,1
    c980:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c984:	e0bffe17 	ldw	r2,-8(fp)
    c988:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c98c:	e0fffd17 	ldw	r3,-12(fp)
    c990:	d0a01104 	addi	r2,gp,-32700
    c994:	18bfcf1e 	bne	r3,r2,c8d4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c998:	0001883a 	nop
}
    c99c:	e037883a 	mov	sp,fp
    c9a0:	dfc00117 	ldw	ra,4(sp)
    c9a4:	df000017 	ldw	fp,0(sp)
    c9a8:	dec00204 	addi	sp,sp,8
    c9ac:	f800283a 	ret

0000c9b0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c9b0:	deffff04 	addi	sp,sp,-4
    c9b4:	df000015 	stw	fp,0(sp)
    c9b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c9bc:	000170fa 	wrctl	ienable,zero
}
    c9c0:	e037883a 	mov	sp,fp
    c9c4:	df000017 	ldw	fp,0(sp)
    c9c8:	dec00104 	addi	sp,sp,4
    c9cc:	f800283a 	ret

0000c9d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c9d0:	defffa04 	addi	sp,sp,-24
    c9d4:	dfc00515 	stw	ra,20(sp)
    c9d8:	df000415 	stw	fp,16(sp)
    c9dc:	df000404 	addi	fp,sp,16
    c9e0:	e13ffe15 	stw	r4,-8(fp)
    c9e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c9e8:	e0bfff17 	ldw	r2,-4(fp)
    c9ec:	10800017 	ldw	r2,0(r2)
    c9f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c9f4:	e13ffe17 	ldw	r4,-8(fp)
    c9f8:	000ad0c0 	call	ad0c <strlen>
    c9fc:	10800044 	addi	r2,r2,1
    ca00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ca04:	00000d06 	br	ca3c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ca08:	e0bffc17 	ldw	r2,-16(fp)
    ca0c:	10c00217 	ldw	r3,8(r2)
    ca10:	e0bffd17 	ldw	r2,-12(fp)
    ca14:	1809883a 	mov	r4,r3
    ca18:	e17ffe17 	ldw	r5,-8(fp)
    ca1c:	100d883a 	mov	r6,r2
    ca20:	000ccf40 	call	ccf4 <memcmp>
    ca24:	1000021e 	bne	r2,zero,ca30 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ca28:	e0bffc17 	ldw	r2,-16(fp)
    ca2c:	00000706 	br	ca4c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ca30:	e0bffc17 	ldw	r2,-16(fp)
    ca34:	10800017 	ldw	r2,0(r2)
    ca38:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ca3c:	e0fffc17 	ldw	r3,-16(fp)
    ca40:	e0bfff17 	ldw	r2,-4(fp)
    ca44:	18bff01e 	bne	r3,r2,ca08 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    ca48:	0005883a 	mov	r2,zero
}
    ca4c:	e037883a 	mov	sp,fp
    ca50:	dfc00117 	ldw	ra,4(sp)
    ca54:	df000017 	ldw	fp,0(sp)
    ca58:	dec00204 	addi	sp,sp,8
    ca5c:	f800283a 	ret

0000ca60 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    ca60:	defffb04 	addi	sp,sp,-20
    ca64:	dfc00415 	stw	ra,16(sp)
    ca68:	df000315 	stw	fp,12(sp)
    ca6c:	df000304 	addi	fp,sp,12
    ca70:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ca74:	00800074 	movhi	r2,1
    ca78:	10b51004 	addi	r2,r2,-11200
    ca7c:	10800017 	ldw	r2,0(r2)
    ca80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ca84:	00003106 	br	cb4c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    ca88:	e0bffd17 	ldw	r2,-12(fp)
    ca8c:	10800217 	ldw	r2,8(r2)
    ca90:	1009883a 	mov	r4,r2
    ca94:	000ad0c0 	call	ad0c <strlen>
    ca98:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ca9c:	e0bffd17 	ldw	r2,-12(fp)
    caa0:	10c00217 	ldw	r3,8(r2)
    caa4:	e0bffe17 	ldw	r2,-8(fp)
    caa8:	10bfffc4 	addi	r2,r2,-1
    caac:	1885883a 	add	r2,r3,r2
    cab0:	10800003 	ldbu	r2,0(r2)
    cab4:	10803fcc 	andi	r2,r2,255
    cab8:	1080201c 	xori	r2,r2,128
    cabc:	10bfe004 	addi	r2,r2,-128
    cac0:	10800bd8 	cmpnei	r2,r2,47
    cac4:	1000031e 	bne	r2,zero,cad4 <alt_find_file+0x74>
    {
      len -= 1;
    cac8:	e0bffe17 	ldw	r2,-8(fp)
    cacc:	10bfffc4 	addi	r2,r2,-1
    cad0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cad4:	e0bffe17 	ldw	r2,-8(fp)
    cad8:	e0ffff17 	ldw	r3,-4(fp)
    cadc:	1885883a 	add	r2,r3,r2
    cae0:	10800003 	ldbu	r2,0(r2)
    cae4:	10803fcc 	andi	r2,r2,255
    cae8:	1080201c 	xori	r2,r2,128
    caec:	10bfe004 	addi	r2,r2,-128
    caf0:	10800be0 	cmpeqi	r2,r2,47
    caf4:	1000081e 	bne	r2,zero,cb18 <alt_find_file+0xb8>
    caf8:	e0bffe17 	ldw	r2,-8(fp)
    cafc:	e0ffff17 	ldw	r3,-4(fp)
    cb00:	1885883a 	add	r2,r3,r2
    cb04:	10800003 	ldbu	r2,0(r2)
    cb08:	10803fcc 	andi	r2,r2,255
    cb0c:	1080201c 	xori	r2,r2,128
    cb10:	10bfe004 	addi	r2,r2,-128
    cb14:	10000a1e 	bne	r2,zero,cb40 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    cb18:	e0bffd17 	ldw	r2,-12(fp)
    cb1c:	10c00217 	ldw	r3,8(r2)
    cb20:	e0bffe17 	ldw	r2,-8(fp)
    cb24:	1809883a 	mov	r4,r3
    cb28:	e17fff17 	ldw	r5,-4(fp)
    cb2c:	100d883a 	mov	r6,r2
    cb30:	000ccf40 	call	ccf4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cb34:	1000021e 	bne	r2,zero,cb40 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    cb38:	e0bffd17 	ldw	r2,-12(fp)
    cb3c:	00000806 	br	cb60 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    cb40:	e0bffd17 	ldw	r2,-12(fp)
    cb44:	10800017 	ldw	r2,0(r2)
    cb48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cb4c:	e0fffd17 	ldw	r3,-12(fp)
    cb50:	00800074 	movhi	r2,1
    cb54:	10b51004 	addi	r2,r2,-11200
    cb58:	18bfcb1e 	bne	r3,r2,ca88 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    cb5c:	0005883a 	mov	r2,zero
}
    cb60:	e037883a 	mov	sp,fp
    cb64:	dfc00117 	ldw	ra,4(sp)
    cb68:	df000017 	ldw	fp,0(sp)
    cb6c:	dec00204 	addi	sp,sp,8
    cb70:	f800283a 	ret

0000cb74 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    cb74:	defffa04 	addi	sp,sp,-24
    cb78:	dfc00515 	stw	ra,20(sp)
    cb7c:	df000415 	stw	fp,16(sp)
    cb80:	dc000315 	stw	r16,12(sp)
    cb84:	df000304 	addi	fp,sp,12
    cb88:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    cb8c:	00bffa04 	movi	r2,-24
    cb90:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cb94:	e03ffd15 	stw	zero,-12(fp)
    cb98:	00002106 	br	cc20 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    cb9c:	04000074 	movhi	r16,1
    cba0:	8434a504 	addi	r16,r16,-11628
    cba4:	e0bffd17 	ldw	r2,-12(fp)
    cba8:	1009883a 	mov	r4,r2
    cbac:	01400304 	movi	r5,12
    cbb0:	000a56c0 	call	a56c <__mulsi3>
    cbb4:	8085883a 	add	r2,r16,r2
    cbb8:	10800017 	ldw	r2,0(r2)
    cbbc:	1000151e 	bne	r2,zero,cc14 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    cbc0:	04000074 	movhi	r16,1
    cbc4:	8434a504 	addi	r16,r16,-11628
    cbc8:	e0bffd17 	ldw	r2,-12(fp)
    cbcc:	1009883a 	mov	r4,r2
    cbd0:	01400304 	movi	r5,12
    cbd4:	000a56c0 	call	a56c <__mulsi3>
    cbd8:	8085883a 	add	r2,r16,r2
    cbdc:	e0ffff17 	ldw	r3,-4(fp)
    cbe0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    cbe4:	00800074 	movhi	r2,1
    cbe8:	10b51404 	addi	r2,r2,-11184
    cbec:	10c00017 	ldw	r3,0(r2)
    cbf0:	e0bffd17 	ldw	r2,-12(fp)
    cbf4:	1880040e 	bge	r3,r2,cc08 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    cbf8:	00800074 	movhi	r2,1
    cbfc:	10b51404 	addi	r2,r2,-11184
    cc00:	e0fffd17 	ldw	r3,-12(fp)
    cc04:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    cc08:	e0bffd17 	ldw	r2,-12(fp)
    cc0c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    cc10:	00000606 	br	cc2c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cc14:	e0bffd17 	ldw	r2,-12(fp)
    cc18:	10800044 	addi	r2,r2,1
    cc1c:	e0bffd15 	stw	r2,-12(fp)
    cc20:	e0bffd17 	ldw	r2,-12(fp)
    cc24:	10800810 	cmplti	r2,r2,32
    cc28:	103fdc1e 	bne	r2,zero,cb9c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    cc2c:	e0bffe17 	ldw	r2,-8(fp)
}
    cc30:	e037883a 	mov	sp,fp
    cc34:	dfc00217 	ldw	ra,8(sp)
    cc38:	df000117 	ldw	fp,4(sp)
    cc3c:	dc000017 	ldw	r16,0(sp)
    cc40:	dec00304 	addi	sp,sp,12
    cc44:	f800283a 	ret

0000cc48 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    cc48:	defffb04 	addi	sp,sp,-20
    cc4c:	df000415 	stw	fp,16(sp)
    cc50:	df000404 	addi	fp,sp,16
    cc54:	e13ffe15 	stw	r4,-8(fp)
    cc58:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    cc5c:	e0bfff17 	ldw	r2,-4(fp)
    cc60:	10820070 	cmpltui	r2,r2,2049
    cc64:	1000021e 	bne	r2,zero,cc70 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    cc68:	00820004 	movi	r2,2048
    cc6c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    cc70:	e0fffe17 	ldw	r3,-8(fp)
    cc74:	e0bfff17 	ldw	r2,-4(fp)
    cc78:	1885883a 	add	r2,r3,r2
    cc7c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    cc80:	e0bffe17 	ldw	r2,-8(fp)
    cc84:	e0bffc15 	stw	r2,-16(fp)
    cc88:	00000506 	br	cca0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    cc8c:	e0bffc17 	ldw	r2,-16(fp)
    cc90:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    cc94:	e0bffc17 	ldw	r2,-16(fp)
    cc98:	10800804 	addi	r2,r2,32
    cc9c:	e0bffc15 	stw	r2,-16(fp)
    cca0:	e0fffc17 	ldw	r3,-16(fp)
    cca4:	e0bffd17 	ldw	r2,-12(fp)
    cca8:	18bff836 	bltu	r3,r2,cc8c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ccac:	e0bffe17 	ldw	r2,-8(fp)
    ccb0:	108007cc 	andi	r2,r2,31
    ccb4:	10000226 	beq	r2,zero,ccc0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    ccb8:	e0bffc17 	ldw	r2,-16(fp)
    ccbc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    ccc0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    ccc4:	e037883a 	mov	sp,fp
    ccc8:	df000017 	ldw	fp,0(sp)
    cccc:	dec00104 	addi	sp,sp,4
    ccd0:	f800283a 	ret

0000ccd4 <exit>:
    ccd4:	defffe04 	addi	sp,sp,-8
    ccd8:	000b883a 	mov	r5,zero
    ccdc:	dc000015 	stw	r16,0(sp)
    cce0:	dfc00115 	stw	ra,4(sp)
    cce4:	2021883a 	mov	r16,r4
    cce8:	000cd3c0 	call	cd3c <__call_exitprocs>
    ccec:	8009883a 	mov	r4,r16
    ccf0:	000cf140 	call	cf14 <_exit>

0000ccf4 <memcmp>:
    ccf4:	30000d26 	beq	r6,zero,cd2c <memcmp+0x38>
    ccf8:	20c00003 	ldbu	r3,0(r4)
    ccfc:	28800003 	ldbu	r2,0(r5)
    cd00:	18800c1e 	bne	r3,r2,cd34 <memcmp+0x40>
    cd04:	31bfff84 	addi	r6,r6,-2
    cd08:	01ffffc4 	movi	r7,-1
    cd0c:	00000406 	br	cd20 <memcmp+0x2c>
    cd10:	20c00003 	ldbu	r3,0(r4)
    cd14:	28800003 	ldbu	r2,0(r5)
    cd18:	31bfffc4 	addi	r6,r6,-1
    cd1c:	1880051e 	bne	r3,r2,cd34 <memcmp+0x40>
    cd20:	21000044 	addi	r4,r4,1
    cd24:	29400044 	addi	r5,r5,1
    cd28:	31fff91e 	bne	r6,r7,cd10 <memcmp+0x1c>
    cd2c:	0005883a 	mov	r2,zero
    cd30:	f800283a 	ret
    cd34:	1885c83a 	sub	r2,r3,r2
    cd38:	f800283a 	ret

0000cd3c <__call_exitprocs>:
    cd3c:	00800074 	movhi	r2,1
    cd40:	10b50d04 	addi	r2,r2,-11212
    cd44:	10800017 	ldw	r2,0(r2)
    cd48:	defff204 	addi	sp,sp,-56
    cd4c:	df000c15 	stw	fp,48(sp)
    cd50:	d8800015 	stw	r2,0(sp)
    cd54:	10800c04 	addi	r2,r2,48
    cd58:	dd400915 	stw	r21,36(sp)
    cd5c:	dfc00d15 	stw	ra,52(sp)
    cd60:	ddc00b15 	stw	r23,44(sp)
    cd64:	dd800a15 	stw	r22,40(sp)
    cd68:	dd000815 	stw	r20,32(sp)
    cd6c:	dcc00715 	stw	r19,28(sp)
    cd70:	dc800615 	stw	r18,24(sp)
    cd74:	dc400515 	stw	r17,20(sp)
    cd78:	dc000415 	stw	r16,16(sp)
    cd7c:	d9000115 	stw	r4,4(sp)
    cd80:	2839883a 	mov	fp,r5
    cd84:	d8800215 	stw	r2,8(sp)
    cd88:	057fffc4 	movi	r21,-1
    cd8c:	d8800017 	ldw	r2,0(sp)
    cd90:	dd800217 	ldw	r22,8(sp)
    cd94:	15c00c17 	ldw	r23,48(r2)
    cd98:	b8001b26 	beq	r23,zero,ce08 <__call_exitprocs+0xcc>
    cd9c:	b9000117 	ldw	r4,4(r23)
    cda0:	bd002217 	ldw	r20,136(r23)
    cda4:	243fffc4 	addi	r16,r4,-1
    cda8:	80001416 	blt	r16,zero,cdfc <__call_exitprocs+0xc0>
    cdac:	244007c4 	addi	r17,r4,31
    cdb0:	21000044 	addi	r4,r4,1
    cdb4:	8c63883a 	add	r17,r17,r17
    cdb8:	8427883a 	add	r19,r16,r16
    cdbc:	2109883a 	add	r4,r4,r4
    cdc0:	8c63883a 	add	r17,r17,r17
    cdc4:	9ce7883a 	add	r19,r19,r19
    cdc8:	2109883a 	add	r4,r4,r4
    cdcc:	a463883a 	add	r17,r20,r17
    cdd0:	a4e7883a 	add	r19,r20,r19
    cdd4:	b925883a 	add	r18,r23,r4
    cdd8:	e0001726 	beq	fp,zero,ce38 <__call_exitprocs+0xfc>
    cddc:	a0000226 	beq	r20,zero,cde8 <__call_exitprocs+0xac>
    cde0:	89400017 	ldw	r5,0(r17)
    cde4:	2f001426 	beq	r5,fp,ce38 <__call_exitprocs+0xfc>
    cde8:	843fffc4 	addi	r16,r16,-1
    cdec:	8c7fff04 	addi	r17,r17,-4
    cdf0:	9cffff04 	addi	r19,r19,-4
    cdf4:	94bfff04 	addi	r18,r18,-4
    cdf8:	857ff71e 	bne	r16,r21,cdd8 <__call_exitprocs+0x9c>
    cdfc:	00800034 	movhi	r2,0
    ce00:	10800004 	addi	r2,r2,0
    ce04:	1000311e 	bne	r2,zero,cecc <__call_exitprocs+0x190>
    ce08:	dfc00d17 	ldw	ra,52(sp)
    ce0c:	df000c17 	ldw	fp,48(sp)
    ce10:	ddc00b17 	ldw	r23,44(sp)
    ce14:	dd800a17 	ldw	r22,40(sp)
    ce18:	dd400917 	ldw	r21,36(sp)
    ce1c:	dd000817 	ldw	r20,32(sp)
    ce20:	dcc00717 	ldw	r19,28(sp)
    ce24:	dc800617 	ldw	r18,24(sp)
    ce28:	dc400517 	ldw	r17,20(sp)
    ce2c:	dc000417 	ldw	r16,16(sp)
    ce30:	dec00e04 	addi	sp,sp,56
    ce34:	f800283a 	ret
    ce38:	b9000117 	ldw	r4,4(r23)
    ce3c:	92000017 	ldw	r8,0(r18)
    ce40:	213fffc4 	addi	r4,r4,-1
    ce44:	24001a26 	beq	r4,r16,ceb0 <__call_exitprocs+0x174>
    ce48:	90000015 	stw	zero,0(r18)
    ce4c:	403fe626 	beq	r8,zero,cde8 <__call_exitprocs+0xac>
    ce50:	ba400117 	ldw	r9,4(r23)
    ce54:	a0001226 	beq	r20,zero,cea0 <__call_exitprocs+0x164>
    ce58:	00800044 	movi	r2,1
    ce5c:	1408983a 	sll	r4,r2,r16
    ce60:	a1404017 	ldw	r5,256(r20)
    ce64:	214a703a 	and	r5,r4,r5
    ce68:	28000d26 	beq	r5,zero,cea0 <__call_exitprocs+0x164>
    ce6c:	a1404117 	ldw	r5,260(r20)
    ce70:	2148703a 	and	r4,r4,r5
    ce74:	2000101e 	bne	r4,zero,ceb8 <__call_exitprocs+0x17c>
    ce78:	99400017 	ldw	r5,0(r19)
    ce7c:	d9000117 	ldw	r4,4(sp)
    ce80:	da400315 	stw	r9,12(sp)
    ce84:	403ee83a 	callr	r8
    ce88:	da400317 	ldw	r9,12(sp)
    ce8c:	b9000117 	ldw	r4,4(r23)
    ce90:	227fbe1e 	bne	r4,r9,cd8c <__call_exitprocs+0x50>
    ce94:	b1000017 	ldw	r4,0(r22)
    ce98:	25ffd326 	beq	r4,r23,cde8 <__call_exitprocs+0xac>
    ce9c:	003fbb06 	br	cd8c <__call_exitprocs+0x50>
    cea0:	da400315 	stw	r9,12(sp)
    cea4:	403ee83a 	callr	r8
    cea8:	da400317 	ldw	r9,12(sp)
    ceac:	003ff706 	br	ce8c <__call_exitprocs+0x150>
    ceb0:	bc000115 	stw	r16,4(r23)
    ceb4:	003fe506 	br	ce4c <__call_exitprocs+0x110>
    ceb8:	99000017 	ldw	r4,0(r19)
    cebc:	da400315 	stw	r9,12(sp)
    cec0:	403ee83a 	callr	r8
    cec4:	da400317 	ldw	r9,12(sp)
    cec8:	003ff006 	br	ce8c <__call_exitprocs+0x150>
    cecc:	b9000117 	ldw	r4,4(r23)
    ced0:	20000e1e 	bne	r4,zero,cf0c <__call_exitprocs+0x1d0>
    ced4:	b9000017 	ldw	r4,0(r23)
    ced8:	20000826 	beq	r4,zero,cefc <__call_exitprocs+0x1c0>
    cedc:	b1000015 	stw	r4,0(r22)
    cee0:	a0000226 	beq	r20,zero,ceec <__call_exitprocs+0x1b0>
    cee4:	a009883a 	mov	r4,r20
    cee8:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    ceec:	b809883a 	mov	r4,r23
    cef0:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    cef4:	b5c00017 	ldw	r23,0(r22)
    cef8:	003fa706 	br	cd98 <__call_exitprocs+0x5c>
    cefc:	0007883a 	mov	r3,zero
    cf00:	b82d883a 	mov	r22,r23
    cf04:	182f883a 	mov	r23,r3
    cf08:	003fa306 	br	cd98 <__call_exitprocs+0x5c>
    cf0c:	b8c00017 	ldw	r3,0(r23)
    cf10:	003ffb06 	br	cf00 <__call_exitprocs+0x1c4>

0000cf14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    cf14:	defffc04 	addi	sp,sp,-16
    cf18:	df000315 	stw	fp,12(sp)
    cf1c:	df000304 	addi	fp,sp,12
    cf20:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    cf24:	0001883a 	nop
    cf28:	e0bfff17 	ldw	r2,-4(fp)
    cf2c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    cf30:	e0bffd17 	ldw	r2,-12(fp)
    cf34:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    cf38:	e0bffe17 	ldw	r2,-8(fp)
    cf3c:	10000226 	beq	r2,zero,cf48 <_exit+0x34>
    ALT_SIM_FAIL();
    cf40:	002af070 	cmpltui	zero,zero,43969
    cf44:	00000106 	br	cf4c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    cf48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    cf4c:	003fff06 	br	cf4c <_exit+0x38>
